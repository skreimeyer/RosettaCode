{"task": "Parse_an_IP_Address", "blocks": [{"lang": "C", "loc": 300, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/><span class=\"co2\">#include &lt;memory.h&gt;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">static</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> _parseDecimal <span class=\"br0\">(</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy0\">**</span> pchCursor <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> nVal <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span> chNow<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span> chNow <span class=\"sy0\">=</span> <span class=\"sy0\">**</span>pchCursor<span class=\"sy0\">,</span> chNow <span class=\"sy0\">&gt;=</span> <span class=\"st0\">'0'</span> <span class=\"sy0\">&amp;&amp;</span> chNow <span class=\"sy0\">&lt;=</span> <span class=\"st0\">'9'</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"co1\">//shift digit in</span><br/>\t\tnVal <span class=\"sy0\">*=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>\t\tnVal <span class=\"sy0\">+=</span> chNow <span class=\"sy0\">-</span> <span class=\"st0\">'0'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"sy0\">++*</span>pchCursor<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> nVal<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">static</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> _parseHex <span class=\"br0\">(</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy0\">**</span> pchCursor <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> nVal <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span> chNow<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span> chNow <span class=\"sy0\">=</span> <span class=\"sy0\">**</span>pchCursor <span class=\"sy0\">&amp;</span> <span class=\"nu12\">0x5f</span><span class=\"sy0\">,</span>\t<span class=\"co1\">//(collapses case, but mutilates digits)</span><br/>\t\t\t<span class=\"br0\">(</span>chNow <span class=\"sy0\">&gt;=</span> <span class=\"br0\">(</span><span class=\"st0\">'0'</span><span class=\"sy0\">&amp;</span><span class=\"nu12\">0x5f</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> chNow <span class=\"sy0\">&lt;=</span> <span class=\"br0\">(</span><span class=\"st0\">'9'</span><span class=\"sy0\">&amp;</span><span class=\"nu12\">0x5f</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <br/>\t\t\t<span class=\"br0\">(</span>chNow <span class=\"sy0\">&gt;=</span> <span class=\"st0\">'A'</span> <span class=\"sy0\">&amp;&amp;</span> chNow <span class=\"sy0\">&lt;=</span> <span class=\"st0\">'F'</span><span class=\"br0\">)</span> <br/>\t\t\t<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> nybbleValue<span class=\"sy0\">;</span><br/>\t\tchNow <span class=\"sy0\">-=</span> <span class=\"nu12\">0x10</span><span class=\"sy0\">;</span>\t<span class=\"co1\">//scootch digital values down; hex now offset by x31</span><br/>\t\tnybbleValue <span class=\"sy0\">=</span> <span class=\"br0\">(</span> chNow <span class=\"sy0\">&gt;</span> <span class=\"nu0\">9</span> <span class=\"sy0\">?</span> chNow <span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"nu12\">0x31</span><span class=\"sy0\">-</span><span class=\"nu12\">0x0a</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> chNow <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"co1\">//shift nybble in</span><br/>\t\tnVal <span class=\"sy0\">&lt;&lt;=</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>\t\tnVal <span class=\"sy0\">+=</span> nybbleValue<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"sy0\">++*</span>pchCursor<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> nVal<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">//Parse a textual IPv4 or IPv6 address, optionally with port, into a binary</span><br/><span class=\"co1\">//array (for the address, in network order), and an optionally provided port.</span><br/><span class=\"co1\">//Also, indicate which of those forms (4 or 6) was parsed.  Return true on</span><br/><span class=\"co1\">//success.  ppszText must be a nul-terminated ASCII string.  It will be</span><br/><span class=\"co1\">//updated to point to the character which terminated parsing (so you can carry</span><br/><span class=\"co1\">//on with other things.  abyAddr must be 16 bytes.  You can provide NULL for</span><br/><span class=\"co1\">//abyAddr, nPort, bIsIPv6, if you are not interested in any of those</span><br/><span class=\"co1\">//informations.  If we request port, but there is no port part, then nPort will</span><br/><span class=\"co1\">//be set to 0.  There may be no whitespace leading or internal (though this may</span><br/><span class=\"co1\">//be used to terminate a successful parse.</span><br/><span class=\"co1\">//Note:  the binary address and integer port are in network order.</span><br/><span class=\"kw4\">int</span> ParseIPv4OrIPv6 <span class=\"br0\">(</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy0\">**</span> ppszText<span class=\"sy0\">,</span> <br/>\t\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span> abyAddr<span class=\"sy0\">,</span> <span class=\"kw4\">int</span><span class=\"sy0\">*</span> pnPort<span class=\"sy0\">,</span> <span class=\"kw4\">int</span><span class=\"sy0\">*</span> pbIsIPv6 <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span> abyAddrLocal<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> abyDummyAddr<span class=\"br0\">[</span><span class=\"nu0\">16</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"co1\">//find first colon, dot, and open bracket</span><br/>\t<span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span> pchColon <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strchr.html\"><span class=\"kw3\">strchr</span></a> <span class=\"br0\">(</span> <span class=\"sy0\">*</span>ppszText<span class=\"sy0\">,</span> <span class=\"st0\">':'</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span> pchDot <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strchr.html\"><span class=\"kw3\">strchr</span></a> <span class=\"br0\">(</span> <span class=\"sy0\">*</span>ppszText<span class=\"sy0\">,</span> <span class=\"st0\">'.'</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span> pchOpenBracket <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strchr.html\"><span class=\"kw3\">strchr</span></a> <span class=\"br0\">(</span> <span class=\"sy0\">*</span>ppszText<span class=\"sy0\">,</span> <span class=\"st0\">'['</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span> pchCloseBracket <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>\t<span class=\"co1\">//we'll consider this to (probably) be IPv6 if we find an open</span><br/>\t<span class=\"co1\">//bracket, or an absence of dots, or if there is a colon, and it</span><br/>\t<span class=\"co1\">//precedes any dots that may or may not be there</span><br/>\t<span class=\"kw4\">int</span> bIsIPv6local <span class=\"sy0\">=</span> NULL <span class=\"sy0\">!=</span> pchOpenBracket <span class=\"sy0\">||</span> NULL <span class=\"sy0\">==</span> pchDot <span class=\"sy0\">||</span><br/>\t\t\t<span class=\"br0\">(</span> NULL <span class=\"sy0\">!=</span> pchColon <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span> NULL <span class=\"sy0\">==</span> pchDot <span class=\"sy0\">||</span> pchColon <span class=\"sy0\">&lt;</span> pchDot <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"co1\">//OK, now do a little further sanity check our initial guess...</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> bIsIPv6local <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"co1\">//if open bracket, then must have close bracket that follows somewhere</span><br/>\t\tpchCloseBracket <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strchr.html\"><span class=\"kw3\">strchr</span></a> <span class=\"br0\">(</span> <span class=\"sy0\">*</span>ppszText<span class=\"sy0\">,</span> <span class=\"st0\">']'</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> NULL <span class=\"sy0\">!=</span> pchOpenBracket <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span> NULL <span class=\"sy0\">==</span> pchCloseBracket <span class=\"sy0\">||</span><br/>\t\t\t\tpchCloseBracket <span class=\"sy0\">&lt;</span> pchOpenBracket <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">else</span>\t<span class=\"co1\">//probably ipv4</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"co1\">//dots must exist, and precede any colons</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> NULL <span class=\"sy0\">==</span> pchDot <span class=\"sy0\">||</span> <span class=\"br0\">(</span> NULL <span class=\"sy0\">!=</span> pchColon <span class=\"sy0\">&amp;&amp;</span> pchColon <span class=\"sy0\">&lt;</span> pchDot <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"co1\">//we figured out this much so far....</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> NULL <span class=\"sy0\">!=</span> pbIsIPv6 <span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">*</span>pbIsIPv6 <span class=\"sy0\">=</span> bIsIPv6local<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"co1\">//especially for IPv6 (where we will be decompressing and validating)</span><br/>\t<span class=\"co1\">//we really need to have a working buffer even if the caller didn't</span><br/>\t<span class=\"co1\">//care about the results.</span><br/>\tabyAddrLocal <span class=\"sy0\">=</span> abyAddr<span class=\"sy0\">;</span>\t<span class=\"co1\">//prefer to use the caller's</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> NULL <span class=\"sy0\">==</span> abyAddrLocal <span class=\"br0\">)</span>\t<span class=\"co1\">//but use a dummy if we must</span><br/>\t\tabyAddrLocal <span class=\"sy0\">=</span> abyDummyAddr<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"co1\">//OK, there should be no correctly formed strings which are miscategorized,</span><br/>\t<span class=\"co1\">//and now any format errors will be found out as we continue parsing</span><br/>\t<span class=\"co1\">//according to plan.</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"sy0\">!</span> bIsIPv6local <span class=\"br0\">)</span>\t<span class=\"co1\">//try to parse as IPv4</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"co1\">//4 dotted quad decimal; optional port if there is a colon</span><br/>\t\t<span class=\"co1\">//since there are just 4, and because the last one can be terminated</span><br/>\t\t<span class=\"co1\">//differently, I'm just going to unroll any potential loop.</span><br/>\t\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span> pbyAddrCursor <span class=\"sy0\">=</span> abyAddrLocal<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> nVal<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span> pszTextBefore <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>ppszText<span class=\"sy0\">;</span><br/>\t\tnVal <span class=\"sy0\">=</span>_parseDecimal <span class=\"br0\">(</span> ppszText <span class=\"br0\">)</span><span class=\"sy0\">;</span>\t\t\t<span class=\"co1\">//get first val</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"st0\">'.'</span> <span class=\"sy0\">!=</span> <span class=\"sy0\">**</span>ppszText <span class=\"sy0\">||</span> nVal <span class=\"sy0\">&gt;</span> <span class=\"nu0\">255</span> <span class=\"sy0\">||</span> pszTextBefore <span class=\"sy0\">==</span> <span class=\"sy0\">*</span>ppszText <span class=\"br0\">)</span>\t<span class=\"co1\">//must be in range and followed by dot and nonempty</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"sy0\">*</span><span class=\"br0\">(</span>pbyAddrCursor<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span><span class=\"br0\">)</span> nVal<span class=\"sy0\">;</span>\t<span class=\"co1\">//stick it in addr</span><br/>\t\t<span class=\"sy0\">++</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>ppszText<span class=\"br0\">)</span><span class=\"sy0\">;</span>\t<span class=\"co1\">//past the dot</span><br/>\u00a0<br/>\t\tpszTextBefore <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>ppszText<span class=\"sy0\">;</span><br/>\t\tnVal <span class=\"sy0\">=</span>_parseDecimal <span class=\"br0\">(</span> ppszText <span class=\"br0\">)</span><span class=\"sy0\">;</span>\t\t\t<span class=\"co1\">//get second val</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"st0\">'.'</span> <span class=\"sy0\">!=</span> <span class=\"sy0\">**</span>ppszText <span class=\"sy0\">||</span> nVal <span class=\"sy0\">&gt;</span> <span class=\"nu0\">255</span> <span class=\"sy0\">||</span> pszTextBefore <span class=\"sy0\">==</span> <span class=\"sy0\">*</span>ppszText <span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"sy0\">*</span><span class=\"br0\">(</span>pbyAddrCursor<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span><span class=\"br0\">)</span> nVal<span class=\"sy0\">;</span><br/>\t\t<span class=\"sy0\">++</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>ppszText<span class=\"br0\">)</span><span class=\"sy0\">;</span>\t<span class=\"co1\">//past the dot</span><br/>\u00a0<br/>\t\tpszTextBefore <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>ppszText<span class=\"sy0\">;</span><br/>\t\tnVal <span class=\"sy0\">=</span>_parseDecimal <span class=\"br0\">(</span> ppszText <span class=\"br0\">)</span><span class=\"sy0\">;</span>\t\t\t<span class=\"co1\">//get third val</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"st0\">'.'</span> <span class=\"sy0\">!=</span> <span class=\"sy0\">**</span>ppszText <span class=\"sy0\">||</span> nVal <span class=\"sy0\">&gt;</span> <span class=\"nu0\">255</span> <span class=\"sy0\">||</span> pszTextBefore <span class=\"sy0\">==</span> <span class=\"sy0\">*</span>ppszText <span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"sy0\">*</span><span class=\"br0\">(</span>pbyAddrCursor<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span><span class=\"br0\">)</span> nVal<span class=\"sy0\">;</span><br/>\t\t<span class=\"sy0\">++</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>ppszText<span class=\"br0\">)</span><span class=\"sy0\">;</span>\t<span class=\"co1\">//past the dot</span><br/>\u00a0<br/>\t\tpszTextBefore <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>ppszText<span class=\"sy0\">;</span><br/>\t\tnVal <span class=\"sy0\">=</span>_parseDecimal <span class=\"br0\">(</span> ppszText <span class=\"br0\">)</span><span class=\"sy0\">;</span>\t\t\t<span class=\"co1\">//get fourth val</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> nVal <span class=\"sy0\">&gt;</span> <span class=\"nu0\">255</span> <span class=\"sy0\">||</span> pszTextBefore <span class=\"sy0\">==</span> <span class=\"sy0\">*</span>ppszText <span class=\"br0\">)</span>\t<span class=\"co1\">//(we can terminate this one in several ways)</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"sy0\">*</span><span class=\"br0\">(</span>pbyAddrCursor<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span><span class=\"br0\">)</span> nVal<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"st0\">':'</span> <span class=\"sy0\">==</span> <span class=\"sy0\">**</span>ppszText <span class=\"sy0\">&amp;&amp;</span> NULL <span class=\"sy0\">!=</span> pnPort <span class=\"br0\">)</span>\t<span class=\"co1\">//have port part, and we want it</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">short</span> usPortNetwork<span class=\"sy0\">;</span>\t<span class=\"co1\">//save value in network order</span><br/>\t\t\t<span class=\"sy0\">++</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>ppszText<span class=\"br0\">)</span><span class=\"sy0\">;</span>\t<span class=\"co1\">//past the colon</span><br/>\t\t\tpszTextBefore <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>ppszText<span class=\"sy0\">;</span><br/>\t\t\tnVal <span class=\"sy0\">=</span>_parseDecimal <span class=\"br0\">(</span> ppszText <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> nVal <span class=\"sy0\">&gt;</span> <span class=\"nu0\">65535</span> <span class=\"sy0\">||</span> pszTextBefore <span class=\"sy0\">==</span> <span class=\"sy0\">*</span>ppszText <span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">&amp;</span>usPortNetwork<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> nVal <span class=\"sy0\">&amp;</span> <span class=\"nu12\">0xff00</span> <span class=\"br0\">)</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">&amp;</span>usPortNetwork<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> nVal <span class=\"sy0\">&amp;</span> <span class=\"nu12\">0xff</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"sy0\">*</span>pnPort <span class=\"sy0\">=</span> usPortNetwork<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">else</span>\t<span class=\"co1\">//finished just with ip address</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> NULL <span class=\"sy0\">!=</span> pnPort <span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"sy0\">*</span>pnPort <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\t<span class=\"co1\">//indicate we have no port part</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">else</span>\t<span class=\"co1\">//try to parse as IPv6</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span> pbyAddrCursor<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span> pbyZerosLoc<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw4\">int</span> bIPv4Detected<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw4\">int</span> nIdx<span class=\"sy0\">;</span><br/>\t\t<span class=\"co1\">//up to 8 16-bit hex quantities, separated by colons, with at most one</span><br/>\t\t<span class=\"co1\">//empty quantity, acting as a stretchy run of zeroes.  optional port</span><br/>\t\t<span class=\"co1\">//if there are brackets followed by colon and decimal port number.</span><br/>\t\t<span class=\"co1\">//A further form allows an ipv4 dotted quad instead of the last two</span><br/>\t\t<span class=\"co1\">//16-bit quantities, but only if in the ipv4 space\u00a0::ffff:x:x .</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> NULL <span class=\"sy0\">!=</span> pchOpenBracket <span class=\"br0\">)</span>\t<span class=\"co1\">//start past the open bracket, if it exists</span><br/>\t\t\t<span class=\"sy0\">*</span>ppszText <span class=\"sy0\">=</span> pchOpenBracket <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\tpbyAddrCursor <span class=\"sy0\">=</span> abyAddrLocal<span class=\"sy0\">;</span><br/>\t\tpbyZerosLoc <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span>\t<span class=\"co1\">//if we find a 'zero compression' location</span><br/>\t\tbIPv4Detected <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span> nIdx <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> nIdx <span class=\"sy0\">&lt;</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>nIdx <span class=\"br0\">)</span>\t<span class=\"co1\">//we've got up to 8 of these, so we will use a loop</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span> pszTextBefore <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>ppszText<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw4\">unsigned</span> nVal <span class=\"sy0\">=</span>_parseHex <span class=\"br0\">(</span> ppszText <span class=\"br0\">)</span><span class=\"sy0\">;</span>\t\t<span class=\"co1\">//get value; these are hex</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> pszTextBefore <span class=\"sy0\">==</span> <span class=\"sy0\">*</span>ppszText <span class=\"br0\">)</span>\t<span class=\"co1\">//if empty, we are zero compressing; note the loc</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> NULL <span class=\"sy0\">!=</span> pbyZerosLoc <span class=\"br0\">)</span>\t<span class=\"co1\">//there can be only one!</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t<span class=\"co1\">//unless it's a terminal empty field, then this is OK, it just means we're done with the host part</span><br/>\t\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> pbyZerosLoc <span class=\"sy0\">==</span> pbyAddrCursor <span class=\"br0\">)</span><br/>\t\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t\t<span class=\"sy0\">--</span>nIdx<span class=\"sy0\">;</span><br/>\t\t\t\t\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\t<span class=\"co1\">//otherwise, it's a format error</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"st0\">':'</span> <span class=\"sy0\">!=</span> <span class=\"sy0\">**</span>ppszText <span class=\"br0\">)</span>\t<span class=\"co1\">//empty field can only be via\u00a0:</span><br/>\t\t\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"sy0\">==</span> nIdx <span class=\"br0\">)</span>\t<span class=\"co1\">//leading zero compression requires an extra peek, and adjustment</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t<span class=\"sy0\">++</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>ppszText<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"st0\">':'</span> <span class=\"sy0\">!=</span> <span class=\"sy0\">**</span>ppszText <span class=\"br0\">)</span><br/>\t\t\t\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t\t\tpbyZerosLoc <span class=\"sy0\">=</span> pbyAddrCursor<span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"sy0\">++</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>ppszText<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">else</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"st0\">'.'</span> <span class=\"sy0\">==</span> <span class=\"sy0\">**</span>ppszText <span class=\"br0\">)</span>\t<span class=\"co1\">//special case of ipv4 convenience notation</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t<span class=\"co1\">//who knows how to parse ipv4?  we do!</span><br/>\t\t\t\t\t<span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span> pszTextlocal <span class=\"sy0\">=</span> pszTextBefore<span class=\"sy0\">;</span>\t<span class=\"co1\">//back it up</span><br/>\t\t\t\t\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> abyAddrlocal<span class=\"br0\">[</span><span class=\"nu0\">16</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"kw4\">int</span> bIsIPv6local<span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"kw4\">int</span> bParseResultlocal <span class=\"sy0\">=</span> ParseIPv4OrIPv6 <span class=\"br0\">(</span> <span class=\"sy0\">&amp;</span>pszTextlocal<span class=\"sy0\">,</span> abyAddrlocal<span class=\"sy0\">,</span> NULL<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>bIsIPv6local <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"sy0\">*</span>ppszText <span class=\"sy0\">=</span> pszTextlocal<span class=\"sy0\">;</span>\t<span class=\"co1\">//success or fail, remember the terminating char</span><br/>\t\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"sy0\">!</span> bParseResultlocal <span class=\"sy0\">||</span> bIsIPv6local <span class=\"br0\">)</span>\t<span class=\"co1\">//must parse and must be ipv4</span><br/>\t\t\t\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"co1\">//transfer addrlocal into the present location</span><br/>\t\t\t\t\t<span class=\"sy0\">*</span><span class=\"br0\">(</span>pbyAddrCursor<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> abyAddrlocal<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"sy0\">*</span><span class=\"br0\">(</span>pbyAddrCursor<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> abyAddrlocal<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"sy0\">*</span><span class=\"br0\">(</span>pbyAddrCursor<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> abyAddrlocal<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"sy0\">*</span><span class=\"br0\">(</span>pbyAddrCursor<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> abyAddrlocal<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"sy0\">++</span>nIdx<span class=\"sy0\">;</span>\t<span class=\"co1\">//pretend like we took another short, since the ipv4 effectively is two shorts</span><br/>\t\t\t\t\tbIPv4Detected <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\t<span class=\"co1\">//remember how we got here for further validation later</span><br/>\t\t\t\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span>\t<span class=\"co1\">//totally done with address</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> nVal <span class=\"sy0\">&gt;</span> <span class=\"nu0\">65535</span> <span class=\"br0\">)</span>\t<span class=\"co1\">//must be 16 bit quantity</span><br/>\t\t\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"sy0\">*</span><span class=\"br0\">(</span>pbyAddrCursor<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> nVal <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span>\t\t<span class=\"co1\">//transfer in network order</span><br/>\t\t\t\t<span class=\"sy0\">*</span><span class=\"br0\">(</span>pbyAddrCursor<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> nVal <span class=\"sy0\">&amp;</span> <span class=\"nu12\">0xff</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"st0\">':'</span> <span class=\"sy0\">==</span> <span class=\"sy0\">**</span>ppszText <span class=\"br0\">)</span>\t<span class=\"co1\">//typical case inside; carry on</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t<span class=\"sy0\">++</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>ppszText<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"kw1\">else</span>\t<span class=\"co1\">//some other terminating character; done with this parsing parts</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"co1\">//handle any zero compression we found</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> NULL <span class=\"sy0\">!=</span> pbyZerosLoc <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw4\">int</span> nHead <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">(</span> pbyZerosLoc <span class=\"sy0\">-</span> abyAddrLocal <span class=\"br0\">)</span><span class=\"sy0\">;</span>\t<span class=\"co1\">//how much before zero compression</span><br/>\t\t\t<span class=\"kw4\">int</span> nTail <span class=\"sy0\">=</span> nIdx <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">(</span> pbyZerosLoc <span class=\"sy0\">-</span> abyAddrLocal <span class=\"br0\">)</span><span class=\"sy0\">;</span>\t<span class=\"co1\">//how much after zero compression</span><br/>\t\t\t<span class=\"kw4\">int</span> nZeros <span class=\"sy0\">=</span> <span class=\"nu0\">16</span> <span class=\"sy0\">-</span> nTail <span class=\"sy0\">-</span> nHead<span class=\"sy0\">;</span>\t\t<span class=\"co1\">//how much zeros</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memmove.html\"><span class=\"kw3\">memmove</span></a> <span class=\"br0\">(</span> <span class=\"sy0\">&amp;</span>abyAddrLocal<span class=\"br0\">[</span><span class=\"nu0\">16</span><span class=\"sy0\">-</span>nTail<span class=\"br0\">]</span><span class=\"sy0\">,</span> pbyZerosLoc<span class=\"sy0\">,</span> nTail <span class=\"br0\">)</span><span class=\"sy0\">;</span>\t<span class=\"co1\">//scootch stuff down</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memset.html\"><span class=\"kw3\">memset</span></a> <span class=\"br0\">(</span> pbyZerosLoc<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> nZeros <span class=\"br0\">)</span><span class=\"sy0\">;</span>\t\t<span class=\"co1\">//clear the compressed zeros</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"co1\">//validation of ipv4 subspace\u00a0::ffff:x.x</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> bIPv4Detected <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw4\">static</span> <span class=\"kw4\">const</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> abyPfx<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu12\">0xff</span><span class=\"sy0\">,</span><span class=\"nu12\">0xff</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"sy0\">!=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memcmp.html\"><span class=\"kw3\">memcmp</span></a> <span class=\"br0\">(</span> abyAddrLocal<span class=\"sy0\">,</span> abyPfx<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>abyPfx<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"co1\">//close bracket</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> NULL <span class=\"sy0\">!=</span> pchOpenBracket <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"st0\">']'</span> <span class=\"sy0\">!=</span> <span class=\"sy0\">**</span>ppszText <span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"sy0\">++</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>ppszText<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"st0\">':'</span> <span class=\"sy0\">==</span> <span class=\"sy0\">**</span>ppszText <span class=\"sy0\">&amp;&amp;</span> NULL <span class=\"sy0\">!=</span> pnPort <span class=\"br0\">)</span>\t<span class=\"co1\">//have port part, and we want it</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span> pszTextBefore<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> nVal<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">short</span> usPortNetwork<span class=\"sy0\">;</span>\t<span class=\"co1\">//save value in network order</span><br/>\t\t\t<span class=\"sy0\">++</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>ppszText<span class=\"br0\">)</span><span class=\"sy0\">;</span>\t<span class=\"co1\">//past the colon</span><br/>\t\t\tpszTextBefore <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>ppszText<span class=\"sy0\">;</span><br/>\t\t\tpszTextBefore <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>ppszText<span class=\"sy0\">;</span><br/>\t\t\tnVal <span class=\"sy0\">=</span>_parseDecimal <span class=\"br0\">(</span> ppszText <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> nVal <span class=\"sy0\">&gt;</span> <span class=\"nu0\">65535</span> <span class=\"sy0\">||</span> pszTextBefore <span class=\"sy0\">==</span> <span class=\"sy0\">*</span>ppszText <span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">&amp;</span>usPortNetwork<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> nVal <span class=\"sy0\">&amp;</span> <span class=\"nu12\">0xff00</span> <span class=\"br0\">)</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">&amp;</span>usPortNetwork<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> nVal <span class=\"sy0\">&amp;</span> <span class=\"nu12\">0xff</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"sy0\">*</span>pnPort <span class=\"sy0\">=</span> usPortNetwork<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">else</span>\t<span class=\"co1\">//finished just with ip address</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> NULL <span class=\"sy0\">!=</span> pnPort <span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"sy0\">*</span>pnPort <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\t<span class=\"co1\">//indicate we have no port part</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">//simple version if we want don't care about knowing how much we ate</span><br/><span class=\"kw4\">int</span> ParseIPv4OrIPv6_2 <span class=\"br0\">(</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span> pszText<span class=\"sy0\">,</span> <br/>\t\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span> abyAddr<span class=\"sy0\">,</span> <span class=\"kw4\">int</span><span class=\"sy0\">*</span> pnPort<span class=\"sy0\">,</span> <span class=\"kw4\">int</span><span class=\"sy0\">*</span> pbIsIPv6 <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span> pszTextLocal <span class=\"sy0\">=</span> pszText<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> ParseIPv4OrIPv6 <span class=\"br0\">(</span> <span class=\"sy0\">&amp;</span>pszTextLocal<span class=\"sy0\">,</span> abyAddr<span class=\"sy0\">,</span> pnPort<span class=\"sy0\">,</span> pbIsIPv6<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Go", "loc": 69, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>\t<span class=\"st0\">\"errors\"</span><br/>\t<span class=\"st0\">\"fmt\"</span><br/>\t<span class=\"st0\">\"net\"</span><br/>\t<span class=\"st0\">\"strconv\"</span><br/>\t<span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> ParseIPPort<span class=\"sy1\">(</span>s <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>ip net<span class=\"sy3\">.</span>IP<span class=\"sy1\">,</span> port<span class=\"sy1\">,</span> space <span class=\"kw4\">string</span><span class=\"sy1\">,</span> err error<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\tip <span class=\"sy2\">=</span> net<span class=\"sy3\">.</span>ParseIP<span class=\"sy1\">(</span>s<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">if</span> ip <span class=\"sy3\">==</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">var</span> host <span class=\"kw4\">string</span><br/>\t\thost<span class=\"sy1\">,</span> port<span class=\"sy1\">,</span> err <span class=\"sy2\">=</span> net<span class=\"sy3\">.</span>SplitHostPort<span class=\"sy1\">(</span>s<span class=\"sy1\">)</span><br/>\t\t<span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"kw1\">return</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t\t<span class=\"kw1\">if</span> port <span class=\"sy2\">!=</span> <span class=\"st0\">\"\"</span> <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"co1\">// This check only makes sense if service names are not allowed</span><br/>\t\t\t<span class=\"kw1\">if</span> _<span class=\"sy1\">,</span> err <span class=\"sy2\">=</span> strconv<span class=\"sy3\">.</span>ParseUint<span class=\"sy1\">(</span>port<span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"sy1\">,</span> <span class=\"nu0\">16</span><span class=\"sy1\">);</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>\t\t\t\t<span class=\"kw1\">return</span><br/>\t\t\t<span class=\"sy1\">}</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t\tip <span class=\"sy2\">=</span> net<span class=\"sy3\">.</span>ParseIP<span class=\"sy1\">(</span>host<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">if</span> ip <span class=\"sy3\">==</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>\t\terr <span class=\"sy2\">=</span> errors<span class=\"sy3\">.</span>New<span class=\"sy1\">(</span><span class=\"st0\">\"invalid address format\"</span><span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>\t\tspace <span class=\"sy2\">=</span> <span class=\"st0\">\"IPv6\"</span><br/>\t\t<span class=\"kw1\">if</span> ip4 <span class=\"sy2\">:=</span> ip<span class=\"sy3\">.</span>To4<span class=\"sy1\">();</span> ip4 <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>\t\t\tspace <span class=\"sy2\">=</span> <span class=\"st0\">\"IPv4\"</span><br/>\t\t\tip <span class=\"sy2\">=</span> ip4<br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">var</span> testCases <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><br/>\t\t<span class=\"st0\">\"127.0.0.1\"</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"st0\">\"127.0.0.1:80\"</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"st0\">\"::1\"</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"st0\">\"[::1]:80\"</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"st0\">\"2605:2700:0:3::4713:93e3\"</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"st0\">\"[2605:2700:0:3::4713:93e3]:80\"</span><span class=\"sy1\">,</span><br/>\t<span class=\"sy1\">}</span><br/>\tmax <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span><span class=\"st0\">\"Input\"</span><span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> addr <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> testCases <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>addr<span class=\"sy1\">)</span> &gt; max <span class=\"sy1\">{</span><br/>\t\t\tmax <span class=\"sy2\">=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>addr<span class=\"sy1\">)</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/>\tfmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%-*s \u00a0%*s \u00a0%-6s\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> max<span class=\"sy1\">,</span> <span class=\"st0\">\"Input\"</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"nu0\">2</span><span class=\"sy3\">*</span>net<span class=\"sy3\">.</span>IPv6len<span class=\"sy1\">,</span> <span class=\"st0\">\"Address\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Space\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Port\"</span><span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> addr <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> testCases <span class=\"sy1\">{</span><br/>\t\tfmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%-*s  \"</span><span class=\"sy1\">,</span> max<span class=\"sy1\">,</span> addr<span class=\"sy1\">)</span><br/>\t\tip<span class=\"sy1\">,</span> port<span class=\"sy1\">,</span> space<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> ParseIPPort<span class=\"sy1\">(</span>addr<span class=\"sy1\">)</span><br/>\t\t<span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>\t\t\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>\t\t\t<span class=\"kw1\">continue</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t\tfmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span>strings<span class=\"sy3\">.</span>Repeat<span class=\"sy1\">(</span><span class=\"st0\">\"  \"</span><span class=\"sy1\">,</span> net<span class=\"sy3\">.</span>IPv6len<span class=\"sy3\">-</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>ip<span class=\"sy1\">)))</span><br/>\t\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> b <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> ip <span class=\"sy1\">{</span><br/>\t\t\tfmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%02x\"</span><span class=\"sy1\">,</span> b<span class=\"sy1\">)</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t\tfmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\" \u00a0%-6s\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> space<span class=\"sy1\">,</span> port<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 114, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>isInfixOf<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Numeric.html\"><span class=\"kw2\">Numeric</span></a> <span class=\"br0\">(</span>showHex<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a> <span class=\"br0\">(</span>isDigit<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">data</span> IPChunk <span class=\"sy0\">=</span> IPv6Chunk <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">|</span> IPv4Chunk <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">)</span> <span class=\"sy0\">|</span><br/>    IPv6WithPort <span class=\"br0\">[</span>IPChunk<span class=\"br0\">]</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">|</span> IPv6NoPort <span class=\"br0\">[</span>IPChunk<span class=\"br0\">]</span> <span class=\"sy0\">|</span><br/>    IPv4WithPort IPChunk <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">|</span> IPv4NoPort IPChunk <span class=\"sy0\">|</span><br/>    IPInvalid <span class=\"sy0\">|</span> IPZeroSection <span class=\"sy0\">|</span> IPUndefinedWithPort <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">|</span><br/>    IPUndefinedNoPort<br/>\u00a0<br/><span class=\"kw1\">instance</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a> IPChunk <span class=\"kw1\">where</span><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"br0\">(</span>IPv6Chunk a<span class=\"br0\">)</span> <span class=\"sy0\">=</span> a<br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"br0\">(</span>IPv4Chunk <span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> a <span class=\"sy0\">++</span> b<br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"br0\">(</span>IPv6WithPort a p<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"IPv6 \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concatMap\"><span class=\"kw3\">concatMap</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> a <span class=\"sy0\">++</span> <span class=\"st0\">\" port \"</span> <span class=\"sy0\">++</span> p<br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"br0\">(</span>IPv6NoPort a<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"IPv6 \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concatMap\"><span class=\"kw3\">concatMap</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> a <span class=\"sy0\">++</span> <span class=\"st0\">\" no port\"</span><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"br0\">(</span>IPv4WithPort a p<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"IPv4 \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> a <span class=\"sy0\">++</span> <span class=\"st0\">\" port \"</span> <span class=\"sy0\">++</span> p<br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"br0\">(</span>IPv4NoPort a<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"IPv4 \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> a<br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> IPInvalid <span class=\"sy0\">=</span> <span class=\"st0\">\"Invalid IP address\"</span><br/>\u00a0<br/>isIPInvalid IPInvalid <span class=\"sy0\">=</span> True<br/>isIPInvalid <span class=\"sy0\">_</span> <span class=\"sy0\">=</span> False<br/>\u00a0<br/>isIPZeroSection IPZeroSection <span class=\"sy0\">=</span> True<br/>isIPZeroSection <span class=\"sy0\">_</span> <span class=\"sy0\">=</span> False<br/>\u00a0<br/>splitOn <span class=\"sy0\">_</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>splitOn x xs <span class=\"sy0\">=</span> <span class=\"kw1\">let</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:break\"><span class=\"kw3\">break</span></a> <span class=\"br0\">(</span><span class=\"sy0\">==</span> x<span class=\"br0\">)</span> xs <span class=\"kw1\">in</span> a\u00a0: splitOn x <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:drop\"><span class=\"kw3\">drop</span></a> <span class=\"nu0\">1</span> b<span class=\"br0\">)</span><br/>\u00a0<br/>count x <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span><span class=\"sy0\">==</span> x<span class=\"br0\">)</span><br/>\u00a0<br/>between a b x <span class=\"sy0\">=</span> x <span class=\"sy0\">&gt;=</span> a <span class=\"sy0\">&amp;&amp;</span> x <span class=\"sy0\">&lt;=</span> b<br/>\u00a0<br/>none f <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:all\"><span class=\"kw3\">all</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:not\"><span class=\"kw3\">not</span></a> <span class=\"sy0\">.</span> f<span class=\"br0\">)</span><br/>\u00a0<br/>parse1 <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> IPInvalid<br/>parse1 <span class=\"st0\">\"::\"</span> <span class=\"sy0\">=</span> IPUndefinedNoPort<br/>parse1 <span class=\"br0\">(</span><span class=\"st0\">'['</span>:<span class=\"st0\">':'</span>:<span class=\"st0\">':'</span>:<span class=\"st0\">']'</span>:<span class=\"st0\">':'</span>:ps<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">if</span> portIsValid ps <span class=\"kw1\">then</span> IPUndefinedWithPort ps <span class=\"kw1\">else</span> IPInvalid<br/>parse1 <span class=\"br0\">(</span><span class=\"st0\">'['</span>:xs<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">if</span> <span class=\"st0\">\"]:\"</span> `isInfixOf` xs<br/>    <span class=\"kw1\">then</span> <span class=\"kw1\">let</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:break\"><span class=\"kw3\">break</span></a> <span class=\"br0\">(</span><span class=\"sy0\">==</span> <span class=\"st0\">']'</span><span class=\"br0\">)</span> xs <span class=\"kw1\">in</span><br/>            <span class=\"kw1\">if</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:tail\"><span class=\"kw3\">tail</span></a> b <span class=\"sy0\">==</span> <span class=\"st0\">\":\"</span> <span class=\"kw1\">then</span> IPInvalid <span class=\"kw1\">else</span> IPv6WithPort <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> chunk <span class=\"br0\">(</span>splitOn <span class=\"st0\">':'</span> a<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:drop\"><span class=\"kw3\">drop</span></a> <span class=\"nu0\">2</span> b<span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span> IPInvalid<br/>parse1 xs<br/>    <span class=\"sy0\">|</span> count <span class=\"st0\">':'</span> xs <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> count <span class=\"st0\">'.'</span> xs <span class=\"sy0\">==</span> <span class=\"nu0\">3</span> <span class=\"sy0\">=</span><br/>        <span class=\"kw1\">let</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:break\"><span class=\"kw3\">break</span></a> <span class=\"br0\">(</span><span class=\"sy0\">==</span> <span class=\"st0\">':'</span><span class=\"br0\">)</span> xs <span class=\"kw1\">in</span> <span class=\"kw1\">case</span> b <span class=\"kw1\">of</span><br/>                <span class=\"st0\">\"\"</span> <span class=\"sy0\">-&gt;</span> IPv4NoPort <span class=\"br0\">(</span>chunk a<span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"st0\">':'</span>:ps<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> IPv4WithPort <span class=\"br0\">(</span>chunk a<span class=\"br0\">)</span> ps<br/>                <span class=\"sy0\">_</span> <span class=\"sy0\">-&gt;</span> IPInvalid<br/>    <span class=\"sy0\">|</span> count <span class=\"st0\">':'</span> xs <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> count <span class=\"st0\">'.'</span> xs <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">3</span> <span class=\"sy0\">=</span><br/>        IPv6NoPort <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> chunk <span class=\"br0\">(</span>splitOn <span class=\"st0\">':'</span> xs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>chunk <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> IPZeroSection<br/>chunk xs<br/>    <span class=\"sy0\">|</span> <span class=\"st0\">'.'</span> `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:elem\"><span class=\"kw3\">elem</span></a>` xs <span class=\"sy0\">=</span> <span class=\"kw1\">case</span> splitOn <span class=\"st0\">'.'</span> xs <span class=\"kw1\">of</span><br/>        <span class=\"br0\">[</span>a<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>c<span class=\"sy0\">,</span>d<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">let</span> <span class=\"br0\">[</span>e<span class=\"sy0\">,</span>f<span class=\"sy0\">,</span>g<span class=\"sy0\">,</span>h<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read\"><span class=\"kw3\">read</span></a> <span class=\"br0\">[</span>a<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>c<span class=\"sy0\">,</span>d<span class=\"br0\">]</span><br/>                     <span class=\"kw1\">in</span> <span class=\"kw1\">if</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:all\"><span class=\"kw3\">all</span></a> <span class=\"br0\">(</span>between <span class=\"nu0\">0</span> <span class=\"nu0\">255</span><span class=\"br0\">)</span> <span class=\"br0\">[</span>e<span class=\"sy0\">,</span>f<span class=\"sy0\">,</span>g<span class=\"sy0\">,</span>h<span class=\"br0\">]</span><br/>                            <span class=\"kw1\">then</span> <span class=\"kw1\">let</span> <span class=\"br0\">[</span>i<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span>k<span class=\"sy0\">,</span>l<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>\\n <span class=\"sy0\">-&gt;</span> fill <span class=\"nu0\">2</span> <span class=\"sy0\">$</span> showHex n <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"br0\">[</span>e<span class=\"sy0\">,</span>f<span class=\"sy0\">,</span>g<span class=\"sy0\">,</span>h<span class=\"br0\">]</span><br/>                                 <span class=\"kw1\">in</span> IPv4Chunk <span class=\"br0\">(</span>i <span class=\"sy0\">++</span> j<span class=\"sy0\">,</span> k <span class=\"sy0\">++</span> l<span class=\"br0\">)</span><br/>                            <span class=\"kw1\">else</span> IPInvalid<br/>    <span class=\"sy0\">|</span> <span class=\"st0\">':'</span> `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:notElem\"><span class=\"kw3\">notElem</span></a>` xs <span class=\"sy0\">&amp;&amp;</span> between <span class=\"nu0\">1</span> <span class=\"nu0\">4</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> xs<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:all\"><span class=\"kw3\">all</span></a> <span class=\"br0\">(</span>`<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:elem\"><span class=\"kw3\">elem</span></a>` <span class=\"st0\">\"0123456789abcdef\"</span><span class=\"br0\">)</span> xs <span class=\"sy0\">=</span> IPv6Chunk <span class=\"br0\">(</span>fill <span class=\"nu0\">4</span> xs<span class=\"br0\">)</span><br/>    <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span> IPInvalid <br/>\u00a0<br/>fill n xs <span class=\"sy0\">=</span> replicate <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> xs<span class=\"br0\">)</span> <span class=\"st0\">'0'</span> <span class=\"sy0\">++</span> xs<br/>\u00a0<br/>parse2 IPInvalid <span class=\"sy0\">=</span> IPInvalid<br/>parse2 <span class=\"br0\">(</span>IPUndefinedWithPort p<span class=\"br0\">)</span> <span class=\"sy0\">=</span> IPv6WithPort <span class=\"br0\">(</span>replicate <span class=\"nu0\">8</span> zeroChunk<span class=\"br0\">)</span> p<br/>parse2 IPUndefinedNoPort <span class=\"sy0\">=</span> IPv6NoPort <span class=\"br0\">(</span>replicate <span class=\"nu0\">8</span> zeroChunk<span class=\"br0\">)</span><br/>parse2 a <span class=\"sy0\">=</span> <span class=\"kw1\">case</span> a <span class=\"kw1\">of</span><br/>    IPv6WithPort xs p <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">if</span> none isIPInvalid xs <span class=\"sy0\">&amp;&amp;</span> portIsValid p<br/>        <span class=\"kw1\">then</span> <span class=\"kw1\">let</span> ys <span class=\"sy0\">=</span> complete xs<br/>             <span class=\"kw1\">in</span>  <span class=\"kw1\">if</span> countChunks ys <span class=\"sy0\">==</span> <span class=\"nu0\">8</span><br/>                     <span class=\"kw1\">then</span> IPv6WithPort ys p<br/>                     <span class=\"kw1\">else</span> IPInvalid<br/>        <span class=\"kw1\">else</span> IPInvalid<br/>    IPv6NoPort xs <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">if</span> none isIPInvalid xs<br/>        <span class=\"kw1\">then</span> <span class=\"kw1\">let</span> ys <span class=\"sy0\">=</span> complete xs<br/>             <span class=\"kw1\">in</span>  <span class=\"kw1\">if</span> countChunks ys <span class=\"sy0\">==</span> <span class=\"nu0\">8</span><br/>                     <span class=\"kw1\">then</span> IPv6NoPort ys<br/>                     <span class=\"kw1\">else</span> IPInvalid<br/>        <span class=\"kw1\">else</span> IPInvalid<br/>    IPv4WithPort <span class=\"br0\">(</span>IPv4Chunk a<span class=\"br0\">)</span> p <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">if</span> portIsValid p<br/>        <span class=\"kw1\">then</span> IPv4WithPort <span class=\"br0\">(</span>IPv4Chunk a<span class=\"br0\">)</span> p<br/>        <span class=\"kw1\">else</span> IPInvalid<br/>    IPv4NoPort <span class=\"br0\">(</span>IPv4Chunk a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> IPv4NoPort <span class=\"br0\">(</span>IPv4Chunk a<span class=\"br0\">)</span><br/>    <span class=\"sy0\">_</span> <span class=\"sy0\">-&gt;</span> IPInvalid<br/>\u00a0<br/>zeroChunk <span class=\"sy0\">=</span> IPv6Chunk <span class=\"st0\">\"0000\"</span><br/>\u00a0<br/>portIsValid a <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:all\"><span class=\"kw3\">all</span></a> isDigit a <span class=\"sy0\">&amp;&amp;</span> between <span class=\"nu0\">0</span> <span class=\"nu0\">65535</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read\"><span class=\"kw3\">read</span></a> a<span class=\"br0\">)</span><br/>\u00a0<br/>complete xs <span class=\"sy0\">=</span> <span class=\"kw1\">case</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:break\"><span class=\"kw3\">break</span></a> isIPZeroSection xs <span class=\"kw1\">of</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">_,</span> <span class=\"br0\">[</span>IPZeroSection<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>ys<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> ys<br/>    <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>IPZeroSection:IPZeroSection:ys<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">if</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:any\"><span class=\"kw3\">any</span></a> isIPZeroSection ys <span class=\"sy0\">||</span> countChunks ys <span class=\"sy0\">&gt;</span> <span class=\"nu0\">7</span><br/>        <span class=\"kw1\">then</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">else</span> replicate <span class=\"br0\">(</span><span class=\"nu0\">8</span> <span class=\"sy0\">-</span> countChunks ys<span class=\"br0\">)</span> zeroChunk <span class=\"sy0\">++</span> ys<br/>    <span class=\"br0\">(</span>ys<span class=\"sy0\">,</span> <span class=\"br0\">(</span>IPZeroSection:zs<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">if</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:any\"><span class=\"kw3\">any</span></a> isIPZeroSection zs <span class=\"sy0\">||</span> countChunks ys <span class=\"sy0\">+</span> countChunks zs <span class=\"sy0\">&gt;</span> <span class=\"nu0\">7</span><br/>        <span class=\"kw1\">then</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">else</span> ys <span class=\"sy0\">++</span> replicate <span class=\"br0\">(</span><span class=\"nu0\">8</span> <span class=\"sy0\">-</span> countChunks ys <span class=\"sy0\">-</span> countChunks zs<span class=\"br0\">)</span> zeroChunk <span class=\"sy0\">++</span> zs<br/>    <span class=\"sy0\">_</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/>countChunks xs <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldl\"><span class=\"kw3\">foldl</span></a> f <span class=\"nu0\">0</span> xs<br/>    <span class=\"kw1\">where</span> f n <span class=\"br0\">(</span>IPv4Chunk <span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><br/>          f n <span class=\"br0\">(</span>IPv6Chunk <span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>ip <span class=\"sy0\">=</span> parse2 <span class=\"sy0\">.</span> parse1<br/>\u00a0<br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"sy0\">.</span> ip<span class=\"br0\">)</span><br/>    <span class=\"br0\">[</span><span class=\"st0\">\"127.0.0.1\"</span><span class=\"sy0\">,</span>                                  <span class=\"co1\">-- loop back</span><br/>     <span class=\"st0\">\"127.0.0.1:80\"</span><span class=\"sy0\">,</span>                               <span class=\"co1\">-- loop back +port</span><br/>     <span class=\"st0\">\"::1\"</span><span class=\"sy0\">,</span>                                        <span class=\"co1\">-- loop back</span><br/>     <span class=\"st0\">\"[::1]:80\"</span><span class=\"sy0\">,</span>                                   <span class=\"co1\">-- loop back +port</span><br/>     <span class=\"st0\">\"2605:2700:0:3::4713:93e3\"</span><span class=\"sy0\">,</span>                   <span class=\"co1\">-- Rosetta Code</span><br/>     <span class=\"st0\">\"[2605:2700:0:3::4713:93e3]:80\"</span><span class=\"br0\">]</span>              <span class=\"co1\">-- Rosetta Code</span><br/>\u00a0</pre>"}, {"lang": "Icon and Unicon", "loc": 81, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">link</span> printf<span class=\"sy1\">,</span> hexcvt<br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   L <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"st0\">\"192.168.0.1\"</span><span class=\"sy1\">,</span>                                <span class=\"co1\"># private</span><br/>         <span class=\"st0\">\"127.0.0.1\"</span><span class=\"sy1\">,</span>                                  <span class=\"co1\"># loop back</span><br/>         <span class=\"st0\">\"127.0.0.1:80\"</span><span class=\"sy1\">,</span>                               <span class=\"co1\"># loop back +port</span><br/>         <span class=\"st0\">\"2001:db8:85a3:0:0:8a2e:370:7334\"</span><span class=\"sy1\">,</span>            <span class=\"co1\"># doc, IPv6 for 555-1234</span><br/>         <span class=\"st0\">\"2001:db8:85a3::8a2e:370:7334\"</span><span class=\"sy1\">,</span>               <span class=\"co1\"># doc</span><br/>         <span class=\"st0\">\"::1\"</span><span class=\"sy1\">,</span>                                        <span class=\"co1\"># loop back</span><br/>         <span class=\"st0\">\"[::1]:80\"</span><span class=\"sy1\">,</span>                                   <span class=\"co1\"># loop back +port</span><br/>         <span class=\"st0\">\"::\"</span><span class=\"sy1\">,</span>                                         <span class=\"co1\"># unspecified</span><br/>         <span class=\"st0\">\"::ffff:192.168.0.1\"</span><span class=\"sy1\">,</span>                         <span class=\"co1\"># transition</span><br/>         <span class=\"st0\">\"2605:2700:0:3::4713:93e3\"</span><span class=\"sy1\">,</span>                   <span class=\"co1\"># RC \t</span><br/>         <span class=\"st0\">\"[2605:2700:0:3::4713:93e3]:80\"</span><span class=\"sy1\">,</span>              <span class=\"co1\"># RC </span><br/>         <span class=\"st0\">\"::ffff:71.19.147.227\"</span><span class=\"sy1\">,</span>                       <span class=\"co1\"># RC transition</span><br/>         <span class=\"st0\">\"[::ffff:71.19.147.227]:80\"</span><span class=\"sy1\">,</span>                  <span class=\"co1\"># RC transition  +port        </span><br/>         <span class=\"st0\">\"[2001:db8:85a3:8d3:1319:8a2e:370:7348]:443\"</span><span class=\"sy1\">,</span> <span class=\"co1\"># doc +port</span><br/>         <span class=\"st0\">\"256.0.0.0\"</span><span class=\"sy1\">,</span>                                  <span class=\"co1\"># invalid</span><br/>         <span class=\"st0\">\"g::1\"</span><span class=\"br0\">]</span>                                       <span class=\"co1\"># invalid</span><br/>\u00a0<br/>   <span class=\"kw1\">every</span> x <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span>L <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> x <span class=\"sy1\">?</span>  <span class=\"br0\">(</span>ip <span class=\"sy1\">:=</span> ipmatch<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> port <span class=\"sy1\">:=</span> portmatch<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw4\">pos</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>         <span class=\"kw1\">if</span> i <span class=\"sy1\">:=</span> IPv4decode<span class=\"br0\">(</span>ip<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <br/>            printf<span class=\"br0\">(</span><span class=\"st0\">\"%s is the IPv4 address = x'%s'\"</span><span class=\"sy1\">,</span>x<span class=\"sy1\">,</span>i<span class=\"br0\">)</span><br/>         <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> i <span class=\"sy1\">:=</span> IPv6decode<span class=\"br0\">(</span>ip<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <br/>               printf<span class=\"br0\">(</span><span class=\"st0\">\"%s is the IPv6 address = x'%s'\"</span><span class=\"sy1\">,</span>x<span class=\"sy1\">,</span>i<span class=\"br0\">)</span><br/>         <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            printf<span class=\"br0\">(</span><span class=\"st0\">\"%s is not a valid IP address<span class=\"es0\">\\n</span>\"</span><span class=\"sy1\">,</span>x<span class=\"br0\">)</span><br/>            <span class=\"kw1\">next</span><br/>            <span class=\"br0\">}</span><br/>         <span class=\"kw1\">if</span> <span class=\"sy1\">\\</span>port <span class=\"kw1\">then</span> printf<span class=\"br0\">(</span><span class=\"st0\">\" port=%s<span class=\"es0\">\\n</span>\"</span><span class=\"sy1\">,</span>port<span class=\"br0\">)</span> <span class=\"kw1\">else</span> printf<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span> printf<span class=\"br0\">(</span><span class=\"st0\">\"%s is not an IP address<span class=\"es0\">\\n</span>\"</span><span class=\"sy1\">,</span>x<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">procedure</span> ipmatch<span class=\"br0\">(</span><span class=\"br0\">)</span>                                <span class=\"co1\">#: match an ip v4/v6 address</span><br/><span class=\"kw2\">static</span> c4<span class=\"sy1\">,</span>c6<br/><span class=\"kw1\">initial</span> <span class=\"br0\">{</span><br/>   c4 <span class=\"sy1\">:=</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">digits</span> <span class=\"sy1\">++</span> <span class=\"st0\">'.'</span><br/>   c6 <span class=\"sy1\">:=</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">digits</span> <span class=\"sy1\">++</span> <span class=\"st0\">'abcdef:'</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">suspend</span> <span class=\"br0\">(</span><span class=\"sy1\">=</span><span class=\"st0\">\"[\"</span> <span class=\"sy1\">||</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"sy1\">=</span><span class=\"st0\">\"::ffff:\"</span> <span class=\"sy1\">||</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">many</span><span class=\"br0\">(</span>c4<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">many</span><span class=\"br0\">(</span>c6<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy1\">||</span> <span class=\"sy1\">=</span><span class=\"st0\">\"]\"</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span><br/>           <span class=\"br0\">(</span> <span class=\"sy1\">=</span><span class=\"st0\">\"::ffff:\"</span> <span class=\"sy1\">||</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">many</span><span class=\"br0\">(</span>c4<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span>  <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">many</span><span class=\"br0\">(</span>c6<span class=\"sy1\">|</span>c4<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> portmatch<span class=\"br0\">(</span><span class=\"br0\">)</span>                              <span class=\"co1\">#: match a port number</span><br/>   <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"sy1\">=</span><span class=\"st0\">\":\"</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span> <span class=\"sy1\">&lt;</span> <span class=\"br0\">(</span><span class=\"nu0\">65536</span> <span class=\"sy1\">&gt;</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">many</span><span class=\"br0\">(</span><span class=\"sy1\">&amp;</span><span class=\"kw3\">digits</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">null</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> IPv4decode<span class=\"br0\">(</span>s<span class=\"br0\">)</span>                            <span class=\"co1\">#: match IPv4 to hex string </span><br/>   s <span class=\"sy1\">?</span> <span class=\"br0\">(</span> ip  <span class=\"sy1\">:=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy1\">&lt;=</span> <span class=\"br0\">(</span><span class=\"nu0\">256</span> <span class=\"sy1\">&gt;</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">many</span><span class=\"br0\">(</span><span class=\"sy1\">&amp;</span><span class=\"kw3\">digits</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> ip <span class=\"sy1\">*:=</span> <span class=\"nu0\">256</span><span class=\"sy1\">,</span> <span class=\"sy1\">=</span><span class=\"st0\">\".\"</span><span class=\"sy1\">,</span> <br/>         ip <span class=\"sy1\">+:=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy1\">&lt;=</span> <span class=\"br0\">(</span><span class=\"nu0\">256</span> <span class=\"sy1\">&gt;</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">many</span><span class=\"br0\">(</span><span class=\"sy1\">&amp;</span><span class=\"kw3\">digits</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> ip <span class=\"sy1\">*:=</span> <span class=\"nu0\">256</span><span class=\"sy1\">,</span> <span class=\"sy1\">=</span><span class=\"st0\">\".\"</span><span class=\"sy1\">,</span><br/>         ip <span class=\"sy1\">+:=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy1\">&lt;=</span> <span class=\"br0\">(</span><span class=\"nu0\">256</span> <span class=\"sy1\">&gt;</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">many</span><span class=\"br0\">(</span><span class=\"sy1\">&amp;</span><span class=\"kw3\">digits</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> ip <span class=\"sy1\">*:=</span> <span class=\"nu0\">256</span><span class=\"sy1\">,</span> <span class=\"sy1\">=</span><span class=\"st0\">\".\"</span><span class=\"sy1\">,</span><br/>         ip <span class=\"sy1\">+:=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy1\">&lt;=</span> <span class=\"br0\">(</span><span class=\"nu0\">256</span> <span class=\"sy1\">&gt;</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">many</span><span class=\"br0\">(</span><span class=\"sy1\">&amp;</span><span class=\"kw3\">digits</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>         <span class=\"kw1\">return</span> <span class=\"kw4\">right</span><span class=\"br0\">(</span>hexstring<span class=\"br0\">(</span>ip<span class=\"sy1\">,,&amp;</span><span class=\"kw3\">lcase</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>            <br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> IPv6decode<span class=\"br0\">(</span>s<span class=\"br0\">)</span>                            <span class=\"co1\">#: IPv6 to hex string</span><br/>   s <span class=\"sy1\">?:=</span>  <span class=\"nu0\">2</span><span class=\"br0\">(</span><span class=\"sy1\">=</span><span class=\"st0\">\"[\"</span><span class=\"sy1\">,</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"sy1\">=</span><span class=\"st0\">\"]\"</span><span class=\"br0\">)</span>                         <span class=\"co1\"># remove any [] </span><br/>   <span class=\"kw1\">if</span> <span class=\"kw4\">find</span><span class=\"br0\">(</span><span class=\"st0\">\".\"</span><span class=\"sy1\">,</span>s<span class=\"br0\">)</span> <span class=\"kw1\">then</span>                                   <span class=\"co1\"># transitional</span><br/>      s <span class=\"sy1\">?</span> <span class=\"br0\">(</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">many</span><span class=\"br0\">(</span><span class=\"st0\">':0'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"sy1\">=</span><span class=\"st0\">\"ffff:\"</span><span class=\"sy1\">,</span> <br/>            <span class=\"kw1\">return</span> <span class=\"kw4\">right</span><span class=\"br0\">(</span><span class=\"st0\">\"ffff\"</span> <span class=\"sy1\">||</span> IPv4decode<span class=\"br0\">(</span><span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"nu0\">32</span><span class=\"sy1\">,</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>   <span class=\"kw1\">else</span> <span class=\"br0\">{</span> <br/>      h <span class=\"sy1\">:=</span> t <span class=\"sy1\">:=</span> <span class=\"st0\">\"\"</span><br/>      s <span class=\"sy1\">?</span> <span class=\"br0\">{</span><br/>         <span class=\"kw1\">while</span> x <span class=\"sy1\">:=</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">find</span><span class=\"br0\">(</span><span class=\"st0\">\":\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span>                  <span class=\"co1\"># head</span><br/>            <span class=\"kw1\">if</span> <span class=\"sy1\">*</span>x <span class=\"sy1\">&lt;=</span> <span class=\"nu0\">4</span> <span class=\"kw1\">then</span> h <span class=\"sy1\">||:=</span> <span class=\"kw4\">right</span><span class=\"br0\">(</span>x<span class=\"sy1\">,</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"sy1\">=</span><span class=\"st0\">\"::\"</span> <span class=\"kw1\">then</span> <span class=\"kw1\">break</span><br/>            <span class=\"kw1\">else</span> <span class=\"kw4\">move</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>         <span class=\"kw1\">while</span> x <span class=\"sy1\">:=</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">find</span><span class=\"br0\">(</span><span class=\"st0\">\":\"</span><span class=\"br0\">)</span><span class=\"sy1\">|</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span>                <span class=\"co1\"># tail </span><br/>            <span class=\"kw1\">if</span> <span class=\"sy1\">*</span>x <span class=\"sy1\">&lt;=</span> <span class=\"nu0\">4</span> <span class=\"kw1\">then</span> t <span class=\"sy1\">||:=</span> <span class=\"kw4\">right</span><span class=\"br0\">(</span>x<span class=\"sy1\">,</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span>          <br/>            <span class=\"kw4\">move</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"kw1\">break</span><br/>            <span class=\"br0\">}</span><br/>         <span class=\"kw1\">if</span> x <span class=\"sy1\">:=</span> h <span class=\"sy1\">||</span> <span class=\"kw4\">repl</span><span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"sy1\">,</span><span class=\"nu0\">32</span><span class=\"sy1\">-</span><span class=\"br0\">(</span><span class=\"sy1\">*</span>h<span class=\"sy1\">+*</span>t<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">||</span> t <span class=\"kw1\">then</span>     <span class=\"co1\"># and insides</span><br/>            <span class=\"kw1\">return</span> x<br/>         <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 37, "block": "<pre class=\"j highlighted_source\">parseaddr=:<span class=\"nu0\">3</span>\u00a0:<span class=\"nu0\">0</span><br/>  <span class=\"kw1\">if.</span> <span class=\"st_h\">'.'</span> e. <span class=\"kw2\">y</span> <span class=\"kw1\">do.</span><br/>    <span class=\"kw1\">if.</span> +./<span class=\"st_h\">'::'</span> E. <span class=\"kw2\">y</span> <span class=\"kw1\">do.</span><br/>      parsehybrid <span class=\"kw2\">y</span><br/>    <span class=\"kw1\">else.</span><br/>      parseipv4 <span class=\"kw2\">y</span><br/>    <span class=\"kw1\">end.</span><br/>  <span class=\"kw1\">else.</span><br/>    parseipv6 <span class=\"kw2\">y</span><br/>  <span class=\"kw1\">end.</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/>parseipv4=:<span class=\"nu0\">3</span>\u00a0:<span class=\"nu0\">0</span><br/>  <span class=\"st_h\">'addr port'</span>=. <span class=\"nu0\">2</span>{.&lt;;.<span class=\"nu0\">_2</span> <span class=\"kw2\">y</span>,<span class=\"st_h\">'::'</span><br/>  <span class=\"nu0\">4</span>,<span class=\"sy0\">((</span><span class=\"nu0\">4</span>#<span class=\"nu0\">256</span><span class=\"sy0\">)</span>#.<span class=\"nu0\">_</span>&amp;\".;.<span class=\"nu0\">_1</span><span class=\"st_h\">'.'</span>,addr<span class=\"sy0\">)</span>,<span class=\"nu0\">_</span>\".port<br/><span class=\"sy0\">)</span><br/>\u00a0<br/>parseipv6=:<span class=\"nu0\">3</span>\u00a0:<span class=\"nu0\">0</span><br/>  <span class=\"st_h\">'addr port'</span>=. <span class=\"nu0\">2</span>{.&lt;;.<span class=\"nu0\">_2</span> <span class=\"sy0\">(</span><span class=\"kw2\">y</span>-.<span class=\"st_h\">'['</span><span class=\"sy0\">)</span>,<span class=\"st_h\">']]'</span><br/>  split=. I. <span class=\"st_h\">'::'</span> E. addr<br/>  a1=. <span class=\"nu0\">8</span>{. dfh;.<span class=\"nu0\">_2</span> <span class=\"sy0\">(</span>split {. addr<span class=\"sy0\">)</span>,<span class=\"nu0\">8</span>#<span class=\"st_h\">':'</span><br/>  a2=.<span class=\"nu0\">_8</span>{. dfh;.<span class=\"nu0\">_1</span> <span class=\"sy0\">(</span><span class=\"nu0\">8</span>#<span class=\"st_h\">':'</span><span class=\"sy0\">)</span>,split }. addr<br/>  <span class=\"nu0\">6</span>,<span class=\"sy0\">(</span><span class=\"nu0\">65536x</span>#.a1+a2<span class=\"sy0\">)</span>,<span class=\"nu0\">_</span>\".port-.<span class=\"st_h\">':'</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/>parsehybrid=:<span class=\"nu0\">3</span>\u00a0:<span class=\"nu0\">0</span><br/>  <span class=\"st_h\">'kludge port'</span>=. <span class=\"nu0\">2</span>{.&lt;;.<span class=\"nu0\">_2</span> <span class=\"sy0\">(</span>tolower <span class=\"kw2\">y</span>-.<span class=\"st_h\">'['</span><span class=\"sy0\">)</span>,<span class=\"st_h\">']]'</span><br/>  addr=. <span class=\"nu0\">_1</span> {:: &lt;;.<span class=\"nu0\">_2</span> kludge,<span class=\"st_h\">':'</span><br/>  <span class=\"kw1\">assert.</span> <span class=\"sy0\">(</span>kludge-:<span class=\"st_h\">'::ffff:'</span>,addr<span class=\"sy0\">)</span> +. kludge-: <span class=\"st_h\">'::'</span>,addr<br/>  <span class=\"nu0\">6</span>,<span class=\"sy0\">(</span><span class=\"nu0\">16bffff00000000</span>+<span class=\"nu0\">1</span>{parseipv4 addr<span class=\"sy0\">)</span>,<span class=\"nu0\">_</span>\".port-.<span class=\"st_h\">':'</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/>fmt=:<span class=\"nu0\">3</span>\u00a0:<span class=\"nu0\">0</span><br/>  port=. <span class=\"st_h\">''</span><br/>  <span class=\"sy0\">((</span>#<span class=\"kw2\">y</span><span class=\"sy0\">)</span>{.<span class=\"st_h\">'v'</span>;<span class=\"st_h\">'addr'</span>;<span class=\"st_h\">'port'</span><span class=\"sy0\">)</span>=. <span class=\"kw2\">y</span><br/>  <span class=\"st_h\">'ipv'</span>,<span class=\"sy0\">(</span>\":<span class=\"kw2\">v</span><span class=\"sy0\">)</span>,<span class=\"st_h\">' '</span>,<span class=\"sy0\">(</span>hfd addr<span class=\"sy0\">)</span>,<span class=\"sy0\">(</span>#port<span class=\"sy0\">)</span>#<span class=\"st_h\">' '</span>,\":port<br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 191, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.net.Inet6Address</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.net.InetAddress</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.net.UnknownHostException</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.regex.Pattern</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"co2\">javax.xml.bind.DatatypeConverter</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co3\">/**<br/> * Parses ipv4 and ipv6 addresses. Emits each described IP address as a<br/> * hexadecimal integer representing the address, the address space, and the port<br/> * number specified, if any.<br/> */</span><br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> IPParser <span class=\"br0\">{</span><br/>\t<span class=\"coMULTI\">/*<br/>\t * Using regex to ensure that the address is a valid one. This allows for<br/>\t * separating by format and ensures that the operations done on a format<br/>\t * will be valid.<br/>\t */</span><br/>\t<span class=\"co1\">// 0.0.0.0-255.255.255.255</span><br/>\t<span class=\"kw1\">private</span> <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> ipv4segment <span class=\"sy0\">=</span><br/>\t\t\t<span class=\"st0\">\"(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"co1\">// 0-65535</span><br/>\t<span class=\"kw1\">private</span> <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> portsegment <span class=\"sy0\">=</span><br/>\t\t\t<span class=\"st0\">\":(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|\"</span><br/>\t\t\t\t\t<span class=\"sy0\">+</span> <span class=\"st0\">\"6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\"</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">private</span> <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> ipv4address <span class=\"sy0\">=</span> <span class=\"st0\">\"(\"</span> <span class=\"sy0\">+</span> ipv4segment <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">\\\\</span>.){3,3}\"</span><br/>\t\t\t<span class=\"sy0\">+</span> ipv4segment<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">private</span> <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> ipv4addressWithPort <span class=\"sy0\">=</span> ipv4address <span class=\"sy0\">+</span> portsegment <span class=\"sy0\">+</span> <span class=\"st0\">\"?\"</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">private</span> <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> ipv6segment <span class=\"sy0\">=</span> <span class=\"st0\">\"[a-fA-F0-9]{1,4}\"</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">private</span> <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> ipv6address <span class=\"sy0\">=</span> <span class=\"st0\">\"(\"</span> <span class=\"sy0\">+</span><br/>\t<span class=\"co1\">// 1:2:3:4:5:6:7:8</span><br/>\t\t\t<span class=\"st0\">\"(\"</span> <span class=\"sy0\">+</span> ipv6segment <span class=\"sy0\">+</span> <span class=\"st0\">\":){7,7}\"</span> <span class=\"sy0\">+</span> ipv6segment <span class=\"sy0\">+</span> <span class=\"st0\">\"|\"</span> <span class=\"sy0\">+</span><br/>\t<span class=\"co1\">// 1::, 1:2:3:4:5:6:7::</span><br/>\t\t\t<span class=\"st0\">\"(\"</span> <span class=\"sy0\">+</span> ipv6segment <span class=\"sy0\">+</span> <span class=\"st0\">\":){1,7}:|\"</span> <span class=\"sy0\">+</span><br/>\t\t\t<span class=\"co1\">// 1::8, 1:2:3:4:5:6::8, 1:2:3:4:5:6::8</span><br/>\t\t\t<span class=\"st0\">\"(\"</span> <span class=\"sy0\">+</span> ipv6segment <span class=\"sy0\">+</span> <span class=\"st0\">\":){1,6}:\"</span> <span class=\"sy0\">+</span> ipv6segment <span class=\"sy0\">+</span> <span class=\"st0\">\"|\"</span> <span class=\"sy0\">+</span><br/>\t\t\t<span class=\"co1\">// 1::7:8, 1:2:3:4:5::7:8, 1:2:3:4:5::8</span><br/>\t\t\t<span class=\"st0\">\"(\"</span> <span class=\"sy0\">+</span> ipv6segment <span class=\"sy0\">+</span> <span class=\"st0\">\":){1,5}(:\"</span> <span class=\"sy0\">+</span> ipv6segment <span class=\"sy0\">+</span> <span class=\"st0\">\"){1,2}|\"</span> <span class=\"sy0\">+</span><br/>\t\t\t<span class=\"co1\">// 1::6:7:8, 1:2:3:4::6:7:8, 1:2:3:4::8</span><br/>\t\t\t<span class=\"st0\">\"(\"</span> <span class=\"sy0\">+</span> ipv6segment <span class=\"sy0\">+</span> <span class=\"st0\">\":){1,4}(:\"</span> <span class=\"sy0\">+</span> ipv6segment <span class=\"sy0\">+</span> <span class=\"st0\">\"){1,3}|\"</span> <span class=\"sy0\">+</span><br/>\t\t\t<span class=\"co1\">// 1::5:6:7:8, 1:2:3::5:6:7:8, 1:2:3::8</span><br/>\t\t\t<span class=\"st0\">\"(\"</span> <span class=\"sy0\">+</span> ipv6segment <span class=\"sy0\">+</span> <span class=\"st0\">\":){1,3}(:\"</span> <span class=\"sy0\">+</span> ipv6segment <span class=\"sy0\">+</span> <span class=\"st0\">\"){1,4}|\"</span> <span class=\"sy0\">+</span><br/>\t\t\t<span class=\"co1\">// # 1::4:5:6:7:8, 1:2::4:5:6:7:8, 1:2::8</span><br/>\t\t\t<span class=\"st0\">\"(\"</span> <span class=\"sy0\">+</span> ipv6segment <span class=\"sy0\">+</span> <span class=\"st0\">\":){1,2}(:\"</span> <span class=\"sy0\">+</span> ipv6segment <span class=\"sy0\">+</span> <span class=\"st0\">\"){1,5}|\"</span> <span class=\"sy0\">+</span><br/>\t\t\t<span class=\"co1\">// # 1::3:4:5:6:7:8, 1::3:4:5:6:7:8, 1::8</span><br/>\t\t\tipv6segment <span class=\"sy0\">+</span> <span class=\"st0\">\":((:\"</span> <span class=\"sy0\">+</span> ipv6segment <span class=\"sy0\">+</span> <span class=\"st0\">\"){1,6})|\"</span> <span class=\"sy0\">+</span><br/>\t\t\t<span class=\"co1\">//\u00a0::2:3:4:5:6:7:8,\u00a0::2:3:4:5:6:7:8,\u00a0::8,\u00a0::</span><br/>\t\t\t<span class=\"st0\">\":((:\"</span> <span class=\"sy0\">+</span> ipv6segment <span class=\"sy0\">+</span> <span class=\"st0\">\"){1,7}|:)|\"</span> <span class=\"sy0\">+</span><br/>\t\t\t<span class=\"co1\">// fe80::7:8%eth0, fe80::7:8%1 (link-local IPv6 addresses with</span><br/>\t\t\t<span class=\"co1\">// zone index)</span><br/>\t\t\t<span class=\"st0\">\"fe80:(:\"</span> <span class=\"sy0\">+</span> ipv6segment <span class=\"sy0\">+</span> <span class=\"st0\">\"){0,4}%[0-9a-zA-Z]{1,}|\"</span> <span class=\"sy0\">+</span><br/>\t\t\t<span class=\"co1\">//\u00a0::255.255.255.255,\u00a0::ffff:255.255.255.255,</span><br/>\t\t\t<span class=\"co1\">//\u00a0::ffff:0:255.255.255.255 (IPv4-mapped IPv6 addresses and</span><br/>\t\t\t<span class=\"co1\">// IPv4-translated addresses)</span><br/>\t\t\t<span class=\"st0\">\"::(ffff(:0{1,4}){0,1}:){0,1}\"</span> <span class=\"sy0\">+</span> ipv4address <span class=\"sy0\">+</span> <span class=\"st0\">\"|\"</span> <span class=\"sy0\">+</span><br/>\t\t\t<span class=\"co1\">// 2001:db8:3:4::192.0.2.33, 64:ff9b::192.0.2.33 (IPv4-Embedded</span><br/>\t\t\t<span class=\"co1\">// IPv6 Address)</span><br/>\t\t\t<span class=\"st0\">\"(\"</span> <span class=\"sy0\">+</span> ipv6segment <span class=\"sy0\">+</span> <span class=\"st0\">\":){1,4}:\"</span> <span class=\"sy0\">+</span> ipv4address <span class=\"sy0\">+</span> <span class=\"st0\">\")\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">private</span> <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> ipv6addressWithPort <span class=\"sy0\">=</span> <span class=\"st0\">\"<span class=\"es0\">\\\\</span>[\"</span> <span class=\"sy0\">+</span> ipv6address <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">\\\\</span>]\"</span><br/>\t\t\t<span class=\"sy0\">+</span> portsegment <span class=\"sy0\">+</span> <span class=\"st0\">\"?\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"co3\">/**<br/>\t * Parses ipv4 and ipv6 addresses. Emits each described IP address as a<br/>\t * hexadecimal integer representing the address, the address space, and the<br/>\t * port number specified, if any.<br/>\t * <br/>\t * @param address the address to analyze<br/>\t */</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw4\">void</span> parse<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> address<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>\t\t<span class=\"co1\">// Used for storing values to be printed</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> space <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><span class=\"co1\">// ipv4, ipv6, or unknown</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> hex <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><span class=\"co1\">// hex value of the address</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> port <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><span class=\"co1\">// the port or unknown</span><br/>\u00a0<br/>\t\t<span class=\"co1\">// Try to match the pattern with one of the 2 types, with or without a</span><br/>\t\t<span class=\"co1\">// port</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>Pattern.<span class=\"me1\">matches</span><span class=\"br0\">(</span><span class=\"st0\">\"^\"</span> <span class=\"sy0\">+</span> ipv4address <span class=\"sy0\">+</span> <span class=\"st0\">\"$\"</span>, address<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainetaddress+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">InetAddress</span></a> a<span class=\"sy0\">;</span><br/>\t\t\tspace <span class=\"sy0\">=</span> <span class=\"st0\">\"IPv4\"</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">try</span> <span class=\"br0\">{</span><br/>\t\t\t\ta <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainetaddress+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">InetAddress</span></a>.<span class=\"me1\">getByName</span><span class=\"br0\">(</span>address<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\thex <span class=\"sy0\">=</span> DatatypeConverter.<span class=\"me1\">printHexBinary</span><span class=\"br0\">(</span>a.<span class=\"me1\">getAddress</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">catch</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aunknownhostexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">UnknownHostException</span></a> e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\te.<span class=\"me1\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\thex <span class=\"sy0\">=</span> <span class=\"st0\">\"Invalid\"</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\tport <span class=\"sy0\">=</span> <span class=\"st0\">\"Absent\"</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>Pattern.<span class=\"me1\">matches</span><span class=\"br0\">(</span><span class=\"st0\">\"^\"</span> <span class=\"sy0\">+</span> ipv4addressWithPort <span class=\"sy0\">+</span> <span class=\"st0\">\"$\"</span>, address<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> parts <span class=\"sy0\">=</span> address.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\\\</span>.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tport <span class=\"sy0\">=</span> parts<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\":\"</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\tparts<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> parts<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\":\"</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainetaddress+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">InetAddress</span></a> a<span class=\"sy0\">;</span><br/>\t\t\tspace <span class=\"sy0\">=</span> <span class=\"st0\">\"IPv4\"</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">try</span> <span class=\"br0\">{</span><br/>\t\t\t\taddress <span class=\"sy0\">=</span> parts<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> parts<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> parts<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> parts<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t\ta <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainetaddress+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">InetAddress</span></a>.<span class=\"me1\">getByName</span><span class=\"br0\">(</span>address<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\thex <span class=\"sy0\">=</span> DatatypeConverter.<span class=\"me1\">printHexBinary</span><span class=\"br0\">(</span>a.<span class=\"me1\">getAddress</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">catch</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aunknownhostexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">UnknownHostException</span></a> e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\te.<span class=\"me1\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\thex <span class=\"sy0\">=</span> <span class=\"st0\">\"Invalid\"</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>Pattern.<span class=\"me1\">matches</span><span class=\"br0\">(</span><span class=\"st0\">\"^\"</span> <span class=\"sy0\">+</span> ipv6address <span class=\"sy0\">+</span> <span class=\"st0\">\"$\"</span>, address<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainetaddress+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">InetAddress</span></a> a<span class=\"sy0\">;</span><br/>\t\t\tspace <span class=\"sy0\">=</span> <span class=\"st0\">\"IPv6\"</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">try</span> <span class=\"br0\">{</span><br/>\t\t\t\ta <span class=\"sy0\">=</span> Inet6Address.<span class=\"me1\">getByName</span><span class=\"br0\">(</span>address<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\thex <span class=\"sy0\">=</span> DatatypeConverter.<span class=\"me1\">printHexBinary</span><span class=\"br0\">(</span>a.<span class=\"me1\">getAddress</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">catch</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aunknownhostexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">UnknownHostException</span></a> e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\te.<span class=\"me1\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\thex <span class=\"sy0\">=</span> <span class=\"st0\">\"Invalid\"</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\tport <span class=\"sy0\">=</span> <span class=\"st0\">\"Absent\"</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>Pattern.<span class=\"me1\">matches</span><span class=\"br0\">(</span><span class=\"st0\">\"^\"</span> <span class=\"sy0\">+</span> ipv6addressWithPort <span class=\"sy0\">+</span> <span class=\"st0\">\"$\"</span>, address<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> parts <span class=\"sy0\">=</span> address.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\":\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainetaddress+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">InetAddress</span></a> a<span class=\"sy0\">;</span><br/>\t\t\tspace <span class=\"sy0\">=</span> <span class=\"st0\">\"IPv6\"</span><span class=\"sy0\">;</span><br/>\t\t\taddress <span class=\"sy0\">=</span><br/>\t\t\t\t\taddress.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">\"[\"</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">\"]\"</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\t\t\t\t\t\t\t.<span class=\"me1\">replaceAll</span><span class=\"br0\">(</span>portsegment <span class=\"sy0\">+</span> <span class=\"st0\">\"$\"</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">try</span> <span class=\"br0\">{</span><br/>\t\t\t\ta <span class=\"sy0\">=</span> Inet6Address.<span class=\"me1\">getByName</span><span class=\"br0\">(</span>address<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\thex <span class=\"sy0\">=</span> DatatypeConverter.<span class=\"me1\">printHexBinary</span><span class=\"br0\">(</span>a.<span class=\"me1\">getAddress</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">catch</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aunknownhostexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">UnknownHostException</span></a> e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\te.<span class=\"me1\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\thex <span class=\"sy0\">=</span> <span class=\"st0\">\"Invalid\"</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\tport <span class=\"sy0\">=</span> parts<span class=\"br0\">[</span>parts.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"co1\">// Not a valid address</span><br/>\t\t\thex <span class=\"sy0\">=</span> <span class=\"st0\">\"Invalid\"</span><span class=\"sy0\">;</span><br/>\t\t\tspace <span class=\"sy0\">=</span> <span class=\"st0\">\"Invalid\"</span><span class=\"sy0\">;</span><br/>\t\t\tport <span class=\"sy0\">=</span> <span class=\"st0\">\"Invalid\"</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"co1\">// Output the findings to the console</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Test case: '\"</span> <span class=\"sy0\">+</span> address <span class=\"sy0\">+</span> <span class=\"st0\">\"'\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Space:      \"</span> <span class=\"sy0\">+</span> space<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Address:    \"</span> <span class=\"sy0\">+</span> hex<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Port:       \"</span> <span class=\"sy0\">+</span> port<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"co3\">/**<br/>\t * Tests the parser using various addresses.<br/>\t * <br/>\t * @param args arguments for the program<br/>\t */</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tIPParser parser <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> IPParser<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"co1\">// The \"localhost\" IPv4 address</span><br/>\t\tparser.<span class=\"me1\">parse</span><span class=\"br0\">(</span><span class=\"st0\">\"127.0.0.1\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"co1\">// The \"localhost\" IPv4 address, with a specified port (80)</span><br/>\t\tparser.<span class=\"me1\">parse</span><span class=\"br0\">(</span><span class=\"st0\">\"127.0.0.1:80\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"co1\">// The \"localhost\" IPv6 address</span><br/>\t\tparser.<span class=\"me1\">parse</span><span class=\"br0\">(</span><span class=\"st0\">\"::1\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"co1\">// The \"localhost\" IPv6 address, with a specified port (80)</span><br/>\t\tparser.<span class=\"me1\">parse</span><span class=\"br0\">(</span><span class=\"st0\">\"[::1]:80\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"co1\">// Rosetta Code's primary server's public IPv6 address</span><br/>\t\tparser.<span class=\"me1\">parse</span><span class=\"br0\">(</span><span class=\"st0\">\"2605:2700:0:3::4713:93e3\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"co1\">// Rosetta Code's primary server's public IPv6 address, with a specified</span><br/>\t\t<span class=\"co1\">// port (80)</span><br/>\t\tparser.<span class=\"me1\">parse</span><span class=\"br0\">(</span><span class=\"st0\">\"[2605:2700:0:3::4713:93e3]:80\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"co1\">// ipv6 space</span><br/>\t\tparser.<span class=\"me1\">parse</span><span class=\"br0\">(</span><span class=\"st0\">\"::ffff:192.168.173.22\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"co1\">// ipv6 space with port</span><br/>\t\tparser.<span class=\"me1\">parse</span><span class=\"br0\">(</span><span class=\"st0\">\"[::ffff:192.168.173.22]:80\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"co1\">// trailing compression</span><br/>\t\tparser.<span class=\"me1\">parse</span><span class=\"br0\">(</span><span class=\"st0\">\"1::\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"co1\">// trailing compression with port</span><br/>\t\tparser.<span class=\"me1\">parse</span><span class=\"br0\">(</span><span class=\"st0\">\"[1::]:80\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"co1\">// 'any' address compression</span><br/>\t\tparser.<span class=\"me1\">parse</span><span class=\"br0\">(</span><span class=\"st0\">\"::\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"co1\">// 'any' address compression with port</span><br/>\t\tparser.<span class=\"me1\">parse</span><span class=\"br0\">(</span><span class=\"st0\">\"[::]:80\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 36, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>const testdata = [\"127.0.0.1\", \"127.0.0.1:80\", \"::1\", \"[::1]:80\",<br/>                  \"2605:2700:0:3::4713:93e3\", \"[2605:2700:0:3::4713:93e3]:80\",<br/>                  \"::ffff:192.168.173.22\", \"[::ffff:192.168.173.22]:80\",<br/>                  \"1::\", \"[1::]:80\", \"::\", \"[::]:80\"]<br/>\u00a0<br/>maybev4(ip) = search(ip, '.') &gt; 0 &amp;&amp; length(matchall(r\":\", ip)) &lt; 2<br/>maybev6(ip) = length(matchall(r\":\", ip)) &gt; 1<br/>\u00a0<br/>function parseip(ip)<br/>    if (mat = match(r\"^\\[([:.\\da-fA-F]+)\\]:(\\d+)$\", ip))!= nothing ||<br/>       (mat = match(r\"^([\\d.]+)[:/](\\d+)$\", ip))\u00a0!= nothing<br/>        port = mat.captures[2]<br/>        ip = mat.captures[1]<br/>    else<br/>        port = \"none\"<br/>    end<br/>    if maybev4(ip)<br/>        println(\"Processing ip v4 $ip\")<br/>        iphex = hex(Int(Base.IPv4(ip)))<br/>        addresspace = \"IPv4\"<br/>    elseif maybev6(ip)<br/>        println(\"Processing ip v6 $ip\")<br/>        iphex = hex(UInt128(Base.IPv6(ip)))<br/>        addresspace = \"IPv6\"<br/>    else<br/>        throw(\"Bad IP address argument $ip\")<br/>    end<br/>    iphex, addresspace, port<br/>end<br/>\u00a0<br/>for ip in testdata<br/>    hx, add, por = parseip(ip)<br/>    println(\"For input $ip, IP in hex is $hx, address space $add, port $por.\")<br/>end<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 118, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.3</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">math</span>.<span class=\"me1\">BigInteger</span><br/>\u00a0<br/>enum <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> AddressSpace <span class=\"br0\">{</span> IPv4, IPv6, Invalid <span class=\"br0\">}</span><br/>\u00a0<br/>data <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> IPAddressComponents<span class=\"br0\">(</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> address<span class=\"sy0\">:</span> BigInteger,<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> addressSpace<span class=\"sy0\">:</span> AddressSpace,<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> port<span class=\"sy0\">:</span> Int  <span class=\"co1\">// -1 denotes 'not specified'</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> INVALID <span class=\"sy0\">=</span> IPAddressComponents<span class=\"br0\">(</span>BigInteger.<span class=\"me1\">ZERO</span>, AddressSpace.<span class=\"me1\">Invalid</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun ipAddressParse<span class=\"br0\">(</span>ipAddress<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> IPAddressComponents <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> addressSpace <span class=\"sy0\">=</span> AddressSpace.<span class=\"me1\">IPv4</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> ipa <span class=\"sy0\">=</span> ipAddress.<span class=\"me1\">toLowerCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> port <span class=\"sy0\">=</span> -<span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> trans <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>ipa.<span class=\"me1\">startsWith</span><span class=\"br0\">(</span><span class=\"st0\">\"::ffff:\"</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"st0\">'.'</span> in ipa<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        addressSpace <span class=\"sy0\">=</span> AddressSpace.<span class=\"me1\">IPv6</span><br/>        trans <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>        ipa <span class=\"sy0\">=</span> ipa.<span class=\"me1\">drop</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>ipa.<span class=\"me1\">startsWith</span><span class=\"br0\">(</span><span class=\"st0\">\"[::ffff:\"</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"st0\">'.'</span> in ipa<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        addressSpace <span class=\"sy0\">=</span> AddressSpace.<span class=\"me1\">IPv6</span><br/>        trans <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>        ipa <span class=\"sy0\">=</span> ipa.<span class=\"me1\">drop</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">\"]\"</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> octets <span class=\"sy0\">=</span> ipa.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">'.'</span><span class=\"br0\">)</span>.<span class=\"me1\">reversed</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">toTypedArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> address <span class=\"sy0\">=</span> BigInteger.<span class=\"me1\">ZERO</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>octets.<span class=\"me1\">size</span> <span class=\"sy0\">==</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> split <span class=\"sy0\">=</span> octets<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">':'</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>split.<span class=\"me1\">size</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> temp <span class=\"sy0\">=</span> split<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">toIntOrNull</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>temp <span class=\"sy0\">==</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a> || temp <span class=\"sy0\">!</span>in <span class=\"nu0\">0</span>..<span class=\"nu0\">65535</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> INVALID                <br/>            port <span class=\"sy0\">=</span> temp<br/>            octets<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> split<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> num <span class=\"sy0\">=</span> octets<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">toLongOrNull</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>num <span class=\"sy0\">==</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a> || num <span class=\"sy0\">!</span>in <span class=\"nu0\">0</span>..<span class=\"nu0\">255</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> INVALID<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> bigNum <span class=\"sy0\">=</span> BigInteger.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>num<span class=\"br0\">)</span><br/>            address <span class=\"sy0\">=</span> address.<span class=\"me1\">or</span><span class=\"br0\">(</span>bigNum.<span class=\"me1\">shiftLeft</span><span class=\"br0\">(</span>i <span class=\"sy0\">*</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>trans<span class=\"br0\">)</span> address +<span class=\"sy0\">=</span> BigInteger<span class=\"br0\">(</span><span class=\"st0\">\"ffff00000000\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>octets.<span class=\"me1\">size</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        addressSpace <span class=\"sy0\">=</span> AddressSpace.<span class=\"me1\">IPv6</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>ipa<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'['</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            ipa <span class=\"sy0\">=</span> ipa.<span class=\"me1\">drop</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> split <span class=\"sy0\">=</span> ipa.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"]:\"</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>split.<span class=\"me1\">size</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> INVALID<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> temp <span class=\"sy0\">=</span> split<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">toIntOrNull</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>temp <span class=\"sy0\">==</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a> || temp <span class=\"sy0\">!</span>in <span class=\"nu0\">0</span>..<span class=\"nu0\">65535</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> INVALID<br/>            port <span class=\"sy0\">=</span> temp<br/>            ipa <span class=\"sy0\">=</span> ipa.<span class=\"me1\">dropLast</span><span class=\"br0\">(</span><span class=\"nu0\">2</span> + split<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> hextets <span class=\"sy0\">=</span> ipa.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">':'</span><span class=\"br0\">)</span>.<span class=\"me1\">reversed</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">toMutableList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> len <span class=\"sy0\">=</span> hextets.<span class=\"me1\">size</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>ipa.<span class=\"me1\">startsWith</span><span class=\"br0\">(</span><span class=\"st0\">\"::\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>            hextets<span class=\"br0\">[</span>len - <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"0\"</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>ipa.<span class=\"me1\">endsWith</span><span class=\"br0\">(</span><span class=\"st0\">\"::\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>            hextets<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"0\"</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>ipa <span class=\"sy0\">==</span> <span class=\"st0\">\"::\"</span><span class=\"br0\">)</span> hextets<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"0\"</span>        <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>len <span class=\"sy0\">&gt;</span> <span class=\"nu0\">8</span> || <span class=\"br0\">(</span>len <span class=\"sy0\">==</span> <span class=\"nu0\">8</span> <span class=\"sy0\">&amp;&amp;</span> hextets.<span class=\"me1\">any</span> <span class=\"br0\">{</span> it <span class=\"sy0\">==</span> <span class=\"st0\">\"\"</span> <span class=\"br0\">}</span><span class=\"br0\">)</span> || hextets.<span class=\"me1\">count</span> <span class=\"br0\">{</span> it <span class=\"sy0\">==</span> <span class=\"st0\">\"\"</span> <span class=\"br0\">}</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> INVALID<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>len <span class=\"sy0\">&lt;</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> insertions <span class=\"sy0\">=</span> <span class=\"nu0\">8</span> - len            <br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>hextets<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    hextets<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"0\"</span><br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>insertions-- <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> hextets.<span class=\"me1\">add</span><span class=\"br0\">(</span>i, <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span> <br/>                    break <br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span> <br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span>..<span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> num <span class=\"sy0\">=</span> hextets<span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">toLongOrNull</span><span class=\"br0\">(</span><span class=\"nu0\">16</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>num <span class=\"sy0\">==</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a> || num <span class=\"sy0\">!</span>in 0x0..0xFFFF<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> INVALID<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> bigNum <span class=\"sy0\">=</span> BigInteger.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>num<span class=\"br0\">)</span><br/>            address <span class=\"sy0\">=</span> address.<span class=\"me1\">or</span><span class=\"br0\">(</span>bigNum.<span class=\"me1\">shiftLeft</span><span class=\"br0\">(</span>j <span class=\"sy0\">*</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span>   <br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> INVALID<br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> IPAddressComponents<span class=\"br0\">(</span>address, addressSpace, port<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ipas <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><br/>        <span class=\"st0\">\"127.0.0.1\"</span>,<br/>\t\t<span class=\"st0\">\"127.0.0.1:80\"</span>,<br/>\t\t<span class=\"st0\">\"::1\"</span>,<br/>\t\t<span class=\"st0\">\"[::1]:80\"</span>,<br/>\t\t<span class=\"st0\">\"2605:2700:0:3::4713:93e3\"</span>,<br/>\t\t<span class=\"st0\">\"[2605:2700:0:3::4713:93e3]:80\"</span>,<br/>        <span class=\"st0\">\"::ffff:192.168.173.22\"</span>,<br/>        <span class=\"st0\">\"[::ffff:192.168.173.22]:80\"</span>,<br/>        <span class=\"st0\">\"1::\"</span>,<br/>        <span class=\"st0\">\"::\"</span>,<br/>        <span class=\"st0\">\"256.0.0.0\"</span>,<br/>        <span class=\"st0\">\"::ffff:127.0.0.0.1\"</span><br/>    <span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>ipa in ipas<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>address, addressSpace, port<span class=\"br0\">)</span> <span class=\"sy0\">=</span> ipAddressParse<span class=\"br0\">(</span>ipa<span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"IP address   \u00a0: $ipa\"</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"Address      \u00a0: ${\"</span><span class=\"sy0\">%</span>X<span class=\"st0\">\".format(address)}\"</span><span class=\"br0\">)</span> <br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"Address Space\u00a0: $addressSpace\"</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"Port         \u00a0: ${if (port == -1) \"</span>not specified<span class=\"st0\">\" else port.toString()}\"</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span> <br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl", "loc": 82, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> parse_v4 <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$ip</span><span class=\"sy0\">,</span> <span class=\"re0\">$port</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">@quad</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a><span class=\"br0\">(</span><span class=\"co2\">/\\./</span><span class=\"sy0\">,</span> <span class=\"re0\">$ip</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"kw1\">unless</span> <span class=\"re0\">@quad</span> <span class=\"sy0\">==</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">@quad</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"co5\">$_</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">255</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a> <span class=\"re0\">$port</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$port</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/>\t<span class=\"kw1\">elsif</span> <span class=\"br0\">(</span><span class=\"re0\">$port</span> <span class=\"sy0\">=~</span> <span class=\"co2\">/^(\\d+)$/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$port</span> <span class=\"sy0\">=</span> <span class=\"co3\">$1</span> <span class=\"br0\">}</span><br/>\t<span class=\"kw1\">else</span> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$h</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st_h\">''</span> <span class=\"sy0\">=&gt;</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/sprintf.html\"><span class=\"kw3\">sprintf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%02x\"</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">@quad</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$h</span><span class=\"sy0\">,</span> <span class=\"re0\">$port</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> parse_v6 <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$ip</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$omits</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"kw1\">unless</span> <span class=\"re0\">$ip</span> <span class=\"sy0\">=~</span> <span class=\"co2\">/^[\\da-f:.]+$/i</span><span class=\"sy0\">;</span> <span class=\"co1\"># invalid char</span><br/>\u00a0<br/>\t<span class=\"re0\">$ip</span> <span class=\"sy0\">=~</span> <span class=\"co2\">s/^:/0:/</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$omits</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">if</span> <span class=\"re0\">$ip</span> <span class=\"sy0\">=~</span> <span class=\"co2\">s/::/:z:/g</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"kw1\">if</span> <span class=\"re0\">$ip</span> <span class=\"sy0\">=~</span> <span class=\"co2\">/z.*z/</span><span class=\"sy0\">;</span>\t<span class=\"co1\"># multiple omits illegal</span><br/>\u00a0<br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$v4</span> <span class=\"sy0\">=</span> <span class=\"st_h\">''</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$len</span> <span class=\"sy0\">=</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$ip</span> <span class=\"sy0\">=~</span> <a href=\"http://perldoc.perl.org/functions/s.html\"><span class=\"kw3\">s</span></a><span class=\"sy0\">/:</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">?:</span><span class=\"re0\">\\d</span><span class=\"sy0\">+</span>\\<span class=\"sy0\">.</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"re0\">\\d</span><span class=\"sy0\">+</span><span class=\"br0\">)</span><span class=\"co5\">$/</span><span class=\"sy0\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"co1\"># hybrid 4/6 ip</span><br/>\t\t<span class=\"br0\">(</span><span class=\"re0\">$v4</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> parse_v4<span class=\"br0\">(</span><span class=\"co3\">$1</span><span class=\"br0\">)</span>\t<span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$len</span> <span class=\"sy0\">-=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"co1\"># what's left should be v6 only</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"kw1\">unless</span> <span class=\"re0\">$ip</span> <span class=\"sy0\">=~</span> <span class=\"co2\">/^[:a-fz\\d]+$/i</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">@h</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a><span class=\"br0\">(</span><span class=\"co2\">/:/</span><span class=\"sy0\">,</span> <span class=\"re0\">$ip</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"kw1\">if</span> <span class=\"re0\">@h</span> <span class=\"sy0\">+</span> <span class=\"re0\">$omits</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$len</span><span class=\"sy0\">;</span>\t<span class=\"co1\"># too many segments</span><br/>\u00a0<br/>\t<span class=\"re0\">@h</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a><span class=\"br0\">(</span> <span class=\"co5\">$_</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">'z'</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> x <span class=\"br0\">(</span><span class=\"re0\">$len</span> <span class=\"sy0\">-</span> <span class=\"re0\">@h</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">@h</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st_h\">''</span> <span class=\"sy0\">=&gt;</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/sprintf.html\"><span class=\"kw3\">sprintf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%04x\"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/hex.html\"><span class=\"kw3\">hex</span></a><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">@h</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"re0\">$v4</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> parse_ip <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$str</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$str</span> <span class=\"sy0\">=~</span> <span class=\"co2\">s/^\\s*//</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$str</span> <span class=\"sy0\">=~</span> <span class=\"co2\">s/\\s*$//</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$str</span> <span class=\"sy0\">=~</span> <a href=\"http://perldoc.perl.org/functions/s.html\"><span class=\"kw3\">s</span></a><span class=\"sy0\">/^</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">?:</span><span class=\"re0\">\\d</span><span class=\"sy0\">+</span>\\<span class=\"sy0\">.</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"re0\">\\d</span><span class=\"sy0\">+</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"sy0\">?::</span><span class=\"br0\">(</span><span class=\"re0\">\\d</span><span class=\"sy0\">+</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">?</span><span class=\"co5\">$/</span><span class=\"sy0\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"st_h\">'v4'</span><span class=\"sy0\">,</span> parse_v4<span class=\"br0\">(</span><span class=\"co3\">$1</span><span class=\"sy0\">,</span> <span class=\"co3\">$2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$ip</span><span class=\"sy0\">,</span> <span class=\"re0\">$port</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$str</span> <span class=\"sy0\">=~</span> <span class=\"co2\">/^\\[(.*?)\\]:(\\d+)$/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$port</span> <span class=\"sy0\">=</span> <span class=\"co3\">$2</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$ip</span> <span class=\"sy0\">=</span> parse_v6<span class=\"br0\">(</span><span class=\"co3\">$1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$port</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$ip</span> <span class=\"sy0\">=</span> parse_v6<span class=\"br0\">(</span><span class=\"re0\">$str</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"kw1\">unless</span> <span class=\"re0\">$ip</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"st_h\">'v6'</span><span class=\"sy0\">,</span> <span class=\"re0\">$ip</span><span class=\"sy0\">,</span> <span class=\"re0\">$port</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"sy0\">/</span>127<span class=\"sy0\">.</span>0<span class=\"sy0\">.</span>0<span class=\"sy0\">.</span>1 127<span class=\"sy0\">.</span>0<span class=\"sy0\">.</span>0<span class=\"sy0\">.</span>1<span class=\"sy0\">:</span><span class=\"nu0\">80</span><br/>\t<span class=\"sy0\">::</span><span class=\"nu0\">1</span><br/>\t<span class=\"br0\">[</span><span class=\"sy0\">::</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">:</span><span class=\"nu0\">80</span><br/>\t<span class=\"nu0\">2605</span><span class=\"sy0\">:</span><span class=\"nu0\">2700</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span><span class=\"nu0\">3</span><span class=\"sy0\">::</span><span class=\"nu0\">4713</span><span class=\"sy0\">:</span>93e3<br/>\t<span class=\"br0\">[</span><span class=\"nu0\">2605</span><span class=\"sy0\">:</span><span class=\"nu0\">2700</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span><span class=\"nu0\">3</span><span class=\"sy0\">::</span><span class=\"nu0\">4713</span><span class=\"sy0\">:</span>93e3<span class=\"br0\">]</span><span class=\"sy0\">:</span><span class=\"nu0\">80</span><br/>\t<span class=\"sy0\">::</span><span class=\"me2\">ffff</span><span class=\"sy0\">:</span>192<span class=\"sy0\">.</span>168<span class=\"sy0\">.</span>0<span class=\"sy0\">.</span>1<br/>\t<span class=\"br0\">[</span><span class=\"sy0\">::</span><span class=\"me2\">ffff</span><span class=\"sy0\">:</span>192<span class=\"sy0\">.</span>168<span class=\"sy0\">.</span>0<span class=\"sy0\">.</span>1<span class=\"br0\">]</span><span class=\"sy0\">:</span><span class=\"nu0\">22</span><br/>\t<span class=\"sy0\">::</span><span class=\"me2\">ffff</span><span class=\"sy0\">:</span>127<span class=\"sy0\">.</span>0<span class=\"sy0\">.</span>0<span class=\"sy0\">.</span>0<span class=\"sy0\">.</span>1<br/>\ta<span class=\"sy0\">::</span><span class=\"me2\">b</span><span class=\"sy0\">::</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$_<span class=\"es0\">\\n</span><span class=\"es0\">\\t</span>\"</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$ver</span><span class=\"sy0\">,</span> <span class=\"re0\">$ip</span><span class=\"sy0\">,</span> <span class=\"re0\">$port</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> parse_ip<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"parse error<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">and</span> <span class=\"kw1\">next</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$ver $ip<span class=\"es0\">\\t</span>port $port<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 84, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">grammar</span> IP_Addr <span class=\"br0\">{</span><br/>    <span class=\"kw2\">token</span> TOP <span class=\"br0\">{</span> <span class=\"sy0\">^</span> <span class=\"br0\">[</span> <span class=\"sy0\">&lt;</span>IPv4<span class=\"sy0\">&gt;</span> <span class=\"sy0\">|</span> <span class=\"sy0\">&lt;</span>IPv6<span class=\"sy0\">&gt;</span> <span class=\"br0\">]</span> $ <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">token</span> IPv4 <span class=\"br0\">{</span><br/>        <span class=\"br0\">[</span> <span class=\"sy0\">&lt;</span>d8<span class=\"sy0\">&gt;</span> <span class=\"sy0\">+%</span> <span class=\"st_h\">'.'</span> <span class=\"br0\">]</span> <span class=\"sy0\">&lt;?</span><span class=\"br0\">{</span> <span class=\"re0\">$&lt;d8</span><span class=\"sy0\">&gt;</span> <span class=\"sy0\">==</span> <span class=\"nu0\">4</span> <span class=\"br0\">}</span><span class=\"sy0\">&gt;</span> <span class=\"sy0\">&lt;</span>port<span class=\"sy0\">&gt;?</span><br/>                <span class=\"br0\">{</span> <span class=\"re0\">@*by8</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"re0\">$&lt;d8</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">token</span> IPv6 <span class=\"br0\">{</span><br/>        <span class=\"sy0\">|</span>     <span class=\"sy0\">&lt;</span>ipv6<span class=\"sy0\">&gt;</span><br/>        <span class=\"sy0\">|</span> <span class=\"st_h\">'['</span> <span class=\"sy0\">&lt;</span>ipv6<span class=\"sy0\">&gt;</span> <span class=\"st_h\">']'</span> <span class=\"sy0\">&lt;</span>port<span class=\"sy0\">&gt;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">token</span> ipv6 <span class=\"br0\">{</span><br/>        <span class=\"sy0\">|</span> <span class=\"sy0\">&lt;</span>h16<span class=\"sy0\">&gt;</span> <span class=\"sy0\">+%</span> <span class=\"st_h\">':'</span> <span class=\"sy0\">&lt;?</span><span class=\"br0\">{</span> <span class=\"re0\">$&lt;h16</span><span class=\"sy0\">&gt;</span> <span class=\"sy0\">==</span> <span class=\"nu0\">8</span> <span class=\"br0\">}</span><span class=\"sy0\">&gt;</span><br/>                <span class=\"br0\">{</span> <span class=\"re0\">@*by16</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"re0\">$&lt;h16</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"sy0\">|</span> <span class=\"br0\">[</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span>h16<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"sy0\">+%</span> <span class=\"st_h\">':'</span><span class=\"br0\">]</span><span class=\"sy0\">?</span> <span class=\"st_h\">'::'</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span>h16<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"sy0\">+%</span> <span class=\"st_h\">':'</span> <span class=\"sy0\">&lt;?</span><span class=\"br0\">{</span> <span class=\"sy0\">@</span><span class=\"co3\">$0</span> <span class=\"sy0\">+</span> <span class=\"sy0\">@</span><span class=\"co3\">$1</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">8</span> <span class=\"br0\">}</span><span class=\"sy0\">&gt;</span><br/>                <span class=\"br0\">{</span> <span class=\"re0\">@*by16</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"co3\">$0</span><span class=\"sy0\">,</span> <span class=\"st_h\">'0'</span> <span class=\"kw1\">xx</span> <span class=\"nu0\">8</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"co3\">$0</span> <span class=\"sy0\">+</span> <span class=\"sy0\">@</span><span class=\"co3\">$1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">@</span><span class=\"co3\">$1</span> <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"sy0\">|</span> <span class=\"st_h\">'::ffff:'</span> <span class=\"sy0\">&lt;</span>IPv4<span class=\"sy0\">&gt;</span> <br/>                <span class=\"br0\">{</span> <span class=\"re0\">@*by16</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'0'</span> <span class=\"kw1\">xx</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"st_h\">'ffff'</span><span class=\"sy0\">,</span> by8to16 <span class=\"re0\">@*by8</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">token</span> d8  <span class=\"br0\">{</span> <span class=\"br0\">(</span>\\d<span class=\"sy0\">+</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;?</span><span class=\"br0\">{</span> <span class=\"co3\">$0</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">256</span>   <span class=\"br0\">}</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">token</span> d16 <span class=\"br0\">{</span> <span class=\"br0\">(</span>\\d<span class=\"sy0\">+</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;?</span><span class=\"br0\">{</span> <span class=\"co3\">$0</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">65536</span> <span class=\"br0\">}</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">token</span> h16 <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;:</span>hexdigit<span class=\"sy0\">&gt;+</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;?</span><span class=\"br0\">{</span> <span class=\"sy0\">@</span><span class=\"co3\">$0</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">4</span> <span class=\"br0\">}</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">token</span> port <span class=\"br0\">{</span><br/>        <span class=\"st_h\">':'</span> <span class=\"sy0\">&lt;</span>d16<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span> <span class=\"re0\">$*port</span> <span class=\"sy0\">=</span> <span class=\"sy0\">+</span><span class=\"re0\">$&lt;d16</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> by8to16 <span class=\"br0\">(</span><span class=\"re0\">@m</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> gather <span class=\"kw1\">for</span> <span class=\"re0\">@m</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$a</span><span class=\"sy0\">,</span><span class=\"re0\">$b</span> <span class=\"br0\">{</span> take <span class=\"br0\">(</span><span class=\"re0\">$a</span> <span class=\"sy0\">*</span> <span class=\"nu0\">256</span> <span class=\"sy0\">+</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">fmt</span><span class=\"br0\">(</span><span class=\"st0\">\"%04x\"</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@cases</span> <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span><br/>    127<span class=\"sy0\">.</span>0<span class=\"sy0\">.</span>0<span class=\"sy0\">.</span>1<br/>    127<span class=\"sy0\">.</span>0<span class=\"sy0\">.</span>0<span class=\"sy0\">.</span>1<span class=\"sy0\">:</span><span class=\"nu0\">80</span><br/>    <span class=\"sy0\">::</span><span class=\"nu0\">1</span><br/>    <span class=\"br0\">[</span><span class=\"sy0\">::</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">:</span><span class=\"nu0\">80</span><br/>    <span class=\"nu0\">2605</span><span class=\"sy0\">:</span><span class=\"nu0\">2700</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span><span class=\"nu0\">3</span><span class=\"sy0\">::</span><span class=\"nu0\">4713</span><span class=\"sy0\">:</span>93e3<br/>    <span class=\"br0\">[</span><span class=\"nu0\">2605</span><span class=\"sy0\">:</span><span class=\"nu0\">2700</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span><span class=\"nu0\">3</span><span class=\"sy0\">::</span><span class=\"nu0\">4713</span><span class=\"sy0\">:</span>93e3<span class=\"br0\">]</span><span class=\"sy0\">:</span><span class=\"nu0\">80</span><br/>    <span class=\"nu0\">2001</span><span class=\"sy0\">:</span>db8<span class=\"sy0\">:</span>85a3<span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span>8a2e<span class=\"sy0\">:</span><span class=\"nu0\">370</span><span class=\"sy0\">:</span><span class=\"nu0\">7334</span><br/>    <span class=\"nu0\">2001</span><span class=\"sy0\">:</span>db8<span class=\"sy0\">:</span>85a3<span class=\"sy0\">::</span>8a2e<span class=\"sy0\">:</span><span class=\"nu0\">370</span><span class=\"sy0\">:</span><span class=\"nu0\">7334</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">2001</span><span class=\"sy0\">:</span>db8<span class=\"sy0\">:</span>85a3<span class=\"sy0\">:</span>8d3<span class=\"sy0\">:</span><span class=\"nu0\">1319</span><span class=\"sy0\">:</span>8a2e<span class=\"sy0\">:</span><span class=\"nu0\">370</span><span class=\"sy0\">:</span><span class=\"nu0\">7348</span><span class=\"br0\">]</span><span class=\"sy0\">:</span><span class=\"nu0\">443</span><br/>    192<span class=\"sy0\">.</span>168<span class=\"sy0\">.</span>0<span class=\"sy0\">.</span>1<br/>    <span class=\"sy0\">::</span><span class=\"me2\">ffff</span><span class=\"sy0\">:</span>192<span class=\"sy0\">.</span>168<span class=\"sy0\">.</span>0<span class=\"sy0\">.</span>1<br/>    <span class=\"sy0\">::</span><span class=\"me2\">ffff</span><span class=\"sy0\">:</span>71<span class=\"sy0\">.</span>19<span class=\"sy0\">.</span>147<span class=\"sy0\">.</span>227<br/>    <span class=\"br0\">[</span><span class=\"sy0\">::</span><span class=\"me2\">ffff</span><span class=\"sy0\">:</span>71<span class=\"sy0\">.</span>19<span class=\"sy0\">.</span>147<span class=\"sy0\">.</span>227<span class=\"br0\">]</span><span class=\"sy0\">:</span><span class=\"nu0\">80</span><br/>    <span class=\"sy0\">::</span><br/>    256<span class=\"sy0\">.</span>0<span class=\"sy0\">.</span>0<span class=\"sy0\">.</span>0<br/>    g<span class=\"sy0\">::</span><span class=\"nu0\">1</span><br/>    0000<br/>    0000<span class=\"sy0\">:</span>0000<br/>    0000<span class=\"sy0\">:</span>0000<span class=\"sy0\">:</span>0000<span class=\"sy0\">:</span>0000<span class=\"sy0\">:</span>0000<span class=\"sy0\">:</span>0000<span class=\"sy0\">:</span>0000<span class=\"sy0\">:</span>0000<br/>    0000<span class=\"sy0\">:</span>0000<span class=\"sy0\">:</span>0000<span class=\"sy0\">::</span>0000<span class=\"sy0\">:</span>0000<br/>    0000<span class=\"sy0\">::</span>0000<span class=\"sy0\">::</span>0000<span class=\"sy0\">:</span>0000<br/>    ffff<span class=\"sy0\">:</span>ffff<span class=\"sy0\">:</span>ffff<span class=\"sy0\">:</span>ffff<span class=\"sy0\">:</span>ffff<span class=\"sy0\">:</span>ffff<span class=\"sy0\">:</span>ffff<span class=\"sy0\">:</span>ffff<br/>    ffff<span class=\"sy0\">:</span>ffff<span class=\"sy0\">:</span>ffff<span class=\"sy0\">:</span>fffg<span class=\"sy0\">:</span>ffff<span class=\"sy0\">:</span>ffff<span class=\"sy0\">:</span>ffff<span class=\"sy0\">:</span>ffff<br/>    fff<span class=\"sy0\">:</span>ffff<span class=\"sy0\">:</span>ffff<span class=\"sy0\">:</span>ffff<span class=\"sy0\">:</span>ffff<span class=\"sy0\">:</span>ffff<span class=\"sy0\">:</span>ffff<span class=\"sy0\">:</span>ffff<br/>    fff<span class=\"sy0\">:</span>ffff<span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span>ffff<span class=\"sy0\">:</span>ffff<span class=\"sy0\">:</span>ffff<span class=\"sy0\">:</span>ffff<span class=\"sy0\">:</span>ffff<br/><span class=\"sy0\">&gt;;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"re0\">@cases</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$addr</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@*by8</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@*by16</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$*port</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    IP_Addr<span class=\"sy0\">.</span><span class=\"me1\">parse</span><span class=\"br0\">(</span><span class=\"re0\">$addr</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw3\">say</span> <span class=\"re0\">$addr</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"re0\">@*by16</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">say</span> <span class=\"st0\">\"  IPv6: \"</span><span class=\"sy0\">,</span> <span class=\"re0\">@*by16</span>\u00bb<span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"sy0\">:</span><span class=\"nu0\">16</span><span class=\"br0\">(</span><span class=\"sy0\">~</span><span class=\"re0\">$_</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">)</span>\u00bb<span class=\"sy0\">.</span><span class=\"kw3\">fmt</span><span class=\"br0\">(</span><span class=\"st0\">\"%04x\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"sy0\">;</span><br/>        <span class=\"kw3\">say</span> <span class=\"st0\">\"  Port: \"</span><span class=\"sy0\">,</span> <span class=\"re0\">$*port</span> <span class=\"kw1\">if</span> <span class=\"re0\">$*port</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">elsif</span> <span class=\"re0\">@*by8</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">say</span> <span class=\"st0\">\"  IPv4: \"</span><span class=\"sy0\">,</span> <span class=\"re0\">@*by8</span>\u00bb<span class=\"sy0\">.</span><span class=\"kw3\">fmt</span><span class=\"br0\">(</span><span class=\"st0\">\"%02x\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"sy0\">;</span><br/>        <span class=\"kw3\">say</span> <span class=\"st0\">\"  Port: \"</span><span class=\"sy0\">,</span> <span class=\"re0\">$*port</span> <span class=\"kw1\">if</span> <span class=\"re0\">$*port</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">say</span> <span class=\"st0\">\"  BOGUS!\"</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw3\">say</span> <span class=\"st_h\">''</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PicoLisp", "loc": 32, "block": "<pre class=\"text highlighted_source\"># Return a cons pair of address and port: (address . port)<br/>(de ipAddress (Adr)<br/>   (use (@A @B @C @D @Port)<br/>      (cond<br/>         ((match '(\"[\" @A \"]\" \":\" @Port) Adr)<br/>            (adrIPv6 (split @A \":\") @Port) )<br/>         ((match '(\"[\" @A \"]\") Adr)<br/>            (adrIPv6 (split @A \":\")) )<br/>         ((match '(@A \":\" @B \":\" @C) Adr)<br/>            (adrIPv6 (cons @A @B (split @C \":\"))) )<br/>         ((match '(@A \".\" @B \".\" @C \".\" @D \":\" @Port) Adr)<br/>            (adrIPv4 (list @A @B @C @D) @Port) )<br/>         ((match '(@A \".\" @B \".\" @C \".\" @D) Adr)<br/>            (adrIPv4 (list @A @B @C @D)) )<br/>         (T (quit \"Bad IP address\" (pack Adr))) ) ) )<br/>\u00a0<br/>(de adrIPv4 (Lst Port)<br/>   (cons<br/>      (sum &gt;&gt; (-24 -16 -8 0) (mapcar format Lst))<br/>      (format Port) ) )<br/>\u00a0<br/>(de adrIPv6 (Lst Port)<br/>   (cons<br/>      (sum &gt;&gt;<br/>         (-112 -96 -80 -64 -48 -32 -16 0)<br/>         (mapcan<br/>            '((X)<br/>               (if X<br/>                  (cons (hex X))<br/>                  (need (- 9 (length Lst)) 0) ) )  # Handle '::'<br/>            (cons (or (car Lst) \"0\") (cdr Lst)) ) )<br/>      (format Port) ) )</pre>"}, {"lang": "PL/I", "loc": 277, "block": "<pre class=\"pli highlighted_source\"><span class=\"sy0\">*</span>process or<span class=\"br0\">(</span>!<span class=\"br0\">)</span> source xref attributes macro <span class=\"kw1\">options</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/*********************************************************************<br/> * Program to parse an IP address into --&gt;   IPv4 or IPv6 format<br/> * 28.05.2013 Walter Pachl translated from REXX version 3<br/> *                         x2d was the hard part\u00a0:-)<br/> *********************************************************************/</span><br/> ip<span class=\"sy0\">:</span> <span class=\"kw1\">proc</span> <span class=\"kw1\">options</span><span class=\"br0\">(</span><span class=\"kw1\">main</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> ipa   <span class=\"kw1\">char</span><span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> ipi   <span class=\"kw1\">char</span><span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> ipax  <span class=\"kw1\">char</span><span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> ipad  <span class=\"kw1\">char</span><span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> space <span class=\"kw1\">char</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> port  <span class=\"kw1\">char</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">dcl</span> head <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">132</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/> head<span class=\"sy0\">=</span><span class=\"st0\">'       input IP address                 hex IP address   '</span>!!<br/>      <span class=\"st0\">'                 decimal IP address            space  port'</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span>head<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span>copies<span class=\"br0\">(</span><span class=\"st0\">'_'</span><span class=\"sy0\">,</span><span class=\"nu0\">30</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>          copies<span class=\"br0\">(</span><span class=\"st0\">'_'</span><span class=\"sy0\">,</span><span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>          copies<span class=\"br0\">(</span><span class=\"st0\">'_'</span><span class=\"sy0\">,</span><span class=\"nu0\">39</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>          copies<span class=\"br0\">(</span><span class=\"st0\">'_'</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>          copies<span class=\"br0\">(</span><span class=\"st0\">'_'</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span>x<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/> <span class=\"kw1\">call</span> expand<span class=\"br0\">(</span><span class=\"st0\">'127.0.0.1'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">call</span> expand<span class=\"br0\">(</span><span class=\"st0\">'127.0.0.1:80'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">call</span> expand<span class=\"br0\">(</span><span class=\"st0\">'2605:2700:0:3::4713:93e3'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">call</span> expand<span class=\"br0\">(</span><span class=\"st0\">'[2605:2700:0:3::4713:93e3]:80'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">call</span> expand<span class=\"br0\">(</span><span class=\"st0\">'::1'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">call</span> expand<span class=\"br0\">(</span><span class=\"st0\">'[::1]:80'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/> expand<span class=\"sy0\">:</span> <span class=\"kw1\">procedure</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> s <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/> ipi<span class=\"sy0\">=</span>s<span class=\"sy0\">;</span><br/> ipa<span class=\"sy0\">=</span>s<span class=\"sy0\">;</span><br/> <span class=\"kw1\">If</span> <span class=\"kw1\">index</span><span class=\"br0\">(</span>ipa<span class=\"sy0\">,</span><span class=\"st0\">'.'</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>   <span class=\"kw1\">Call</span> expand_ipv4<span class=\"sy0\">;</span><br/> <span class=\"kw1\">Else</span><br/>   <span class=\"kw1\">Call</span> expand_ipv6<span class=\"sy0\">;</span><br/> ipad<span class=\"sy0\">=</span>x2d<span class=\"br0\">(</span>ipax<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span><span class=\"kw1\">left</span><span class=\"br0\">(</span>ipi<span class=\"sy0\">,</span><span class=\"nu0\">30</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw1\">right</span><span class=\"br0\">(</span>ipax<span class=\"sy0\">,</span><span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw1\">right</span><span class=\"br0\">(</span>ipad<span class=\"sy0\">,</span><span class=\"nu0\">39</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>          <span class=\"kw1\">right</span><span class=\"br0\">(</span>space<span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw1\">right</span><span class=\"br0\">(</span>port<span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span>x<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> expand_ipv4<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> a<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>pp<span class=\"sy0\">,</span>j<span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> space<span class=\"sy0\">=</span><span class=\"st0\">'IPv4'</span><span class=\"sy0\">;</span><br/> pp<span class=\"sy0\">=</span><span class=\"kw1\">index</span><span class=\"br0\">(</span>ipa<span class=\"sy0\">,</span><span class=\"st0\">':'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">If</span> pp<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/>   port<span class=\"sy0\">=</span><span class=\"kw1\">substr</span><span class=\"br0\">(</span>ipa<span class=\"sy0\">,</span>pp<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   ipa<span class=\"sy0\">=</span><span class=\"kw1\">left</span><span class=\"br0\">(</span>ipa<span class=\"sy0\">,</span>pp<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Else</span><br/>   Port<span class=\"sy0\">=</span><span class=\"st0\">''</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Call</span> parse<span class=\"br0\">(</span><span class=\"br0\">(</span>ipa<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">'.'</span><span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> ipax<span class=\"sy0\">=</span><span class=\"st0\">''</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">do</span> j<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>   ipax<span class=\"sy0\">=</span>ipax!!a<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> expand_ipv6<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> a<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>s<span class=\"sy0\">,</span>o1<span class=\"sy0\">,</span>o2<span class=\"br0\">)</span> <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span>ii<span class=\"sy0\">,</span>pp<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span>n<span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> space<span class=\"sy0\">=</span><span class=\"st0\">'IPv6'</span><span class=\"sy0\">;</span><br/> pp<span class=\"sy0\">=</span><span class=\"kw1\">index</span><span class=\"br0\">(</span>ipa<span class=\"sy0\">,</span><span class=\"st0\">']:'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">If</span> pp<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/>   port<span class=\"sy0\">=</span><span class=\"kw1\">substr</span><span class=\"br0\">(</span>ipa<span class=\"sy0\">,</span>pp<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   ipa<span class=\"sy0\">=</span><span class=\"kw1\">substr</span><span class=\"br0\">(</span>ipa<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span>pp<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Else</span><br/>   Port<span class=\"sy0\">=</span><span class=\"st0\">''</span><span class=\"sy0\">;</span><br/> s<span class=\"sy0\">=</span>ipa<span class=\"sy0\">;</span><br/> j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">8</span> <span class=\"kw1\">While</span><span class=\"br0\">(</span>s<span class=\"sy0\">&gt;</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   pp<span class=\"sy0\">=</span><span class=\"kw1\">index</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span><span class=\"st0\">':'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">dcl</span> temp <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">If</span> pp<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span> <span class=\"kw1\">Then</span><br/>     temp<span class=\"sy0\">=</span><span class=\"kw1\">left</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span>pp<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Else</span><br/>     temp<span class=\"sy0\">=</span>s<span class=\"sy0\">;</span><br/>   temp<span class=\"sy0\">=</span><span class=\"kw1\">right</span><span class=\"br0\">(</span>temp<span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"st0\">'0'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Select</span><span class=\"br0\">(</span>pp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">When</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/>       a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span>temp<span class=\"sy0\">;</span><br/>       s<span class=\"sy0\">=</span><span class=\"st0\">''</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">When</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/>       a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">'----'</span><span class=\"sy0\">;</span><br/>       ii<span class=\"sy0\">=</span>i<span class=\"sy0\">;</span><br/>       s<span class=\"sy0\">=</span><span class=\"kw1\">substr</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span>pp<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">If</span> <span class=\"kw1\">left</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">':'</span> <span class=\"kw1\">Then</span><br/>         s<span class=\"sy0\">=</span><span class=\"kw1\">substr</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">Otherwise</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/>       a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span>temp<span class=\"sy0\">;</span><br/>       s<span class=\"sy0\">=</span><span class=\"kw1\">substr</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span>pp<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> n<span class=\"sy0\">=</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/> o1<span class=\"sy0\">=</span><span class=\"st0\">''</span><span class=\"sy0\">;</span><br/> o2<span class=\"sy0\">=</span><span class=\"st0\">''</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">If</span> i<span class=\"sy0\">=</span>ii <span class=\"kw1\">Then</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/>     o1<span class=\"sy0\">=</span>o1!!<span class=\"st0\">'----'</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">Do</span> j<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">9</span><span class=\"sy0\">-</span>n<span class=\"sy0\">;</span><br/>       o2<span class=\"sy0\">=</span>o2!!<span class=\"st0\">'0000'</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Else</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/>     o1<span class=\"sy0\">=</span>o1!!<span class=\"kw1\">right</span><span class=\"br0\">(</span>a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"st0\">'0'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     o2<span class=\"sy0\">=</span>o2!!<span class=\"kw1\">right</span><span class=\"br0\">(</span>a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"st0\">'0'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>  ipax<span class=\"sy0\">=</span>o2<span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> parse<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span>c<span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> s <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> c <span class=\"kw1\">Char</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> a<span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span>p<span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> a<span class=\"sy0\">=</span><span class=\"st0\">''</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">By</span> <span class=\"nu0\">1</span> <span class=\"kw1\">While</span><span class=\"br0\">(</span><span class=\"kw1\">length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   p<span class=\"sy0\">=</span><span class=\"kw1\">index</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">If</span> p<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/>     a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">left</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span>p<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     s<span class=\"sy0\">=</span><span class=\"kw1\">substr</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span>p<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Else</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/>     a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span>s<span class=\"sy0\">;</span><br/>     s<span class=\"sy0\">=</span><span class=\"st0\">''</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> <span class=\"coMULTI\">/*<br/> underscore: Proc(s) Returns(char(132) Var);<br/> Dcl s Char(*);<br/> Dcl r Char(length(s)) Var Init('');<br/> Dcl i Bin Fixed(31);<br/> Dcl us Bit(1) Init('0'b);<br/> Do i=1 To length(s)-1;<br/>   If substr(s,i,1)&gt;' ' Then Do;<br/>     r=r!!'_';<br/>     us='1'b;<br/>     End;<br/>   Else Do;<br/>     If substr(s,i+1,1)&gt;' ' &amp; us Then<br/>       r=r!!'_';<br/>     Else Do;<br/>       r=r!!' ';<br/>       us='0'b;<br/>       End;<br/>     End;<br/>   End;<br/> If substr(s,length(s),1)&gt;' ' Then<br/>   r=r!!'_';<br/> Return(r);<br/> End;<br/>\u00a0<br/> center: Proc(s,l) Returns(char(50) Var);<br/> Dcl s char(50) Var;<br/> Dcl (l,b) Bin Fixed(31);<br/> b=(l-length(s))/2;<br/> Return(left(copies(' ',b)!!s,l));<br/> End;<br/> */</span><br/> copies<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"br0\">(</span>c<span class=\"sy0\">,</span>n<span class=\"br0\">)</span> <span class=\"kw1\">Returns</span><span class=\"br0\">(</span><span class=\"kw1\">char</span><span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> c <span class=\"kw1\">char</span><span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> n <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Return</span><span class=\"br0\">(</span><span class=\"kw1\">repeat</span><span class=\"br0\">(</span>c<span class=\"sy0\">,</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/> c2d<span class=\"sy0\">:</span> <span class=\"kw1\">Procedure</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw1\">Returns</span><span class=\"br0\">(</span><span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> s <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> d <span class=\"kw1\">Pic</span><span class=\"st0\">'99'</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>v<span class=\"sy0\">,</span>part<span class=\"sy0\">,</span>result<span class=\"sy0\">,</span>old<span class=\"br0\">)</span> <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> i <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> result<span class=\"sy0\">=</span><span class=\"st0\">'0'</span><span class=\"sy0\">;</span><br/> v<span class=\"sy0\">=</span><span class=\"st0\">'1'</span><span class=\"sy0\">;</span><br/>\u00a0<br/> <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"kw1\">length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw1\">To</span> <span class=\"nu0\">1</span> <span class=\"kw1\">By</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   d<span class=\"sy0\">=</span>c2d<span class=\"br0\">(</span><span class=\"kw1\">substr</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   part<span class=\"sy0\">=</span>longmult<span class=\"br0\">(</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   result<span class=\"sy0\">=</span>longadd<span class=\"br0\">(</span><span class=\"br0\">(</span>result<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span>part<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   v<span class=\"sy0\">=</span>longmult<span class=\"br0\">(</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">'16'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> <span class=\"kw1\">While</span><span class=\"br0\">(</span><span class=\"kw1\">left</span><span class=\"br0\">(</span>result<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">'0'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   result<span class=\"sy0\">=</span><span class=\"kw1\">substr</span><span class=\"br0\">(</span>result<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Return</span><span class=\"br0\">(</span>result<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/*<br/> dbg: Proc(txt);<br/> Dcl txt Char(*);<br/> Put Skip list(txt);<br/> End;<br/> */</span><br/> x2d<span class=\"sy0\">:</span> <span class=\"kw1\">Procedure</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"kw1\">Returns</span><span class=\"br0\">(</span><span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> c <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> res <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Select</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">When</span><span class=\"br0\">(</span><span class=\"st0\">'a'</span><span class=\"sy0\">,</span><span class=\"st0\">'A'</span><span class=\"br0\">)</span> res<span class=\"sy0\">=</span><span class=\"st0\">'10'</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">When</span><span class=\"br0\">(</span><span class=\"st0\">'b'</span><span class=\"sy0\">,</span><span class=\"st0\">'B'</span><span class=\"br0\">)</span> res<span class=\"sy0\">=</span><span class=\"st0\">'11'</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">When</span><span class=\"br0\">(</span><span class=\"st0\">'c'</span><span class=\"sy0\">,</span><span class=\"st0\">'C'</span><span class=\"br0\">)</span> res<span class=\"sy0\">=</span><span class=\"st0\">'12'</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">When</span><span class=\"br0\">(</span><span class=\"st0\">'d'</span><span class=\"sy0\">,</span><span class=\"st0\">'D'</span><span class=\"br0\">)</span> res<span class=\"sy0\">=</span><span class=\"st0\">'13'</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">When</span><span class=\"br0\">(</span><span class=\"st0\">'e'</span><span class=\"sy0\">,</span><span class=\"st0\">'E'</span><span class=\"br0\">)</span> res<span class=\"sy0\">=</span><span class=\"st0\">'14'</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">When</span><span class=\"br0\">(</span><span class=\"st0\">'f'</span><span class=\"sy0\">,</span><span class=\"st0\">'F'</span><span class=\"br0\">)</span> res<span class=\"sy0\">=</span><span class=\"st0\">'15'</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Otherwise</span> res<span class=\"sy0\">=</span><span class=\"st0\">'0'</span>!!c<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Return</span><span class=\"br0\">(</span>res<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> longmult<span class=\"sy0\">:</span> <span class=\"kw1\">Procedure</span><span class=\"br0\">(</span>as<span class=\"sy0\">,</span>bs<span class=\"br0\">)</span> <span class=\"kw1\">Returns</span><span class=\"br0\">(</span><span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/* REXX **************************************************************<br/> * Multiply(as,bs) -&gt; as*bs<br/> *********************************************************************/</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>as<span class=\"sy0\">,</span>bs<span class=\"br0\">)</span> <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>b<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>r<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">Pic</span><span class=\"st0\">'9'</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>p<span class=\"sy0\">,</span>s<span class=\"br0\">)</span> <span class=\"kw1\">Pic</span><span class=\"st0\">'99'</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>al<span class=\"sy0\">,</span>bl<span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span>ai<span class=\"sy0\">,</span>bi<span class=\"sy0\">,</span>ri<span class=\"sy0\">,</span>rim<span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> res <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"st0\">'0'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> al<span class=\"sy0\">=</span><span class=\"kw1\">length</span><span class=\"br0\">(</span>as<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">Do</span> ai<span class=\"sy0\">=</span>al <span class=\"kw1\">To</span> <span class=\"nu0\">1</span> <span class=\"kw1\">By</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> a<span class=\"br0\">(</span>ai<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">substr</span><span class=\"br0\">(</span>as<span class=\"sy0\">,</span>al<span class=\"sy0\">-</span>ai<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> bl<span class=\"sy0\">=</span><span class=\"kw1\">length</span><span class=\"br0\">(</span>bs<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">Do</span> bi<span class=\"sy0\">=</span>bl <span class=\"kw1\">To</span> <span class=\"nu0\">1</span> <span class=\"kw1\">By</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> b<span class=\"br0\">(</span>bi<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">substr</span><span class=\"br0\">(</span>bs<span class=\"sy0\">,</span>bl<span class=\"sy0\">-</span>bi<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> r<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/> rim<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> bi<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> bl<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Do</span> ai<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> al<span class=\"sy0\">;</span><br/>     ri<span class=\"sy0\">=</span>ai<span class=\"sy0\">+</span>bi<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>     p<span class=\"sy0\">=</span>a<span class=\"br0\">(</span>ai<span class=\"br0\">)</span><span class=\"sy0\">*</span>b<span class=\"br0\">(</span>bi<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span>ri <span class=\"kw1\">by</span> <span class=\"nu0\">1</span> <span class=\"kw1\">Until</span><span class=\"br0\">(</span>p<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>       s<span class=\"sy0\">=</span>r<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">+</span>p<span class=\"sy0\">;</span><br/>       r<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">mod</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>       p<span class=\"sy0\">=</span>s<span class=\"sy0\">/</span><span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>     rim<span class=\"sy0\">=</span><span class=\"kw1\">max</span><span class=\"br0\">(</span>rim<span class=\"sy0\">,</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> res<span class=\"sy0\">=</span><span class=\"st0\">''</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> rim<span class=\"sy0\">;</span><br/>   res<span class=\"sy0\">=</span>r<span class=\"br0\">(</span>i<span class=\"br0\">)</span>!!res<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Return</span><span class=\"br0\">(</span>res<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> longadd<span class=\"sy0\">:</span> <span class=\"kw1\">proc</span><span class=\"br0\">(</span>as<span class=\"sy0\">,</span>bs<span class=\"br0\">)</span> <span class=\"kw1\">Returns</span><span class=\"br0\">(</span><span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>as<span class=\"sy0\">,</span>bs<span class=\"br0\">)</span> <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"kw1\">cs</span> <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>al<span class=\"sy0\">,</span>bl<span class=\"sy0\">,</span>cl<span class=\"sy0\">,</span>i<span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> a<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"kw1\">Pic</span><span class=\"st0\">'9'</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> b<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"kw1\">Pic</span><span class=\"st0\">'9'</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> c<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"kw1\">Pic</span><span class=\"st0\">'9'</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> temp <span class=\"kw1\">Pic</span><span class=\"st0\">'99'</span><span class=\"sy0\">;</span><br/> al<span class=\"sy0\">=</span><span class=\"kw1\">length</span><span class=\"br0\">(</span>as<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> bl<span class=\"sy0\">=</span><span class=\"kw1\">length</span><span class=\"br0\">(</span>bs<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> al<span class=\"sy0\">;</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">substr</span><span class=\"br0\">(</span>as<span class=\"sy0\">,</span>al<span class=\"sy0\">-</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> bl<span class=\"sy0\">;</span> b<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">substr</span><span class=\"br0\">(</span>bs<span class=\"sy0\">,</span>bl<span class=\"sy0\">-</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> cl<span class=\"sy0\">=</span><span class=\"kw1\">max</span><span class=\"br0\">(</span>al<span class=\"sy0\">,</span>bl<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> cl<span class=\"sy0\">;</span><br/>   temp<span class=\"sy0\">=</span>a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">+</span>b<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">+</span>c<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   c<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">mod</span><span class=\"br0\">(</span>temp<span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   c<span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>c<span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>temp<span class=\"sy0\">/</span><span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> cl<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">cs</span><span class=\"sy0\">=</span>c<span class=\"br0\">(</span>i<span class=\"br0\">)</span>!!<span class=\"kw1\">cs</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Return</span><span class=\"br0\">(</span><span class=\"kw1\">cs</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> <span class=\"kw1\">end</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PowerShell", "loc": 64, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> Get<span class=\"sy0\">-</span>IpAddress<br/><span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span>CmdletBinding<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">[</span>OutputType<span class=\"br0\">(</span><span class=\"br0\">[</span>PSCustomObject<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"kw3\">Param</span><br/>    <span class=\"br0\">(</span><br/>        <span class=\"br0\">[</span>Parameter<span class=\"br0\">(</span>Mandatory<span class=\"sy0\">=</span><span class=\"re0\">$true</span><span class=\"sy0\">,</span><br/>                   ValueFromPipeline<span class=\"sy0\">=</span><span class=\"re0\">$true</span><span class=\"sy0\">,</span><br/>                   ValueFromPipelineByPropertyName<span class=\"sy0\">=</span><span class=\"re0\">$true</span><span class=\"sy0\">,</span><br/>                   Position<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"re0\">$InputObject</span><br/>    <span class=\"br0\">)</span><br/>\u00a0<br/>    Begin<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw3\">function</span> Get<span class=\"sy0\">-</span>Address <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><span class=\"re0\">$Address</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$Address</span>.IndexOf<span class=\"br0\">(</span><span class=\"st0\">\".\"</span><span class=\"br0\">)</span> <span class=\"kw4\">-ne</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"re0\">$Address</span><span class=\"sy0\">,</span> <span class=\"re0\">$port</span> <span class=\"sy0\">=</span> <span class=\"re0\">$Address</span>.Split<span class=\"br0\">(</span><span class=\"st0\">\":\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>                <span class=\"br0\">[</span>PSCustomObject<span class=\"br0\">]</span><span class=\"sy0\">@</span><span class=\"br0\">{</span><br/>                    IPAddress <span class=\"sy0\">=</span> <span class=\"br0\">[</span>System.Net.IPAddress<span class=\"br0\">]</span><span class=\"re0\">$Address</span><br/>                    Port      <span class=\"sy0\">=</span> <span class=\"re0\">$port</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw3\">else</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$Address</span>.IndexOf<span class=\"br0\">(</span><span class=\"st0\">\"[\"</span><span class=\"br0\">)</span> <span class=\"kw4\">-ne</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    <span class=\"br0\">[</span>PSCustomObject<span class=\"br0\">]</span><span class=\"sy0\">@</span><span class=\"br0\">{</span><br/>                        IPAddress <span class=\"sy0\">=</span> <span class=\"br0\">[</span>System.Net.IPAddress<span class=\"br0\">]</span><span class=\"re0\">$Address</span><br/>                        Port      <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$Address</span>.Split<span class=\"br0\">(</span><span class=\"st0\">\"]\"</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.TrimStart<span class=\"br0\">(</span><span class=\"st0\">\":\"</span><span class=\"br0\">)</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw3\">else</span><br/>                <span class=\"br0\">{</span><br/>                    <span class=\"br0\">[</span>PSCustomObject<span class=\"br0\">]</span><span class=\"sy0\">@</span><span class=\"br0\">{</span><br/>                        IPAddress <span class=\"sy0\">=</span> <span class=\"br0\">[</span>System.Net.IPAddress<span class=\"br0\">]</span><span class=\"re0\">$Address</span><br/>                        Port      <span class=\"sy0\">=</span> <span class=\"re0\">$null</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    Process<br/>    <span class=\"br0\">{</span><br/>        <span class=\"re0\">$InputObject</span> <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$address</span> <span class=\"sy0\">=</span> Get<span class=\"sy0\">-</span>Address <a href=\"about:blank\"><span class=\"kw6\">$_</span></a><br/>            <span class=\"re0\">$bytes</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>System.Net.IPAddress<span class=\"br0\">]</span><span class=\"re0\">$address</span>.IPAddress<span class=\"br0\">)</span>.GetAddressBytes<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">[</span><span class=\"re3\">Array</span><span class=\"br0\">]</span>::Reverse<span class=\"br0\">(</span><span class=\"re0\">$bytes</span><span class=\"br0\">)</span><br/>            <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>            <span class=\"re0\">$bytes</span> <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"kw5\">-Begin</span>   <span class=\"br0\">{</span><span class=\"br0\">[</span>bigint<span class=\"br0\">]</span><span class=\"re0\">$decimalIP</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> `<br/>                                    <span class=\"kw5\">-Process</span> <span class=\"br0\">{</span><span class=\"re0\">$decimalIP</span> <span class=\"sy0\">+=</span> <span class=\"br0\">[</span>bigint<span class=\"br0\">]</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"sy0\">*</span> <span class=\"br0\">[</span>bigint<span class=\"br0\">]</span>::Pow<span class=\"br0\">(</span><span class=\"nu0\">256</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"br0\">)</span>; <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">}</span> `<br/>                                    <span class=\"kw5\">-End</span>     <span class=\"br0\">{</span><span class=\"br0\">[</span>PSCustomObject<span class=\"br0\">]</span><span class=\"sy0\">@</span><span class=\"br0\">{</span><br/>                                                  Address <span class=\"sy0\">=</span> <span class=\"re0\">$address</span>.IPAddress<br/>                                                  Port    <span class=\"sy0\">=</span> <span class=\"re0\">$address</span>.Port<br/>                                                  Hex     <span class=\"sy0\">=</span> <span class=\"st0\">\"0x$($decimalIP.ToString('x'))\"</span><span class=\"br0\">}</span><br/>                                             <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 27, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> ipaddress <span class=\"kw1\">import</span> ip_address<br/><span class=\"kw1\">from</span> <span class=\"kw3\">urllib</span>.<span class=\"me1\">parse</span> <span class=\"kw1\">import</span> <span class=\"kw3\">urlparse</span><br/>\u00a0<br/>tests <span class=\"sy0\">=</span> <span class=\"br0\">[</span><br/>    <span class=\"st0\">\"127.0.0.1\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"127.0.0.1:80\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"::1\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"[::1]:80\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"::192.168.0.1\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"2605:2700:0:3::4713:93e3\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"[2605:2700:0:3::4713:93e3]:80\"</span> <span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">def</span> parse_ip_port<span class=\"br0\">(</span>netloc<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">try</span>:<br/>        ip <span class=\"sy0\">=</span> ip_address<span class=\"br0\">(</span>netloc<span class=\"br0\">)</span><br/>        port <span class=\"sy0\">=</span> <span class=\"kw2\">None</span><br/>    <span class=\"kw1\">except</span> <span class=\"kw2\">ValueError</span>:<br/>        parsed <span class=\"sy0\">=</span> <span class=\"kw3\">urlparse</span><span class=\"br0\">(</span><span class=\"st0\">'//{}'</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>netloc<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        ip <span class=\"sy0\">=</span> ip_address<span class=\"br0\">(</span>parsed.<span class=\"me1\">hostname</span><span class=\"br0\">)</span><br/>        port <span class=\"sy0\">=</span> parsed.<span class=\"me1\">port</span><br/>    <span class=\"kw1\">return</span> ip<span class=\"sy0\">,</span> port<br/>\u00a0<br/><span class=\"kw1\">for</span> address <span class=\"kw1\">in</span> tests:<br/>    ip<span class=\"sy0\">,</span> port <span class=\"sy0\">=</span> parse_ip_port<span class=\"br0\">(</span>address<span class=\"br0\">)</span><br/>    hex_ip <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">4</span>:<span class=\"st0\">'{:08X}'</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span>:<span class=\"st0\">'{:032X}'</span><span class=\"br0\">}</span><span class=\"br0\">[</span>ip.<span class=\"me1\">version</span><span class=\"br0\">]</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"kw2\">int</span><span class=\"br0\">(</span>ip<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"{:39s}  {:&gt;32s}  IPv{}  port={}\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span><br/>        <span class=\"kw2\">str</span><span class=\"br0\">(</span>ip<span class=\"br0\">)</span><span class=\"sy0\">,</span> hex_ip<span class=\"sy0\">,</span> ip.<span class=\"me1\">version</span><span class=\"sy0\">,</span> port <span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 31, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(require net/private/ip)<br/>\u00a0<br/>(define (bytes-&gt;hex bs)<br/>  (string-append* (map (\u03bb(n) (~r n #:base 16 #:min-width 2 #:pad-string \"0\"))<br/>                       (bytes-&gt;list bs))))<br/>\u00a0<br/>(define (parse-ip str)<br/>  (define-values [ipstr portstr]<br/>    (match str<br/>      [(regexp #rx\"^([0-9.]+):([0-9]+)$\" (list _ i p)) (values i p)]<br/>      [(regexp #rx\"^\\\\[([0-9a-fA-F:]+)\\\\]:([0-9]+)$\" (list _ i p)) (values i p)]<br/>      [_ (values str \"\")]))<br/>  (define ip (make-ip-address ipstr))<br/>  (define 4? (ipv4? ip))<br/>  (define hex (bytes-&gt;hex ((if 4? ipv4-bytes ipv6-bytes) ip)))<br/>  (displayln (~a (~a str #:min-width 30)<br/>                 \" \"<br/>                 (~a hex #:min-width 32 #:align 'right)<br/>                 \" ipv\" (if 4? \"4\" \"6\") \" \" portstr)))<br/>\u00a0<br/>(for-each parse-ip<br/>          '(\"127.0.0.1\"<br/>            \"127.0.0.1:80\"<br/>            \"::1\"<br/>            \"[::1]:80\"<br/>            \"2605:2700:0:3::4713:93e3\"<br/>            \"[2605:2700:0:3::4713:93e3]:80\"))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 38, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program parses an  IP address  into  \u2500\u2500\u25ba  IPv4  or  IPv6 format,  optional pport.*/</span><br/>_=<span class=\"st0\">\"_\"</span>;     <span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">'input IP address'</span>   , <span class=\"nu0\">30</span><span class=\"br0\">)</span>,<br/>               <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">'hex IP address'</span>     , <span class=\"nu0\">32</span><span class=\"br0\">)</span>,<br/>               <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">'decimal IP address'</span> , <span class=\"nu0\">39</span><span class=\"br0\">)</span>         <span class=\"st0\">'space  port'</span><br/>           <span class=\"kw1\">say</span> <span class=\"kw6\">copies</span><span class=\"br0\">(</span>_, <span class=\"nu0\">30</span><span class=\"br0\">)</span>   <span class=\"kw6\">copies</span><span class=\"br0\">(</span>_, <span class=\"nu0\">32</span><span class=\"br0\">)</span>   <span class=\"kw6\">copies</span><span class=\"br0\">(</span>_, <span class=\"nu0\">39</span><span class=\"br0\">)</span>   <span class=\"kw6\">copies</span><span class=\"br0\">(</span>_, <span class=\"nu0\">5</span><span class=\"br0\">)</span>   <span class=\"kw6\">copies</span><span class=\"br0\">(</span>_, <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/><span class=\"kw1\">call</span> IP_parse  127<span class=\"sy0\">.</span>0<span class=\"sy0\">.</span>0<span class=\"sy0\">.</span>1                         <span class=\"coMULTI\">/*this simple  IP  doesn't need quotes.*/</span><br/><span class=\"kw1\">call</span> IP_parse <span class=\"st0\">'127.0.0.1:80'</span><br/><span class=\"kw1\">call</span> IP_parse <span class=\"st0\">'::1'</span><br/><span class=\"kw1\">call</span> IP_parse <span class=\"st0\">'[::1]:80'</span><br/><span class=\"kw1\">call</span> IP_parse <span class=\"st0\">'2605:2700:0:3::4713:93e3'</span><br/><span class=\"kw1\">call</span> IP_parse <span class=\"st0\">'[2605:2700:0:3::4713:93e3]:80'</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>IP_parse:  <span class=\"kw1\">procedure</span>;        <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> a <span class=\"sy0\">.</span>;        hx=;       @<span class=\"sy0\">.</span>=;       <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">50</span><br/>           dot=<span class=\"kw6\">pos</span><span class=\"br0\">(</span><span class=\"sy0\">.</span>,a<span class=\"br0\">)</span><span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>                      <span class=\"coMULTI\">/*see if there is a dot present in IP. */</span><br/>\u00a0<br/>           <span class=\"kw1\">if</span> dot <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;   <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span>   a    @<span class=\"sy0\">.</span>1  <span class=\"st0\">'.'</span>  @<span class=\"sy0\">.</span>2  <span class=\"st0\">\".\"</span>  @<span class=\"sy0\">.</span>3  <span class=\"st0\">'.'</span>  @<span class=\"sy0\">.</span>4  <span class=\"st0\">\":\"</span>  port<br/>                                            <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"nu0\">4</span>;    hx=hx <span class=\"sy0\">||</span> <span class=\"kw6\">d2x</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>j, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>                                            <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>                       <span class=\"kw3\">end</span><br/>                  <span class=\"kw3\">else</span> <span class=\"kw1\">do</span>;   <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span>  a  pureA  <span class=\"st0\">']:'</span>  port<br/>                       _=<span class=\"kw6\">space</span><span class=\"br0\">(</span> <span class=\"kw6\">translate</span><span class=\"br0\">(</span> pureA, , <span class=\"st0\">'[]'</span><span class=\"br0\">)</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span>         <span class=\"coMULTI\">/*remove brackets.*/</span><br/>                       <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> _ x <span class=\"st0\">'::'</span> y<br/>                                            <span class=\"kw1\">do</span> L=<span class=\"nu0\">1</span>  <span class=\"kw2\">until</span> x==<span class=\"st0\">''</span>       <span class=\"coMULTI\">/*get  left side. */</span><br/>                                            <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span>  x  @<span class=\"sy0\">.</span>L  <span class=\"st0\">':'</span>  x<br/>                                            <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*L*/</span><br/>                       y=<span class=\"kw6\">reverse</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span><br/>                                            <span class=\"kw1\">do</span> r=<span class=\"nu0\">8</span>  <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span>             <span class=\"coMULTI\">/*get right side. */</span><br/>                                            <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span>  y  z  <span class=\"st0\">':'</span>  y;   <span class=\"kw1\">if</span> z==<span class=\"st0\">''</span> <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span><br/>                                            @<span class=\"sy0\">.</span>r=<span class=\"kw6\">reverse</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span><br/>                                            <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*r*/</span><br/>\u00a0<br/>                            <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"nu0\">8</span>;  hx=hx <span class=\"sy0\">||</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span> <span class=\"kw6\">word</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>k <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                            <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>                       <span class=\"kw3\">end</span><br/>\u00a0<br/>           <span class=\"kw1\">say</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span>a,<span class=\"nu0\">30</span><span class=\"br0\">)</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>hx,<span class=\"nu0\">32</span><span class=\"br0\">)</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"kw6\">x2d</span><span class=\"br0\">(</span>hx<span class=\"br0\">)</span>,<span class=\"nu0\">39</span><span class=\"br0\">)</span> <span class=\"st0\">' IPv'</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span><span class=\"nu0\">6</span>-<span class=\"nu0\">2</span><span class=\"sy0\">*</span>dot<span class=\"br0\">)</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>port,<span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>           <span class=\"kw1\">return</span></pre>"}, {"lang": "Ruby", "loc": 35, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'ipaddr'</span><br/>\u00a0<br/>\u00a0<br/>TESTCASES = <span class=\"br0\">[</span><span class=\"st0\">\"127.0.0.1\"</span>,                <span class=\"st0\">\"127.0.0.1:80\"</span>,<br/>                <span class=\"st0\">\"::1\"</span>,                      <span class=\"st0\">\"[::1]:80\"</span>,<br/>                <span class=\"st0\">\"2605:2700:0:3::4713:93e3\"</span>, <span class=\"st0\">\"[2605:2700:0:3::4713:93e3]:80\"</span><span class=\"br0\">]</span>                            <br/>\u00a0<br/>output = <span class=\"br0\">[</span><span class=\"sy0\">%</span>w<span class=\"br0\">(</span><span class=\"kw3\">String</span> Address Port Family Hex<span class=\"br0\">)</span>,<br/>          <span class=\"sy0\">%</span>w<span class=\"br0\">(</span><span class=\"sy0\">------</span> <span class=\"sy0\">-------</span> <span class=\"sy0\">----</span> <span class=\"sy0\">------</span> <span class=\"sy0\">---</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">def</span> output_table<span class=\"br0\">(</span>rows<span class=\"br0\">)</span><br/>  widths = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  rows.<span class=\"me1\">each</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>row<span class=\"sy0\">|</span> row.<span class=\"me1\">each_with_index</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>col, i<span class=\"sy0\">|</span> widths<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = <span class=\"br0\">[</span>widths<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">to_i</span>, col.<span class=\"me1\">to_s</span>.<span class=\"me1\">length</span><span class=\"br0\">]</span>.<span class=\"me1\">max</span> <span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  <span class=\"kw3\">format</span> = widths.<span class=\"me1\">map</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>size<span class=\"sy0\">|</span> <span class=\"st0\">\"%#{size}s\"</span><span class=\"br0\">}</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span><span class=\"br0\">)</span><br/>  rows.<span class=\"me1\">each</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>row<span class=\"sy0\">|</span> <span class=\"kw3\">puts</span> <span class=\"kw3\">format</span> <span class=\"sy0\">%</span> row<span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>TESTCASES.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>str<span class=\"sy0\">|</span><br/>  <span class=\"kw1\">case</span> str  <span class=\"co1\"># handle port; IPAddr does not.</span><br/>  <span class=\"kw1\">when</span> <span class=\"sy0\">/</span>\\A\\<span class=\"br0\">[</span><span class=\"br0\">(</span>?<span class=\"sy0\">&lt;</span>address<span class=\"sy0\">&gt;</span> .<span class=\"sy0\">*</span> <span class=\"br0\">)</span>\\<span class=\"br0\">]</span>:<span class=\"br0\">(</span>?<span class=\"sy0\">&lt;</span>port<span class=\"sy0\">&gt;</span> \\d<span class=\"sy0\">+</span> <span class=\"br0\">)</span>\\z<span class=\"sy0\">/</span>x      <span class=\"co1\"># string like \"[::1]:80\"</span><br/>    address, port = $~<span class=\"br0\">[</span><span class=\"re3\">:address</span><span class=\"br0\">]</span>, $~<span class=\"br0\">[</span><span class=\"re3\">:port</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">when</span> <span class=\"sy0\">/</span>\\A<span class=\"br0\">(</span>?<span class=\"sy0\">&lt;</span>address<span class=\"sy0\">&gt;</span> <span class=\"br0\">[</span>^:<span class=\"br0\">]</span><span class=\"sy0\">+</span> <span class=\"br0\">)</span>:<span class=\"br0\">(</span>?<span class=\"sy0\">&lt;</span>port<span class=\"sy0\">&gt;</span> \\d<span class=\"sy0\">+</span> <span class=\"br0\">)</span>\\z<span class=\"sy0\">/</span>x       <span class=\"co1\"># string like \"127.0.0.1:80\"</span><br/>    address, port = $~<span class=\"br0\">[</span><span class=\"re3\">:address</span><span class=\"br0\">]</span>, $~<span class=\"br0\">[</span><span class=\"re3\">:port</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">else</span>                                                 <span class=\"co1\"># string with no port number</span><br/>    address, port = str, <span class=\"kw2\">nil</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  ip_addr = IPAddr.<span class=\"me1\">new</span><span class=\"br0\">(</span>address<span class=\"br0\">)</span> <br/>  family = <span class=\"st0\">\"IPv4\"</span> <span class=\"kw1\">if</span> ip_addr.<span class=\"me1\">ipv4</span>?<br/>  family = <span class=\"st0\">\"IPv6\"</span> <span class=\"kw1\">if</span> ip_addr.<span class=\"me1\">ipv6</span>?<br/>\u00a0<br/>  output <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">[</span>str, ip_addr.<span class=\"me1\">to_s</span>, port.<span class=\"me1\">to_s</span>, family, ip_addr.<span class=\"me1\">to_i</span>.<span class=\"me1\">to_s</span><span class=\"br0\">(</span><span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>output_table<span class=\"br0\">(</span>output<span class=\"br0\">)</span></pre>"}, {"lang": "Scala", "loc": 296, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> IPparser <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/*<br/>  Parse an IP (v4/v6) Address<br/>\u00a0<br/>  This software can parse all ipv4/ipv6 address text representations<br/>  of IP Address in common usage against the IEF RFC 5952 specification.<br/>\u00a0<br/>  The results of the parse are:<br/>  - The parts of the text are valid representations. This is indicated in the list by a \u2714 or \u2718.<br/>  - The intended version; 4 or 6.<br/>  - Compliance with RFC 5952 in respect with double colons Compressed zeroes expansion ('::') and lower case letters.<br/>  - Hexadecimal representation of the intended IP address.<br/>  - If part in the text the port number which is optional.<br/>  - The used text string search pattern.<br/>\u00a0<br/>  As much of the information is produced if there are invalid parts in the remark field.<br/>  */</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> myCases <span class=\"sy0\">=</span> Map<span class=\"br0\">(</span><br/>    <span class=\"st0\">\"http:\"</span>                                      -<span class=\"sy0\">&gt;</span> IPInvalidAddressComponents<span class=\"br0\">(</span>remark <span class=\"sy0\">=</span> <span class=\"st0\">\"No match at all: 'http:'.\"</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"http://\"</span>                                    -<span class=\"sy0\">&gt;</span> IPInvalidAddressComponents<span class=\"br0\">(</span>remark <span class=\"sy0\">=</span> <span class=\"st0\">\"No match at all: 'http://'.\"</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"http:// \"</span>                                   -<span class=\"sy0\">&gt;</span> IPInvalidAddressComponents<span class=\"br0\">(</span>remark <span class=\"sy0\">=</span> <span class=\"st0\">\"No match at all: 'http:// '.\"</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"http://127.0.0.1/\"</span>                          -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">4</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"7F000001\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"http://127.0.0.1:80/\"</span>                       -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">4</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"7F000001\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, Some<span class=\"br0\">(</span><span class=\"nu0\">80</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"http://127.0.0.1:65536\"</span> -<span class=\"sy0\">&gt;</span><br/>      IPInvalidAddressComponents<span class=\"br0\">(</span><span class=\"nu0\">4</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"7F000001\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, Some<span class=\"br0\">(</span><span class=\"nu0\">65536</span><span class=\"br0\">)</span>, remark <span class=\"sy0\">=</span> <span class=\"st0\">\"Port number out of range.\"</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"http://192.168.0.1\"</span>                         -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">4</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"C0A80001\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"http:/1::\"</span>                                  -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"10000000000000000000000000000\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"http:/2001:0db8:0:0:0:0:1428:57ab/\"</span>         -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"20010db80000000000000000142857ab\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"2001:0db8:0:0:8d3:0:0:0\"</span>                    -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"20010db80000000008d3000000000000\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"2001:db8:0:0:8d3::\"</span>                         -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"20010db80000000008d3000000000000\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"http:/2001:db8:3:4::192.0.2.33\"</span>                   -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"20010db80003000400000000c0000221\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"2001:db8:85a3:0:0:8a2e:370:7334\"</span>            -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"20010db885a3000000008a2e03707334\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"2001:db8::1428:57ab\"</span>                        -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"20010db80000000000000000142857ab\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"2001:db8::8d3:0:0:0\"</span>                        -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"20010db80000000008d3000000000000\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"256.0.0.0\"</span>                                  -<span class=\"sy0\">&gt;</span> IPInvalidAddressComponents<span class=\"br0\">(</span><span class=\"nu0\">4</span>, remark <span class=\"sy0\">=</span> <span class=\"st0\">\"Invalid octets.\"</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"2605:2700:0:3::4713:93e3\"</span>                   -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"260527000000000300000000471393e3\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"::\"</span>                                         -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"00000000000000000000000000000000\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"1::8\"</span>                                       -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"00010000000000000000000000000008\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"::1\"</span>                                        -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"00000000000000000000000000000001\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"::192.168.0.1\"</span>                              -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"000000000000000000000000c0a80001\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"::255.255.255.255\"</span>                          -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"000000000000000000000000ffffffff\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"http:/[::255.255.255.255]:65536\"</span> -<span class=\"sy0\">&gt;</span><br/>      IPInvalidAddressComponents<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"000000000000000000000000ffffffff\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, Some<span class=\"br0\">(</span><span class=\"nu0\">65536</span><span class=\"br0\">)</span>, remark <span class=\"sy0\">=</span> <span class=\"st0\">\"Port number out of range.\"</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"::2:3:4:5:6:7:8\"</span>                            -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"00000002000300040005000600070008\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, strictRFC5952 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"::8\"</span>                                        -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"00000000000000000000000000000008\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"::c0a8:1\"</span>                                   -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"000000000000000000000000c0a80001\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"::ffff:0:255.255.255.255\"</span>                   -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"0000000000000000ffff0000ffffffff\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"::ffff:127.0.0.0.1\"</span>                         -<span class=\"sy0\">&gt;</span> IPInvalidAddressComponents<span class=\"br0\">(</span><span class=\"nu0\">4</span>, remark <span class=\"sy0\">=</span> <span class=\"st0\">\"Address puntation error: ':127.0.0.0.1'.\"</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"::ffff:127.0.0.1\"</span>                           -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"00000000000000000000ffff7f000001\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"::ffff:192.168.0.1\"</span>                         -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"00000000000000000000ffffc0a80001\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"::ffff:192.168.173.22\"</span>                      -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"00000000000000000000ffffc0a8ad16\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"::ffff:255.255.255.255\"</span>                     -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"00000000000000000000ffffffffffff\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"::ffff:71.19.147.227\"</span>                       -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"00000000000000000000ffff471393e3\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"1:2:3:4:5:6:7::\"</span>                            -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"00010002000300040005000600070000\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, strictRFC5952 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"8000:2:3:4:5:6:7::\"</span>                         -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"80000002000300040005000600070000\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, strictRFC5952 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"1:2:3:4:5:6::8\"</span>                             -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"00010002000300040005000600000008\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, strictRFC5952 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"1:2:3:4:5::8\"</span>                               -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"00010002000300040005000000000008\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"1::7:8\"</span>                                     -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"00010000000000000000000000070008\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"a::b::1\"</span>                                    -<span class=\"sy0\">&gt;</span> IPInvalidAddressComponents<span class=\"br0\">(</span>remark <span class=\"sy0\">=</span> <span class=\"st0\">\"Noise found: 'a::b::1'.\"</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"fff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\"</span>     -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"0fffffffffffffffffffffffffffffff\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"FFFF:ffff:ffff:ffff:ffff:ffff:ffff:ffff\"</span>    -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"ffffffffffffffffffffffffffffffff\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, strictRFC5952 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"ffff:ffff:ffff:fffg:ffff:ffff:ffff:ffff\"</span>    -<span class=\"sy0\">&gt;</span> IPInvalidAddressComponents<span class=\"br0\">(</span>remark <span class=\"sy0\">=</span> <span class=\"st0\">\"No match at all: 'ffff:ffff:ffff:fffg\u2026'.\"</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"g::1\"</span>                                       -<span class=\"sy0\">&gt;</span> IPInvalidAddressComponents<span class=\"br0\">(</span><span class=\"nu0\">6</span>, remark <span class=\"sy0\">=</span><span class=\"st0\">\"Invalid input 'g::1'.\"</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"[g::1]:192.0.2.33\"</span>                          -<span class=\"sy0\">&gt;</span> IPInvalidAddressComponents<span class=\"br0\">(</span><span class=\"nu0\">4</span>, remark <span class=\"sy0\">=</span> <span class=\"st0\">\"Address puntation error: ':192.0.2.33'.\"</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"1:2:3:4:5:6:7:8\"</span>                            -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"00010002000300040005000600070008\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"1:2:3:4:5::7:8\"</span>                             -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"00010002000300040005000000070008\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, strictRFC5952 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"1:2:3:4::6:7:8\"</span>                             -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"00010002000300040000000600070008\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, strictRFC5952 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"1:2:3:4::8\"</span>                                 -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"00010002000300040000000000000008\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"1:2:3::5:6:7:8\"</span>                             -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"00010002000300000005000600070008\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, strictRFC5952 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"1:2:3::8\"</span>                                   -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"00010002000300000000000000000008\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"1:2::4:5:6:7:8\"</span>                             -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"00010002000000040005000600070008\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, strictRFC5952 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"1:2::8\"</span>                                     -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"00010002000000000000000000000008\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"1::3:4:5:6:7:8\"</span>                             -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"00010000000300040005000600070008\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, strictRFC5952 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"1::4:5:6:7:8\"</span>                               -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"00010000000000040005000600070008\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"1::5:6:7:8\"</span>                                 -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"00010000000000000005000600070008\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"[1::6:7:8]\"</span>                                 -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"0010000000000000000000600070008\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\"</span>    -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"ffffffffffffffffffffffffffffffff\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"64:ff9b::192.0.2.33\"</span>                        -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"0064ff9b0000000000000000c0000221\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"64:ff9b::256.0.2.33\"</span> -<span class=\"sy0\">&gt;</span><br/>      IPInvalidAddressComponents<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"0064ff9b000000000000000000000000\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, remark <span class=\"sy0\">=</span> <span class=\"st0\">\"Invalid octets.\"</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"[2001:db8:85a3:8d3:1319:8a2e:370:7348]:443\"</span> -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"20010db885a308d313198a2e03707348\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, Some<span class=\"br0\">(</span><span class=\"nu0\">443</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"[2001:db8:85a3:8d3:1319:8a2e:370:7348]:100000\"</span> -<span class=\"sy0\">&gt;</span><br/>      IPInvalidAddressComponents<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"20010db885a308d313198a2e03707348\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, Some<span class=\"br0\">(</span><span class=\"nu0\">100000</span><span class=\"br0\">)</span>, remark <span class=\"sy0\">=</span> <span class=\"st0\">\"Port number out of range.\"</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"[2605:2700:0:3::4713:93e3]:80\"</span>              -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"260527000000000300000000471393e3\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, Some<span class=\"br0\">(</span><span class=\"nu0\">80</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"[::ffff:192.168.0.1]:22\"</span>                    -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"00000000000000000000ffffc0a80001\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, Some<span class=\"br0\">(</span><span class=\"nu0\">22</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"[::ffff:192.168.173.22]:80\"</span>                 -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"00000000000000000000ffffc0a8ad16\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, Some<span class=\"br0\">(</span><span class=\"nu0\">80</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"[::ffff:71.19.147.227]:80\"</span>                  -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"00000000000000000000FFFF471393E3\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, Some<span class=\"br0\">(</span><span class=\"nu0\">80</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"2001:0DB8:0:0:0:0:1428:57AB\"</span>                -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"20010DB80000000000000000142857AB\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, strictRFC5952 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"2001:0DB8:0:0:8D3:0:0:0\"</span>                    -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"20010DB80000000008D3000000000000\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, strictRFC5952 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"2001:DB8:0:0:8D3::\"</span>                         -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"20010DB80000000008D3000000000000\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, strictRFC5952 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"2001:DB8:3:4::192.0.2.33\"</span>                   -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"20010DB80003000400000000C0000221\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, strictRFC5952 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"2001:DB8:85A3:0:0:8A2E:370:7334\"</span>            -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"20010DB885A3000000008A2E03707334\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, strictRFC5952 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"2001:DB8::1428:57AB\"</span>                        -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"20010DB80000000000000000142857AB\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, strictRFC5952 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"2001:DB8::8D3:0:0:0\"</span>                        -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"20010DB80000000008D3000000000000\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, strictRFC5952 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"2605:2700:0:3::4713:93E3\"</span>                   -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"260527000000000300000000471393E3\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, strictRFC5952 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"::192.168.0.1\"</span>                              -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"000000000000000000000000C0A80001\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"::255.255.255.255\"</span>                          -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"000000000000000000000000FFFFFFFF\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"::C0A8:1\"</span>                                   -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"000000000000000000000000c0a80001\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, strictRFC5952 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"::FFFF:0:255.255.255.255\"</span>                   -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"0000000000000000FFFF0000FFFFFFFF\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, strictRFC5952 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"::FFFF:127.0.0.0.1\"</span>                         -<span class=\"sy0\">&gt;</span> IPInvalidAddressComponents<span class=\"br0\">(</span><span class=\"nu0\">4</span>, remark <span class=\"sy0\">=</span> <span class=\"st0\">\"Address puntation error: ':127.0.0.0.1'.\"</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"::FFFF:127.0.0.1\"</span>                           -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"00000000000000000000FFFF7F000001\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, strictRFC5952 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"::FFFF:192.168.0.1\"</span>                         -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"00000000000000000000FFFFC0A80001\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, strictRFC5952 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"::FFFF:192.168.173.22\"</span>                      -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"00000000000000000000FFFFC0A8AD16\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, strictRFC5952 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"::FFFF:255.255.255.255\"</span>                     -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"00000000000000000000FFFFFFFFFFFF\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, strictRFC5952 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"::FFFF:71.19.147.227\"</span>                       -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"00000000000000000000FFFF471393E3\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, strictRFC5952 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"[1::]:80\"</span>                                   -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"00010000000000000000000000000000\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, Some<span class=\"br0\">(</span><span class=\"nu0\">80</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"[2001:DB8:85A3:8D3:1319:8A2E:370:7348]:443\"</span> -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"20010db885a308d313198a2e03707348\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, Some<span class=\"br0\">(</span><span class=\"nu0\">443</span><span class=\"br0\">)</span>, strictRFC5952 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"[2605:2700:0:3::4713:93E3]:80\"</span>              -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"260527000000000300000000471393e3\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, Some<span class=\"br0\">(</span><span class=\"nu0\">80</span><span class=\"br0\">)</span>, strictRFC5952 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"[::1]:80\"</span>                                   -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"00000000000000000000000000000001\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, Some<span class=\"br0\">(</span><span class=\"nu0\">80</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"[::1]:65536\"</span> -<span class=\"sy0\">&gt;</span><br/>      IPInvalidAddressComponents<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"00000000000000000000000000000001\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, Some<span class=\"br0\">(</span><span class=\"nu0\">65536</span><span class=\"br0\">)</span>, remark <span class=\"sy0\">=</span> <span class=\"st0\">\"Port number out of range.\"</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"[::]:80\"</span>                                    -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"00000000000000000000000000000000\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, Some<span class=\"br0\">(</span><span class=\"nu0\">80</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"[::FFFF:192.168.0.1]:22\"</span>                    -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"00000000000000000000ffffc0a80001\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, Some<span class=\"br0\">(</span><span class=\"nu0\">22</span><span class=\"br0\">)</span>, strictRFC5952 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"[::FFFF:192.168.173.22]:80\"</span>                 -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"00000000000000000000ffffc0a8ad16\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, Some<span class=\"br0\">(</span><span class=\"nu0\">80</span><span class=\"br0\">)</span>, strictRFC5952 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"[::FFFF:71.19.147.227]:80\"</span>                  -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"00000000000000000000ffff471393e3\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, Some<span class=\"br0\">(</span><span class=\"nu0\">80</span><span class=\"br0\">)</span>, strictRFC5952 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"A::B::1\"</span>                                    -<span class=\"sy0\">&gt;</span> IPInvalidAddressComponents<span class=\"br0\">(</span>remark <span class=\"sy0\">=</span> <span class=\"st0\">\"Noise found: 'A::B::1'.\"</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"FFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF\"</span>     -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, strictRFC5952 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF\"</span>    -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, strictRFC5952 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"FFFF:FFFF:FFFF:FFFG:FFFF:FFFF:FFFF:FFFF\"</span>    -<span class=\"sy0\">&gt;</span> IPInvalidAddressComponents<span class=\"br0\">(</span>remark <span class=\"sy0\">=</span> <span class=\"st0\">\"No match at all: 'FFFF:FFFF:FFFF:FFFG\u2026'.\"</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"G::1\"</span>                                       -<span class=\"sy0\">&gt;</span> IPInvalidAddressComponents<span class=\"br0\">(</span><span class=\"nu0\">6</span>, remark <span class=\"sy0\">=</span> <span class=\"st0\">\"Invalid input 'G::1'.\"</span><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"64:FF9B::192.0.2.33\"</span>                        -<span class=\"sy0\">&gt;</span> ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"0064FF9B0000000000000000C0000221\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, strictRFC5952 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span>,<br/>    <span class=\"st0\">\"64:FF9B::256.0.2.33\"</span> -<span class=\"sy0\">&gt;</span> IPInvalidAddressComponents<span class=\"br0\">(</span><span class=\"nu0\">6</span>, BigInt<span class=\"br0\">(</span><span class=\"st0\">\"0064FF9B000000000000000000000000\"</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, remark <span class=\"sy0\">=</span> <span class=\"st0\">\"Invalid octets.\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> IPInvalidAddressComponents<span class=\"br0\">(</span>version<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>,<br/>                                 address<span class=\"sy0\">:</span> BigInt <span class=\"sy0\">=</span> BigInt<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>,<br/>                                 port<span class=\"sy0\">:</span> Option<span class=\"br0\">[</span>Int<span class=\"br0\">]</span> <span class=\"sy0\">=</span> None,<br/>                                 valid<span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a>,<br/>                                 remark<span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span>,<br/>                                 strict<span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span> <span class=\"sy0\">=</span> ResultContainer<span class=\"br0\">(</span>version, address, port, valid, remark, strict<span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> ResultContainer<span class=\"br0\">(</span>version<span class=\"sy0\">:</span> Int,<br/>                             address<span class=\"sy0\">:</span> BigInt,<br/>                             port<span class=\"sy0\">:</span> Option<span class=\"br0\">[</span>Int<span class=\"br0\">]</span> <span class=\"sy0\">=</span> None,<br/>                             valid<span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a>,<br/>                             remark<span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span>,<br/>                             strictRFC5952<span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> IpAddress<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> originalString<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> IpAddress.<span class=\"sy0\">_</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>usedPattern, result<span class=\"sy0\">:</span> ResultContainer<span class=\"br0\">)</span> <span class=\"sy0\">=</span> originalString <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> trapPattern<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>trapPattern, IPInvalidAddressComponents<span class=\"br0\">(</span>remark <span class=\"sy0\">=</span> s<span class=\"st0\">\"Noise found: '${shortener(originalString)}'.\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> allIpV6PortedPatternsCompiled<span class=\"br0\">(</span>adr, port<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> parseIpV6<span class=\"br0\">(</span>adr, Option<span class=\"br0\">(</span>port<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">toInt</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> allIpV6UnspecPortPatternsCompiled<span class=\"br0\">(</span>adr<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> parseIpV6<span class=\"br0\">(</span>adr<span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> ipV4PortSpecCompiled<span class=\"br0\">(</span>adr, port<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>ipV4PortSpecCompiled, parseIpV4<span class=\"br0\">(</span>adr, Option<span class=\"br0\">(</span>port<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">toInt</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"sy0\">_</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><span class=\"st0\">\"Exhausted of all matches.\"</span>, IPInvalidAddressComponents<span class=\"br0\">(</span>remark <span class=\"sy0\">=</span> s<span class=\"st0\">\"No match at all: '${shortener(originalString, 19)}'.\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> toString<span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> hexAddr <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>result.<span class=\"me1\">version</span> <span class=\"sy0\">==</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span> f<span class=\"st0\">\"${result.address}%#034x\"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> f<span class=\"st0\">\"${result.address}%#010x\"</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> validInd <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>result.<span class=\"me1\">valid</span><span class=\"br0\">)</span> <span class=\"st0\">'<span class=\"es3\">\\u2714</span>'</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">'<span class=\"es3\">\\u2718</span>'</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> rfc5952 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>result.<span class=\"me1\">strictRFC5952</span><span class=\"br0\">)</span> <span class=\"st0\">\"comply\"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"broken\"</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> version <span class=\"sy0\">=</span> result.<span class=\"me1\">version</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"nu0\">0</span> <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"  \u00a0?\"</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"nu0\">4</span> <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"IPv4\"</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"nu0\">6</span> <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"IPv6\"</span><br/>      <span class=\"br0\">}</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> surround<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>result.<span class=\"me1\">valid</span><span class=\"br0\">)</span> s<span class=\"st0\">\" $s \"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> s<span class=\"st0\">\"($s)\"</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> port <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>result.<span class=\"me1\">port</span>.<span class=\"me1\">isDefined</span><span class=\"br0\">)</span> surround<span class=\"br0\">(</span>result.<span class=\"me1\">port</span>.<span class=\"me1\">get</span>.<span class=\"me1\">toString</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>result.<span class=\"me1\">valid</span><span class=\"br0\">)</span> <span class=\"st0\">\" \"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"? \"</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> hexAddrField <span class=\"sy0\">=</span> f<span class=\"st0\">\"${if (result.valid || result.address\u00a0!= 0) surround(hexAddr) else \"</span><span class=\"sy0\">?</span> <span class=\"st0\">\"}%36s \"</span><br/>\u00a0<br/>      f<span class=\"st0\">\"${shortener(originalString, 45)}%46s $version $validInd $rfc5952 $hexAddrField $port%8s ${result.remark}%-40s $usedPattern\"</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> shortener<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String, maxlength<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> size <span class=\"sy0\">=</span> s.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      s.<span class=\"me1\">substring</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, math.<span class=\"me1\">min</span><span class=\"br0\">(</span>size, maxlength<span class=\"br0\">)</span><span class=\"br0\">)</span> + <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>size <span class=\"sy0\">&gt;</span> maxlength<span class=\"br0\">)</span> <span class=\"st0\">\"\u2026\"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> parseIpV6<span class=\"br0\">(</span>ipAddress<span class=\"sy0\">:</span> String, port<span class=\"sy0\">:</span> Option<span class=\"br0\">[</span>Int<span class=\"br0\">]</span> <span class=\"sy0\">=</span> None<span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"br0\">(</span>String, ResultContainer<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> colonedStringToBigInt<span class=\"br0\">(</span>colonedString<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"br0\">(</span>BigInt, Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">// Compressed zeroes expansion</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ar <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>colonedString contains <span class=\"st0\">\"::\"</span><span class=\"br0\">)</span> colonedString.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"::\"</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> Array<span class=\"br0\">(</span><span class=\"st0\">\"\"</span>, colonedString<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>left, right<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>ar.<span class=\"me1\">head</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">':'</span><span class=\"br0\">)</span>.<span class=\"me1\">filterNot</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">isEmpty</span><span class=\"br0\">)</span>, ar<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">':'</span><span class=\"br0\">)</span>.<span class=\"me1\">filterNot</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">isEmpty</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sixteenBitExpansions <span class=\"sy0\">=</span> <span class=\"nu0\">8</span> - <span class=\"br0\">(</span>right.<span class=\"me1\">length</span> + left.<span class=\"me1\">length</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span>left ++ Seq.<span class=\"me1\">fill</span><span class=\"br0\">(</span>sixteenBitExpansions<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span> ++ right<span class=\"br0\">)</span><br/>          .<span class=\"me1\">map</span><span class=\"br0\">(</span>BigInt<span class=\"br0\">(</span><span class=\"sy0\">_</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>.<span class=\"me1\">toLong</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>BigInt<span class=\"br0\">(</span><span class=\"sy0\">_</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">reduceLeft</span><span class=\"br0\">(</span><span class=\"br0\">(</span>acc, i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>acc <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span> | i<span class=\"br0\">)</span>,<br/>          sixteenBitExpansions<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> parseEmbeddedV4<span class=\"br0\">(</span>seg<span class=\"sy0\">:</span> String, ip4Seg<span class=\"sy0\">:</span> String, usedRegEx<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"br0\">(</span>String, ResultContainer<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>ip4, ip6Parser, test<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>          <span class=\"br0\">(</span>parseIpV4<span class=\"br0\">(</span>ip4Seg<span class=\"br0\">)</span>, colonedStringToBigInt<span class=\"br0\">(</span>seg.<span class=\"me1\">replaceFirst</span><span class=\"br0\">(</span>ipV4Regex<span class=\"br0\">(</span><span class=\"st0\">\"3\"</span><span class=\"br0\">)</span>, <span class=\"st0\">\"0:0\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, portNumberTest<span class=\"br0\">(</span>port<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"br0\">(</span>usedRegEx, ResultContainer<span class=\"br0\">(</span>originalString, <span class=\"nu0\">6</span>, ip4.<span class=\"me1\">address</span> + ip6Parser.<span class=\"sy0\">_</span>1, port,<br/>          ip4.<span class=\"me1\">valid</span> <span class=\"sy0\">&amp;&amp;</span> test.<span class=\"me1\">isEmpty</span>, ip4.<span class=\"me1\">remark</span> + test, ip4.<span class=\"me1\">valid</span> <span class=\"sy0\">&amp;&amp;</span> test.<span class=\"me1\">isEmpty</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>ipAddress.<span class=\"me1\">forall</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">'A'</span> to <span class=\"st0\">'F'</span><span class=\"br0\">)</span> ++ <span class=\"br0\">(</span><span class=\"st0\">'a'</span> to <span class=\"st0\">'f'</span><span class=\"br0\">)</span> ++ <span class=\"br0\">(</span><span class=\"st0\">'0'</span> to <span class=\"st0\">'9'</span><span class=\"br0\">)</span> ++ Vector<span class=\"br0\">(</span><span class=\"st0\">':'</span>, <span class=\"st0\">'.'</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">contains</span><span class=\"br0\">(</span><span class=\"sy0\">_</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"st0\">\"[^:.[0-9][A-F][a-f]]\"</span>, IPInvalidAddressComponents<span class=\"br0\">(</span><span class=\"nu0\">6</span>, remark <span class=\"sy0\">=</span> s<span class=\"st0\">\"Invalid input '${shortener(ipAddress)}'.\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a><br/>        ipAddress <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> pattern10Compiled<span class=\"br0\">(</span>seg, ip4Seg<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> parseEmbeddedV4<span class=\"br0\">(</span>seg, ip4Seg, pattern10Compiled.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> pattern11Compiled<span class=\"br0\">(</span>seg, ip4Seg<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> parseEmbeddedV4<span class=\"br0\">(</span>seg, ip4Seg, pattern11Compiled.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> ip6PatternsRawCompiled<span class=\"br0\">(</span>seg, <span class=\"sy0\">_*</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>ip6Parser, test<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>colonedStringToBigInt<span class=\"br0\">(</span>seg<span class=\"br0\">)</span>, portNumberTest<span class=\"br0\">(</span>port<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>            <span class=\"br0\">(</span>ip6PatternsRawCompiled.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,<br/>              ResultContainer<span class=\"br0\">(</span>ipAddress, <span class=\"nu0\">6</span>, ip6Parser.<span class=\"sy0\">_</span>1, port,<br/>                valid <span class=\"sy0\">=</span> test.<span class=\"me1\">isEmpty</span>, test, strictRFC5952 <span class=\"sy0\">=</span> ip6Parser.<span class=\"sy0\">_</span>2 <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> test.<span class=\"me1\">isEmpty</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"sy0\">_</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><span class=\"st0\">\"V6 match exhausted.\"</span>, IPInvalidAddressComponents<span class=\"br0\">(</span><span class=\"nu0\">6</span>, remark <span class=\"sy0\">=</span> <span class=\"st0\">\"V6 address puntation error.\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span> <span class=\"co1\">// parseIpV6</span><br/>\u00a0<br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> parseIpV4<span class=\"br0\">(</span>sIP<span class=\"sy0\">:</span> String, port<span class=\"sy0\">:</span> Option<span class=\"br0\">[</span>Int<span class=\"br0\">]</span> <span class=\"sy0\">=</span> None<span class=\"br0\">)</span><span class=\"sy0\">:</span> ResultContainer <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> wordsToNum<span class=\"br0\">(</span>words<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>Long<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Long <span class=\"sy0\">=</span> words.<span class=\"me1\">reduceLeft</span><span class=\"br0\">(</span><span class=\"br0\">(</span>acc, i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>acc <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> | i<span class=\"br0\">)</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>sIP.<span class=\"me1\">head</span>.<span class=\"me1\">isDigit</span> <span class=\"sy0\">&amp;&amp;</span> sIP.<span class=\"me1\">matches</span><span class=\"br0\">(</span>ipV4Regex<span class=\"br0\">(</span><span class=\"st0\">\"3\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> octets <span class=\"sy0\">=</span> sIP.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">'.'</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">toLong</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>octets.<span class=\"me1\">forall</span><span class=\"br0\">(</span><span class=\"sy0\">_</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">256</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> portNumberOK <span class=\"sy0\">=</span> portNumberTest<span class=\"br0\">(</span>port<span class=\"br0\">)</span><br/>          ResultContainer<span class=\"br0\">(</span><span class=\"nu0\">4</span>, BigInt<span class=\"br0\">(</span>wordsToNum<span class=\"br0\">(</span>octets<span class=\"br0\">)</span><span class=\"br0\">)</span>, port, portNumberOK.<span class=\"me1\">isEmpty</span>, portNumberOK, portNumberOK.<span class=\"me1\">isEmpty</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> IPInvalidAddressComponents<span class=\"br0\">(</span><span class=\"nu0\">4</span>, remark <span class=\"sy0\">=</span> <span class=\"st0\">\"Invalid octets.\"</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> IPInvalidAddressComponents<span class=\"br0\">(</span><span class=\"nu0\">4</span>, remark <span class=\"sy0\">=</span> s<span class=\"st0\">\"Address puntation error: '${shortener(sIP)}'.\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> portNumberTest<span class=\"br0\">(</span>port<span class=\"sy0\">:</span> Option<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>port.<span class=\"me1\">isEmpty</span> || port.<span class=\"me1\">get</span> <span class=\"sy0\">&lt;</span> math.<span class=\"me1\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">\"\"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"Port number out of range.\"</span><br/>  <span class=\"br0\">}</span> <span class=\"co1\">// IpAddress</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> IpAddress <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>ip6PatternsRawCompiled, pattern11Compiled<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>ipV6Patterns.<span class=\"me1\">mkString</span><span class=\"br0\">(</span><span class=\"st0\">\"(\"</span>, <span class=\"st0\">\"|\"</span>, <span class=\"st0\">\")\"</span><span class=\"br0\">)</span>.<span class=\"me1\">r</span>, embeddedV4patterns<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">r</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>trapPattern, pattern10Compiled<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"st0\">\".*?(?:(?:<span class=\"es0\">\\w</span>*:{2,}?){2,}?<span class=\"es0\">\\w</span>)|(?:<span class=\"es0\">\\[</span>?)\"</span><span class=\"st0\">\"\"</span>.<span class=\"me1\">r</span>, embeddedV4patterns<span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">head</span>.<span class=\"me1\">r</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> allIpV6PortedPatternsCompiled <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"st0\">\"[^<span class=\"es1\">\\\\</span>.]*?<span class=\"es0\">\\[</span>(\"</span><span class=\"st0\">\"\"</span> + allIpV6 +<span class=\"st0\">\"\"</span><span class=\"st0\">\")<span class=\"es0\">\\]</span>(?::(<span class=\"es0\">\\d</span>{1,6}))?[^<span class=\"es0\">\\.</span>:]*?\"</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span>.<span class=\"me1\">r</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> allIpV6UnspecPortPatternsCompiled <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"st0\">\".*?(\"</span><span class=\"st0\">\"\"</span> + allIpV6 +<span class=\"st0\">\"\"</span><span class=\"st0\">\")[^<span class=\"es0\">\\.</span>:]*?\"</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span>.<span class=\"me1\">r</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ipV4PortSpecCompiled <span class=\"sy0\">=</span> s<span class=\"st0\">\".*?([:.<span class=\"es1\">\\\\</span>]]?${ipV4Regex()})(?::(<span class=\"es1\">\\\\</span>d{1,6}))?.*?\"</span>.<span class=\"me1\">r</span><br/>\u00a0<br/>    <span class=\"co1\">// Make a regex pattern with non-capturing groups by the disabling the capturing group syntax (?:).</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> allIpV6 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>embeddedV4patterns<span class=\"br0\">(</span><span class=\"st0\">\"(?:\"</span><span class=\"br0\">)</span> ++ ipV6Patterns<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>s <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"(?:\"</span> + s.<span class=\"me1\">drop</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">mkString</span><span class=\"br0\">(</span><span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> ipV6Patterns <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> ipV6SegRegWC <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"st0\">\"<span class=\"es0\">\\w</span>{1,4}\"</span><span class=\"st0\">\"\"</span><br/>\u00a0<br/>      Seq<span class=\"br0\">(</span><br/>        s<span class=\"st0\">\"((?::(?:(?::$ipV6SegRegex){1,7}|:)))\"</span>,<br/>        s<span class=\"st0\">\"((?:$ipV6SegRegWC:(?::$ipV6SegRegex){1,6}))\"</span>,<br/>        s<span class=\"st0\">\"((?:$ipV6SegRegex:){1,2}(?::$ipV6SegRegex){1,5})\"</span>,<br/>        s<span class=\"st0\">\"((?:$ipV6SegRegex:){1,3}(?::$ipV6SegRegex){1,4})\"</span>,<br/>        s<span class=\"st0\">\"((?:$ipV6SegRegex:){1,4}(?::$ipV6SegRegex){1,3})\"</span>,<br/>        s<span class=\"st0\">\"((?:$ipV6SegRegex:){1,5}(?::$ipV6SegRegex){1,2})\"</span>,<br/>        s<span class=\"st0\">\"((?:$ipV6SegRegex:){1,6}:$ipV6SegRegex)\"</span>,<br/>        s<span class=\"st0\">\"((?:$ipV6SegRegex:){1,7}:)\"</span>,<br/>        s<span class=\"st0\">\"((?:$ipV6SegRegex:){7}$ipV6SegRegex)\"</span><br/>      <span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> embeddedV4patterns<span class=\"br0\">(</span>nonCapturePrefix<span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> <span class=\"st0\">\"(\"</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>      Seq<span class=\"br0\">(</span>s<span class=\"st0\">\"(::(?:(?:FFFF|ffff)(?::0{1,4}){0,1}:){0,1}$nonCapturePrefix${ipV4Regex(\"</span><span class=\"nu0\">3</span><span class=\"st0\">\")}))\"</span>,<br/>        s<span class=\"st0\">\"((?:$ipV6SegRegex:){1,4}:$nonCapturePrefix${ipV4Regex(\"</span><span class=\"nu0\">3</span><span class=\"st0\">\")}))\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> ipV6SegRegex <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"st0\">\"[<span class=\"es0\">\\d</span>A-Fa-f]{1,4}\"</span><span class=\"st0\">\"\"</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> ipV4Regex<span class=\"br0\">(</span>octets<span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> <span class=\"st0\">\"3,\"</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> s<span class=\"st0\">\"(?:<span class=\"es1\">\\\\</span>d{1,3}<span class=\"es1\">\\\\</span>.){$octets}<span class=\"es1\">\\\\</span>d{1,3}\"</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> ResultContainer <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> apply<span class=\"br0\">(</span>orginalString<span class=\"sy0\">:</span> String, version<span class=\"sy0\">:</span> Int,<br/>              address<span class=\"sy0\">:</span> BigInt, port<span class=\"sy0\">:</span> Option<span class=\"br0\">[</span>Int<span class=\"br0\">]</span>,<br/>              valid<span class=\"sy0\">:</span> Boolean, remark<span class=\"sy0\">:</span> String,<br/>              strictRFC5952<span class=\"sy0\">:</span> Boolean<span class=\"br0\">)</span><span class=\"sy0\">:</span> ResultContainer <span class=\"sy0\">=</span><br/>    <span class=\"co1\">// To comply with strictRFC5952 all alpha character must be lowercase too.</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a> <span class=\"br0\">(</span>version, address, port, valid, remark, strictRFC5952 <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>orginalString.<span class=\"me1\">exists</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">isUpper</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> headline <span class=\"sy0\">=</span> Seq<span class=\"br0\">(</span>f<span class=\"st0\">\"${\"</span>IP addresses to be parsed. <span class=\"st0\">\"}%46s\"</span>, <span class=\"st0\">\"Ver.\"</span>, f<span class=\"st0\">\"${\"</span>S<span class=\"st0\">\"}%1s\"</span>, <span class=\"st0\">\"RFC5952\"</span>,<br/>      f<span class=\"st0\">\"${\"</span>Hexadecimal IP address<span class=\"st0\">\"}%34s\"</span>, f<span class=\"st0\">\"${\"</span>Port <span class=\"st0\">\"}%10s\"</span>, f<span class=\"st0\">\"${\"</span> Remark<span class=\"st0\">\"}%-40s\"</span>, f<span class=\"st0\">\"${\"</span> Effective RegEx<span class=\"st0\">\"}%-40s\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    println<span class=\"br0\">(</span>headline.<span class=\"me1\">mkString</span><span class=\"br0\">(</span><span class=\"st0\">\"|\"</span><span class=\"br0\">)</span> + <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span> + headline.<span class=\"me1\">map</span><span class=\"br0\">(</span>s <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"-\"</span> <span class=\"sy0\">*</span> s.<span class=\"me1\">length</span><span class=\"br0\">)</span>.<span class=\"me1\">mkString</span><span class=\"br0\">(</span><span class=\"st0\">\"+\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cases<span class=\"sy0\">:</span> Set<span class=\"br0\">[</span>IpAddress<span class=\"br0\">]</span> <span class=\"sy0\">=</span> myCases.<span class=\"me1\">keySet</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> IpAddress<span class=\"br0\">(</span><span class=\"sy0\">_</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    println<span class=\"br0\">(</span>cases.<span class=\"me1\">toList</span>.<span class=\"me1\">sortBy</span><span class=\"br0\">(</span>s <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>s.<span class=\"me1\">originalString</span>.<span class=\"me1\">length</span>, s.<span class=\"me1\">originalString</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">mkString</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    logInfo<span class=\"br0\">(</span>s<span class=\"st0\">\"Concluding: ${myCases.size} cases processed, ${cases.count(_.result.valid)} valid \u2714 and ${cases.count(!_.result.valid)} invalid \u2718.\"</span><span class=\"br0\">)</span><br/>    logInfo<span class=\"br0\">(</span><span class=\"st0\">\"Successfully completed without errors.\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> logInfo<span class=\"br0\">(</span>info<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      println<span class=\"br0\">(</span>f<span class=\"st0\">\"[Info][${System.currentTimeMillis() - executionStart}%5d ms]\"</span> + info<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span> <span class=\"co1\">// IPparser cloc.exe\u00a0: 235 loc</span></pre>"}, {"lang": "Tcl", "loc": 39, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/><span class=\"kw2\">package</span> require ip<br/>\u00a0<br/><span class=\"kw1\">proc</span> parseIP <span class=\"br0\">{</span>address<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> result <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> family <span class=\"br0\">[</span>ip::<span class=\"me1\">version</span> <span class=\"re0\">$address</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> port -<span class=\"nu0\">1</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$family</span> == -<span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">regexp</span> <span class=\"br0\">{</span>^\\<span class=\"br0\">[</span><span class=\"br0\">(</span>.<span class=\"sy0\">*</span><span class=\"br0\">)</span>\\<span class=\"br0\">]</span>:<span class=\"br0\">(</span>\\d+<span class=\"br0\">)</span><span class=\"sy0\">$</span><span class=\"br0\">}</span> <span class=\"re0\">$address</span> -<span class=\"sy0\">&gt;</span> address port<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    dict <span class=\"kw1\">set</span> result port <span class=\"re0\">$port</span><br/>\t    <span class=\"kw1\">set</span> family <span class=\"br0\">[</span>ip::<span class=\"me1\">version</span> <span class=\"re0\">$address</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$family</span> <span class=\"sy0\">!</span>= <span class=\"nu0\">6</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> -code <span class=\"kw1\">error</span> <span class=\"st0\">\"bad address\"</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">regexp</span> <span class=\"br0\">{</span>^<span class=\"br0\">(</span>.<span class=\"sy0\">*</span><span class=\"br0\">)</span>:<span class=\"br0\">(</span>\\d+<span class=\"br0\">)</span><span class=\"sy0\">$</span><span class=\"br0\">}</span> <span class=\"re0\">$address</span> -<span class=\"sy0\">&gt;</span> address port<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    dict <span class=\"kw1\">set</span> result port <span class=\"re0\">$port</span><br/>\t    <span class=\"kw1\">set</span> family <span class=\"br0\">[</span>ip::<span class=\"me1\">version</span> <span class=\"re0\">$address</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$family</span> <span class=\"sy0\">!</span>= <span class=\"nu0\">4</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> -code <span class=\"kw1\">error</span> <span class=\"st0\">\"bad address\"</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">return</span> -code <span class=\"kw1\">error</span> <span class=\"st0\">\"bad address\"</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"co1\"># Only possible error in ports is to be too large an integer</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$port</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">65535</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> -code <span class=\"kw1\">error</span> <span class=\"st0\">\"bad port\"</span><br/>    <span class=\"br0\">}</span><br/>    dict <span class=\"kw1\">set</span> result family <span class=\"re0\">$family</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$family</span> == <span class=\"nu0\">4</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"co1\"># IPv4 normalized form is dotted quad, but toInteger helps</span><br/>\tdict <span class=\"kw1\">set</span> result addr <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"sy0\">%</span>x <span class=\"br0\">[</span>ip::<span class=\"me1\">toInteger</span> <span class=\"re0\">$address</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t<span class=\"co1\"># IPv6 normalized form is colin-separated hex</span><br/>\tdict <span class=\"kw1\">set</span> result addr <span class=\"br0\">[</span><span class=\"kw2\">string</span> map <span class=\"br0\">{</span>: <span class=\"st0\">\"\"</span><span class=\"br0\">}</span> <span class=\"br0\">[</span>ip::<span class=\"me1\">normalize</span> <span class=\"re0\">$address</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"co1\"># Return the descriptor dictionary</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$result</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "VBScript", "loc": 87, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Function</span> parse_ip(addr)<br/>\t<span class=\"co1\">'ipv4 pattern<br/></span>\t<span class=\"kw4\">Set</span> ipv4_pattern = <span class=\"kw2\">New</span> RegExp<br/>\tipv4_pattern.Global = <span class=\"kw5\">True</span><br/>\tipv4_pattern.Pattern = <span class=\"st0\">\"(\\d{1,3}\\.){3}\\d{1,3}\"</span><br/>\t<span class=\"co1\">'ipv6 pattern<br/></span>\t<span class=\"kw4\">Set</span> ipv6_pattern = <span class=\"kw2\">New</span> RegExp<br/>\tipv6_pattern.Global = <span class=\"kw5\">True</span><br/>\tipv6_pattern.Pattern = <span class=\"st0\">\"([0-9a-fA-F]{0,4}:){2}[0-9a-fA-F]{0,4}\"</span><br/>\t<span class=\"co1\">'test if address is ipv4<br/></span>\t<span class=\"kw3\">If</span> ipv4_pattern.Test(addr) <span class=\"kw3\">Then</span><br/>\t\tport = Split(addr,<span class=\"st0\">\":\"</span>)<br/>\t\toctet = Split(port(0),<span class=\"st0\">\".\"</span>)<br/>\t\tipv4_hex = <span class=\"st0\">\"\"</span><br/>\t\t<span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(octet)<br/>\t\t\t<span class=\"kw3\">If</span> octet(i) &lt;= 255 <span class=\"kw3\">And</span> octet(i) &gt;= 0 <span class=\"kw3\">Then</span><br/>\t\t\t\tipv4_hex = ipv4_hex &amp; Right(<span class=\"st0\">\"0\"</span> &amp; Hex(octet(i)),2)<br/>\t\t\t<span class=\"kw3\">Else</span><br/>\t\t\t\tipv4_hex = <span class=\"st0\">\"Erroneous Address\"</span><br/>\t\t\t\t<span class=\"kw2\">Exit</span> <span class=\"kw3\">For</span><br/>\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span> <br/>\t\t<span class=\"kw3\">Next</span><br/>\t\tparse_ip = <span class=\"st0\">\"Test Case: \"</span> &amp; addr &amp; vbCrLf &amp;_<br/>\t\t           <span class=\"st0\">\"Address: \"</span> &amp; ipv4_hex &amp; vbCrLf<br/>\t\t<span class=\"kw3\">If</span> <span class=\"kw4\">UBound</span>(port) = 1 <span class=\"kw3\">Then</span><br/>\t\t\t<span class=\"kw3\">If</span> port(1) &lt;= 65535 <span class=\"kw3\">And</span> port(1) &gt;= 0 <span class=\"kw3\">Then</span><br/>\t\t\t\tparse_ip = parse_ip &amp; <span class=\"st0\">\"Port: \"</span> &amp; port(1) &amp; vbCrLf<br/>\t\t\t<span class=\"kw3\">Else</span><br/>\t\t\t\tparse_ip = parse_ip &amp; <span class=\"st0\">\"Port: Invalid\"</span> &amp; vbCrLf<br/>\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"co1\">'test if address is ipv6<br/></span>\t<span class=\"kw3\">If</span> ipv6_pattern.Test(addr) <span class=\"kw3\">Then</span><br/>\t\tparse_ip = <span class=\"st0\">\"Test Case: \"</span> &amp; addr &amp; vbCrLf<br/>\t\tport_v6 = <span class=\"st0\">\"Port: \"</span><br/>\t\tipv6_hex = <span class=\"st0\">\"\"</span><br/>\t\t<span class=\"co1\">'check and extract port information if any<br/></span>\t\t<span class=\"kw3\">If</span> InStr(1,addr,<span class=\"st0\">\"[\"</span>) <span class=\"kw3\">Then</span><br/>\t\t\t<span class=\"co1\">'extract the port<br/></span>\t\t\tport_v6 = port_v6 &amp; Mid(addr,InStrRev(addr,<span class=\"st0\">\"]\"</span>)+2,Len(addr)-Len(Mid(addr,1,InStrRev(addr,<span class=\"st0\">\"]\"</span>)+1)))<br/>\t\t\t<span class=\"co1\">'extract the address<br/></span>\t\t\taddr = Mid(addr,InStrRev(addr,<span class=\"st0\">\"[\"</span>)+1,InStrRev(addr,<span class=\"st0\">\"]\"</span>)-(InStrRev(addr,<span class=\"st0\">\"[\"</span>)+1))<br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\tword = Split(addr,<span class=\"st0\">\":\"</span>)<br/>\t\tword_count = 0<br/>\t\t<span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(word)<br/>\t\t\t<span class=\"kw3\">If</span> word(i) = <span class=\"st0\">\"\"</span> <span class=\"kw3\">Then</span><br/>\t\t\t\t<span class=\"kw3\">If</span> i &lt; <span class=\"kw4\">UBound</span>(word) <span class=\"kw3\">Then</span><br/>\t\t\t\t\t<span class=\"kw3\">If</span> Int((7-(i+1))/2) = 1 <span class=\"kw3\">Then</span><br/>\t\t\t\t\t\tk = 1<br/>\t\t\t\t\t<span class=\"kw3\">ElseIf</span> <span class=\"kw4\">UBound</span>(word) &lt; 6 <span class=\"kw3\">Then</span><br/>\t\t\t\t\t\tk = Int((7-(i+1))/2)<br/>\t\t\t\t\t<span class=\"kw3\">ElseIf</span> <span class=\"kw4\">UBound</span>(word) &gt;= 6 <span class=\"kw3\">Then</span><br/>\t\t\t\t\t\tk = Int((7-(i+1))/2)-1<br/>\t\t\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t\t\t\t<span class=\"kw3\">For</span> j = 0 <span class=\"kw3\">To</span> k<br/>\t\t\t\t\t\tipv6_hex = ipv6_hex &amp; <span class=\"st0\">\"0000\"</span><br/>\t\t\t\t\t\tword_count = word_count + 1<br/>\t\t\t\t\t<span class=\"kw3\">Next</span><br/>\t\t\t\t<span class=\"kw3\">Else</span><br/>\t\t\t\t\t<span class=\"kw3\">For</span> j = 0 <span class=\"kw3\">To</span> (7-word_count)<br/>\t\t\t\t\t\tipv6_hex = ipv6_hex &amp; <span class=\"st0\">\"0000\"</span><br/>\t\t\t\t\t<span class=\"kw3\">Next</span><br/>\t\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t\t<span class=\"kw3\">Else</span><br/>\t\t\t\tipv6_hex = ipv6_hex &amp; Right(<span class=\"st0\">\"0000\"</span> &amp; word(i),4)<br/>\t\t\t\tword_count = word_count + 1<br/>\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t<span class=\"kw3\">Next</span><br/>\t\tparse_ip = parse_ip &amp; <span class=\"st0\">\"Address: \"</span> &amp; ipv6_hex &amp;_<br/>\t\t\t\tvbCrLf &amp; port_v6 &amp; vbCrLf<br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"co1\">'test if the address in invalid<br/></span>\t<span class=\"kw3\">If</span> ipv4_pattern.Test(addr) = <span class=\"kw5\">False</span> <span class=\"kw3\">And</span> ipv6_pattern.Test(addr) = <span class=\"kw5\">False</span> <span class=\"kw3\">Then</span><br/>\t\tparse_ip = <span class=\"st0\">\"Test Case: \"</span> &amp; addr &amp; vbCrLf &amp;_<br/>\t\t           <span class=\"st0\">\"Address: Invalid Address\"</span> &amp; vbCrLf<br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"co1\">'Testing the function<br/></span>ip_arr = Array(<span class=\"st0\">\"127.0.0.1\"</span>,<span class=\"st0\">\"127.0.0.1:80\"</span>,<span class=\"st0\">\"::1\"</span>,_<br/>\t<span class=\"st0\">\"[::1]:80\"</span>,<span class=\"st0\">\"2605:2700:0:3::4713:93e3\"</span>,<span class=\"st0\">\"[2605:2700:0:3::4713:93e3]:80\"</span>,<span class=\"st0\">\"RosettaCode\"</span>)<br/>\u00a0<br/><span class=\"kw3\">For</span> n = 0 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(ip_arr)<br/>\tWScript.StdOut.Write parse_ip(ip_arr(n)) &amp; vbCrLf<br/><span class=\"kw3\">Next</span></pre>"}]}