{"task": "Semiprime", "blocks": [{"lang": "360 Assembly", "loc": 71, "block": "<pre class=\"text highlighted_source\">*        Semiprime                 14/03/2017<br/>SEMIPRIM CSECT<br/>         USING  SEMIPRIM,R13       base register<br/>         B      72(R15)            skip savearea<br/>         DC     17F'0'             savearea<br/>         STM    R14,R12,12(R13)    save previous context<br/>         ST     R13,4(R15)         link backward<br/>         ST     R15,8(R13)         link forward<br/>         LR     R13,R15            set addressability<br/>         LA     R10,PG             pgi=0<br/>         LA     R8,0               m=0         <br/>         L      R6,=F'2'           i=2<br/>       DO WHILE=(C,R6,LE,=F'100')  do i=2 to 100<br/>         ST     R6,N                 n=i<br/>         LA     R9,0                 f=0<br/>         LA     R7,2                 j=2<br/>LOOPJ    EQU    *                    do j=2 while f&lt;2 and j*j&lt;=n<br/>         C      R9,=F'2'               if f&lt;2<br/>         BNL    EXITJ                  then exit do j<br/>         LR     R5,R7                  j<br/>         MR     R4,R7                  *j<br/>         C      R5,N                   if j*j&lt;=n<br/>         BH     EXITJ                  then exit do j<br/>LOOPK    EQU    *                      do while n mod j=0 <br/>         L      R4,N                     n<br/>         SRDA   R4,32                    ~<br/>         DR     R4,R7                    /j<br/>         LTR    R4,R4                    if n mod &lt;&gt;0<br/>         BNZ    EXITK                    then exit do j<br/>         ST     R5,N                     n=n/j<br/>         LA     R9,1(R9)                 f=f+1<br/>         B      LOOPK                  enddo k<br/>EXITK    LA     R7,1(R7)               j++<br/>         B      LOOPJ                enddo j<br/>EXITJ    L      R4,N                 n<br/>       IF C,R4,GT,=F'1' THEN         if n&gt;1 then<br/>         LA     R2,1                   g=1<br/>       ELSE     ,                    else<br/>         LA     R2,0                   g=0<br/>       ENDIF    ,                    endif<br/>         AR     R2,R9                +f<br/>       IF C,R2,EQ,=F'2' THEN         if f+(n&gt;1)=2 then<br/>         XDECO  R6,XDEC                edit i<br/>         MVC    0(5,R10),XDEC+7        output i<br/>         LA     R10,5(R10)             pgi=pgi+10<br/>         LA     R8,1(R8)               m=m+1<br/>         LR     R4,R8                  m<br/>         SRDA   R4,32                  ~<br/>         D      R4,=F'16'              m/16<br/>       IF LTR,R4,Z,R4 THEN             if m mod 16=0 then<br/>         XPRNT  PG,L'PG                  print buffer<br/>         MVC    PG,=CL80' '              clear buffer<br/>         LA     R10,PG                   pgi=0<br/>       ENDIF    ,                      endif<br/>       ENDIF    ,                    endif<br/>         LA     R6,1(R6)             i++<br/>       ENDDO    ,                  enddo i<br/>         XPRNT  PG,L'PG            print buffer<br/>         MVC    PG,=CL80'..... semiprimes'  init buffer<br/>         XDECO  R8,XDEC            edit m<br/>         MVC    PG(5),XDEC+7       output m<br/>         XPRNT  PG,L'PG            print buffer<br/>         L      R13,4(0,R13)       restore previous savearea pointer<br/>         LM     R14,R12,12(R13)    restore previous context<br/>         XR     R15,R15            rc=0<br/>         BR     R14                exit<br/>N        DS     F                  n<br/>PG       DC     CL80' '            buffer<br/>XDEC     DS     CL12               temp<br/>         YREGS<br/>         END    SEMIPRIM</pre>"}, {"lang": "Ada", "loc": 21, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Prime_Numbers, Ada.<span class=\"me1\">Text_IO</span>; <br/>\u00a0<br/><span class=\"kw3\">procedure</span> Test_Semiprime <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">package</span> Integer_Numbers <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> <br/>     Prime_Numbers <span class=\"br0\">(</span>Natural, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span>; <br/>   <span class=\"kw3\">use</span> Integer_Numbers;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> N <span class=\"kw3\">in</span> <span class=\"nu0\">1</span> .. <span class=\"nu0\">100</span> <span class=\"kw1\">loop</span><br/>      <span class=\"kw1\">if</span> Decompose<span class=\"br0\">(</span>N<span class=\"br0\">)</span>'Length = <span class=\"nu0\">2</span> <span class=\"kw1\">then</span> <span class=\"co1\">-- N is a semiprime;</span><br/>\t Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Integer'Image<span class=\"br0\">(</span>Integer<span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">New_Line</span>;<br/>   <span class=\"kw1\">for</span> N <span class=\"kw3\">in</span> <span class=\"nu0\">1675</span> .. <span class=\"nu0\">1680</span> <span class=\"kw1\">loop</span><br/>      <span class=\"kw1\">if</span> Decompose<span class=\"br0\">(</span>N<span class=\"br0\">)</span>'Length = <span class=\"nu0\">2</span> <span class=\"kw1\">then</span> <span class=\"co1\">-- N is a semiprime;</span><br/>\t Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Integer'Image<span class=\"br0\">(</span>Integer<span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>; <br/><span class=\"kw1\">end</span> Test_Semiprime;</pre>"}, {"lang": "ALGOL 68", "loc": 39, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># returns TRUE if n is semi-prime, FALSE otherwise            #</span><br/><span class=\"coMULTI\">#         n is semi prime if it has exactly two prime factors #</span><br/><span class=\"kw4\">PROC</span> is semiprime <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> n <span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span><br/>     <span class=\"kw2\">BEGIN</span><br/>         <span class=\"coMULTI\"># We only need to consider factors between 2 and     #</span><br/>         <span class=\"coMULTI\"># sqrt( n ) inclusive. If there is only one of these #</span><br/>         <span class=\"coMULTI\"># then it must be a prime factor and so the number   #</span><br/>         <span class=\"coMULTI\"># is semi prime                                      #</span><br/>         <span class=\"kw3\">INT</span> factor count <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>         <span class=\"kw2\">FOR</span> factor <span class=\"kw2\">FROM</span> 2 <span class=\"kw2\">TO</span> <span class=\"kw8\">ENTIER</span> <span class=\"kw24\">sqrt</span><span class=\"br0\">(</span> <span class=\"kw8\">ABS</span> n <span class=\"br0\">)</span><br/>         <span class=\"kw2\">WHILE</span> <span class=\"kw2\">IF</span> n <span class=\"kw12\">MOD</span> factor <span class=\"sy1\">=</span> 0 <span class=\"kw2\">THEN</span><br/>                   factor count <span class=\"sy1\">+:=</span> 1<span class=\"sy1\">;</span><br/>                   <span class=\"coMULTI\"># check the factor isn't a repeated factor #</span><br/>                   <span class=\"kw2\">IF</span> n <span class=\"sy1\">/=</span> factor <span class=\"sy1\">*</span> factor <span class=\"kw2\">THEN</span><br/>                       <span class=\"coMULTI\"># the factor isn't the square root     #</span><br/>                       <span class=\"kw3\">INT</span> other factor <span class=\"sy1\">=</span> n <span class=\"kw12\">OVER</span> factor<span class=\"sy1\">;</span><br/>                       <span class=\"kw2\">IF</span> other factor <span class=\"kw12\">MOD</span> factor <span class=\"sy1\">=</span> 0 <span class=\"kw2\">THEN</span><br/>                           <span class=\"coMULTI\"># have a repeated factor           #</span><br/>                           factor count <span class=\"sy1\">+:=</span> 1<br/>                       <span class=\"kw2\">FI</span><br/>                   <span class=\"kw2\">FI</span><br/>               <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>               factor count <span class=\"sy1\">&lt;</span> 2<br/>         <span class=\"kw2\">DO</span> <span class=\"kw7\">SKIP</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>         factor count <span class=\"sy1\">=</span> 1<br/>     <span class=\"kw2\">END</span> <span class=\"coMULTI\"># is semiprime #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># determine the first few semi primes                          #</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"semi primes below 100: \"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> 99 <span class=\"kw2\">DO</span><br/>    <span class=\"kw2\">IF</span> is semi prime<span class=\"br0\">(</span> i <span class=\"br0\">)</span> <span class=\"kw2\">THEN</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> i<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\" \"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw2\">FI</span><br/><span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"semi primes below between 1670 and 1690: \"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> 1670 <span class=\"kw2\">TO</span> 1690 <span class=\"kw2\">DO</span><br/>    <span class=\"kw2\">IF</span> is semi prime<span class=\"br0\">(</span> i <span class=\"br0\">)</span> <span class=\"kw2\">THEN</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> i<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\" \"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw2\">FI</span><br/><span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 55, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/SetBatchLines.htm\"><span class=\"kw3\">SetBatchLines</span></a> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>k <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><br/><span class=\"br0\">{</span><br/>\tm <span class=\"sy0\">:=</span> semiprime<span class=\"br0\">(</span>k<span class=\"br0\">)</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/StringSplit.htm\"><span class=\"kw3\">StringSplit</span></a><span class=\"sy0\">,</span> m_m<span class=\"sy0\">,</span> m<span class=\"sy0\">,</span> <span class=\"sy0\">-</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> m_m1 <span class=\"sy0\">=</span> <span class=\"st0\">\"yes\"</span> <span class=\"br0\">)</span><br/>\t\t\tlist <span class=\"sy0\">.=</span> k <span class=\"sy0\">.</span> <span class=\"st0\">\" \"</span><br/>\tk<span class=\"sy0\">++</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% list<br/>list <span class=\"sy0\">:=</span><br/><span class=\"co1\">;===================================================================================================================================</span><br/>k <span class=\"sy0\">:=</span> <span class=\"nu0\">1675</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><br/><span class=\"br0\">{</span><br/>\tm <span class=\"sy0\">:=</span> semiprime<span class=\"br0\">(</span>k<span class=\"br0\">)</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/StringSplit.htm\"><span class=\"kw3\">StringSplit</span></a><span class=\"sy0\">,</span> m_m<span class=\"sy0\">,</span> m<span class=\"sy0\">,</span> <span class=\"sy0\">-</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> m_m1 <span class=\"sy0\">=</span> <span class=\"st0\">\"yes\"</span> <span class=\"br0\">)</span><br/>\t\t\tlist1 <span class=\"sy0\">.=</span> semiprime<span class=\"br0\">(</span>k<span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"`n\"</span><br/>\t\t<span class=\"kw1\">else</span><br/>\t\t\tlist1 <span class=\"sy0\">.=</span> semiprime<span class=\"br0\">(</span>k<span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"`n\"</span><br/>\tk<span class=\"sy0\">++</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% list1<br/>list1 <span class=\"sy0\">:=</span><br/><span class=\"co1\">;===================================================================================================================================</span><br/><span class=\"co1\">; The function==========================================================================================================================</span><br/>semiprime<span class=\"br0\">(</span>k<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t\tstart <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">floor</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">sqrt</span></a><span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span>\u00a0% <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">floor</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">sqrt</span></a><span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\t\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">mod</span></a><span class=\"br0\">(</span>k<span class=\"sy0\">,</span> start<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/>\t\t\t\t\t\t\t\tnew <span class=\"sy0\">.=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">floor</span></a><span class=\"br0\">(</span>start<span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"*\"</span> <span class=\"sy0\">.</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">floor</span></a><span class=\"br0\">(</span>k<span class=\"sy0\">//</span>start<span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">\",\"</span><br/>\t\t\t\t\t\tstart<span class=\"sy0\">--</span><br/>\t\t\t\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/StringSplit.htm\"><span class=\"kw3\">StringSplit</span></a><span class=\"sy0\">,</span> index<span class=\"sy0\">,</span> new<span class=\"sy0\">,</span> `<span class=\"sy0\">,</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> index0 <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/StringTrimRight.htm\"><span class=\"kw3\">StringTrimRight</span></a><span class=\"sy0\">,</span> new<span class=\"sy0\">,</span> new<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><br/>\t\t\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/StringSplit.htm\"><span class=\"kw3\">StringSplit</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">2</span>_ind<span class=\"sy0\">,</span> new<span class=\"sy0\">,</span> <span class=\"sy0\">*</span><br/>\t\t\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">mod</span></a><span class=\"br0\">(</span><span class=\"nu0\">2</span>_ind2<span class=\"sy0\">,</span> <span class=\"nu0\">2</span>_ind1<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span> <span class=\"nu0\">2</span>_ind1\u00a0!<span class=\"sy0\">=</span> <span class=\"nu0\">2</span>_ind2 <span class=\"br0\">)</span><br/>\t\t\t\t\t\t\tnew <span class=\"sy0\">:=</span> <span class=\"st0\">\"N0- \"</span> <span class=\"sy0\">.</span> k <span class=\"sy0\">.</span> <span class=\"st0\">\"  -  \"</span> <span class=\"sy0\">.</span> new<br/>\t\t\t\t\t\t<span class=\"kw1\">else</span><br/>\t\t\t\t\t\t\tnew <span class=\"sy0\">:=</span> <span class=\"st0\">\"yes- \"</span> <span class=\"sy0\">.</span> k <span class=\"sy0\">.</span> <span class=\"st0\">\"  -  \"</span> <span class=\"sy0\">.</span> new<br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">else</span><br/>\t\t\t\tnew <span class=\"sy0\">:=</span> <span class=\"st0\">\"N0- \"</span> <span class=\"sy0\">.</span> k <span class=\"sy0\">.</span> <span class=\"st0\">\"  -  \"</span> <span class=\"sy0\">.</span> new<br/><span class=\"kw1\">return</span> new<br/><span class=\"br0\">}</span><br/><span class=\"co1\">;=================================================================================================================================================</span><br/><span class=\"kw6\">esc</span>::<a href=\"http://www.autohotkey.com/docs/commands/ExitApp.htm\"><span class=\"kw3\">Exitapp</span></a></pre>"}, {"lang": "Bracmat", "loc": 7, "block": "<pre class=\"text highlighted_source\">semiprime=<br/>  m n a b<br/>.   2^-64:?m<br/>  &amp; 2*!m:?n<br/>  &amp;  \u00a0!arg^!m<br/>   \u00a0: (#%?a^!m*#%?b^!m|#%?a^!n&amp;!a:?b)<br/>  &amp; (!a.!b);</pre>"}, {"lang": "C", "loc": 21, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> semiprime<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> p<span class=\"sy0\">,</span> f <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>p <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> f <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> p<span class=\"sy0\">*</span>p <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span> p<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">==</span> n <span class=\"sy0\">%</span> p<span class=\"br0\">)</span><br/>\t\t\tn <span class=\"sy0\">/=</span> p<span class=\"sy0\">,</span> f<span class=\"sy0\">++;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> f <span class=\"sy0\">+</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>semiprime<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%d\"</span><span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 23, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> isSemiPrime<span class=\"br0\">(</span> <span class=\"kw4\">int</span> c <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">2</span>, b <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span> b <span class=\"sy1\">&lt;</span> <span class=\"nu0\">3</span> <span class=\"sy3\">&amp;&amp;</span> c <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> c <span class=\"sy2\">%</span> a <span class=\"br0\">)</span> <span class=\"br0\">)</span> <br/>\t<span class=\"br0\">{</span> c <span class=\"sy2\">/</span><span class=\"sy1\">=</span> a<span class=\"sy4\">;</span> b<span class=\"sy2\">++</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\t<span class=\"kw1\">else</span> a<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> b <span class=\"sy1\">==</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> <span class=\"nu0\">100</span><span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> isSemiPrime<span class=\"br0\">(</span> x <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> x <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 30, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>static void Main(string[] args)<br/>{<br/>    //test some numbers<br/>    for (int i = 0; i &lt; 50; i++)<br/>    {<br/>        Console.WriteLine(\"{0}\\t{1} \", i,isSemiPrime(i));<br/>    }<br/>    Console.ReadLine();<br/>}<br/>\u00a0<br/>//returns true or false depending if input was considered semiprime<br/>private static bool isSemiPrime(int c)<br/>{<br/>    int a = 2, b = 0;<br/>    while (b &lt; 3 &amp;&amp; c\u00a0!= 1)<br/>    {<br/>        if ((c\u00a0% a) == 0)<br/>        {<br/>            c /= a;<br/>            b++;<br/>        }<br/>        else<br/>        {<br/>            a++;<br/>        };<br/>    }<br/>    return b == 2;<br/>}<br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 16, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>ns example<br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">gen-class</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn semi-prime? <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>loop <span class=\"br0\">[</span>a <span class=\"nu0\">2</span><br/>         b <span class=\"nu0\">0</span><br/>         c n<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>      <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> b <span class=\"nu0\">2</span><span class=\"br0\">)</span> false<br/>      <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> c <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> b <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"kw1\">rem</span> c a<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>recur a <span class=\"br0\">(</span>inc b<span class=\"br0\">)</span> <span class=\"br0\">(</span>int <span class=\"br0\">(</span>/ c a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"sy0\">:</span><span class=\"me1\">else</span> <span class=\"br0\">(</span>recur <span class=\"br0\">(</span>inc a<span class=\"br0\">)</span> b c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>println <span class=\"br0\">(</span>filter semi-prime? <span class=\"br0\">(</span>range <span class=\"nu0\">1</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 9, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> semiprimep <span class=\"br0\">(</span>n <span class=\"sy0\">&amp;</span>optional <span class=\"br0\">(</span>a <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> a <span class=\"br0\">(</span>isqrt n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">zerop</span> <span class=\"br0\">(</span><span class=\"kw1\">rem</span> n a<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span>primep a<span class=\"br0\">)</span> <span class=\"br0\">(</span>primep <span class=\"br0\">(</span>/ n a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>t <span class=\"br0\">(</span>semiprimep n <span class=\"br0\">(</span>+ a <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> primep <span class=\"br0\">(</span>n <span class=\"sy0\">&amp;</span>optional <span class=\"br0\">(</span>a <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> a <span class=\"br0\">(</span>isqrt n<span class=\"br0\">)</span><span class=\"br0\">)</span> t<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">zerop</span> <span class=\"br0\">(</span><span class=\"kw1\">rem</span> n a<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>t <span class=\"br0\">(</span>primep n <span class=\"br0\">(</span>+ a <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 19, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">bool</span> semiprime<span class=\"br0\">(</span><span class=\"kw4\">long</span> n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> nf <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">..</span> <span class=\"me1\">n</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>nf <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>            nf<span class=\"sy0\">++;</span><br/>            n <span class=\"sy0\">/=</span> i<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> nf <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> n<span class=\"sy0\">;</span> <span class=\"nu0\">1675</span> <span class=\"sy0\">..</span> <span class=\"nu0\">1681</span><span class=\"br0\">)</span><br/>        writeln<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"st0\">\" -&gt; \"</span><span class=\"sy0\">,</span> n.<span class=\"me1\">semiprime</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "DCL", "loc": 48, "block": "<pre class=\"dcl highlighted_source\">$ <span class=\"kw3\">p1</span> <span class=\"sy0\">=</span> <span class=\"kw2\">f$integer</span><span class=\"br0\">(</span> <span class=\"kw3\">p1</span> <span class=\"br0\">)</span><br/>$ <span class=\"kw1\">if</span> <span class=\"kw3\">p1</span> <span class=\"sy0\">.lt.</span> <span class=\"nu0\">2</span><br/>$ <span class=\"kw1\">then</span><br/>$  <span class=\"kw1\">write</span> <span class=\"kw3\">sys$output</span> <span class=\"st0\">\"out of range 2 thru 2^31-1\"</span><br/>$  <span class=\"kw1\">exit</span><br/>$ <span class=\"kw1\">endif</span><br/>$<br/>$ <span class=\"kw1\">close</span> <span class=\"re1\">/nolog </span>primes<br/>$ <span class=\"kw1\">on</span> control_y <span class=\"kw1\">then</span> $ <span class=\"kw1\">goto</span> clean<br/>$ <span class=\"kw1\">open</span> primes primes.txt<br/>$<br/>$ loop1:<br/>$  <span class=\"kw1\">read</span> <span class=\"re1\">/end_of_file </span><span class=\"sy0\">=</span> prime primes prime<br/>$  prime <span class=\"sy0\">=</span> <span class=\"kw2\">f$integer</span><span class=\"br0\">(</span> prime <span class=\"br0\">)</span><br/>$  loop2:<br/>$   t <span class=\"sy0\">=</span> <span class=\"kw3\">p1</span> / prime<br/>$   <span class=\"kw1\">if</span> t * prime <span class=\"sy0\">.eq.</span> <span class=\"kw3\">p1</span><br/>$   <span class=\"kw1\">then</span><br/>$    <span class=\"kw1\">if</span> <span class=\"kw2\">f$type</span><span class=\"br0\">(</span> factorization <span class=\"br0\">)</span> <span class=\"sy0\">.eqs.</span> <span class=\"st0\">\"\"</span><br/>$    <span class=\"kw1\">then</span><br/>$     factorization <span class=\"sy0\">=</span> <span class=\"kw2\">f$string</span><span class=\"br0\">(</span> prime <span class=\"br0\">)</span><br/>$    <span class=\"kw1\">else</span><br/>$     factorization <span class=\"sy0\">=</span> factorization + <span class=\"st0\">\"*\"</span> + <span class=\"kw2\">f$string</span><span class=\"br0\">(</span> prime <span class=\"br0\">)</span><br/>$    <span class=\"kw1\">endif</span><br/>$    <span class=\"kw1\">if</span> t <span class=\"sy0\">.eq.</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> $ <span class=\"kw1\">goto</span> done<br/>$    <span class=\"kw3\">p1</span> <span class=\"sy0\">=</span> t<br/>$    <span class=\"kw1\">goto</span> loop2<br/>$   <span class=\"kw1\">else</span><br/>$    <span class=\"kw1\">goto</span> loop1<br/>$   <span class=\"kw1\">endif</span><br/>$<span class=\"re2\"> prime:</span><br/>$ <span class=\"kw1\">if</span> <span class=\"kw2\">f$type</span><span class=\"br0\">(</span> factorization <span class=\"br0\">)</span> <span class=\"sy0\">.eqs.</span> <span class=\"st0\">\"\"</span><br/>$ <span class=\"kw1\">then</span><br/>$  factorization <span class=\"sy0\">=</span> <span class=\"kw2\">f$string</span><span class=\"br0\">(</span> <span class=\"kw3\">p1</span> <span class=\"br0\">)</span><br/>$ <span class=\"kw1\">else</span><br/>$  factorization <span class=\"sy0\">=</span> factorization + <span class=\"st0\">\"*\"</span> + <span class=\"kw2\">f$string</span><span class=\"br0\">(</span> <span class=\"kw3\">p1</span> <span class=\"br0\">)</span><br/>$ <span class=\"kw1\">endif</span><br/>$<span class=\"re2\"> done:</span><br/>$ <span class=\"kw1\">show symbol</span> factorization<br/>$ <span class=\"kw1\">if</span> <span class=\"kw2\">f$locate</span><span class=\"br0\">(</span> <span class=\"st0\">\"*\"</span>, factorization <span class=\"br0\">)</span> <span class=\"sy0\">.eq.</span> <span class=\"kw2\">f$length</span><span class=\"br0\">(</span> factorization <span class=\"br0\">)</span><br/>$ <span class=\"kw1\">then</span><br/>$  <span class=\"kw1\">write</span> <span class=\"kw3\">sys$output</span> <span class=\"st0\">\"so, it is prime\"</span><br/>$ <span class=\"kw1\">else</span><br/>$  <span class=\"kw1\">if</span> <span class=\"kw2\">f$element</span><span class=\"br0\">(</span> <span class=\"nu0\">2</span>, <span class=\"st0\">\"*\"</span>, factorization <span class=\"br0\">)</span> <span class=\"sy0\">.eqs.</span> <span class=\"st0\">\"*\"</span> <span class=\"kw1\">then</span> $ <span class=\"kw1\">write</span> <span class=\"kw3\">sys$output</span> <span class=\"st0\">\"so, it is semiprime\"</span><br/>$ <span class=\"kw1\">endif</span><br/>$<br/>$<span class=\"re2\"> clean:</span><br/>$ <span class=\"kw1\">close</span> primes</pre>"}, {"lang": "EchoLisp", "loc": 22, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>lib 'math<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>semi<span class=\"sy0\">-</span>prime? n<span class=\"br0\">)</span> <br/>   <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"br0\">(</span>prime<span class=\"sy0\">-</span>factors n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>    <span class=\"br0\">(</span>when <span class=\"br0\">(</span>semi<span class=\"sy0\">-</span>prime? i<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">write</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"nu0\">4</span> <span class=\"nu0\">6</span> <span class=\"nu0\">9</span> <span class=\"nu0\">10</span> <span class=\"nu0\">14</span> <span class=\"nu0\">15</span> <span class=\"nu0\">21</span> <span class=\"nu0\">22</span> <span class=\"nu0\">25</span> <span class=\"nu0\">26</span> <span class=\"nu0\">33</span> <span class=\"nu0\">34</span> <span class=\"nu0\">35</span> <span class=\"nu0\">38</span> <span class=\"nu0\">39</span> <span class=\"nu0\">46</span> <span class=\"nu0\">49</span> <span class=\"nu0\">51</span> <span class=\"nu0\">55</span> <span class=\"nu0\">57</span> <span class=\"nu0\">58</span> <span class=\"nu0\">62</span> <span class=\"nu0\">65</span> <span class=\"nu0\">69</span> <span class=\"nu0\">74</span> <span class=\"nu0\">77</span> <span class=\"nu0\">82</span> <span class=\"nu0\">85</span> <span class=\"nu0\">86</span> <span class=\"nu0\">87</span> <span class=\"nu0\">91</span> <span class=\"nu0\">93</span> <span class=\"nu0\">94</span> <span class=\"nu0\">95</span><br/>\u00a0<br/><span class=\"br0\">(</span>lib 'bigint<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> N <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"br0\">(</span>random<span class=\"sy0\">-</span>prime <span class=\"nu0\">10000000</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>random<span class=\"sy0\">-</span>prime <span class=\"nu0\">10000000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   \u2192 <span class=\"nu0\">6764578882969</span><br/><span class=\"br0\">(</span>semi<span class=\"sy0\">-</span>prime? N<span class=\"br0\">)</span><br/>    \u2192 #t<br/>\u00a0<br/><span class=\"co1\">;; a pair n,n+1 of semi-primes</span><br/><span class=\"br0\">(</span>prime<span class=\"sy0\">-</span>factors <span class=\"nu0\">100000000041</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"nu0\">33333333347</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>prime<span class=\"sy0\">-</span>factors <span class=\"nu0\">100000000042</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">50000000021</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 14, "block": "<pre class=\"text highlighted_source\">defmodule Prime do<br/>  def semiprime?(n), do: length(decomposition(n)) == 2<br/>\u00a0<br/>  def decomposition(n), do: decomposition(n, 2, [])<br/>\u00a0<br/>  defp decomposition(n, k, acc) when n &lt; k*k, do: Enum.reverse(acc, [n])<br/>  defp decomposition(n, k, acc) when rem(n, k) == 0, do: decomposition(div(n, k), k, [k | acc])<br/>  defp decomposition(n, k, acc), do: decomposition(n, k+1, acc)<br/>end<br/>\u00a0<br/>IO.inspect Enum.filter(1..100, &amp;Prime.semiprime?(&amp;1))<br/>Enum.each(1675..1680, fn n -&gt;<br/> \u00a0:io.format \"~w -&gt; ~w\\t~s~n\", [n, Prime.semiprime?(n), Prime.decomposition(n)|&gt;Enum.join(\" x \")]<br/>end)</pre>"}, {"lang": "Erlang", "loc": 21, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>factors<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>factors<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span>kthfactor<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">factors</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>     <span class=\"re3\">factors</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">factors</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">_</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Acc</span><span class=\"sy1\">;</span><br/><span class=\"re3\">factors</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">K</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">N</span> <span class=\"kw2\">rem</span> <span class=\"re5\">K</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">factors</span><span class=\"br0\">(</span><span class=\"re5\">N</span> <span class=\"kw2\">div</span> <span class=\"re5\">K</span><span class=\"sy1\">,</span><span class=\"re5\">K</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">K</span>|Acc<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">factors</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">K</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">factors</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">K</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">% is integer N factorable into M primes?</span><br/><span class=\"re3\">kthfactor</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">M</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span>             <br/>    <span class=\"kw1\">case</span> <span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re3\">factors</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">of</span> <span class=\"re5\">M</span> <span class=\"sy1\">-&gt;</span><br/>      <span class=\"re3\">factors</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"re5\">_</span> <span class=\"sy1\">-&gt;</span><br/>      <span class=\"me1\">false</span> <span class=\"kw1\">end</span><span class=\"sy1\">.</span>                      <br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 28, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM SEMIPRIME_NUMBER<br/>\u00a0<br/>!VAR I%<br/>\u00a0<br/>PROCEDURE SEMIPRIME(N%-&gt;RESULT%)<br/>   LOCAL F%,P%<br/>   P%=2<br/>   LOOP<br/>       EXIT IF NOT(F%&lt;2 AND P%*P%&lt;=N%)<br/>       WHILE (N% MOD P%)=0 DO<br/>            N%=N% DIV P%<br/>            F%+=1<br/>       END WHILE<br/>       P%+=1<br/>    END LOOP<br/>    RESULT%=F%-(N%&gt;1)=2<br/>END PROCEDURE<br/>\u00a0<br/>BEGIN<br/>    PRINT(CHR$(12);)\u00a0!CLS<br/>    FOR I%=2 TO 100 DO<br/>         SEMIPRIME(I%-&gt;RESULT%)<br/>         IF RESULT% THEN PRINT(I%;) END IF<br/>    END FOR<br/>    PRINT<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 15, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> isSemiprime <span class=\"br0\">(</span>n: <span class=\"kw4\">int</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> loop currentN candidateFactor numberOfFactors <span class=\"sy0\">=</span><br/>        <span class=\"kw1\">if</span> numberOfFactors <span class=\"sy0\">&gt;</span> <span class=\"nu0\">2</span> <span class=\"kw1\">then</span> numberOfFactors<br/>        <span class=\"kw1\">elif</span> currentN <span class=\"sy0\">=</span> candidateFactor <span class=\"kw1\">then</span> numberOfFactors<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>        <span class=\"kw1\">elif</span> currentN <span class=\"sy0\">%</span> candidateFactor <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> loop <span class=\"br0\">(</span>currentN<span class=\"sy0\">/</span>candidateFactor<span class=\"br0\">)</span> candidateFactor <span class=\"br0\">(</span>numberOfFactors<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">else</span> loop currentN <span class=\"br0\">(</span>candidateFactor<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> numberOfFactors<br/>    <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"kw1\">then</span> <span class=\"kw1\">false</span> <span class=\"kw1\">else</span> <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> loop n <span class=\"nu0\">2</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw4\">seq</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span> .. <span class=\"nu0\">100</span> <span class=\"br0\">}</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">choose</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> n <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">if</span> isSemiprime n <span class=\"kw1\">then</span> Some<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">else</span> None<span class=\"br0\">)</span><br/><span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">toList</span> <span class=\"sy0\">|&gt;</span> printfn <span class=\"st0\">\"%A\"</span><br/>\u00a0<br/><span class=\"kw4\">seq</span> <span class=\"br0\">{</span> <span class=\"nu0\">1675</span> .. <span class=\"nu0\">1680</span> <span class=\"br0\">}</span><br/><span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">choose</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> n <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">if</span> isSemiprime n <span class=\"kw1\">then</span> Some<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">else</span> None<span class=\"br0\">)</span><br/><span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">toList</span><br/><span class=\"sy0\">|&gt;</span> printfn <span class=\"st0\">\"%A\"</span></pre>"}, {"lang": "Factor", "loc": 4, "block": "<pre class=\"text highlighted_source\">USING: kernel math.combinatorics math.primes.factors sequences\u00a0;<br/>: semiprime? ( n --\u00a0? )<br/>    [ factors 2 &lt;combinations&gt; [ product ] map ]<br/>    [ [ = ] curry ] bi any?\u00a0;</pre>"}, {"lang": "Forth", "loc": 8, "block": "<pre class=\"text highlighted_source\">: semiprime?<br/>  0 swap dup 2 do<br/>    begin dup i mod 0= while i / swap 1+ swap repeat<br/>    over 1 &gt; over i dup * &lt; or if leave then<br/>  loop 1 &gt; abs + 2 =<br/>;<br/>\u00a0<br/>: test 100 2 do i semiprime? if i . then loop cr\u00a0;</pre>"}, {"lang": "Go", "loc": 23, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> semiprime<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    nf <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt;<span class=\"sy2\">=</span> n<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> n<span class=\"sy3\">%</span><span class=\"nu2\">i</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> nf <span class=\"sy3\">==</span> <span class=\"nu0\">2</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>            <span class=\"sy1\">}</span><br/>            nf<span class=\"sy2\">++</span><br/>            n <span class=\"sy2\">/=</span> <span class=\"nu2\">i</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> nf <span class=\"sy3\">==</span> <span class=\"nu0\">2</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> v <span class=\"sy2\">:=</span> <span class=\"nu0\">1675</span><span class=\"sy1\">;</span> v &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">1680</span><span class=\"sy1\">;</span> v<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>v<span class=\"sy1\">,</span> <span class=\"st0\">\"-&gt;\"</span><span class=\"sy1\">,</span> semiprime<span class=\"sy1\">(</span>v<span class=\"sy1\">))</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 4, "block": "<pre class=\"haskell highlighted_source\">isSemiprime <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>isSemiprime n <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> factors<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:product\"><span class=\"kw3\">product</span></a> factors<span class=\"br0\">)</span> <span class=\"sy0\">==</span> n <span class=\"sy0\">||</span><br/>                <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> factors<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a> factors<span class=\"br0\">)</span> <span class=\"sy0\">^</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> n<br/>                    <span class=\"kw1\">where</span> factors <span class=\"sy0\">=</span> primeFactors n</pre>"}, {"lang": "Icon and Unicon", "loc": 9, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">link</span> <span class=\"st0\">\"factors\"</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> nf <span class=\"sy0\">:=</span> semiprime<span class=\"br0\">(</span>n <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>A<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"st0\">\" = \"</span><span class=\"sy0\">,</span>nf<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"st0\">\" * \"</span><span class=\"sy0\">,</span>nf<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> semiprime<span class=\"br0\">(</span>n<span class=\"br0\">)</span>  <span class=\"co1\"># Succeeds and produces the factors only if n is semiprime.</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"sy0\">*</span><span class=\"br0\">(</span>nf <span class=\"sy0\">:=</span> factors<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> nf<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">isSemiPrime=: <span class=\"nu0\">2</span> = #@q:\u00a0::0:\"<span class=\"nu0\">0</span></pre>"}, {"lang": "Java", "loc": 57, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">import</span> <span class=\"co2\">java.math.BigInteger</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.ArrayList</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.List</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">public</span> <span class=\"kw2\">class</span> SemiPrime<span class=\"br0\">{</span><br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <span class=\"kw2\">final</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/math/BigInteger.html\"><span class=\"kw27\">BigInteger</span></a> TWO = <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/math/BigInteger.html\"><span class=\"kw27\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/math/BigInteger.html\"><span class=\"kw27\">BigInteger</span></a><span class=\"sy0\">&gt;</span> primeDecomp<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/math/BigInteger.html\"><span class=\"kw27\">BigInteger</span></a> a<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t    <span class=\"co1\">// impossible for values lower than 2</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span>a.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>TWO<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t        <span class=\"kw2\">return</span> <span class=\"kw4\">null</span><span class=\"sy0\">;</span> <br/>\t    <span class=\"br0\">}</span><br/>\u00a0<br/>\t    <span class=\"co1\">//quickly handle even values</span><br/>\t    <a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/math/BigInteger.html\"><span class=\"kw27\">BigInteger</span></a><span class=\"sy0\">&gt;</span> result = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/ArrayList.html\"><span class=\"kw46\">ArrayList</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/math/BigInteger.html\"><span class=\"kw27\">BigInteger</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    <span class=\"kw1\">while</span><span class=\"br0\">(</span>a.<span class=\"me1\">and</span><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/math/BigInteger.html\"><span class=\"kw27\">BigInteger</span></a>.<span class=\"me1\">ONE</span><span class=\"br0\">)</span>.<span class=\"me1\">equals</span><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/math/BigInteger.html\"><span class=\"kw27\">BigInteger</span></a>.<span class=\"me1\">ZERO</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t        a = a.<span class=\"me1\">shiftRight</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t        result.<span class=\"me1\">add</span><span class=\"br0\">(</span>TWO<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\u00a0<br/>\t    <span class=\"co1\">//left with odd values</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>a.<span class=\"me1\">equals</span><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/math/BigInteger.html\"><span class=\"kw27\">BigInteger</span></a>.<span class=\"me1\">ONE</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/math/BigInteger.html\"><span class=\"kw27\">BigInteger</span></a> b = <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/math/BigInteger.html\"><span class=\"kw27\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t        <span class=\"kw1\">while</span><span class=\"br0\">(</span>b.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t            <span class=\"kw1\">if</span><span class=\"br0\">(</span>b.<span class=\"me1\">isProbablePrime</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t                <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/math/BigInteger.html\"><span class=\"kw27\">BigInteger</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> dr = a.<span class=\"me1\">divideAndRemainder</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t                <span class=\"kw1\">if</span><span class=\"br0\">(</span>dr<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">equals</span><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/math/BigInteger.html\"><span class=\"kw27\">BigInteger</span></a>.<span class=\"me1\">ZERO</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t                    result.<span class=\"me1\">add</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t                    a = dr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t                <span class=\"br0\">}</span><br/>\t            <span class=\"br0\">}</span><br/>\t            b = b.<span class=\"me1\">add</span><span class=\"br0\">(</span>TWO<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t        <span class=\"br0\">}</span><br/>\t        result.<span class=\"me1\">add</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//b will always be prime here...</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"kw2\">return</span> result<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">boolean</span> isSemi<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/math/BigInteger.html\"><span class=\"kw27\">BigInteger</span></a> x<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/math/BigInteger.html\"><span class=\"kw27\">BigInteger</span></a><span class=\"sy0\">&gt;</span> decomp = primeDecomp<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw2\">return</span> decomp <span class=\"sy0\">!</span>= <span class=\"kw4\">null</span> <span class=\"sy0\">&amp;&amp;</span> decomp.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> == <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw3\">int</span> i = <span class=\"nu0\">2</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">100</span><span class=\"sy0\">;</span> i++<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>isSemi<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/math/BigInteger.html\"><span class=\"kw27\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span>i + <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw3\">int</span> i = <span class=\"nu0\">1675</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">1680</span><span class=\"sy0\">;</span> i++<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>isSemi<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/math/BigInteger.html\"><span class=\"kw27\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span>i + <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 3, "block": "<pre class=\"text highlighted_source\">using Primes<br/>issemiprime(n::Integer) = sum(values(factor(n))) == 2<br/>@show filter(issemiprime, 1:100)</pre>"}, {"lang": "Kotlin", "loc": 18, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/>fun isSemiPrime<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> nf <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> nn <span class=\"sy0\">=</span> n<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">2</span>..<span class=\"me1\">nn</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>nn <span class=\"sy0\">%</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>nf <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>            nf++<br/>            nn /<span class=\"sy0\">=</span> i<br/>        <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> nf <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>v in <span class=\"nu0\">1675</span>..<span class=\"nu0\">1680</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"$v ${if (isSemiPrime(v)) \"</span>is<span class=\"st0\">\" else \"</span>isn<span class=\"st0\">'t\"} semi-prime\")<br/>}</span></pre>"}, {"lang": "Lingo", "loc": 13, "block": "<pre class=\"text highlighted_source\">on isSemiPrime (n)<br/>    div = 2<br/>    cnt = 0<br/>    repeat while cnt &lt; 3 and n &lt;&gt; 1<br/>        if n mod div = 0 then<br/>            n = n / div<br/>            cnt = cnt + 1<br/>        else<br/>            div = div + 1<br/>        end if<br/>    end repeat<br/>    return cnt=2<br/>end</pre>"}, {"lang": "Lua", "loc": 18, "block": "<pre class=\"lua highlighted_source\">\u00a0<br/><span class=\"kw1\">function</span> semiprime <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">local</span> divisor<span class=\"sy0\">,</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">while</span> count <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span> <span class=\"kw2\">and</span> n <span class=\"sy0\">~=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>\t\t<span class=\"kw1\">if</span> n <span class=\"sy0\">%</span> divisor <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>\t\t\tn <span class=\"sy0\">=</span> n <span class=\"sy0\">/</span> divisor<br/>\t\t\tcount <span class=\"sy0\">=</span> count <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw1\">else</span><br/>\t\t\tdivisor <span class=\"sy0\">=</span> divisor <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">return</span> count <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">for</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1675</span><span class=\"sy0\">,</span> <span class=\"nu0\">1680</span> <span class=\"kw1\">do</span><br/>\t<span class=\"kw3\">print</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> semiprime<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 10, "block": "<pre class=\"text highlighted_source\">SemiPrimes\u00a0:= proc( n )<br/>    local fact;<br/>    fact\u00a0:= NumberTheory:-Divisors( n ) minus {1, n};<br/>    if numelems( fact ) in {1,2} and not( member( 'false', isprime ~ ( fact ) ) ) then<br/>        return n;<br/>    else<br/>        return NULL;<br/>    end if;<br/>end proc:<br/>{ seq( SemiPrimes( i ), i = 1..100 ) };</pre>"}, {"lang": "Mathematica", "loc": 6, "block": "<pre class=\"text highlighted_source\">semiPrimeQ[n_Integer]\u00a0:= Module[{factors, numfactors},<br/>  factors = FactorInteger[n] // Transpose;<br/>  numfactors = factors[[2]] // Total \u00a0;<br/>  numfactors == 2<br/>  ]<br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 18, "block": "<pre class=\"text highlighted_source\">proc isSemiPrime(k: int): string =<br/> var<br/>  i: int = 2<br/>  compte: int = 0<br/>  x: int = k<br/> while i&lt;=x and compte&lt;3:<br/>  if (x mod i)==0:<br/>   x = x div i<br/>   compte += 1<br/>  else:<br/>   i += 1<br/> if compte==2:<br/>  result = \"is semi-prime\"<br/> else:<br/>  result = \"isn't semi-prime\"<br/>\u00a0<br/>for k in 1675..1680:<br/> echo k,\" \",isSemiPrime(k)</pre>"}, {"lang": "Objeck", "loc": 26, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span> SemiPrime <span class=\"br0\">{</span><br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span> i<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>SemiPrime<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"st0\">\"{$i} \"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    IO.Console<span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> <span class=\"kw1\">native</span> <span class=\"sy0\">:</span> SemiPrime<span class=\"br0\">(</span>n <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Bool</span> <span class=\"br0\">{</span><br/>    nf <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">while</span><span class=\"br0\">(</span>n<span class=\"sy0\">%</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>nf <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          <span class=\"kw1\">return</span> <span class=\"kw3\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        nf<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        n <span class=\"sy0\">/=</span> i<span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> nf <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Oforth", "loc": 4, "block": "<pre class=\"text highlighted_source\">func: semiprime(n)<br/>| i |<br/>   0 2 n sqrt asInteger for: i [ while(n i /mod swap 0 &amp;=) [ -&gt;n 1+ ] drop ]<br/>   n 1 &gt; ifTrue: [ 1+ ] 2 ==\u00a0; </pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\">issemi<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">bigomega</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">==</span><span class=\"nu1\">2</span></pre>"}, {"lang": "Pascal", "loc": 41, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> SemiPrime<span class=\"sy1\">;</span><br/><span class=\"co2\">{$IFDEF FPC}</span><br/>  <span class=\"co2\">{$Mode objfpc}</span><span class=\"co1\">// compiler switch to use result</span><br/><span class=\"co2\">{$ELSE}</span><br/>  <span class=\"co2\">{$APPTYPE CONSOLE}</span> <span class=\"co1\">// for Delphi</span><br/><span class=\"co2\">{$ENDIF}</span><br/><span class=\"kw1\">uses</span><br/>  primTrial<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> isSemiprime<span class=\"br0\">(</span>n<span class=\"sy1\">:</span> longWord<span class=\"sy1\">;</span>doWrite<span class=\"sy1\">:</span><span class=\"kw4\">boolean</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">boolean</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  fac1 <span class=\"sy1\">:</span> LongWord<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"co1\">//a simple isAlmostPrime(n,2) would do without output;</span><br/>  fac1 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> SmallFactor<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">IF</span> fac1 &lt; n <span class=\"kw1\">then</span><br/>  <span class=\"kw1\">Begin</span><br/>    n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> n <span class=\"kw1\">div</span> fac1<span class=\"sy1\">;</span><br/>    result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> SmallFactor<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy3\">=</span> n<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">if</span> result <span class=\"kw3\">AND</span> doWrite <span class=\"kw1\">then</span><br/>      <span class=\"kw3\">write</span><span class=\"br0\">(</span>fac1<span class=\"sy1\">:</span><span class=\"nu0\">10</span><span class=\"sy1\">,</span><span class=\"st0\">'*'</span><span class=\"sy1\">,</span>n<span class=\"sy1\">:</span><span class=\"nu0\">11</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">else</span><br/>    result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">false</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">,</span>k <span class=\"sy1\">:</span> longWord<span class=\"sy1\">;</span><br/><span class=\"kw1\">BEGIN</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> <span class=\"nu0\">97</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">IF</span> isSemiPrime<span class=\"br0\">(</span>i<span class=\"sy1\">,</span><span class=\"kw2\">false</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw3\">write</span><span class=\"br0\">(</span>i<span class=\"sy1\">:</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/>  <span class=\"co1\">//test for big numbers</span><br/>  k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">4000</span><span class=\"sy3\">*</span><span class=\"nu0\">1000</span><span class=\"sy3\">*</span><span class=\"nu0\">1000</span><span class=\"sy1\">;</span><br/>  i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> k<span class=\"sy3\">-</span><span class=\"nu0\">100</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">repeat</span><br/>    <span class=\"kw1\">IF</span> isSemiPrime<span class=\"br0\">(</span>i<span class=\"sy1\">,</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">' = '</span><span class=\"sy1\">,</span>i<span class=\"sy1\">:</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    inc<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">until</span> i&gt; k<span class=\"sy1\">;</span><br/><span class=\"kw1\">END</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 4, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> ntheory <span class=\"st0\">\"is_semiprime\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">100</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1675</span><span class=\"sy0\">..</span><span class=\"nu0\">1681</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">99</span><span class=\"sy0\">,</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span><span class=\"nu0\">1679</span><span class=\"sy0\">,</span><span class=\"nu0\">5030</span><span class=\"sy0\">,</span><span class=\"nu0\">32768</span><span class=\"sy0\">,</span><span class=\"nu0\">1234567</span><span class=\"sy0\">,</span><span class=\"nu0\">9876543</span><span class=\"sy0\">,</span><span class=\"nu0\">900660121</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span><a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span> is_semiprime<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"sy0\">@</span><span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 14, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> is<span class=\"sy0\">-</span>semiprime <span class=\"br0\">(</span>Int <span class=\"re0\">$n</span> <span class=\"sy0\">--&gt;</span> Bool<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">not</span> <span class=\"re0\">$n</span><span class=\"sy0\">.</span><span class=\"me1\">is</span><span class=\"sy0\">-</span>prime <span class=\"kw1\">and</span><br/>        <span class=\"sy0\">.</span><span class=\"me1\">is</span><span class=\"sy0\">-</span>prime <span class=\"kw1\">given</span> <br/>        <span class=\"re0\">$n</span> <span class=\"kw1\">div</span> <span class=\"kw3\">first</span> <span class=\"re0\">$n</span> <span class=\"sy0\">%%</span> <span class=\"sy0\">*,</span> flat <span class=\"kw3\">grep</span> <span class=\"re0\">&amp;is</span><span class=\"sy0\">-</span>prime<span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"sy0\">..</span> <span class=\"sy0\">*;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">use</span> Test<span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@primes</span> <span class=\"sy0\">=</span> flat <span class=\"kw3\">grep</span> <span class=\"re0\">&amp;is</span><span class=\"sy0\">-</span>prime<span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"sy0\">..</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"nu0\">5</span> <span class=\"br0\">{</span><br/>    nok is<span class=\"sy0\">-</span>semiprime<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"sy0\">*</span><span class=\"br0\">]</span> <span class=\"kw1\">my</span> <span class=\"re0\">@f1</span> <span class=\"sy0\">=</span> <span class=\"re0\">@primes</span><span class=\"sy0\">.</span><span class=\"me1\">roll</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">~</span><span class=\"re0\">@f1</span><span class=\"sy0\">;</span><br/>    ok  is<span class=\"sy0\">-</span>semiprime<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"sy0\">*</span><span class=\"br0\">]</span> <span class=\"kw1\">my</span> <span class=\"re0\">@f2</span> <span class=\"sy0\">=</span> <span class=\"re0\">@primes</span><span class=\"sy0\">.</span><span class=\"me1\">roll</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">~</span><span class=\"re0\">@f2</span><span class=\"sy0\">;</span><br/>    nok is<span class=\"sy0\">-</span>semiprime<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"sy0\">*</span><span class=\"br0\">]</span> <span class=\"kw1\">my</span> <span class=\"re0\">@f3</span> <span class=\"sy0\">=</span> <span class=\"re0\">@primes</span><span class=\"sy0\">.</span><span class=\"me1\">roll</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">~</span><span class=\"re0\">@f3</span><span class=\"sy0\">;</span><br/>    nok is<span class=\"sy0\">-</span>semiprime<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"sy0\">*</span><span class=\"br0\">]</span> <span class=\"kw1\">my</span> <span class=\"re0\">@f4</span> <span class=\"sy0\">=</span> <span class=\"re0\">@primes</span><span class=\"sy0\">.</span><span class=\"me1\">roll</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">~</span><span class=\"re0\">@f4</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 18, "block": "<pre class=\"text highlighted_source\">function semiprime(integer n)<br/>    sequence f = prime_factors(n)<br/>    integer l = length(f)<br/>    return (l=2 and n=f[1]*f[2]) or (l=1 and n=power(f[1],2))<br/>end function<br/>\u00a0<br/>procedure test(integer start, integer stop)<br/>sequence s = {}<br/>    for i=start to stop do<br/>        if semiprime(i) then<br/>            s &amp;= i<br/>        end if<br/>    end for<br/>   \u00a0?s<br/>   \u00a0?length(s)<br/>end procedure<br/>test(1,100)<br/>test(1675,1680)</pre>"}, {"lang": "PicoLisp", "loc": 21, "block": "<pre class=\"text highlighted_source\">(de factor (N)<br/>   (make<br/>      (let<br/>         (D 2<br/>            L (1 2 2 . (4 2 4 2 4 6 2 6 .))<br/>            M (sqrt N) )<br/>         (while (&gt;= M D)<br/>            (if (=0 (% N D))<br/>               (setq M <br/>                  (sqrt (setq N (/ N (link D)))) )<br/>               (inc 'D (pop 'L)) ) )<br/>         (link N) ) ) )<br/>\u00a0<br/>(println         <br/>   (filter<br/>      '((X) <br/>         (let L (factor X)<br/>            (and (cdr L) (not (cddr L))) ) )<br/>      (conc (range 1 100) (range 1675 1680)) ) )<br/>\u00a0<br/>(bye)</pre>"}, {"lang": "PL/I", "loc": 90, "block": "<pre class=\"pli highlighted_source\"><span class=\"sy0\">*</span>process source attributes xref nest or<span class=\"br0\">(</span>!<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/*--------------------------------------------------------------------<br/> * 22.02.2014 Walter Pachl using the is_prime code from<br/> *                         PL/I 'prime decomposition'<br/> * 23.02.  WP start test for second prime with 2 or first prime found<br/> *-------------------------------------------------------------------*/</span><br/> spb<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span> <span class=\"kw1\">options</span><span class=\"br0\">(</span><span class=\"kw1\">main</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> a<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"nu0\">900660121</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">1679</span><span class=\"sy0\">,</span><span class=\"nu0\">1234567</span><span class=\"sy0\">,</span><span class=\"nu0\">32768</span><span class=\"sy0\">,</span><span class=\"nu0\">99</span><span class=\"sy0\">,</span><span class=\"nu0\">9876543</span><span class=\"sy0\">,</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span><span class=\"nu0\">5040</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span>n<span class=\"sy0\">,</span>nf<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> f<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> txt <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">30</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"kw1\">bit</span> <span class=\"kw1\">Bit</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw1\">hbound</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">bit</span><span class=\"sy0\">=</span>is_semiprime<span class=\"br0\">(</span>a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Select</span><span class=\"br0\">(</span>nf<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">When</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> txt<span class=\"sy0\">=</span><span class=\"st0\">' is prime'</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">When</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>   txt<span class=\"sy0\">=</span><span class=\"st0\">' is     semiprime '</span>!!factors<span class=\"br0\">(</span>a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">Otherwise</span> txt<span class=\"sy0\">=</span><span class=\"st0\">' is NOT semiprime '</span>!!factors<span class=\"br0\">(</span>a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span>a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw1\">bit</span><span class=\"sy0\">,</span>txt<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>f<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>x<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>b<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> is_semiprime<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">Returns</span><span class=\"br0\">(</span><span class=\"kw1\">bit</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/*--------------------------------------------------------------------<br/> * Returns '1'b if x is semiprime, '0'b otherwise<br/> * in addition<br/> * it sets f(1) and f(2) to the first (or only) prime factor(s)<br/> *-------------------------------------------------------------------*/</span><br/>   <span class=\"kw1\">Dcl</span> x <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   nf<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>   f<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>   x<span class=\"sy0\">=</span>a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   n<span class=\"sy0\">=</span>x<span class=\"sy0\">;</span><br/>   f<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/> loop<span class=\"sy0\">:</span><br/>   <span class=\"kw1\">Do</span> <span class=\"kw1\">While</span><span class=\"br0\">(</span>nf<span class=\"sy0\">&lt;=</span><span class=\"nu0\">2</span> <span class=\"sy0\">&amp;</span> n<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">If</span> is_prime<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">Call</span> mem<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">Leave</span> loop<span class=\"sy0\">;</span><br/>       <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">Else</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/> loop2<span class=\"sy0\">:</span><br/>       <span class=\"kw1\">Do</span> j<span class=\"sy0\">=</span>f<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">By</span> <span class=\"nu0\">1</span> <span class=\"kw1\">While</span><span class=\"br0\">(</span>j<span class=\"sy0\">*</span>j<span class=\"sy0\">&lt;=</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">If</span> is_prime<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">&amp;</span><span class=\"kw1\">mod</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span>j<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/>           <span class=\"kw1\">Call</span> mem<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>           n<span class=\"sy0\">=</span>n<span class=\"sy0\">/</span>j<span class=\"sy0\">;</span><br/>           <span class=\"kw1\">Leave</span> loop2<span class=\"sy0\">;</span><br/>           <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Return</span><span class=\"br0\">(</span>nf<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> is_prime<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">Returns</span><span class=\"br0\">(</span><span class=\"kw1\">bit</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> n <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> i <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">If</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span><span class=\"br0\">(</span><span class=\"st0\">'0'</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">If</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span><span class=\"br0\">(</span><span class=\"st0\">'1'</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">If</span> <span class=\"kw1\">mod</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span><span class=\"br0\">(</span><span class=\"st0\">'0'</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">3</span> <span class=\"kw1\">by</span> <span class=\"nu0\">2</span> <span class=\"kw1\">While</span><span class=\"br0\">(</span>i<span class=\"sy0\">*</span>i<span class=\"sy0\">&lt;=</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">If</span> <span class=\"kw1\">mod</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span><span class=\"br0\">(</span><span class=\"st0\">'0'</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Return</span><span class=\"br0\">(</span><span class=\"st0\">'1'</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span> is_prime<span class=\"sy0\">;</span><br/>\u00a0<br/> mem<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> x <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   nf<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   f<span class=\"br0\">(</span>nf<span class=\"br0\">)</span><span class=\"sy0\">=</span>x<span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> factors<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">Returns</span><span class=\"br0\">(</span><span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">150</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> x <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>res<span class=\"sy0\">,</span>net<span class=\"br0\">)</span> <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">150</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span>f3<span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> res<span class=\"sy0\">=</span>f<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>!!<span class=\"st0\">'*'</span>!!f<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> f3<span class=\"sy0\">=</span>x<span class=\"sy0\">/</span><span class=\"br0\">(</span>f<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>f<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">If</span> f3<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span> <span class=\"kw1\">Then</span><br/>   res<span class=\"sy0\">=</span>res!!<span class=\"st0\">'*'</span>!!f3<span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw1\">length</span><span class=\"br0\">(</span>res<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">If</span> <span class=\"kw1\">substr</span><span class=\"br0\">(</span>res<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"st0\">' '</span> <span class=\"kw1\">Then</span><br/>     net<span class=\"sy0\">=</span>net!!<span class=\"kw1\">substr</span><span class=\"br0\">(</span>res<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Return</span><span class=\"br0\">(</span>net<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> <span class=\"kw1\">End</span> spb<span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 28, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> isPrime <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"kw4\">-le</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"re0\">$false</span><span class=\"br0\">}</span> <br/>    <span class=\"kw3\">elseif</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"kw4\">-eq</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw4\">-or</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"kw4\">-eq</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"re0\">$true</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">else</span><span class=\"br0\">{</span><br/>        <span class=\"re0\">$m</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Floor<span class=\"br0\">(</span><span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Sqrt<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>..<span class=\"re0\">$m</span> <span class=\"sy0\">|</span> <span class=\"kw3\">where</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"kw4\">-lt</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span>  <span class=\"kw4\">-and</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">%</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"kw4\">-eq</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">)</span>.Count <span class=\"kw4\">-eq</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw3\">function</span> semiprime <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"kw4\">-gt</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$lim</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Floor<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>        <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>        <span class=\"kw3\">while</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$lim</span><span class=\"br0\">)</span> <span class=\"kw4\">-and</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">%</span><span class=\"re0\">$i</span> <span class=\"kw4\">-ne</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span> <span class=\"re0\">$i</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"kw4\">-eq</span> <span class=\"re0\">$lim</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">elseif</span><span class=\"br0\">(</span><span class=\"kw4\">-not</span> <span class=\"br0\">(</span>isPrime <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">/</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">else</span><span class=\"br0\">{</span><span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">/</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span> <span class=\"kw3\">else</span> <span class=\"br0\">{</span><span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><a href=\"about:blank\"><span class=\"kw6\">$OFS</span></a> <span class=\"sy0\">=</span> <span class=\"st0\">\" x \"</span><br/><span class=\"st0\">\"1679: $(semiprime 1679)\"</span><br/><span class=\"st0\">\"87: $(semiprime   87)\"</span><br/><span class=\"st0\">\"25: $(semiprime 25)\"</span><br/><span class=\"st0\">\"12: $(semiprime   12)\"</span><br/><span class=\"st0\">\"6: $(semiprime   6)\"</span><br/><a href=\"about:blank\"><span class=\"kw6\">$OFS</span></a> <span class=\"sy0\">=</span> <span class=\"st0\">\" \"</span><br/><span class=\"st0\">\"semiprime form 1 to 100: $(1..100 | where {semiprime $_})\"</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 8, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> prime_decomposition <span class=\"kw1\">import</span> decompose<br/>\u00a0<br/><span class=\"kw1\">def</span> semiprime<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    d <span class=\"sy0\">=</span> decompose<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">try</span>:<br/>        <span class=\"kw1\">return</span> next<span class=\"br0\">(</span>d<span class=\"br0\">)</span> * next<span class=\"br0\">(</span>d<span class=\"br0\">)</span> <span class=\"sy0\">==</span> n<br/>    <span class=\"kw1\">except</span>:<br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">False</span></pre>"}, {"lang": "Racket", "loc": 15, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(require math)<br/>\u00a0<br/>(define (pair-factorize n)<br/>  \"Return all two-number factorizations of a number\"<br/>  (let ([up-limit (integer-sqrt n)])<br/>    (map (\u03bb (x) (list x (/ n x)))<br/>\t (filter (\u03bb (x) (&lt;= x up-limit)) (divisors n)))))<br/>\u00a0<br/>(define (semiprime n)<br/>  \"Determine if a number is semiprime i.e. a product of two primes.<br/>Check if any pair of complete factors consists of primes.\"<br/>  (for/or ((pair (pair-factorize n)))<br/>    (for/and ((el pair))<br/>      (prime? el))))</pre>"}, {"lang": "REXX", "loc": 56, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/* REXX ---------------------------------------------------------------<br/>* 20.02.2014 Walter Pachl  relying on 'prime decomposition'<br/>* 21.02.2014 WP Clarification: I copied the algorithm created by<br/>*            Gerard Schildberger under the task referred to above<br/>* 21.02.2014 WP Make sure that factr is not called illegally<br/>*--------------------------------------------------------------------*/</span><br/><span class=\"kw1\">Call</span> test <span class=\"nu0\">4</span><br/><span class=\"kw1\">Call</span> test <span class=\"nu0\">9</span><br/><span class=\"kw1\">Call</span> test <span class=\"nu0\">10</span><br/><span class=\"kw1\">Call</span> test <span class=\"nu0\">12</span><br/><span class=\"kw1\">Call</span> test <span class=\"nu0\">1679</span><br/><span class=\"kw1\">Exit</span><br/>\u00a0<br/>test:<br/><span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> z<br/><span class=\"kw1\">If</span> is_semiprime<span class=\"br0\">(</span>z<span class=\"br0\">)</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Say</span> z <span class=\"st0\">'is semiprime'</span> fl<br/>                   <span class=\"kw3\">Else</span> <span class=\"kw1\">Say</span> z <span class=\"st0\">'is NOT semiprime'</span> fl<br/><span class=\"kw1\">Return</span><br/>\u00a0<br/>is_semiprime:<br/>  <span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> z<br/>  <span class=\"kw1\">If</span> z<span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span> <span class=\"sy0\">|</span> <span class=\"kw6\">datatype</span><span class=\"br0\">(</span>z,<span class=\"st0\">'W'</span><span class=\"br0\">)</span>=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>    <span class=\"kw1\">Say</span> <span class=\"st0\">'Argument ('</span>z<span class=\"st0\">') must be a natural number (1, 2, 3, ...)'</span><br/>    fl=<span class=\"st0\">''</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw3\">Else</span><br/>    fl=factr<span class=\"br0\">(</span>z<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Return</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>fl<span class=\"br0\">)</span>=<span class=\"nu0\">2</span>    <br/>\u00a0<br/><span class=\"coMULTI\">/*----------------------------------FACTR subroutine-----------------*/</span><br/>factr: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x <span class=\"nu0\">1</span> z,list <span class=\"coMULTI\">/*sets X&amp;Z to arg1, LIST=''.  */</span><br/><span class=\"kw1\">if</span> x==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"st0\">''</span>             <span class=\"coMULTI\">/*handle the special case of X=1.*/</span><br/>j=<span class=\"nu0\">2</span>;     <span class=\"kw1\">call</span> <span class=\"sy0\">.</span>factr                <span class=\"coMULTI\">/*factor for the only even prime.*/</span><br/>j=<span class=\"nu0\">3</span>;     <span class=\"kw1\">call</span> <span class=\"sy0\">.</span>factr                <span class=\"coMULTI\">/*factor for the 1st  odd  prime.*/</span><br/>j=<span class=\"nu0\">5</span>;     <span class=\"kw1\">call</span> <span class=\"sy0\">.</span>factr                <span class=\"coMULTI\">/*factor for the 2nd  odd  prime.*/</span><br/>j=<span class=\"nu0\">7</span>;     <span class=\"kw1\">call</span> <span class=\"sy0\">.</span>factr                <span class=\"coMULTI\">/*factor for the 3rd  odd  prime.*/</span><br/>j=<span class=\"nu0\">11</span>;    <span class=\"kw1\">call</span> <span class=\"sy0\">.</span>factr                <span class=\"coMULTI\">/*factor for the 4th  odd  prime.*/</span><br/>j=<span class=\"nu0\">13</span>;    <span class=\"kw1\">call</span> <span class=\"sy0\">.</span>factr                <span class=\"coMULTI\">/*factor for the 5th  odd  prime.*/</span><br/>j=<span class=\"nu0\">17</span>;    <span class=\"kw1\">call</span> <span class=\"sy0\">.</span>factr                <span class=\"coMULTI\">/*factor for the 6th  odd  prime.*/</span><br/>                                    <span class=\"coMULTI\">/* [?]   could be optimized more.*/</span><br/>                                    <span class=\"coMULTI\">/* [?]   J in loop starts at 17+2*/</span><br/>     <span class=\"kw1\">do</span> y=<span class=\"nu0\">0</span>  <span class=\"kw2\">by</span> <span class=\"nu0\">2</span>;     j=j+<span class=\"nu0\">2</span>+y<span class=\"sy0\">//</span><span class=\"nu0\">4</span>   <span class=\"coMULTI\">/*insure J isn't divisible by 3. */</span><br/>     <span class=\"kw1\">if</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>j,<span class=\"nu0\">1</span><span class=\"br0\">)</span>==<span class=\"nu0\">5</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> <span class=\"coMULTI\">/*fast check for divisible by 5. */</span><br/>     <span class=\"kw1\">if</span> j<span class=\"sy0\">*</span>j<span class=\"sy0\">&gt;</span>z          <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span>   <span class=\"coMULTI\">/*are we higher than the v of Z\u00a0?*/</span><br/>     <span class=\"kw1\">if</span> j<span class=\"sy0\">&gt;</span>Z            <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span>   <span class=\"coMULTI\">/*are we higher than value of Z\u00a0?*/</span><br/>     <span class=\"kw1\">call</span> <span class=\"sy0\">.</span>factr                    <span class=\"coMULTI\">/*invoke .FACTR for some factors.*/</span><br/>     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*y*/</span>                    <span class=\"coMULTI\">/* [?]  only tests up to the v X.*/</span><br/>                                    <span class=\"coMULTI\">/* [?]  LIST has a leading blank.*/</span><br/><span class=\"kw1\">if</span> z==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> list           <span class=\"coMULTI\">/*if residual=unity, don't append*/</span><br/>              <span class=\"kw1\">return</span> list z         <span class=\"coMULTI\">/*return list,  append residual. */</span><br/><span class=\"coMULTI\">/*-------------------------------.FACTR internal subroutine----------*/</span><br/><span class=\"sy0\">.</span>factr:  <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span> z<span class=\"sy0\">//</span>j==<span class=\"nu0\">0</span>          <span class=\"coMULTI\">/*keep dividing until we can't.  */</span><br/>         list=list j                <span class=\"coMULTI\">/*add number to the list  (J).   */</span><br/>         z=z%j                      <span class=\"coMULTI\">/*% (percent)  is integer divide.*/</span><br/>         <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*while z\u00b7\u00b7\u00b7 */</span>      <span class=\"coMULTI\">/*  //  \u00a0?---remainder integer \u00f7.*/</span><br/><span class=\"kw1\">return</span>                              <span class=\"coMULTI\">/*finished, now return to invoker*/</span></pre>"}, {"lang": "Ring", "loc": 26, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>prime = 1679<br/>decomp(prime)<br/>\u00a0<br/>func decomp nr<br/>x = \"\"<br/>sum = 0<br/>for i = 1 to nr<br/>    if isPrime(i) and nr\u00a0% i = 0<br/>       sum = sum + 1<br/>       x = x + string(i) + \" * \" ok<br/>    if i = nr and sum = 2<br/>       x2 = substr(x,1,(len(x)-2))<br/>       see string(nr) + \" = \" + x2 + \"is semiprime\" + nl <br/>    but i = nr and sum\u00a0!= 2 see string(nr) + \" is not semiprime\" + nl ok<br/>next<br/>\u00a0<br/>func isPrime n<br/>     if n &lt; 2 return false ok<br/>     if n &lt; 4 return true ok<br/>     if n\u00a0% 2 = 0 and n\u00a0!= 2 return false ok<br/>     for d = 3 to sqrt(n) step 2 <br/>         if n\u00a0% d = 0 return false ok<br/>     next\t<br/>     return true<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 13, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'prime'</span><br/><span class=\"co1\"># 75.prime_division # Returns the factorization.75 divides by 3 once and by 5 twice =&gt; [[3, 1], [5, 2]]</span><br/>\u00a0<br/><span class=\"kw1\">class</span> <span class=\"kw3\">Integer</span><br/>  <span class=\"kw1\">def</span> semi_prime?<br/>    prime_division.<span class=\"me1\">map</span><span class=\"br0\">(</span> <span class=\"sy0\">&amp;</span>:last <span class=\"br0\">)</span>.<span class=\"me1\">sum</span> == <span class=\"nu0\">2</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">p</span> <span class=\"nu0\">1679</span>.<span class=\"me1\">semi_prime</span>? <span class=\"co1\"># true</span><br/><span class=\"kw3\">p</span> <span class=\"br0\">(</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">100</span> <span class=\"br0\">)</span>.<span class=\"kw3\">select</span><span class=\"br0\">(</span> <span class=\"sy0\">&amp;</span>:semi_prime? <span class=\"br0\">)</span><br/><span class=\"co1\"># [4, 6, 9, 10, 14, 15, 21, 22, 25, 26, 33, 34, 35, 38, 39, 46, 49, 51, 55, 57, 58, 62, 65, 69, 74, 77, 82, 85, 86, 87, 91, 93, 94, 95]</span><br/>\u00a0</pre>"}, {"lang": "Rust", "loc": 56, "block": "<pre class=\"text highlighted_source\">extern crate primal;<br/>\u00a0<br/>fn isqrt(n: usize) -&gt; usize {<br/>    (n as f64).sqrt() as usize<br/>}<br/>\u00a0<br/>fn is_semiprime(mut n: usize) -&gt; bool {<br/>    let root = isqrt(n) + 1;<br/>    let primes1 = primal::Sieve::new(root);<br/>    let mut count = 0;<br/>\u00a0<br/>    for i in primes1.primes_from(2).take_while(|&amp;x| x &lt; root) {<br/>        while n\u00a0% i == 0 {<br/>            n /= i;<br/>            count += 1;<br/>        }<br/>        if n == 1 {<br/>            break;<br/>        }<br/>    }<br/>\u00a0<br/>    if n\u00a0!= 1 {<br/>        count += 1;<br/>    }<br/>    count == 2<br/>}<br/>\u00a0<br/>#[test]<br/>fn test1() {<br/>    assert_eq!((2..10).filter(|&amp;n| is_semiprime(n)).count(), 3);<br/>}<br/>\u00a0<br/>#[test]<br/>fn test2() {<br/>    assert_eq!((2..100).filter(|&amp;n| is_semiprime(n)).count(), 34);<br/>}<br/>\u00a0<br/>#[test]<br/>fn test3() {<br/>    assert_eq!((2..1_000).filter(|&amp;n| is_semiprime(n)).count(), 299);<br/>}<br/>\u00a0<br/>#[test]<br/>fn test4() {<br/>    assert_eq!((2..10_000).filter(|&amp;n| is_semiprime(n)).count(), 2_625);<br/>}<br/>\u00a0<br/>#[test]<br/>fn test5() {<br/>    assert_eq!((2..100_000).filter(|&amp;n| is_semiprime(n)).count(), 23_378);<br/>}<br/>\u00a0<br/>#[test]<br/>fn test6() {<br/>    assert_eq!((2..1_000_000).filter(|&amp;n| is_semiprime(n)).count(), 210_035);<br/>}</pre>"}, {"lang": "Scala", "loc": 20, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Semiprime <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> isSP<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> nf<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> l <span class=\"sy0\">=</span> n<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">2</span> to l/<span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>l <span class=\"sy0\">%</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>nf <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>        nf +<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>        l /<span class=\"sy0\">=</span> i <br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    nf <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"br0\">(</span><span class=\"nu0\">2</span> to <span class=\"nu0\">100</span><span class=\"br0\">)</span> filter <span class=\"br0\">{</span>isSP<span class=\"br0\">(</span><span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">}</span> foreach <span class=\"br0\">{</span>i <span class=\"sy0\">=&gt;</span> print<span class=\"br0\">(</span><span class=\"st0\">\"%d \"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  println<br/>  <span class=\"nu0\">1675</span> to <span class=\"nu0\">1681</span> foreach <span class=\"br0\">{</span>i <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span>i+<span class=\"st0\">\" -&gt; \"</span>+isSP<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Seed7", "loc": 27, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const func boolean: semiPrime (in var integer: n) is func<br/>  result<br/>    var boolean: isSemiPrime is TRUE;<br/>  local<br/>    var integer: p is 2;<br/>    var integer: f is 0;<br/>  begin<br/>    while f &lt; 2 and p**2 &lt;= n do<br/>      while n rem p = 0 do<br/>        n\u00a0:= n div p;<br/>        incr(f);<br/>      end while;<br/>      incr(p);<br/>    end while;<br/>    isSemiPrime\u00a0:= f + ord(n &gt; 1) = 2;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var integer: v is 0;<br/>  begin<br/>    for v range 1675 to 1680 do<br/>      writeln(v &lt;&amp; \" -&gt; \" &lt;&amp; semiPrime(v));<br/>    end for;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 12, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span><span class=\"br0\">(</span><span class=\"st0\">'ntheory'</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>func is_semiprime<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    static nt = <span class=\"sy0\">%</span>S<span class=\"st0\">'ntheory'</span>;<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>var <span class=\"kw3\">p</span> = <span class=\"br0\">[</span>nt.<span class=\"me1\">trial_factor</span><span class=\"br0\">(</span>n, <span class=\"nu0\">500</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">return</span> <span class=\"kw2\">false</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">p</span>.<span class=\"me1\">len</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/>        <span class=\"kw2\">return</span>\u00a0!!nt.<span class=\"me1\">is_prime</span><span class=\"br0\">(</span><span class=\"kw3\">p</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">p</span>.<span class=\"me1\">len</span> == <span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/>  <span class=\"br0\">}</span><br/>  <span class=\"br0\">[</span>nt.<span class=\"me1\">factor</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">]</span>.<span class=\"me1\">len</span> == <span class=\"nu0\">2</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>say <span class=\"br0\">[</span><span class=\"nu0\">2</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">99</span>,<span class=\"nu0\">100</span>,<span class=\"nu0\">1679</span>,<span class=\"nu0\">32768</span>,<span class=\"nu0\">1234567</span>,<span class=\"nu0\">9876543</span>,<span class=\"nu0\">900660121</span><span class=\"br0\">]</span>.<span class=\"me1\">grep</span><span class=\"br0\">{</span> is_semiprime<span class=\"br0\">(</span>_<span class=\"br0\">)</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Swift", "loc": 37, "block": "<pre class=\"text highlighted_source\">import Foundation<br/>\u00a0<br/>func primes(n: Int) -&gt; AnyGenerator&lt;Int&gt; {<br/>\u00a0<br/>  var (seive, i) = ([Int](0..&lt;n), 1)<br/>  let lim = Int(sqrt(Double(n)))<br/>\u00a0<br/>  return anyGenerator {<br/>    while ++i &lt; n {<br/>      if seive[i]\u00a0!= 0 {<br/>        if i &lt;= lim {<br/>          for notPrime in stride(from: i*i, to: n, by: i) {<br/>            seive[notPrime] = 0<br/>          }<br/>        }<br/>        return i<br/>      }<br/>    }<br/>    return nil<br/>  }<br/>}<br/>\u00a0<br/>func isSemiPrime(n: Int) -&gt; Bool {<br/>  let g = primes(n)<br/>  while let first = g.next() {<br/>    if n\u00a0% first == 0 {<br/>      if first * first == n {<br/>        return true<br/>      } else {<br/>        while let second = g.next() {<br/>          if first * second == n { return true }<br/>        }<br/>      }<br/>    }<br/>  }<br/>  return false<br/>}</pre>"}, {"lang": "Tcl", "loc": 24, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require math::<span class=\"me1\">numtheory</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> isSemiprime n <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">[</span>::<span class=\"me1\">math</span>::<span class=\"me1\">numtheory</span>::<span class=\"me1\">isprime</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">3</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span><span class=\"sy0\">*</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i <span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> / <span class=\"re0\">$i</span> <span class=\"sy0\">*</span> <span class=\"re0\">$i</span> <span class=\"sy0\">!</span>= <span class=\"re0\">$n</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">[</span>::<span class=\"me1\">math</span>::<span class=\"me1\">numtheory</span>::<span class=\"me1\">isprime</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>::<span class=\"me1\">math</span>::<span class=\"me1\">numtheory</span>::<span class=\"me1\">isprime</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span>/<span class=\"re0\">$i</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> n <span class=\"nu0\">1675</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">1680</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> -nonewline <span class=\"st0\">\"$n is ... \"</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>isSemiprime <span class=\"re0\">$n</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">puts</span> <span class=\"st0\">\"a semiprime\"</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">puts</span> <span class=\"st0\">\"NOT a semiprime\"</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "zkl", "loc": 8, "block": "<pre class=\"text highlighted_source\">fcn semiprime(n){<br/>   reg f = 0;<br/>   p:=2; while(f &lt; 2 and p*p &lt;= n){<br/>      while(0 == n\u00a0% p){ n /= p; f+=1; }<br/>      p+=1;<br/>   }<br/>   return(f + (n &gt; 1) == 2);<br/>}</pre>"}]}