{"task": "Phrase_reversals", "blocks": [{"lang": "AutoHotkey", "loc": 34, "block": "<pre class=\"autohotkey highlighted_source\">var <span class=\"sy0\">=</span><br/><span class=\"br0\">(</span><br/>Rosetta Code Phrase Reversal<br/><span class=\"br0\">)</span><br/>\u00a0<br/>array <span class=\"sy0\">:=</span> strsplit<span class=\"br0\">(</span>var<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span>\u00a0% array<span class=\"sy0\">.</span>maxindex<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\tstring <span class=\"sy0\">.=</span> array<span class=\"br0\">[</span>array<span class=\"sy0\">.</span>maxindex<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_index</span></a> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">.</span> <span class=\"st0\">\" \"</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span>\u00a0% array<span class=\"sy0\">.</span>maxindex<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tm <span class=\"sy0\">:=</span> array<span class=\"br0\">[</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_index</span></a><span class=\"br0\">]</span><br/>\tarray2 <span class=\"sy0\">:=</span> strsplit<span class=\"br0\">(</span>m<span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span>\u00a0% array2<span class=\"sy0\">.</span>maxindex<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\tstring2 <span class=\"sy0\">.=</span> array2<span class=\"br0\">[</span>array2<span class=\"sy0\">.</span>maxindex<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_index</span></a> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\tstring2 <span class=\"sy0\">.=</span> <span class=\"st0\">\" \"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>array <span class=\"sy0\">:=</span> strsplit<span class=\"br0\">(</span>string<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span> <span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span>\u00a0% array<span class=\"sy0\">.</span>maxindex<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tm <span class=\"sy0\">:=</span> array<span class=\"br0\">[</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_index</span></a><span class=\"br0\">]</span><br/>\tarray3 <span class=\"sy0\">:=</span> strsplit<span class=\"br0\">(</span>m<span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span>\u00a0% array3<span class=\"sy0\">.</span>maxindex<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\tstring3 <span class=\"sy0\">.=</span> array3<span class=\"br0\">[</span>array3<span class=\"sy0\">.</span>maxindex<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_index</span></a> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\tstring3 <span class=\"sy0\">.=</span> <span class=\"st0\">\" \"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% var <span class=\"sy0\">.</span> <span class=\"st0\">\"`n\"</span> <span class=\"sy0\">.</span> string3 <span class=\"sy0\">.</span> <span class=\"st0\">\"`n\"</span> <span class=\"sy0\">.</span> String <span class=\"sy0\">.</span> <span class=\"st0\">\"`n\"</span> <span class=\"sy0\">.</span> string2<br/><a href=\"http://www.autohotkey.com/docs/commands/ExitApp.htm\"><span class=\"kw3\">ExitApp</span></a><br/>\u00a0<br/><span class=\"kw6\">esc</span>::<a href=\"http://www.autohotkey.com/docs/commands/ExitApp.htm\"><span class=\"kw3\">ExitApp</span></a></pre>"}, {"lang": "Ada", "loc": 43, "block": "<pre class=\"ada highlighted_source\">&lt;<span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>, Simple_Parse;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Phrase_Reversal <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">function</span> Reverse_String <span class=\"br0\">(</span>Item\u00a0: String<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String <span class=\"kw1\">is</span><br/>      Result\u00a0: String <span class=\"br0\">(</span>Item'<span class=\"kw3\">Range</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Item'<span class=\"kw3\">range</span> <span class=\"kw1\">loop</span><br/>         Result <span class=\"br0\">(</span>Result'Last - I + Item'First<span class=\"br0\">)</span>\u00a0:= Item <span class=\"br0\">(</span>I<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> Result;<br/>   <span class=\"kw1\">end</span> Reverse_String;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Reverse_Words<span class=\"br0\">(</span>S: String<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String <span class=\"kw1\">is</span><br/>      Cursor: Positive\u00a0:= S'First;<br/>      Word: String\u00a0:= Simple_Parse.<span class=\"me1\">Next_Word</span><span class=\"br0\">(</span>S, Cursor<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> Cursor &gt; S'Last <span class=\"kw1\">then</span> <span class=\"co1\">-- Word holds the last word </span><br/>\t <span class=\"kw1\">return</span> Reverse_String<span class=\"br0\">(</span>Word<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">else</span><br/>\t <span class=\"kw1\">return</span> Reverse_String<span class=\"br0\">(</span>Word<span class=\"br0\">)</span> &amp; <span class=\"st0\">\" \"</span> &amp; Reverse_Words<span class=\"br0\">(</span>S<span class=\"br0\">(</span>Cursor .. <span class=\"me1\">S</span>'Last<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> Reverse_Words;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Reverse_Order<span class=\"br0\">(</span>S: String<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String <span class=\"kw1\">is</span><br/>      Cursor: Positive\u00a0:= S'First;<br/>      Word: String\u00a0:= Simple_Parse.<span class=\"me1\">Next_Word</span><span class=\"br0\">(</span>S, Cursor<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> Cursor &gt; S'Last <span class=\"kw1\">then</span> <span class=\"co1\">-- Word holds the last word </span><br/>\t <span class=\"kw1\">return</span> Word;<br/>      <span class=\"kw1\">else</span><br/>\t <span class=\"kw1\">return</span> Reverse_Order<span class=\"br0\">(</span>S<span class=\"br0\">(</span>Cursor .. <span class=\"me1\">S</span>'Last<span class=\"br0\">)</span><span class=\"br0\">)</span> &amp; <span class=\"st0\">\" \"</span> &amp; Word;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> Reverse_Order;<br/>\u00a0<br/>   Phrase: String\u00a0:= <span class=\"st0\">\"rosetta code phrase reversal\"</span>;<br/>   <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw1\">begin</span><br/>   Put_Line<span class=\"br0\">(</span><span class=\"st0\">\"0. The original phrase:       \"</span><span class=\"st0\">\"\"</span> &amp; Phrase &amp; <span class=\"st0\">\"\"</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span>;<br/>   Put_Line<span class=\"br0\">(</span><span class=\"st0\">\"1. Reverse the entire phrase: \"</span><span class=\"st0\">\"\"</span> &amp; Reverse_String<span class=\"br0\">(</span>Phrase<span class=\"br0\">)</span> &amp; <span class=\"st0\">\"\"</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span>;<br/>   Put_Line<span class=\"br0\">(</span><span class=\"st0\">\"2. Reverse words, same order: \"</span><span class=\"st0\">\"\"</span> &amp; Reverse_Words<span class=\"br0\">(</span>Phrase<span class=\"br0\">)</span> &amp; <span class=\"st0\">\"\"</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span>;<br/>   Put_Line<span class=\"br0\">(</span><span class=\"st0\">\"2. Reverse order, same words: \"</span><span class=\"st0\">\"\"</span> &amp; Reverse_Order<span class=\"br0\">(</span>Phrase<span class=\"br0\">)</span> &amp; <span class=\"st0\">\"\"</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Phrase_Reversal;</pre>"}, {"lang": "ALGOL 68", "loc": 55, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># reverses the characters in str from start pos to end pos                   #</span><br/><span class=\"kw4\">PROC</span> in place reverse <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">REF</span> <span class=\"kw3\">STRING</span> str<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> start pos<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> end pos <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>    <span class=\"kw2\">BEGIN</span><br/>        <span class=\"kw3\">INT</span> fpos <span class=\"sy1\">:=</span> start pos<span class=\"sy1\">,</span> epos <span class=\"sy1\">:=</span> end pos<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">WHILE</span> fpos <span class=\"sy1\">&lt;</span> epos<br/>        <span class=\"kw2\">DO</span><br/>            <span class=\"kw3\">CHAR</span> c      <span class=\"sy1\">:=</span> str<span class=\"br0\">[</span> fpos <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>            str<span class=\"br0\">[</span> fpos <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> str<span class=\"br0\">[</span> epos <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>            str<span class=\"br0\">[</span> epos <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> c<span class=\"sy1\">;</span><br/>            fpos       <span class=\"sy1\">+:=</span> 1<span class=\"sy1\">;</span><br/>            epos       <span class=\"sy1\">-:=</span> 1<br/>        <span class=\"kw2\">OD</span><br/>    <span class=\"kw2\">END</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># in place reverse #</span><br/>\u00a0<br/><span class=\"kw3\">STRING</span> original phrase <span class=\"sy1\">:=</span> <span class=\"st0\">\"rosetta code phrase reversal\"</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw3\">STRING</span> <span class=\"kw22\">whole</span> reversed  <span class=\"sy1\">:=</span> original phrase<span class=\"sy1\">;</span><br/>in place reverse<span class=\"br0\">(</span> <span class=\"kw22\">whole</span> reversed<span class=\"sy1\">,</span> <span class=\"kw8\">LWB</span> <span class=\"kw22\">whole</span> reversed<span class=\"sy1\">,</span> <span class=\"kw8\">UPB</span> <span class=\"kw22\">whole</span> reversed <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># reverse the individual words #</span><br/><span class=\"kw3\">STRING</span> words reversed <span class=\"sy1\">:=</span> original phrase<span class=\"sy1\">;</span><br/><span class=\"kw3\">INT</span> start pos         <span class=\"sy1\">:=</span> <span class=\"kw8\">LWB</span> words reversed<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw2\">WHILE</span><br/>    <span class=\"coMULTI\"># skip leading spaces #</span><br/>    <span class=\"kw2\">WHILE</span> <span class=\"kw2\">IF</span> start pos <span class=\"sy1\">&lt;=</span> <span class=\"kw8\">UPB</span> words reversed<br/>          <span class=\"kw2\">THEN</span> words reversed<span class=\"br0\">[</span> start pos <span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">\" \"</span><br/>          <span class=\"kw2\">ELSE</span> <span class=\"kw7\">FALSE</span><br/>          <span class=\"kw2\">FI</span><br/>    <span class=\"kw2\">DO</span> start pos <span class=\"sy1\">+:=</span> 1<br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    start pos <span class=\"sy1\">&lt;=</span> <span class=\"kw8\">UPB</span> words reversed<br/><span class=\"kw2\">DO</span><br/>    <span class=\"coMULTI\"># have another word, find it #</span><br/>    <span class=\"kw3\">INT</span> end pos <span class=\"sy1\">:=</span> start pos<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">WHILE</span> <span class=\"kw2\">IF</span> end pos <span class=\"sy1\">&lt;=</span> <span class=\"kw8\">UPB</span> words reversed<br/>          <span class=\"kw2\">THEN</span> words reversed<span class=\"br0\">[</span> end pos <span class=\"br0\">]</span> <span class=\"sy1\">/=</span> <span class=\"st0\">\" \"</span><br/>          <span class=\"kw2\">ELSE</span> <span class=\"kw7\">FALSE</span><br/>          <span class=\"kw2\">FI</span><br/>    <span class=\"kw2\">DO</span> end pos <span class=\"sy1\">+:=</span> 1<br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    in place reverse<span class=\"br0\">(</span> words reversed<span class=\"sy1\">,</span> start pos<span class=\"sy1\">,</span> end pos <span class=\"sy1\">-</span> 1 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    start pos <span class=\"sy1\">:=</span> end pos <span class=\"sy1\">+</span> 1<br/><span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># reversing the reversed words in the same order as the original will        #</span><br/><span class=\"coMULTI\"># reverse the order of the words                                             #</span><br/><span class=\"kw3\">STRING</span> order reversed <span class=\"sy1\">:=</span> words reversed<span class=\"sy1\">;</span><br/>in place reverse<span class=\"br0\">(</span> order reversed<span class=\"sy1\">,</span> <span class=\"kw8\">LWB</span> order reversed<span class=\"sy1\">,</span> <span class=\"kw8\">UPB</span> order reversed <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> original phrase<span class=\"sy1\">,</span> <span class=\"st0\">\": whole reversed -&gt; \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span> reversed<span class=\"sy1\">,</span> <span class=\"kw22\">newline</span><br/>       <span class=\"sy1\">,</span> original phrase<span class=\"sy1\">,</span> <span class=\"st0\">\": words reversed -&gt; \"</span><span class=\"sy1\">,</span> words reversed<span class=\"sy1\">,</span> <span class=\"kw22\">newline</span><br/>       <span class=\"sy1\">,</span> original phrase<span class=\"sy1\">,</span> <span class=\"st0\">\": order reversed -&gt; \"</span><span class=\"sy1\">,</span> order reversed<span class=\"sy1\">,</span> <span class=\"kw22\">newline</span><br/>       <span class=\"br0\">)</span><br/> <span class=\"br0\">)</span></pre>"}, {"lang": "AppleScript", "loc": 124, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- REVERSED PHRASES, COMPONENT WORDS, AND WORD ORDER ---------------------</span><br/>\u00a0<br/><span class=\"co1\">-- reverseString, reverseEachWord, reverseWordOrder\u00a0:: String -&gt; String</span><br/><span class=\"kw3\">on</span> stringReverse<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    |reverse|<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> stringReverse<br/>\u00a0<br/><span class=\"kw3\">on</span> reverseEachWord<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    wordLevel<span class=\"br0\">(</span>curry<span class=\"br0\">(</span><span class=\"kw3\">my</span> map<span class=\"br0\">)</span><span class=\"co3\">'s |\u03bb|(my |reverse|))'</span>s |\u03bb|<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> reverseEachWord<br/>\u00a0<br/><span class=\"kw3\">on</span> reverseWordOrder<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    wordLevel<span class=\"br0\">(</span><span class=\"kw3\">my</span> |reverse|<span class=\"br0\">)</span>'s |\u03bb|<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> reverseWordOrder<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- wordLevel\u00a0:: ([String] -&gt; [String]) -&gt; String -&gt; String</span><br/><span class=\"kw3\">on</span> wordLevel<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>            unwords<span class=\"br0\">(</span>mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span>'s |\u03bb|<span class=\"br0\">(</span>|words|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/><span class=\"kw3\">end</span> wordLevel<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- TEST ----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>    unlines<span class=\"br0\">(</span>|<span class=\"sy0\">&lt;*</span>&gt;|<span class=\"br0\">(</span><span class=\"br0\">{</span>stringReverse, reverseEachWord, reverseWordOrder<span class=\"br0\">}</span>, \u00ac<br/>        <span class=\"br0\">{</span><span class=\"st0\">\"rosetta code phrase reversal\"</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">--&gt;</span><br/>\u00a0<br/>    <span class=\"co1\">--     \"lasrever esarhp edoc attesor</span><br/>    <span class=\"co1\">--      attesor edoc esarhp lasrever</span><br/>    <span class=\"co1\">--      reversal phrase code rosetta\"    </span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ---------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- A list of functions applied to a list of arguments</span><br/><span class=\"co1\">-- (&lt;*&gt; | ap)\u00a0:: [(a -&gt; b)] -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> |<span class=\"sy0\">&lt;*</span>&gt;|<span class=\"br0\">(</span>fs, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>nf, nx<span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span>length <span class=\"kw3\">of</span> fs, length <span class=\"kw3\">of</span> xs<span class=\"br0\">}</span><br/>    <span class=\"kw3\">set</span> acc <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> nf<br/>        <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> fs<span class=\"br0\">)</span><br/>            <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> j <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> nx<br/>                <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> acc <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">contents</span> <span class=\"kw3\">of</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> j <span class=\"kw3\">of</span> xs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> acc<br/><span class=\"kw3\">end</span> |<span class=\"sy0\">&lt;*</span>&gt;|<br/>\u00a0<br/><span class=\"co1\">-- curry\u00a0:: (Script|Handler) -&gt; Script</span><br/><span class=\"kw3\">on</span> curry<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>            <span class=\"kw3\">script</span><br/>                <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>                    |\u03bb|<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"kw3\">of</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>                <span class=\"kw3\">end</span> |\u03bb|<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/><span class=\"kw3\">end</span> curry<br/>\u00a0<br/><span class=\"co1\">-- intercalate\u00a0:: Text -&gt; [Text] -&gt; Text</span><br/><span class=\"kw3\">on</span> intercalate<span class=\"br0\">(</span>strText, lstText<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>dlm, <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span><span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span>, strText<span class=\"br0\">}</span><br/>    <span class=\"kw3\">set</span> strJoined <span class=\"kw3\">to</span> lstText <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/>    <span class=\"kw3\">set</span> <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span> <span class=\"kw3\">to</span> dlm<br/>    <span class=\"kw3\">return</span> strJoined<br/><span class=\"kw3\">end</span> intercalate<br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn<br/>\u00a0<br/><span class=\"co1\">-- reverse\u00a0:: [a] -&gt; [a]</span><br/><span class=\"kw3\">on</span> |reverse|<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> xs <span class=\"kw3\">is</span> <span class=\"kw1\">text</span> <span class=\"kw3\">then</span><br/>        <span class=\"br0\">(</span>reverse <span class=\"kw3\">of</span> characters <span class=\"kw3\">of</span> xs<span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/>    <span class=\"kw3\">else</span><br/>        reverse <span class=\"kw3\">of</span> xs<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> |reverse|<br/>\u00a0<br/><span class=\"co1\">-- words\u00a0:: String -&gt; [String]</span><br/><span class=\"kw3\">on</span> |words|<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    words <span class=\"kw3\">of</span> s<br/><span class=\"kw3\">end</span> |words|<br/>\u00a0<br/><span class=\"co1\">-- unlines\u00a0:: [String] -&gt; String</span><br/><span class=\"kw3\">on</span> unlines<span class=\"br0\">(</span>lstLines<span class=\"br0\">)</span><br/>    intercalate<span class=\"br0\">(</span>linefeed, lstLines<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> unlines<br/>\u00a0<br/><span class=\"co1\">-- unwords\u00a0:: [String] -&gt; String</span><br/><span class=\"kw3\">on</span> unwords<span class=\"br0\">(</span>lstWords<span class=\"br0\">)</span><br/>    intercalate<span class=\"br0\">(</span><span class=\"kw1\">space</span>, lstWords<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> unwords</pre>"}, {"lang": "AWK", "loc": 18, "block": "<pre class=\"awk highlighted_source\"><span class=\"co1\"># Usage:  awk -f phrase_revers.awk</span><br/><span class=\"kw6\">function</span> rev<span class=\"br0\">(</span>s, del,   n,i,a,r<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   n = <span class=\"kw4\">split</span><span class=\"br0\">(</span>s, a, del<span class=\"br0\">)</span><br/>   r = a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>   <span class=\"kw1\">for</span><span class=\"br0\">(</span>i=<span class=\"nu0\">2</span>; i <span class=\"sy2\">&lt;=</span> n; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>r = a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> del r <span class=\"br0\">}</span>    <br/>   <span class=\"kw6\">return</span> r<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>  p0 = <span class=\"st0\">\"Rosetta Code Phrase Reversal\"</span><br/>\u00a0<br/>  fmt = <span class=\"st0\">\"%-20s:\u00a0%s<span class=\"es0\">\\n</span>\"</span><br/>  <span class=\"kw5\">printf</span><span class=\"br0\">(</span> fmt, <span class=\"st0\">\"input\"</span>,               p0 <span class=\"br0\">)</span><br/>  <span class=\"kw5\">printf</span><span class=\"br0\">(</span> fmt, <span class=\"st0\">\"string reversed\"</span>,     rev<span class=\"br0\">(</span>p0, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>  wr = rev<span class=\"br0\">(</span>p0, <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>  <span class=\"kw5\">printf</span><span class=\"br0\">(</span> fmt, <span class=\"st0\">\"word-order reversed\"</span>, wr <span class=\"br0\">)</span><br/>  <span class=\"kw5\">printf</span><span class=\"br0\">(</span> fmt, <span class=\"st0\">\"each word reversed\"</span>,  rev<span class=\"br0\">(</span>wr<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "BaCon", "loc": 7, "block": "<pre class=\"qbasic highlighted_source\">phrase$ <span class=\"sy0\">=</span> <span class=\"st0\">\"rosetta code phrase reversal\"</span><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> REVERSE$<span class=\"br0\">(</span>phrase$<span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> REV$<span class=\"br0\">(</span>REVERSE$<span class=\"br0\">(</span>phrase$<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> REV$<span class=\"br0\">(</span>phrase$<span class=\"br0\">)</span></pre>"}, {"lang": "Batch File", "loc": 49, "block": "<pre class=\"dos highlighted_source\"><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/>\t<span class=\"sy0\">%</span><span class=\"re3\">=== The Main Thing... ===</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"inp=Rosetta Code phrase reversal\"<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">reverse_string</span> \"<span class=\"sy0\">!</span><span class=\"re2\">inp</span><span class=\"sy0\">!</span>\" rev1<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">reverse_order</span> \"<span class=\"sy0\">!</span><span class=\"re2\">inp</span><span class=\"sy0\">!</span>\" rev2<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">reverse_words</span> \"<span class=\"sy0\">!</span><span class=\"re2\">inp</span><span class=\"sy0\">!</span>\" rev3<br/>cls<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.Original:       <span class=\"sy0\">!</span><span class=\"re2\">inp</span><span class=\"sy0\">!</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.Reversed:       <span class=\"sy0\">!</span><span class=\"re2\">rev1</span><span class=\"sy0\">!</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.Reversed Order: <span class=\"sy0\">!</span><span class=\"re2\">rev2</span><span class=\"sy0\">!</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.Reversed Words: <span class=\"sy0\">!</span><span class=\"re2\">rev3</span><span class=\"sy0\">!</span><br/>pause<span class=\"sy0\">&gt;</span><a href=\"http://www.ss64.com/nt/nul.html\"><span class=\"kw4\">nul</span></a><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b 0<br/>\t<span class=\"sy0\">%</span><span class=\"re3\">=== /The Main Thing... ===</span><span class=\"sy0\">%</span><br/>\u00a0<br/>\t<span class=\"sy0\">%</span><span class=\"re3\">=== Reverse the Order Function ===</span><span class=\"sy0\">%</span><br/>:<span class=\"re0\">reverse_order</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> var1=<span class=\"sy0\">%</span><span class=\"re3\">2</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> <span class=\"sy0\">%</span><span class=\"re3\">var1</span><span class=\"sy0\">%</span>=<span class=\"sy0\">&amp;</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> word=<span class=\"sy0\">&amp;</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> str1=<span class=\"sy0\">%</span><span class=\"re3\">1</span><br/>:<span class=\"re0\">process1</span><br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /f \"tokens=1,*\" <span class=\"sy0\">%%</span><span class=\"re3\">A</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(%</span><span class=\"re3\">str1</span><span class=\"sy0\">%)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> str1=<span class=\"sy0\">%%</span><span class=\"re3\">B</span><span class=\"sy0\">&amp;</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> word=<span class=\"sy0\">%%</span><span class=\"re3\">A</span><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> <span class=\"sy0\">%</span><span class=\"re3\">var1</span><span class=\"sy0\">%</span>=<span class=\"sy0\">!</span><span class=\"re2\">word</span><span class=\"sy0\">!</span> <span class=\"sy0\">!</span><span class=\"re2\">%<span class=\"re3\">var1</span>%</span><span class=\"sy0\">!&amp;</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> str1=\"<span class=\"sy0\">!</span><span class=\"re2\">str1</span><span class=\"sy0\">!</span>\"<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <a href=\"http://www.ss64.com/nt/not.html\"><span class=\"kw2\">not</span></a> <span class=\"sy0\">!</span><span class=\"re2\">str1</span><span class=\"sy0\">!</span>==\"\" <a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> process1<br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">EOF</span><br/>\t<span class=\"sy0\">%</span><span class=\"re3\">=== /Reverse the Order Function ===</span><span class=\"sy0\">%</span><br/>\u00a0<br/>\t<span class=\"sy0\">%</span><span class=\"re3\">=== Reverse the Whole String Function ===</span><span class=\"sy0\">%</span><br/>:<span class=\"re0\">reverse_string</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> var2=<span class=\"sy0\">%</span><span class=\"re3\">2</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> <span class=\"sy0\">%</span><span class=\"re3\">var2</span><span class=\"sy0\">%</span>=<span class=\"sy0\">&amp;</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> cnt=0<span class=\"sy0\">&amp;</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> str2=<span class=\"sy0\">%</span><span class=\"re3\">~1</span><br/>:<span class=\"re0\">process2</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> char=<span class=\"sy0\">!</span><span class=\"re2\">str2:~%<span class=\"re3\">cnt</span>%,1</span><span class=\"sy0\">!&amp;</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> <span class=\"sy0\">%</span><span class=\"re3\">var2</span><span class=\"sy0\">%</span>=<span class=\"sy0\">!</span><span class=\"re2\">char</span><span class=\"sy0\">!</span><span class=\"sy0\">!</span><span class=\"re2\">%<span class=\"re3\">var2</span>%</span><span class=\"sy0\">!</span><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <a href=\"http://www.ss64.com/nt/not.html\"><span class=\"kw2\">not</span></a> \"<span class=\"sy0\">!</span><span class=\"re2\">char</span><span class=\"sy0\">!</span>\"==\"\" <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a cnt+=1<span class=\"sy0\">&amp;</span><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> process2<br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">EOF</span><br/>\t<span class=\"sy0\">%</span><span class=\"re3\">=== /Reverse the Whole String Function ===</span><span class=\"sy0\">%</span><br/>\u00a0<br/>\t<span class=\"sy0\">%</span><span class=\"re3\">=== Reverse each Words Function ===</span><span class=\"sy0\">%</span><br/>:<span class=\"re0\">reverse_words</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> var3=<span class=\"sy0\">%</span><span class=\"re3\">2</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> <span class=\"sy0\">%</span><span class=\"re3\">var3</span><span class=\"sy0\">%</span>=<span class=\"sy0\">&amp;</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> word=<span class=\"sy0\">&amp;</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> str3=<span class=\"sy0\">%</span><span class=\"re3\">1</span><br/>:<span class=\"re0\">process3</span><br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /f \"tokens=1,*\" <span class=\"sy0\">%%</span><span class=\"re3\">A</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(%</span><span class=\"re3\">str3</span><span class=\"sy0\">%)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> str3=<span class=\"sy0\">%%</span><span class=\"re3\">B</span><span class=\"sy0\">&amp;</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> word=<span class=\"sy0\">%%</span><span class=\"re3\">A</span><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">reverse_string</span> \"<span class=\"sy0\">%</span><span class=\"re3\">word</span><span class=\"sy0\">%</span>\" revs<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> <span class=\"sy0\">%</span><span class=\"re3\">var3</span><span class=\"sy0\">%</span>=<span class=\"sy0\">!</span><span class=\"re2\">%<span class=\"re3\">var3</span>%</span><span class=\"sy0\">!</span> <span class=\"sy0\">!</span><span class=\"re2\">revs</span><span class=\"sy0\">!&amp;</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> str3=\"<span class=\"sy0\">!</span><span class=\"re2\">str3</span><span class=\"sy0\">!</span>\"<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <a href=\"http://www.ss64.com/nt/not.html\"><span class=\"kw2\">not</span></a> <span class=\"sy0\">!</span><span class=\"re2\">str3</span><span class=\"sy0\">!</span>==\"\" <a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> process3<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> <span class=\"sy0\">%</span><span class=\"re3\">var3</span><span class=\"sy0\">%</span>=<span class=\"sy0\">!</span><span class=\"re2\">%<span class=\"re3\">var3</span>%:~1,1000000</span><span class=\"sy0\">!</span><br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">EOF</span><br/>\t<span class=\"sy0\">%</span><span class=\"re3\">=== /Reverse each Words Function ===</span><span class=\"sy0\">%</span></pre>"}, {"lang": "Bracmat", "loc": 16, "block": "<pre class=\"text highlighted_source\">( \"rosetta code phrase reversal\":?text<br/>&amp; rev$!text:?output1<br/>&amp; get$(!text,MEM):?words<br/>&amp;\u00a0:?output2:?output3<br/>&amp;   whl<br/>  ' (\u00a0!words:%?word\u00a0%?words<br/>    &amp;\u00a0!output2 rev$!word \" \":?output2<br/>    &amp; \" \"\u00a0!word\u00a0!output3:?output3<br/>    )<br/>&amp; str$(!output2 rev$!words):?output2<br/>&amp; str$(!words\u00a0!output3):?output3<br/>&amp;   out<br/>  $ ( str<br/>    $ (\"0:\\\"\"\u00a0!text \"\\\"\\n1:\\\"\"\u00a0!output1 \"\\\"\\n2:\\\"\"\u00a0!output2 \"\\\"\\n3:\\\"\"\u00a0!output3 \\\"\\n)<br/>    )<br/>);</pre>"}, {"lang": "C", "loc": 72, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* The functions used are destructive, so after each call the string needs<br/> * to be copied over again. One could easily allocate new strings as<br/> * required, but this way allows the caller to manage memory themselves */</span><br/>\u00a0<br/><span class=\"kw4\">char</span><span class=\"sy0\">*</span> reverse_section<span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"sy0\">,</span> <span class=\"kw4\">size_t</span> length<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>length <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> s<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">size_t</span> i<span class=\"sy0\">;</span> <span class=\"kw4\">char</span> temp<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> length <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span><br/>        temp <span class=\"sy0\">=</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> s<span class=\"br0\">[</span>length <span class=\"sy0\">-</span> i<span class=\"br0\">]</span><span class=\"sy0\">,</span> s<span class=\"br0\">[</span>length <span class=\"sy0\">-</span> i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> temp<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> s<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">char</span><span class=\"sy0\">*</span> reverse_words_in_order<span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> delim<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> s<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">size_t</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> s<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> j<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> s<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> j<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> delim<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>j<span class=\"br0\">)</span><br/>            <span class=\"sy0\">;</span><br/>        reverse_section<span class=\"br0\">(</span>s <span class=\"sy0\">+</span> i<span class=\"sy0\">,</span> j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        s <span class=\"sy0\">+=</span> j<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> s<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">char</span><span class=\"sy0\">*</span> reverse_string<span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy0\">?</span> reverse_section<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> s<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">char</span><span class=\"sy0\">*</span> reverse_order_of_words<span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> delim<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    reverse_string<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    reverse_words_in_order<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> delim<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> s<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">char</span> str<span class=\"br0\">[</span><span class=\"br0\">]</span>    <span class=\"sy0\">=</span> <span class=\"st0\">\"rosetta code phrase reversal\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">size_t</span> lenstr <span class=\"sy0\">=</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>str<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> scopy<span class=\"br0\">[</span>lenstr<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> delim <span class=\"sy0\">=</span> <span class=\"st0\">' '</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* Original String */</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Original:       <span class=\"es1\">\\\"</span>%s<span class=\"es1\">\\\"</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> str<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* Reversed string */</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strncpy.html\"><span class=\"kw3\">strncpy</span></a><span class=\"br0\">(</span>scopy<span class=\"sy0\">,</span> str<span class=\"sy0\">,</span> lenstr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    reverse_string<span class=\"br0\">(</span>scopy<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Reversed:       <span class=\"es1\">\\\"</span>%s<span class=\"es1\">\\\"</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> scopy<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* Reversed words in string */</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strncpy.html\"><span class=\"kw3\">strncpy</span></a><span class=\"br0\">(</span>scopy<span class=\"sy0\">,</span> str<span class=\"sy0\">,</span> lenstr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    reverse_words_in_order<span class=\"br0\">(</span>scopy<span class=\"sy0\">,</span> delim<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Reversed words: <span class=\"es1\">\\\"</span>%s<span class=\"es1\">\\\"</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> scopy<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* Reversed order of words in string */</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strncpy.html\"><span class=\"kw3\">strncpy</span></a><span class=\"br0\">(</span>scopy<span class=\"sy0\">,</span> str<span class=\"sy0\">,</span> lenstr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    reverse_order_of_words<span class=\"br0\">(</span>scopy<span class=\"sy0\">,</span> delim<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Reversed order: <span class=\"es1\">\\\"</span>%s<span class=\"es1\">\\\"</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> scopy<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C++", "loc": 23, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;iterator&gt;</span><br/><span class=\"co2\">#include &lt;sstream&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">string</span> s <span class=\"sy1\">=</span> <span class=\"st0\">\"rosetta code phrase reversal\"</span><span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Input\u00a0: \"</span> <span class=\"sy1\">&lt;&lt;</span> s <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><br/>             <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Input reversed\u00a0: \"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"br0\">(</span>s.<span class=\"me1\">rbegin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, s.<span class=\"me1\">rend</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">istringstream</span> is<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy1\">&gt;</span> words<span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">istream_iterator</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>is<span class=\"br0\">)</span>, <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Each word reversed\u00a0: \"</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">auto</span> w <span class=\"sy4\">:</span> words<span class=\"br0\">)</span><br/>      std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"br0\">(</span>w.<span class=\"me1\">rbegin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, w.<span class=\"me1\">rend</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span><span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><br/>             <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Original word order reversed\u00a0: \"</span> <span class=\"sy4\">;</span><br/>   reverse_copy<span class=\"br0\">(</span>words.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, words.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">ostream_iterator</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span>, <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span> <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 22, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">namespace</span> ConsoleApplication<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"co1\">//Reverse() is an extension method on IEnumerable&lt;char&gt;.</span><br/>            <span class=\"co1\">//The constructor takes a char[], so we have to call ToArray()</span><br/>            Func<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span>, <span class=\"kw4\">string</span><span class=\"sy0\">&gt;</span> reverse <span class=\"sy0\">=</span> s <span class=\"sy0\">=&gt;</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">string</span><span class=\"br0\">(</span>s<span class=\"sy0\">.</span><span class=\"me1\">Reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw4\">string</span> phrase <span class=\"sy0\">=</span> <span class=\"st0\">\"rosetta code phrase reversal\"</span><span class=\"sy0\">;</span><br/>            <span class=\"co1\">//Reverse the string</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>reverse<span class=\"br0\">(</span>phrase<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"co1\">//Reverse each individual word in the string, maintaining original string order.</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span>, phrase<span class=\"sy0\">.</span><span class=\"me1\">Split</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>word <span class=\"sy0\">=&gt;</span> reverse<span class=\"br0\">(</span>word<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"co1\">//Reverse the order of each word of the phrase, maintaining the order of characters in each word.</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span>, phrase<span class=\"sy0\">.</span><span class=\"me1\">Split</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 11, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span>use '<span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>string\u00a0:<span class=\"me1\">only</span> <span class=\"br0\">(</span>join split<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> phrase <span class=\"st0\">\"rosetta code phrase reversal\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> str<span class=\"sy0\">-</span><span class=\"kw1\">reverse</span> <span class=\"br0\">[</span>s<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">str</span> <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; Reverse string</span><br/><span class=\"br0\">(</span>str<span class=\"sy0\">-</span><span class=\"kw1\">reverse</span> phrase<span class=\"br0\">)</span><br/><span class=\"co1\">; Words reversed</span><br/><span class=\"br0\">(</span>join <span class=\"st0\">\" \"</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> str<span class=\"sy0\">-</span><span class=\"kw1\">reverse</span> <span class=\"br0\">(</span>split phrase #<span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/><span class=\"co1\">; Word order reversed</span><br/><span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">str</span> <span class=\"br0\">(</span><span class=\"kw1\">interpose</span> <span class=\"st0\">\" \"</span> <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> <span class=\"br0\">(</span>split phrase #<span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "COBOL", "loc": 37, "block": "<pre class=\"cobol highlighted_source\">\u00a0<br/>       <span class=\"kw3\">program-id</span><span class=\"sy0\">.</span> phra-rev<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">working-storage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">1</span> phrase <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">28</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"st0\">\"rosetta code phrase reversal\"</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">1</span> wk-str <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">1</span> <span class=\"kw3\">binary</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">2</span> phrase-len <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">2</span> pos <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">2</span> cnt <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">procedure</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>           <span class=\"kw2\">compute</span> phrase-len <span class=\"sy0\">=</span> <span class=\"kw3\">function</span> <span class=\"kw4\">length</span> <span class=\"br0\">(</span>phrase<span class=\"br0\">)</span><br/>           <span class=\"kw2\">display</span> phrase<br/>           <span class=\"kw2\">display</span> <span class=\"kw3\">function</span> <span class=\"kw4\">reverse</span> <span class=\"br0\">(</span>phrase<span class=\"br0\">)</span><br/>           <span class=\"kw2\">perform</span> display-<span class=\"kw3\">words</span><br/>           <span class=\"kw2\">move</span> <span class=\"kw3\">function</span> <span class=\"kw4\">reverse</span> <span class=\"br0\">(</span>phrase<span class=\"br0\">)</span> <span class=\"kw2\">to</span> phrase<br/>           <span class=\"kw2\">perform</span> display-<span class=\"kw3\">words</span><br/>           <span class=\"kw3\">stop</span> <span class=\"kw3\">run</span><br/>           <span class=\"sy0\">.</span><br/>\u00a0<br/>       display-<span class=\"kw3\">words</span><span class=\"sy0\">.</span><br/>           <span class=\"kw2\">move</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> pos<br/>           <span class=\"kw2\">perform</span> <span class=\"kw2\">until</span> pos &gt; phrase-len<br/>               <span class=\"kw3\">unstring</span> phrase <span class=\"kw3\">delimited</span> <span class=\"kw3\">space</span><br/>               <span class=\"kw2\">into</span> wk-str <span class=\"kw3\">count</span> <span class=\"kw3\">in</span> cnt<br/>               <span class=\"kw3\">with</span> <span class=\"kw3\">pointer</span> pos<br/>               <span class=\"kw3\">end-unstring</span><br/>               <span class=\"kw2\">display</span> <span class=\"kw3\">function</span> <span class=\"kw4\">reverse</span> <span class=\"br0\">(</span>wk-str <span class=\"br0\">(</span><span class=\"nu0\">1</span>:cnt<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                   <span class=\"kw3\">with</span> <span class=\"kw3\">no</span> <span class=\"kw3\">advancing</span><br/>               <span class=\"kw1\">if</span> pos &lt; phrase-len<br/>                   <span class=\"kw2\">display</span> <span class=\"kw3\">space</span> <span class=\"kw3\">with</span> <span class=\"kw3\">no</span> <span class=\"kw3\">advancing</span><br/>               end-<span class=\"kw1\">if</span><br/>           end-<span class=\"kw2\">perform</span><br/>           <span class=\"kw2\">display</span> <span class=\"kw3\">space</span><br/>           <span class=\"sy0\">.</span><br/>       <span class=\"kw3\">end</span> <span class=\"kw3\">program</span> phra-rev<span class=\"sy0\">.</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 19, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> split-string <span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/> <span class=\"st0\">\"Split a string into space separated words including spaces\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">do</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>lst <span class=\"kw1\">nil</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>i <span class=\"br0\">(</span>position-<span class=\"kw1\">if</span> #'alphanumericp str<span class=\"br0\">)</span> <span class=\"br0\">(</span>position-<span class=\"kw1\">if</span> #'alphanumericp str <span class=\"sy0\">:</span><span class=\"me1\">start</span> j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>j <span class=\"br0\">(</span><span class=\"kw1\">when</span> i <span class=\"br0\">(</span>position #\\Space str <span class=\"sy0\">:</span><span class=\"me1\">start</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">when</span> i <span class=\"br0\">(</span>position #\\Space str <span class=\"sy0\">:</span><span class=\"me1\">start</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">null</span> j<span class=\"br0\">)</span> <span class=\"br0\">(</span>nreverse <span class=\"br0\">(</span>push <span class=\"br0\">(</span>subseq str i <span class=\"kw1\">nil</span><span class=\"br0\">)</span> lst<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>push <span class=\"br0\">(</span>subseq str i j<span class=\"br0\">)</span> lst<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>push <span class=\"st0\">\" \"</span> lst<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> task <span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> str<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>lst <span class=\"br0\">(</span>split-string str<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"kw1\">apply</span> #'concatenate 'string <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> #'<span class=\"kw1\">reverse</span> lst<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"kw1\">apply</span> #'concatenate 'string <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> lst<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>  <span class=\"kw1\">nil</span> <span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "D", "loc": 8, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> phrase <span class=\"sy0\">=</span> <span class=\"st0\">\"rosetta code phrase reversal\"</span><span class=\"sy0\">;</span><br/>    phrase.<span class=\"me1\">retro</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span>                          <span class=\"co1\">// Reversed string.</span><br/>    phrase.<span class=\"me1\">splitter</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span>retro.<span class=\"me1\">joiner</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span> <span class=\"co1\">// Words reversed.</span><br/>    phrase.<span class=\"me1\">split</span>.<span class=\"me1\">retro</span>.<span class=\"me1\">joiner</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span>        <span class=\"co1\">// Word order reversed.</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 16, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>string<span class=\"sy0\">-</span><span class=\"kw1\">reverse</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>list<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> <span class=\"br0\">(</span>string<span class=\"sy0\">-&gt;</span><span class=\"kw1\">list</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>task str<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">for-each</span> writeln <span class=\"br0\">(</span><span class=\"kw1\">list</span><br/>      <span class=\"br0\">(</span>string<span class=\"sy0\">-</span><span class=\"kw1\">reverse</span> str<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>join <span class=\"br0\">(</span><span class=\"kw1\">map</span> string<span class=\"sy0\">-</span><span class=\"kw1\">reverse</span> <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>split str <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>join <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>split str <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">(</span>task <span class=\"st0\">\"rosetta code phrase reversal\"</span><span class=\"br0\">)</span><br/>    <span class=\"st0\">\"lasrever esarhp edoc attesor\"</span>    <br/>    <span class=\"st0\">\"attesor edoc esarhp lasrever\"</span>    <br/>    <span class=\"st0\">\"reversal phrase code rosetta\"</span>    <br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 17, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>import system'routines.<br/>\u00a0<br/>program =<br/>[<br/>    var reverse\u00a0:= (:s)(s toArray; sequenceReverse; summarize(String new)).<br/>\u00a0<br/>    var phrase\u00a0:= \"rosetta code phrase reversal\".<br/>    console printLine(phrase).<br/>\u00a0<br/>    //Reverse the string<br/>    console printLine(reverse(phrase)).<br/>    //Reverse each individual word in the string, maintaining original string order.<br/>    console printLine(phrase split by:\" \"; selectBy(:s)(reverse(s) add(\" \")); summarize(String new)).<br/>    //Reverse the order of each word of the phrase, maintaining the order of characters in each word.<br/>    console printLine(reverse(phrase split by:\" \"; selectBy(:s)(s + \" \"))).<br/>].</pre>"}, {"lang": "Elixir", "loc": 5, "block": "<pre class=\"text highlighted_source\">str = \"rosetta code phrase reversal\"<br/>\u00a0<br/>IO.puts String.reverse(str)<br/>IO.puts String.split(str) |&gt; Enum.map(&amp;String.reverse(&amp;1)) |&gt; Enum.join(\" \")<br/>IO.puts String.split(str) |&gt; Enum.reverse |&gt; Enum.join(\" \")</pre>"}, {"lang": "Emacs Lisp", "loc": 21, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(defun reverse-sep (words sep)<br/>  (mapconcat 'identity (reverse (split-string words sep) ) sep) )<br/>\u00a0<br/>(defun reverse-chars (line)<br/>  (reverse-sep line \"\") )<br/>\u00a0<br/>(defun reverse-words (line)<br/>  (reverse-sep line \" \") )<br/>\u00a0<br/>(progn<br/>  (setq line \"rosetta code phrase reversal\")<br/>\u00a0<br/>  (insert (format \"%s\\n\" (reverse-chars line) ))<br/>\u00a0<br/>    (insert (format \"%s\\n\" <br/>        (mapconcat 'identity (mapcar #'reverse-chars <br/>                                     (split-string line) ) \" \") ))<br/>\u00a0<br/>    (insert (format \"%s\\n\" (reverse-words line) )))<br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 11, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>USE: splitting<br/>\u00a0<br/>: splitp         ( str -- seq ) \" \" split\u00a0;<br/>: printp         ( seq -- )     \" \" join print\u00a0;<br/>: reverse-string ( str -- )     reverse print\u00a0;<br/>: reverse-words  ( str -- )     splitp [ reverse ] map printp\u00a0;<br/>: reverse-phrase ( str -- )     splitp reverse printp\u00a0;<br/>\u00a0<br/>\"rosetta code phrase reversal\" [ reverse-string ] [ reverse-words ] [ reverse-phrase ] tri<br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 3, "block": "<pre class=\"fortran highlighted_source\">      <span class=\"kw1\">DO</span> <span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span>L1.<span class=\"me1\">LE</span>.<span class=\"me1\">L</span> <span class=\"kw2\">.<span class=\"me1\">AND</span>.</span> ATXT<span class=\"br0\">(</span>L1<span class=\"br0\">)</span><span class=\"kw2\">.<span class=\"me1\">LE</span>.</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>        L1 <span class=\"sy0\">=</span> L1 <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span></pre>"}, {"lang": "FreeBASIC", "loc": 64, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> split <span class=\"br0\">(</span>s <span class=\"kw1\">As</span> <span class=\"kw1\">Const</span> <span class=\"kw1\">String</span>, sepList <span class=\"kw1\">As</span> <span class=\"kw1\">Const</span> <span class=\"kw1\">String</span>, result<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> s = <span class=\"st0\">\"\"</span> OrElse sepList = <span class=\"st0\">\"\"</span> <span class=\"kw1\">Then</span> <br/>     <span class=\"kw1\">Redim</span> result<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>     result<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> = s<br/>     <span class=\"kw1\">Return</span><br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> i, j, count = <span class=\"nu0\">0</span>, empty = <span class=\"nu0\">0</span>, length<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> position<span class=\"br0\">(</span><span class=\"kw1\">Len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  position<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> = <span class=\"nu0\">0</span><br/>\u00a0<br/>  <span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw1\">len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> - <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">For</span> j = <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>sepList<span class=\"br0\">)</span> - <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">If</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = sepList<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"kw1\">Then</span> <br/>        count += <span class=\"nu0\">1</span><br/>        position<span class=\"br0\">(</span>count<span class=\"br0\">)</span> = i + <span class=\"nu0\">1</span>       <br/>      <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">Next</span> j<br/>  <span class=\"kw1\">Next</span> i<br/>\u00a0<br/>  <span class=\"kw1\">Redim</span> result<span class=\"br0\">(</span>count<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> count  = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>    result<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> = s<br/>    <span class=\"kw1\">Return</span><br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>  position<span class=\"br0\">(</span>count + <span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"kw1\">len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> + <span class=\"nu0\">1</span><br/>\u00a0<br/>  <span class=\"kw1\">For</span> i = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> count + <span class=\"nu0\">1</span>  <br/>    length = position<span class=\"br0\">(</span>i<span class=\"br0\">)</span> - position<span class=\"br0\">(</span>i - <span class=\"nu0\">1</span><span class=\"br0\">)</span> - <span class=\"nu0\">1</span> <br/>    result<span class=\"br0\">(</span>i - <span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"kw1\">Mid</span><span class=\"br0\">(</span>s, position<span class=\"br0\">(</span>i - <span class=\"nu0\">1</span><span class=\"br0\">)</span> + <span class=\"nu0\">1</span>, length<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> reverse<span class=\"br0\">(</span>s <span class=\"kw1\">As</span> <span class=\"kw1\">Const</span> <span class=\"kw1\">String</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/>  <span class=\"kw1\">If</span> s = <span class=\"st0\">\"\"</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"st0\">\"\"</span><br/>  <span class=\"kw1\">Dim</span> t <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> = s<br/>  <span class=\"kw1\">Dim</span> length <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"kw1\">Len</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> length\\<span class=\"nu0\">2</span> - <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Swap</span> t<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, t<span class=\"br0\">[</span>length - <span class=\"nu0\">1</span> - i<span class=\"br0\">]</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Return</span> t<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span> <br/>\u00a0<br/><span class=\"kw1\">Dim</span> s <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> = <span class=\"st0\">\"rosetta code phrase reversal\"</span><br/><span class=\"kw1\">Dim</span> a<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/><span class=\"kw1\">Dim</span> sepList <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> = <span class=\"st0\">\" \"</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Original string =&gt; \"</span>; s<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Reversed string =&gt; \"</span>; reverse<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Reversed words  =&gt; \"</span>;<br/>split s, sepList, a<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"kw1\">LBound</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"kw1\">To</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Print</span> reverse<span class=\"br0\">(</span>a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"st0\">\" \"</span>;<br/><span class=\"kw1\">Next</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Reversed order  =&gt; \"</span>;<br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"kw1\">To</span> <span class=\"kw1\">LBound</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"kw1\">Step</span> -<span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Print</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span>; <span class=\"st0\">\" \"</span>;<br/><span class=\"kw1\">Next</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Gambas", "loc": 36, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sString <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">=</span> <span class=\"st0\">\"rosetta code phrase reversal\"</span>  <span class=\"co1\">'The string</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sNewString, sTemp <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a>                         <span class=\"co1\">'String variables</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> siCount <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/short\"><span class=\"kw4\">Short</span></a>                                    <span class=\"co1\">'Counter</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sWord <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/new\"><span class=\"kw1\">New</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span>                               <span class=\"co1\">'Word store</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> siCount <span class=\"sy0\">=</span> <a href=\"http://gambasdoc.org/help/lang/len\"><span class=\"kw2\">Len</span></a><span class=\"br0\">(</span>sString<span class=\"br0\">)</span> DownTo <span class=\"nu0\">1</span>                     <span class=\"co1\">'Loop backwards through the string</span><br/>  sNewString <span class=\"sy0\">&amp;=</span> <a href=\"http://gambasdoc.org/help/lang/mid\"><span class=\"kw2\">Mid</span></a><span class=\"br0\">(</span>sString, sicount, <span class=\"nu0\">1</span><span class=\"br0\">)</span>                <span class=\"co1\">'Add each character to the new string</span><br/><a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <span class=\"st0\">\"Original string = <span class=\"es0\">\\t</span>\"</span> <span class=\"sy0\">&amp;</span> sString <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">&amp;</span>         <span class=\"co1\">'Print the original string</span><br/>  <span class=\"st0\">\"Reversed string = <span class=\"es0\">\\t</span>\"</span> <span class=\"sy0\">&amp;</span> sNewString                   <span class=\"co1\">'Print the reversed string</span><br/>\u00a0<br/>sNewString <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span>                                         <span class=\"co1\">'Reset sNewString</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> <a href=\"http://gambasdoc.org/help/lang/each\"><span class=\"kw1\">Each</span></a> sTemp <a href=\"http://gambasdoc.org/help/lang/in\"><span class=\"kw1\">In</span></a> <a href=\"http://gambasdoc.org/help/lang/split\"><span class=\"kw2\">Split</span></a><span class=\"br0\">(</span>sString, <span class=\"st0\">\" \"</span><span class=\"br0\">)</span>                   <span class=\"co1\">'Split the original string by the spaces</span><br/>  sWord.<span class=\"me1\">Add</span><span class=\"br0\">(</span>sTemp<span class=\"br0\">)</span>                                      <span class=\"co1\">'Add each word to sWord array</span><br/><a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> siCount <span class=\"sy0\">=</span> sWord.<a href=\"http://gambasdoc.org/help/lang/max\"><span class=\"kw2\">max</span></a> DownTo <span class=\"nu0\">0</span>                        <span class=\"co1\">'Loop backward through each word in sWord</span><br/>  sNewString <span class=\"sy0\">&amp;=</span> sWord<span class=\"br0\">[</span>siCount<span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" \"</span>                    <span class=\"co1\">'Add each word to to sNewString</span><br/><a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <span class=\"st0\">\"Reversed word order = <span class=\"es0\">\\t</span>\"</span> <span class=\"sy0\">&amp;</span> sNewString           <span class=\"co1\">'Print reversed word order</span><br/>\u00a0<br/>sNewString <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span>                                         <span class=\"co1\">'Reset sNewString</span><br/><a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> <a href=\"http://gambasdoc.org/help/lang/each\"><span class=\"kw1\">Each</span></a> sTemp <a href=\"http://gambasdoc.org/help/lang/in\"><span class=\"kw1\">In</span></a> sWord                                 <span class=\"co1\">'For each word in sWord</span><br/>  <a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> siCount <span class=\"sy0\">=</span> <a href=\"http://gambasdoc.org/help/lang/len\"><span class=\"kw2\">Len</span></a><span class=\"br0\">(</span>sTemp<span class=\"br0\">)</span> DownTo <span class=\"nu0\">1</span>                     <span class=\"co1\">'Loop backward through the word</span><br/>    sNewString <span class=\"sy0\">&amp;=</span> <a href=\"http://gambasdoc.org/help/lang/mid\"><span class=\"kw2\">Mid</span></a><span class=\"br0\">(</span>sTemp, siCount, <span class=\"nu0\">1</span><span class=\"br0\">)</span>                <span class=\"co1\">'Add the characters to sNewString</span><br/>  <a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>  sNewString <span class=\"sy0\">&amp;=</span> <span class=\"st0\">\" \"</span>                                     <span class=\"co1\">'Add a space at the end of each word</span><br/><a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <span class=\"st0\">\"Words reversed = <span class=\"es0\">\\t</span>\"</span> <span class=\"sy0\">&amp;</span> sNewString                <span class=\"co1\">'Print words reversed</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "Go", "loc": 35, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>\t<span class=\"st0\">\"fmt\"</span><br/>\t<span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">const</span> phrase <span class=\"sy2\">=</span> <span class=\"st0\">\"rosetta code phrase reversal\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> revStr<span class=\"sy1\">(</span>s <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>\trs <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span>rune<span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">))</span><br/>\t<span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> r <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> s <span class=\"sy1\">{</span><br/>\t\t<span class=\"nu2\">i</span><span class=\"sy2\">--</span><br/>\t\trs<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> r<br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw4\">string</span><span class=\"sy1\">(</span>rs<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">:])</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Reversed:           \"</span><span class=\"sy1\">,</span> revStr<span class=\"sy1\">(</span>phrase<span class=\"sy1\">))</span><br/>\u00a0<br/>\tws <span class=\"sy2\">:=</span> strings<span class=\"sy3\">.</span>Fields<span class=\"sy1\">(</span>phrase<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> w <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> ws <span class=\"sy1\">{</span><br/>\t\tws<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> revStr<span class=\"sy1\">(</span>w<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Words reversed:     \"</span><span class=\"sy1\">,</span> strings<span class=\"sy3\">.</span><span class=\"me1\">Join</span><span class=\"sy1\">(</span>ws<span class=\"sy1\">,</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">))</span><br/>\u00a0<br/>\tws <span class=\"sy2\">=</span> strings<span class=\"sy3\">.</span>Fields<span class=\"sy1\">(</span>phrase<span class=\"sy1\">)</span><br/>\tlast <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>ws<span class=\"sy1\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> w <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> ws<span class=\"sy1\">[:</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>ws<span class=\"sy1\">)</span><span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>\t\tws<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> ws<span class=\"sy1\">[</span>last<span class=\"sy3\">-</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> ws<span class=\"sy1\">[</span>last<span class=\"sy3\">-</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> w<br/>\t<span class=\"sy1\">}</span><br/>\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Word order reversed:\"</span><span class=\"sy1\">,</span> strings<span class=\"sy3\">.</span><span class=\"me1\">Join</span><span class=\"sy1\">(</span>ws<span class=\"sy1\">,</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 7, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> phaseReverse <span class=\"sy0\">=</span> <span class=\"br0\">{</span> text, closure <span class=\"sy0\">-&gt;</span> closure<span class=\"br0\">(</span>text.<span class=\"me1\">split</span><span class=\"br0\">(</span>/ /<span class=\"br0\">)</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20join\"><span class=\"kw5\">join</span></a><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> text <span class=\"sy0\">=</span> <span class=\"st0\">'rosetta code phrase reversal'</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"Original:       $text\"</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"Reversed:       ${phaseReverse(text) { it.reverse().collect { it.reverse() } } }\"</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"Reversed Words: ${phaseReverse(text) { it.collect { it.reverse() } } }\"</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"Reversed Order: ${phaseReverse(text) { it.reverse() } }\"</span></pre>"}, {"lang": "Haskell", "loc": 15, "block": "<pre class=\"haskell highlighted_source\">reverseString<span class=\"sy0\">,</span> reverseEachWord<span class=\"sy0\">,</span> reverseWordOrder <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>reverseString <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reverse\"><span class=\"kw3\">reverse</span></a><br/>\u00a0<br/>reverseEachWord <span class=\"sy0\">=</span> wordLevel <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reverse\"><span class=\"kw3\">reverse</span></a><span class=\"br0\">)</span><br/>\u00a0<br/>reverseWordOrder <span class=\"sy0\">=</span> wordLevel <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reverse\"><span class=\"kw3\">reverse</span></a><br/>\u00a0<br/>wordLevel <span class=\"sy0\">::</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>wordLevel f <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:unwords\"><span class=\"kw3\">unwords</span></a> <span class=\"sy0\">.</span> f <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:words\"><span class=\"kw3\">words</span></a><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span><br/>  <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:unlines\"><span class=\"kw3\">unlines</span></a><span class=\"br0\">)</span> <span class=\"sy0\">$</span><br/>  <span class=\"br0\">[</span>reverseString<span class=\"sy0\">,</span> reverseEachWord<span class=\"sy0\">,</span> reverseWordOrder<span class=\"br0\">]</span> <span class=\"sy0\">&lt;*&gt;</span><br/>  <span class=\"br0\">[</span><span class=\"st0\">\"rosetta code phrase reversal\"</span><span class=\"br0\">]</span></pre>"}, {"lang": "J", "loc": 4, "block": "<pre class=\"j highlighted_source\">   getWords=: <span class=\"sy0\">(</span><span class=\"st_h\">' '</span>&amp;splitstring<span class=\"sy0\">)</span>\u00a0:. <span class=\"sy0\">(</span><span class=\"st_h\">' '</span>&amp;joinstring<span class=\"sy0\">)</span><br/>   reverseString=: |.<br/>   reverseWords=: |.&amp;.&gt;&amp;.getWords<br/>   reverseWordOrder=: |.&amp;.getWords</pre>"}, {"lang": "Java", "loc": 36, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">import</span> <span class=\"co2\">java.util.Arrays</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">public</span> <span class=\"kw2\">class</span> PhraseRev<span class=\"br0\">{</span><br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> reverse<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> x<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">return</span> <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/StringBuilder.html\"><span class=\"kw21\">StringBuilder</span></a><span class=\"br0\">(</span>x<span class=\"br0\">)</span>.<span class=\"me1\">reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span> reverse<span class=\"br0\">(</span>T<span class=\"br0\">[</span><span class=\"br0\">]</span> x<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\tT<span class=\"br0\">[</span><span class=\"br0\">]</span> rev = <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Arrays.html\"><span class=\"kw46\">Arrays</span></a>.<span class=\"me1\">copyOf</span><span class=\"br0\">(</span>x, x.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw3\">int</span> i = x.<span class=\"me1\">length</span> - <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i--<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\trev<span class=\"br0\">[</span>x.<span class=\"me1\">length</span> - <span class=\"nu0\">1</span> - i<span class=\"br0\">]</span> = x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw2\">return</span> rev<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> join<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> arr, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> joinStr<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/StringBuilder.html\"><span class=\"kw21\">StringBuilder</span></a> joined = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/StringBuilder.html\"><span class=\"kw21\">StringBuilder</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw3\">int</span> i = <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> arr.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i++<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\tjoined.<span class=\"me1\">append</span><span class=\"br0\">(</span>arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> arr.<span class=\"me1\">length</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span> joined.<span class=\"me1\">append</span><span class=\"br0\">(</span>joinStr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw2\">return</span> joined.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> str = <span class=\"st0\">\"rosetta code phrase reversal\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Straight-up reversed: \"</span> + reverse<span class=\"br0\">(</span>str<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> words = str.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw3\">int</span> i = <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> words.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i++<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\twords<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = reverse<span class=\"br0\">(</span>words<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Reversed words: \"</span> + join<span class=\"br0\">(</span>words, <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Reversed word order: \"</span> + join<span class=\"br0\">(</span>reverse<span class=\"br0\">(</span>str.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 13, "block": "<pre class=\"javascript highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"br0\">[</span><br/>    p.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span>.<span class=\"me1\">reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\u00a0<br/>    p.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> x.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span>.<span class=\"me1\">reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\u00a0<br/>    p.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span>.<span class=\"me1\">reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"br0\">]</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"st0\">'rosetta code phrase reversal'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 8, "block": "<pre class=\"text highlighted_source\">def reverse_string: explode | reverse | implode;<br/>\u00a0<br/>\"rosetta code phrase reversal\" <br/>| split(\" \") as $words<br/>| \"0. input:               \\(.)\",<br/>  \"1. string reversed:     \\(reverse_string)\",<br/>  \"2. each word reversed:  \\($words | map(reverse_string) | join(\" \"))\",<br/>  \"3. word-order reversed: \\($words | reverse | join(\" \"))\"</pre>"}, {"lang": "Julia", "loc": 18, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>s = \"rosetta code phrase reversal\"<br/>\u00a0<br/>println(\"The original phrase.\")<br/>println(\"   \", s)<br/>\u00a0<br/>println(\"Reverse the string.\")<br/>t = reverse(s)<br/>println(\"   \", t)<br/>\u00a0<br/>println(\"Reverse each individual word in the string.\")<br/>t = join(map(reverse, split(s, \" \")), \" \")<br/>println(\"   \", t)<br/>\u00a0<br/>println(\"Reverse the order of each word of the phrase.\")<br/>t = join(reverse(split(s, \" \")), \" \")<br/>println(\"   \", t)<br/>\u00a0</pre>"}, {"lang": "K", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>/ Rosetta code phrase reversal<br/>/ phraserev.k<br/>\u00a0<br/>reversestr: {|x}<br/>getnxtwd: {c:(&amp;\" \"~'x); if[c~!0;w::x;:\"\"];w::c[0]#x; x: ((1+c[0]) _ x)}<br/>revwords: {rw:\"\"; while[~(x~\"\"); x: getnxtwd x;rw,:|w;rw,:\" \"];:-1 _ rw}<br/>revwordorder: {rw:\"\"; while[~(x~\"\"); x: getnxtwd x;rw:\" \",rw;rw:w,rw];:-1 _ rw}<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 12, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun reverseEachWord<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"sy0\">=</span> s.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> it.<span class=\"me1\">reversed</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>.<span class=\"me1\">joinToString</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> original <span class=\"sy0\">=</span> <span class=\"st0\">\"rosetta code phrase reversal\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> reversed <span class=\"sy0\">=</span> original.<span class=\"me1\">reversed</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Original string =&gt; $original\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Reversed string =&gt; $reversed\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Reversed words  =&gt; ${reverseEachWord(original)}\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Reversed order  =&gt; ${reverseEachWord(reversed)}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 27, "block": "<pre class=\"lua highlighted_source\"><span class=\"co1\">-- Return a copy of table t in which each string is reversed</span><br/><span class=\"kw1\">function</span> reverseEach <span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> rev <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> k<span class=\"sy0\">,</span> v <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span> <span class=\"kw1\">do</span> rev<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> v<span class=\"sy0\">:</span>reverse<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> rev<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Return a reversed copy of table t</span><br/><span class=\"kw1\">function</span> tabReverse <span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> revTab <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> i<span class=\"sy0\">,</span> v <span class=\"kw2\">in</span> <span class=\"kw3\">ipairs</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span> <span class=\"kw1\">do</span> revTab<span class=\"br0\">[</span><span class=\"sy0\">#</span>t <span class=\"sy0\">-</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> v <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> revTab<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Split string str into a table on space characters</span><br/><span class=\"kw1\">function</span> wordSplit <span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> t <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> word <span class=\"kw2\">in</span> str<span class=\"sy0\">:</span>gmatch<span class=\"br0\">(</span><span class=\"st0\">\"%S+\"</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>t<span class=\"sy0\">,</span> word<span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> t<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Main procedure</span><br/><span class=\"kw1\">local</span> str <span class=\"sy0\">=</span> <span class=\"st0\">\"rosetta code phrase reversal\"</span><br/><span class=\"kw1\">local</span> tab <span class=\"sy0\">=</span> wordSplit<span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"1. \"</span> <span class=\"sy0\">..</span> str<span class=\"sy0\">:</span>reverse<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"2. \"</span> <span class=\"sy0\">..</span> <span class=\"kw3\">table.concat</span><span class=\"br0\">(</span>reverseEach<span class=\"br0\">(</span>tab<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"3. \"</span> <span class=\"sy0\">..</span> <span class=\"kw3\">table.concat</span><span class=\"br0\">(</span>tabReverse<span class=\"br0\">(</span>tab<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Maple", "loc": 11, "block": "<pre class=\"text highlighted_source\">#reverse the string<br/>str\u00a0:= \"rosetta code phrase reversal\":<br/>print(StringTools:-Reverse(str)):<br/>#reverse each word<br/>lst\u00a0:= convert(StringTools:-Split(str, \" \"), Array):<br/>for i to numelems(lst) do<br/>\tlst[i]\u00a0:= StringTools:-Reverse(lst[i]):<br/>end do:<br/>print(StringTools:-Join(convert(lst,list),\" \")):<br/>#reverse word order<br/>print(StringTools:-Join(ListTools:-Reverse(StringTools:-Split(str,\" \")), \" \")):</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 13, "block": "<pre class=\"text highlighted_source\">phrase = \"Rosetta Code Phrase Reversal\";<br/>\u00a0<br/>reverseWords[phrase_String]\u00a0:= <br/> StringJoin @@ Riffle[<a class=\"__cf_email__\" data-cfemail=\"316354475443425471624543585f5662415d5845\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@phrase, \" \"]<br/>\u00a0<br/>reverseLetters[phrase_String]\u00a0:=<br/>\u00a0<br/> StringJoin @@ <br/>  Riffle[Map[StringJoin @@ Reverse[<a class=\"__cf_email__\" data-cfemail=\"3e7d565f4c5f5d4a5b4c4d7e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#] &amp;, <br/>    <a class=\"__cf_email__\" data-cfemail=\"732007011a1d1420031f1a0733031b01120016\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>], \" \"]<br/>\u00a0<br/>{phrase, <a class=\"__cf_email__\" data-cfemail=\"e290879487909187b58d908691a2928a90839187\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, <a class=\"__cf_email__\" data-cfemail=\"186a7d6e7d6a6b7d547d6c6c7d6a6b5868706a796b7d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, <br/>  <a class=\"__cf_email__\" data-cfemail=\"fd8f988b988f8e98aa928f998ebd8f988b988f8e98b1988989988f8e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@phrase} // TableForm</pre>"}, {"lang": "Oforth", "loc": 3, "block": "<pre class=\"text highlighted_source\">\"rosetta code phrase reversal\" reverse println<br/>\"rosetta code phrase reversal\" words map(#reverse) unwords println<br/>\"rosetta code phrase reversal\" words reverse unwords println</pre>"}, {"lang": "Perl", "loc": 10, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> feature <span class=\"st_h\">'say'</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$s</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"rosetta code phrase reversal\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>say <span class=\"st0\">\"0. Input              \u00a0: \"</span><span class=\"sy0\">,</span> <span class=\"re0\">$s</span><span class=\"sy0\">;</span><br/>say <span class=\"st0\">\"1. String reversed    \u00a0: \"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/scalar.html\"><span class=\"kw3\">scalar</span></a> <a href=\"http://perldoc.perl.org/functions/reverse.html\"><span class=\"kw3\">reverse</span></a> <span class=\"re0\">$s</span><span class=\"sy0\">;</span><br/>say <span class=\"st0\">\"2. Each word reversed \u00a0: \"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/reverse.html\"><span class=\"kw3\">reverse</span></a> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a> <span class=\"co2\">/ /</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/reverse.html\"><span class=\"kw3\">reverse</span></a> <span class=\"re0\">$s</span><span class=\"sy0\">;</span><br/>say <span class=\"st0\">\"3. Word-order reversed\u00a0: \"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/reverse.html\"><span class=\"kw3\">reverse</span></a> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a> <span class=\"co2\">/ /</span><span class=\"sy0\">,</span><span class=\"re0\">$s</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Or, using a regex:</span><br/>say <span class=\"st0\">\"2. Each word reversed \u00a0: \"</span><span class=\"sy0\">,</span> <span class=\"re0\">$s</span> <span class=\"sy0\">=~</span> <a href=\"http://perldoc.perl.org/functions/s.html\"><span class=\"kw3\">s</span></a><span class=\"sy0\">/</span><span class=\"br0\">[</span><span class=\"sy0\">^</span> <span class=\"br0\">]</span><span class=\"sy0\">+/</span><a href=\"http://perldoc.perl.org/functions/reverse.html\"><span class=\"kw3\">reverse</span></a> <span class=\"co5\">$&amp;</span><span class=\"sy0\">/</span>gre<span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 6, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$s</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'rosetta code phrase reversal'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>put <span class=\"st_h\">'Input              \u00a0: '</span><span class=\"sy0\">,</span> <span class=\"re0\">$s</span><span class=\"sy0\">;</span><br/>put <span class=\"st_h\">'String reversed    \u00a0: '</span><span class=\"sy0\">,</span> <span class=\"re0\">$s</span><span class=\"sy0\">.</span><span class=\"kw3\">flip</span><span class=\"sy0\">;</span><br/>put <span class=\"st_h\">'Each word reversed \u00a0: '</span><span class=\"sy0\">,</span> <span class=\"re0\">$s</span><span class=\"sy0\">.</span><span class=\"kw3\">words</span>\u00bb<span class=\"sy0\">.</span><span class=\"kw3\">flip</span><span class=\"sy0\">;</span><br/>put <span class=\"st_h\">'Word-order reversed\u00a0: '</span><span class=\"sy0\">,</span> <span class=\"re0\">$s</span><span class=\"sy0\">.</span><span class=\"kw3\">words</span><span class=\"sy0\">.</span><span class=\"kw3\">reverse</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 8, "block": "<pre class=\"text highlighted_source\">constant test=\"rosetta code phrase reversal\"<br/>?reverse(test)<br/>sequence words = split(reverse(test))<br/>for i=1 to length(words) do<br/>    words[i] = reverse(words[i])<br/>end for<br/>?join(words)<br/>?join(reverse(words))</pre>"}, {"lang": "PHP", "loc": 29, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"co1\">// Initialize a variable with the input desired</span><br/><span class=\"re0\">$strin</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"rosetta code phrase reversal\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// Show user what original input was</span><br/><span class=\"kw1\">echo</span> <span class=\"st0\">\"Input: \"</span><span class=\"sy0\">.</span><span class=\"re0\">$strin</span><span class=\"sy0\">.</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// Show the full input reversed</span><br/><span class=\"kw1\">echo</span> <span class=\"st0\">\"Reversed: \"</span><span class=\"sy0\">.</span><a href=\"http://www.php.net/strrev\"><span class=\"kw3\">strrev</span></a><span class=\"br0\">(</span><span class=\"re0\">$strin</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// reverse the word letters in place</span><br/><span class=\"re0\">$str_words_reversed</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$temp</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/explode\"><span class=\"kw3\">explode</span></a><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> <span class=\"re0\">$strin</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">foreach</span><span class=\"br0\">(</span><span class=\"re0\">$temp</span> <span class=\"kw1\">as</span> <span class=\"re0\">$word</span><span class=\"br0\">)</span><br/>\t<span class=\"re0\">$str_words_reversed</span> <span class=\"sy0\">.=</span> <a href=\"http://www.php.net/strrev\"><span class=\"kw3\">strrev</span></a><span class=\"br0\">(</span><span class=\"re0\">$word</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"st0\">\" \"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// Show the reversed words in place</span><br/><span class=\"kw1\">echo</span> <span class=\"st0\">\"Words reversed: \"</span><span class=\"sy0\">.</span><span class=\"re0\">$str_words_reversed</span><span class=\"sy0\">.</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">// reverse the word order while leaving the words in order</span><br/><span class=\"re0\">$str_word_order_reversed</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$temp</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/explode\"><span class=\"kw3\">explode</span></a><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> <span class=\"re0\">$strin</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">=</span><span class=\"br0\">(</span><a href=\"http://www.php.net/count\"><span class=\"kw3\">count</span></a><span class=\"br0\">(</span><span class=\"re0\">$temp</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">&gt;=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">--</span><span class=\"br0\">)</span><br/>\t<span class=\"re0\">$str_word_order_reversed</span> <span class=\"sy0\">.=</span> <span class=\"re0\">$temp</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"st0\">\" \"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// Show the reversal of the word order while leaving the words in order</span><br/><span class=\"kw1\">echo</span> <span class=\"st0\">\"Word order reversed: \"</span><span class=\"sy0\">.</span><span class=\"re0\">$str_word_order_reversed</span><span class=\"sy0\">.</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "PicoLisp", "loc": 4, "block": "<pre class=\"text highlighted_source\">(let (S (chop \"rosetta code phrase reversal\")  L (split S \" \"))<br/>   (prinl (reverse S))<br/>   (prinl (glue \" \" (mapcar reverse L)))<br/>   (prinl (glue \" \" (reverse L))) )</pre>"}, {"lang": "PL/I", "loc": 23, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>reverser: procedure options (main);          /* 19 August 2015 */<br/>   declare (phrase, r, word) character (100) varying;<br/>   declare (start, end) fixed binary;<br/>\u00a0<br/>   phrase = 'rosetta code phrase reversal';<br/>   put ('The original phrase is: ' || phrase);<br/>\u00a0<br/>   put skip list ( '1. ' || reverse(phrase) );<br/>\u00a0<br/>   start = 1; r = ''; put skip edit ('2. ') (a);<br/>   do until ( end &gt; length(phrase) );<br/>      end = index(phrase, ' ', start);          /* Find end of the next word.*/<br/>      if end = 0 then end = length(phrase) + 1; /* We're at the last word.   */<br/>      word = substr(phrase, start, end-start);<br/>      put edit ( reverse(word), ' ' ) (a);      /* Append reversed word.     */<br/>      r = word || ' ' || r;                     /* Prepend normal word.      */<br/>      start = end+1;<br/>   end;<br/>   put skip list ('3. ' || r);<br/>\u00a0<br/>end reverser;<br/>\u00a0</pre>"}, {"lang": "Plain TeX", "loc": 39, "block": "<pre class=\"text highlighted_source\">\\def\\afterfi#1#2\\fi{#2\\fi#1}<br/>\\def\\RevSingleWord#1{\\RevSingleWordi{}#1\\RSWA\\RSWB\\RSWB\\RSWB\\RSWB\\RSWB\\RSWB\\RSWB\\RSWB\\RSWA}<br/>\\def\\RevSingleWordi#1#2#3#4#5#6#7#8#9{\\RSWgobtoB#9\\RSWend\\RSWB\\RevSingleWordi{#9#8#7#6#5#4#3#2#1}}<br/>\\def\\RSWend\\RSWB\\RevSingleWordi#1#2\\RSWA{\\RSWgobtoA#1}<br/>\\def\\RSWgobtoA#1\\RSWA{}\\def\\RSWgobtoB#1\\RSWB{}<br/>%---<br/>\\def\\firstchartonil#1#2\\nil{#1}<br/>\\def\\RevOrderSameWords#1{\\RevOrderSameWordsi{}#1 \\. \\* \\* \\* \\* \\* \\* \\* \\* \\.}<br/>\\def\\RevOrderSameWordsi#1#2 #3 #4 #5 #6 #7 #8 #9 {%<br/>\t\\expandafter\\ifx\\expandafter\\*\\firstchartonil#9\\nil<br/>\t\\expandafter\\ROSWend\\else\\expandafter\\RevOrderSameWordsi\\fi{#9 #8 #7 #6 #5 #4 #3 #2#1}%<br/>}<br/>\\def\\ROSWend#1#2\\.{\\ROSWendi#1}<br/>\\def\\ROSWendi#1\\.{\\romannumeral-`\\-}<br/>%---<br/>\\def\\ROWquark{\\ROWquark}<br/>\\def\\RevOnlyWords#1{\\edef\\ROWtemp{\\noexpand\\RevOnlyWordsi{}#1 \\noexpand\\ROWquark\\space}\\ROWtemp}<br/>\\def\\RevOnlyWordsi#1#2 {%<br/>\t\\ifx\\ROWquark#2\\afterfi{\\ROWgoblastspace#1\\nil}%<br/>\t\\else\\afterfi{\\RevOnlyWordsi{#1\\RevSingleWord{#2} }}%<br/>\t\\fi<br/>}<br/>\\def\\ROWgoblastspace#1 \\nil{#1}<br/>%---<br/>\\def\\RevAll#1{\\RevAlli{}#1 \\. \\* \\* \\* \\* \\* \\* \\* \\* \\.\\:}<br/>\\def\\RevAlli#1#2 #3 #4 #5 #6 #7 #8 #9 {%<br/>\t\\expandafter\\ifx\\expandafter\\*\\firstchartonil#9\\nil<br/>\t\\expandafter\\RAWend\\else\\expandafter\\RevAlli\\fi{#9 #8 #7 #6 #5 #4 #3 #2#1}%<br/>}<br/>\\def\\RAWend#1#2\\.{\\RAWendi#1}<br/>\\def\\RAWendi#1\\.{\\expandafter\\RAWendii\\romannumeral-`\\-}<br/>\\def\\RAWendii#1\\:{\\RevOnlyWords{#1}}<br/>%--<br/>\\halign{#\\hfil: &amp;#\\cr<br/>Initial&amp;rosetta code phrase reversal\\cr<br/>Reverse all&amp;\\RevAll{rosetta code phrase reversal}\\cr<br/>Reverse order, same words&amp;\\RevOrderSameWords{rosetta code phrase reversal}\\cr<br/>Reverse only words&amp;\\RevOnlyWords{rosetta code phrase reversal}\\cr\\crcr}<br/>\\bye</pre>"}, {"lang": "PowerShell", "loc": 15, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> reverse<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$sep</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$a</span>.Length <span class=\"kw4\">-gt</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$a</span> <span class=\"sy0\">=</span> <span class=\"re0\">$a</span><span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"re0\">$a</span>.Length <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>..<span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span>join <span class=\"re0\">$sep</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$a</span><br/><span class=\"br0\">}</span><br/><span class=\"re0\">$line</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"rosetta code phrase reversal\"</span><br/><span class=\"re0\">$task1</span> <span class=\"sy0\">=</span> reverse <span class=\"re0\">$line</span><br/><span class=\"re0\">$task2</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$line</span> <span class=\"sy0\">-</span>split <span class=\"st0\">\" \"</span> <span class=\"sy0\">|</span> <span class=\"kw3\">foreach</span><span class=\"br0\">{</span> reverse <a href=\"about:blank\"><span class=\"kw6\">$_</span></a>  <span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span>join <span class=\"st0\">\" \"</span><br/><span class=\"re0\">$task3</span> <span class=\"sy0\">=</span> reverse <span class=\"br0\">(</span><span class=\"re0\">$line</span> <span class=\"sy0\">-</span>split <span class=\"st0\">\" \"</span><span class=\"br0\">)</span> <span class=\"st0\">\" \"</span><br/><span class=\"re0\">$task1</span><br/><span class=\"re0\">$task2</span><br/><span class=\"re0\">$task3</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 31, "block": "<pre class=\"purebasic highlighted_source\">#TEXT<span class=\"sy0\">=</span><span class=\"st0\">\"rosetta code phrase reversal\"</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"st0\">\"rosetta code phrase reversal\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span> idx.i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>, txt.s<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"sy0\">~</span><span class=\"st0\">\"Original:\\t\\t\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>#TEXT<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"sy0\">~</span><span class=\"st0\">\"Reversed:\\t\\t\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>ReverseString<span class=\"br0\">(</span>#TEXT<span class=\"br0\">)</span><span class=\"br0\">)</span>  <br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"sy0\">~</span><span class=\"st0\">\"Reversed words:\\t\\t\"</span><span class=\"br0\">)</span>  <br/>  txt<span class=\"sy0\">=</span><span class=\"kw2\">StringField</span><span class=\"br0\">(</span>#TEXT,idx,<span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">While</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span>txt<span class=\"br0\">)</span><br/>    <span class=\"kw2\">Print</span><span class=\"br0\">(</span>ReverseString<span class=\"br0\">(</span>txt<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>    idx<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    txt<span class=\"sy0\">=</span><span class=\"kw2\">StringField</span><span class=\"br0\">(</span>#TEXT,idx,<span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Wend</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"sy0\">~</span><span class=\"st0\">\"Reversed order:\\t\\t\"</span><span class=\"br0\">)</span><br/>  idx<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>  txt<span class=\"sy0\">=</span><span class=\"kw2\">StringField</span><span class=\"br0\">(</span>#TEXT,idx,<span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">While</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span>txt<span class=\"br0\">)</span><br/>    <span class=\"kw2\">Print</span><span class=\"br0\">(</span>txt<span class=\"sy0\">+</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> idx<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span>\u00a0: idx<span class=\"sy0\">-</span><span class=\"nu0\">1</span>\u00a0: <span class=\"kw1\">Else</span>\u00a0: <span class=\"kw1\">Break</span>\u00a0: <span class=\"kw1\">EndIf</span><br/>    txt<span class=\"sy0\">=</span><span class=\"kw2\">StringField</span><span class=\"br0\">(</span>#TEXT,idx,<span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Wend</span><br/>\u00a0<br/>  <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 8, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> phrase <span class=\"sy0\">=</span> <span class=\"st0\">\"rosetta code phrase reversal\"</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> phrase<span class=\"br0\">[</span>::-<span class=\"nu0\">1</span><span class=\"br0\">]</span>\t\t\t\t\t  <span class=\"co1\"># Reversed.</span><br/><span class=\"st0\">'lasrever esarhp edoc attesor'</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"st0\">' '</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>word<span class=\"br0\">[</span>::-<span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> word <span class=\"kw1\">in</span> phrase.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\t  <span class=\"co1\"># Words reversed.</span><br/><span class=\"st0\">'attesor edoc esarhp lasrever'</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"st0\">' '</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>phrase.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">[</span>::-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\t                  <span class=\"co1\"># Word order reversed.</span><br/><span class=\"st0\">'reversal phrase code rosetta'</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> </pre>"}, {"lang": "Racket", "loc": 12, "block": "<pre class=\"text highlighted_source\">#lang racket/base<br/>(require<br/>  (only-in srfi/13 string-reverse)<br/>  (only-in racket/string string-split string-join))<br/>\u00a0<br/>(define (phrase-reversal s)<br/>  (list<br/>   (string-reverse s)<br/>   (string-join (map string-reverse (string-split s)))<br/>   (string-join (reverse (string-split s)))))<br/>\u00a0<br/>(for-each displayln (phrase-reversal \"rosetta code phrase reversal\"))</pre>"}, {"lang": "REXX", "loc": 16, "block": "<pre class=\"rexx highlighted_source\">s=<span class=\"st0\">'rosetta code phrase reversal'</span><br/>r1=<span class=\"kw6\">reverse</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>r2=<span class=\"st0\">''</span><br/><span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>  r2=r2 <span class=\"kw6\">reverse</span><span class=\"br0\">(</span><span class=\"kw6\">word</span><span class=\"br0\">(</span>s,i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">End</span><br/>r2=<span class=\"kw6\">strip</span><span class=\"br0\">(</span>r2<span class=\"br0\">)</span><br/>r3=<span class=\"st0\">''</span><br/><span class=\"kw1\">Do</span> i=<span class=\"kw6\">words</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw2\">To</span> <span class=\"nu0\">1</span> <span class=\"kw2\">By</span> -<span class=\"nu0\">1</span><br/>  r3=r3 <span class=\"kw6\">word</span><span class=\"br0\">(</span>s,i<span class=\"br0\">)</span><br/>  <span class=\"kw3\">End</span><br/>r3=<span class=\"kw6\">strip</span><span class=\"br0\">(</span>r3<span class=\"br0\">)</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">\"input              \u00a0: \"</span> s<br/><span class=\"kw1\">say</span> <span class=\"st0\">\"string reversed    \u00a0: \"</span> r1<br/><span class=\"kw1\">say</span> <span class=\"st0\">\"each word reversed \u00a0: \"</span> r2<br/><span class=\"kw1\">say</span> <span class=\"st0\">\"word-order reversed\u00a0: \"</span> r3</pre>"}, {"lang": "Ring", "loc": 11, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>aString = \"Welcome to the Ring Language\"<br/>bString = \"\"<br/>see reverseString(aString)<br/>\u00a0<br/>func reverseString cString<br/>     for i= len(cString) to 1 step -1<br/>         bString = bString + cString[i]<br/>     next<br/>     return bString<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 5, "block": "<pre class=\"ruby highlighted_source\">str = <span class=\"st0\">\"rosetta code phrase reversal\"</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> str.<span class=\"me1\">reverse</span>                          <span class=\"co1\"># Reversed string.</span><br/><span class=\"kw3\">puts</span> str.<span class=\"kw3\">split</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:reverse<span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span>   <span class=\"co1\"># Words reversed.</span><br/><span class=\"kw3\">puts</span> str.<span class=\"kw3\">split</span>.<span class=\"me1\">reverse</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span>          <span class=\"co1\"># Word order reversed.</span></pre>"}, {"lang": "Scala", "loc": 6, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> PhraseReversals <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> phrase <span class=\"sy0\">=</span> scala.<span class=\"me1\">io</span>.<span class=\"me1\">StdIn</span>.<span class=\"me1\">readLine</span><br/>    println<span class=\"br0\">(</span>phrase.<span class=\"me1\">reverse</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>phrase.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">reverse</span><span class=\"br0\">)</span>.<span class=\"me1\">mkString</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>phrase.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span>.<span class=\"me1\">reverse</span>.<span class=\"me1\">mkString</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 5, "block": "<pre class=\"ruby highlighted_source\">var str    = <span class=\"st0\">\"rosetta code phrase reversal\"</span>;<br/>\u00a0<br/>say str.<span class=\"me1\">reverse</span>;                            <span class=\"co1\"># reversed string</span><br/>say str.<span class=\"me1\">words</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span>.<span class=\"me1\">reverse</span><span class=\"br0\">}</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span>;      <span class=\"co1\"># words reversed</span><br/>say str.<span class=\"me1\">words</span>.<span class=\"me1\">reverse</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span>;            <span class=\"co1\"># word order reversed</span></pre>"}, {"lang": "Swift", "loc": 40, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>func reverseString(s:String)-&gt;String{<br/>    var temp = [Character]()<br/>    for i in s.characters{<br/>        temp.append(i)<br/>    }<br/>    var j=s.characters.count-1<br/>    for i in s.characters{<br/>        temp[j]=i<br/>        j-=1<br/>    }<br/>    return String(temp)<br/>} <br/>\u00a0<br/>func reverseWord(s:String)-&gt;String{<br/>    var temp = [Character]()<br/>    var result:String=\"\"<br/>    for i in s.characters{<br/>        if i==\" \"{<br/>            result += \"\\(reverseString(s:String(temp))) \"<br/>            temp=[Character]()<br/>        }<br/>        else {<br/>            temp.append(i)<br/>        }<br/>        if i==s[s.index(before: s.endIndex)]{<br/>            result += (reverseString(s:String(temp)))<br/>        }<br/>    }<br/>    return result<br/>}<br/>\u00a0<br/>func flipString(s:String)-&gt;String{<br/>    return reverseWord(s:reverseString(s:s))<br/>}<br/>print(str)<br/>print(reverseString(s:str))<br/>print(reverseWord(s:str))<br/>print(flipString(s:str))<br/>\u00a0</pre>"}, {"lang": "Tcl", "loc": 7, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">set</span> s <span class=\"st0\">\"rosetta code phrase reversal\"</span><br/><span class=\"co1\"># Reverse all characters</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> reverse <span class=\"re0\">$s</span><span class=\"br0\">]</span><br/><span class=\"co1\"># Reverse characters in each word</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>lmap word <span class=\"re0\">$s</span> <span class=\"br0\">{</span><span class=\"kw2\">string</span> reverse <span class=\"re0\">$word</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"co1\"># Reverse the words but not the characters</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>lreverse <span class=\"re0\">$s</span><span class=\"br0\">]</span></pre>"}, {"lang": "UNIX Shell", "loc": 14, "block": "<pre class=\"text highlighted_source\">s1=\"rosetta code phrase reversal\"<br/>echo \"Original string ----------------------&gt; \"$s1<br/>\u00a0<br/>echo -n \"1.) Reverse the string ---------------&gt; \"<br/>echo $s1|rev<br/>\u00a0<br/>echo -n \"2.) Reverse characters of each word --&gt; \"<br/>echo $s1|tr \" \" \"\\n\"|rev|tr \"\\n\" \" \";echo<br/>\u00a0<br/>echo -n \"3.) Reverse word order ---------------&gt; \"<br/>word_num=$(echo $s1|wc -w)<br/>while [ $word_num\u00a0!= 0 ];do<br/>echo -n $(echo $s1|cut -d \" \" -f $word_num);echo -n \" \"<br/>word_num=$(expr $word_num - 1);done;echo</pre>"}, {"lang": "VBA", "loc": 34, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Option</span> <span class=\"kw2\">Explicit</span><br/>\u00a0<br/><span class=\"kw2\">Sub</span> Main_Phrase_Reversals()<br/>Const PHRASE <span class=\"kw4\">As</span> <span class=\"kw1\">String</span> = <span class=\"st0\">\"rosetta code phrase reversal\"</span><br/>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"Original String             \u00a0: \"</span> &amp; PHRASE<br/>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"Reverse String              \u00a0: \"</span> &amp; Reverse_String(PHRASE)<br/>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"Reverse each individual word\u00a0: \"</span> &amp; Reverse_each_individual_word(PHRASE)<br/>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"Reverse order of each word  \u00a0: \"</span> &amp; Reverse_the_order_of_each_word(PHRASE)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> Reverse_String(strPhrase <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/>    Reverse_String = StrReverse(strPhrase)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> Reverse_each_individual_word(strPhrase <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/><span class=\"kw4\">Dim</span> Words, i&amp;, strTemp$<br/>    Words = Split(strPhrase, <span class=\"st0\">\" \"</span>)<br/>    <span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(Words)<br/>        Words(i) = Reverse_String(CStr(Words(i)))<br/>    <span class=\"kw3\">Next</span> i<br/>    Reverse_each_individual_word = Join(Words, <span class=\"st0\">\" \"</span>)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> Reverse_the_order_of_each_word(strPhrase <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/><span class=\"kw4\">Dim</span> Words, i&amp;, strTemp$<br/>\u00a0<br/>    Words = Split(strPhrase, <span class=\"st0\">\" \"</span>)<br/>    <span class=\"kw3\">For</span> i = <span class=\"kw4\">UBound</span>(Words) <span class=\"kw3\">To</span> 0 <span class=\"kw3\">Step</span> -1<br/>        strTemp = strTemp &amp; <span class=\"st0\">\" \"</span> &amp; Words(i)<br/>    <span class=\"kw3\">Next</span> i<br/>    Reverse_the_order_of_each_word = Trim(strTemp)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0</pre>"}, {"lang": "VBScript", "loc": 40, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/>Phrase = <span class=\"st0\">\"rosetta code phrase reversal\"</span><br/>\u00a0<br/>WScript.StdOut.Write <span class=\"st0\">\"Original String         \u00a0: \"</span> &amp; Phrase<br/>WScript.StdOut.WriteLine<br/>WScript.StdOut.Write <span class=\"st0\">\"Reverse String          \u00a0: \"</span> &amp; RevString(Phrase)<br/>WScript.StdOut.WriteLine<br/>WScript.StdOut.Write <span class=\"st0\">\"Reverse String Each Word\u00a0: \"</span> &amp; RevStringEachWord(Phrase)<br/>WScript.StdOut.WriteLine<br/>WScript.StdOut.Write <span class=\"st0\">\"Reverse Phrase          \u00a0: \"</span> &amp; RevPhrase(Phrase)<br/>WScript.StdOut.WriteLine<br/>\u00a0<br/><span class=\"kw2\">Function</span> RevString(s)<br/>\tx = Len(s)<br/>\t<span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> Len(s)<br/>\t\tRevString = RevString &amp; Mid(s,x,1)<br/>\t\tx = x - 1<br/>\t<span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> RevStringEachWord(s)<br/>\tarr = Split(s,<span class=\"st0\">\" \"</span>)<br/>\t<span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(arr)<br/>\t\tRevStringEachWord = RevStringEachWord &amp; RevString(arr(i))<br/>\t\t<span class=\"kw3\">If</span> i &lt; <span class=\"kw4\">UBound</span>(arr) <span class=\"kw3\">Then</span><br/>\t\t\tRevStringEachWord = RevStringEachWord &amp; <span class=\"st0\">\" \"</span><br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> RevPhrase(s)<br/>\tarr = Split(s,<span class=\"st0\">\" \"</span>)<br/>\t<span class=\"kw3\">For</span> i = <span class=\"kw4\">UBound</span>(arr) <span class=\"kw3\">To</span> <span class=\"kw4\">LBound</span>(arr) <span class=\"kw3\">Step</span> -1<br/>\t\tRevPhrase = RevPhrase &amp; arr(i)<br/>\t\t<span class=\"kw3\">If</span> i &gt; <span class=\"kw4\">LBound</span>(arr) <span class=\"kw3\">Then</span> <br/>\t\t\tRevPhrase = RevPhrase &amp; <span class=\"st0\">\" \"</span><br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 11, "block": "<pre class=\"text highlighted_source\">zkl: var str=\"rosetta code phrase reversal\"<br/>rosetta code phrase reversal<br/>\u00a0<br/>zkl: str.reverse() #1<br/>lasrever esarhp edoc attesor<br/>\u00a0<br/>zkl: str.split().apply(\"reverse\").concat(\" \") #2 string to list to string<br/>attesor edoc esarhp lasrever<br/>\u00a0<br/>zkl: str.split().reverse().concat(\" \") #3<br/>reversal phrase code rosetta</pre>"}]}