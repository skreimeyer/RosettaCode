{"task": "Get_system_command_output", "blocks": [{"lang": "Ada", "loc": 39, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;            <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Characters</span>.<span class=\"me1\">Latin_1</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Characters</span>.<span class=\"me1\">Latin_1</span>;<br/><span class=\"kw3\">with</span> GNAT.<span class=\"me1\">Expect</span>;            <span class=\"kw3\">use</span> GNAT.<span class=\"me1\">Expect</span>;<br/><span class=\"kw3\">with</span> GNAT.<span class=\"me1\">OS_Lib</span>;            <span class=\"kw3\">use</span> GNAT.<span class=\"me1\">OS_Lib</span>;<br/><span class=\"kw3\">with</span> GNAT.<span class=\"me1\">String_Split</span>;      <span class=\"kw3\">use</span> GNAT.<span class=\"me1\">String_Split</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> System_Command <span class=\"kw1\">is</span><br/>   Command   \u00a0: String         \u00a0:= <span class=\"st0\">\"ls -l\"</span>;<br/>   Args      \u00a0: Argument_List_Access;<br/>   Status    \u00a0: <span class=\"kw3\">aliased</span> Integer;<br/>   Separators\u00a0: <span class=\"kw3\">constant</span> String\u00a0:= LF &amp; CR;<br/>   Reply_List\u00a0: Slice_Set;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   Args\u00a0:= Argument_String_To_List <span class=\"br0\">(</span>Command<span class=\"br0\">)</span>;<br/>   <span class=\"co1\">-- execute the system command and get the output in a single string</span><br/>   <span class=\"kw1\">declare</span><br/>      Response\u00a0: String\u00a0:=<br/>        Get_Command_Output<br/>          <span class=\"br0\">(</span>Command   =&gt; Args <span class=\"br0\">(</span>Args'First<span class=\"br0\">)</span>.<span class=\"kw3\">all</span>,<br/>           Arguments =&gt; Args <span class=\"br0\">(</span>Args'First + <span class=\"nu0\">1</span> .. <span class=\"me1\">Args</span>'Last<span class=\"br0\">)</span>,<br/>           Input     =&gt; <span class=\"st0\">\"\"</span>,<br/>           Status    =&gt; Status'<span class=\"kw3\">Access</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">begin</span><br/>      Free <span class=\"br0\">(</span>Args<span class=\"br0\">)</span>;<br/>      <span class=\"co1\">-- split the output in a slice for easier manipulation</span><br/>      <span class=\"kw1\">if</span> Status = <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>         Create <span class=\"br0\">(</span>S          =&gt; Reply_List,<br/>                 From       =&gt; Response,<br/>                 Separators =&gt; Separators,<br/>                 Mode       =&gt; Multiple<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span>;<br/>   <span class=\"co1\">-- do something with the system output. Just print it out</span><br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"nu0\">1</span> .. <span class=\"me1\">Slice_Count</span> <span class=\"br0\">(</span>Reply_List<span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>      Put_Line <span class=\"br0\">(</span>Slice <span class=\"br0\">(</span>Reply_List, I<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>\u00a0<br/><span class=\"kw1\">end</span> System_Command;</pre>"}, {"lang": "AWK", "loc": 39, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>\u00a0<br/>         <span class=\"co1\"># For Windows</span><br/>         out = system2var<span class=\"br0\">(</span><span class=\"st0\">\"dir\"</span><span class=\"br0\">)</span><br/>         <span class=\"kw5\">print</span> out<br/>\u00a0<br/>         <span class=\"co1\"># Non-Windows</span><br/>         out = getline2var<span class=\"br0\">(</span><span class=\"st0\">\"ls -l\"</span><span class=\"br0\">)</span><br/>         <span class=\"kw5\">print</span> out<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># For a Windows environment using system() method</span><br/><span class=\"kw6\">function</span> system2var<span class=\"br0\">(</span>command    ,tempfile, cmd, out, rec, data, i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>         tempfile = <span class=\"st0\">\"C:<span class=\"es0\">\\\\</span>TEMP<span class=\"es0\">\\\\</span>TMP.TMP\"</span><br/>         cmd = command <span class=\"st0\">\" &gt; \"</span> tempfile<br/>         <span class=\"kw5\">system</span><span class=\"br0\">(</span>cmd<span class=\"br0\">)</span><br/>         <span class=\"kw5\">close</span><span class=\"br0\">(</span>cmd<span class=\"br0\">)</span><br/>         <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw5\">getline</span> rec <span class=\"sy2\">&lt;</span> tempfile <span class=\"sy2\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>             <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"sy3\">++</span>i <span class=\"sy2\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>                 data = rec<br/>             <span class=\"kw1\">else</span><br/>                 data = data <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> rec<br/>         <span class=\"br0\">}</span><br/>         <span class=\"kw6\">return</span><span class=\"br0\">(</span>data<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># If command returns an ERRNO function returns null string</span><br/><span class=\"kw6\">function</span> getline2var<span class=\"br0\">(</span>command        ,fish, scale, ship<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>         command = command <span class=\"st0\">\" 2&gt;/dev/null\"</span><br/>         <span class=\"kw1\">while</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span>command | <span class=\"kw5\">getline</span> fish<span class=\"br0\">)</span> <span class=\"sy2\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>             <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"sy3\">++</span>scale <span class=\"sy2\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>                 ship = fish<br/>             <span class=\"kw1\">else</span><br/>                 ship = ship <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> fish<br/>         <span class=\"br0\">}</span><br/>         <span class=\"kw5\">close</span><span class=\"br0\">(</span>command<span class=\"br0\">)</span><br/>         <span class=\"kw6\">return</span> ship<br/><span class=\"br0\">}</span></pre>"}, {"lang": "BaCon", "loc": 4, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' Get system command</span><br/>result$ = <span class=\"kw1\">EXEC</span>$<span class=\"br0\">(</span><span class=\"st0\">\"fortune\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">PRINT</span> CHOP$<span class=\"br0\">(</span>result$<span class=\"br0\">)</span><br/><span class=\"kw1\">PRINT</span> <span class=\"st0\">\"First word: \"</span> &amp; TOKEN$<span class=\"br0\">(</span>result$, <span class=\"nu0\">1</span><span class=\"br0\">)</span></pre>"}, {"lang": "Batch File", "loc": 27, "block": "<pre class=\"dos highlighted_source\">\u00a0<br/><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/><span class=\"co2\"><br/>:: Without storing the output of the command, it can be viewed by inputting the command</span><br/><a href=\"http://www.ss64.com/nt/dir.html\"><span class=\"kw3\">dir</span></a><br/><span class=\"co2\"><br/>\u00a0<br/>:: Storing the output of 'dir' as \"line[]\" containing the respective lines of output (starting at line[1])</span><br/><span class=\"co2\">:: Note: This method removes any empty lines from the output</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> tempcount=0<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /f \"tokens=*\" <span class=\"sy0\">%%</span><span class=\"re3\">i</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>'<a href=\"http://www.ss64.com/nt/dir.html\"><span class=\"kw3\">dir</span></a>'<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>  <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a tempcount+=1<br/>  <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"line<span class=\"sy0\">!</span><span class=\"re2\">tempcount</span><span class=\"sy0\">!</span>=<span class=\"sy0\">%%</span><span class=\"re3\">i</span>\"<br/><span class=\"sy0\">)</span><br/><span class=\"co2\">:: The array would be viewed like this</span><br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">i</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>1,1,<span class=\"sy0\">%</span><span class=\"re3\">tempcount</span><span class=\"sy0\">%)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">!</span><span class=\"re2\">line%%<span class=\"re3\">i</span></span><span class=\"sy0\">!</span><br/><span class=\"co2\"><br/>\u00a0<br/>:: Storing the output of 'dir' in a file, then outputting the contents of the file to the screen</span><br/><span class=\"co2\">:: NOTE: rewrites any file named \"out.temp\" in the current directory</span><br/>dir<span class=\"sy0\">&gt;</span>out.temp<br/>type out.temp<br/><a href=\"http://www.ss64.com/nt/del.html\"><span class=\"kw3\">del</span></a> out.temp<br/>\u00a0<br/>pause<span class=\"sy0\">&gt;</span><a href=\"http://www.ss64.com/nt/nul.html\"><span class=\"kw4\">nul</span></a><br/>\u00a0</pre>"}, {"lang": "C", "loc": 38, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">**</span>argv<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>argc <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    FILE <span class=\"sy0\">*</span>fd<span class=\"sy0\">;</span><br/>    fd <span class=\"sy0\">=</span> popen<span class=\"br0\">(</span>argv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"r\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>fd<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">char</span>   buffer<span class=\"br0\">[</span><span class=\"nu0\">256</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">size_t</span> chread<span class=\"sy0\">;</span><br/>    <span class=\"coMULTI\">/* String to store entire command contents in */</span><br/>    <span class=\"kw4\">size_t</span> comalloc <span class=\"sy0\">=</span> <span class=\"nu0\">256</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">size_t</span> comlen   <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span>  <span class=\"sy0\">*</span>comout   <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>comalloc<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* Use fread so binary data is dealt with correctly */</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>chread <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fread.html\"><span class=\"kw3\">fread</span></a><span class=\"br0\">(</span>buffer<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>buffer<span class=\"br0\">)</span><span class=\"sy0\">,</span> fd<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>comlen <span class=\"sy0\">+</span> chread <span class=\"sy0\">&gt;=</span> comalloc<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            comalloc <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>            comout <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/realloc.html\"><span class=\"kw3\">realloc</span></a><span class=\"br0\">(</span>comout<span class=\"sy0\">,</span> comalloc<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memmove.html\"><span class=\"kw3\">memmove</span></a><span class=\"br0\">(</span>comout <span class=\"sy0\">+</span> comlen<span class=\"sy0\">,</span> buffer<span class=\"sy0\">,</span> chread<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        comlen <span class=\"sy0\">+=</span> chread<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* We can now work with the output as we please. Just print<br/>     * out to confirm output is as expected */</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fwrite.html\"><span class=\"kw3\">fwrite</span></a><span class=\"br0\">(</span>comout<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> comlen<span class=\"sy0\">,</span> stdout<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>comout<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    pclose<span class=\"br0\">(</span>fd<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 2, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span>use '<span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>java<span class=\"sy0\">.</span>shell\u00a0:<span class=\"me1\">only</span> <span class=\"br0\">[</span>sh<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>sh <span class=\"st0\">\"echo\"</span> <span class=\"st0\">\"Hello\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 1, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>trivial-shell<span class=\"sy0\">:</span><span class=\"me1\">shell-command</span> <span class=\"st0\">\"uname -imp\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 12, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">process</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> cmd <span class=\"sy0\">=</span> executeShell<span class=\"br0\">(</span><span class=\"st0\">\"echo hello\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>cmd.<span class=\"me1\">status</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        writeln<span class=\"br0\">(</span><span class=\"st0\">\"Output: \"</span><span class=\"sy0\">,</span> cmd.<span class=\"me1\">output</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        writeln<span class=\"br0\">(</span><span class=\"st0\">\"Failed to execute command, status=\"</span><span class=\"sy0\">,</span> cmd.<span class=\"me1\">status</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "FreeBASIC", "loc": 16, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"co1\">'capture the output of the 'dir' command and print it to a text file</span><br/>\u00a0<br/><span class=\"kw1\">Open</span> <span class=\"st0\">\"dir_output.txt\"</span> <span class=\"kw1\">For</span> <span class=\"kw1\">Output</span> <span class=\"kw1\">As</span> <span class=\"co2\">#1</span><br/><span class=\"kw1\">Open</span> <span class=\"kw1\">Pipe</span> <span class=\"st0\">\"dir\"</span> <span class=\"kw1\">For</span> <span class=\"kw1\">Input</span> <span class=\"kw1\">As</span> <span class=\"co2\">#2</span><br/><span class=\"kw1\">Dim</span> li <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/>\u00a0<br/><span class=\"kw1\">While</span> <span class=\"kw1\">Not</span> <span class=\"kw1\">Eof</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Line</span> <span class=\"kw1\">Input</span> <span class=\"co2\">#2, li</span><br/>  <span class=\"kw1\">Print</span> <span class=\"co2\">#1, li</span><br/><span class=\"kw1\">Wend</span><br/>\u00a0<br/><span class=\"kw1\">Close</span> <span class=\"co2\">#2</span><br/><span class=\"kw1\">Close</span> <span class=\"co2\">#1</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Gambas", "loc": 7, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sStore <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/shell\"><span class=\"kw1\">Shell</span></a> <span class=\"st0\">\"ls\"</span> <a href=\"http://gambasdoc.org/help/lang/to\"><span class=\"kw1\">To</span></a> sStore<br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> sStore <br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "Go", "loc": 15, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>  <span class=\"st0\">\"fmt\"</span><br/>  <span class=\"st0\">\"log\"</span><br/>  <span class=\"st0\">\"os/exec\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>  output<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> exec<span class=\"sy3\">.</span>Command<span class=\"sy1\">(</span><span class=\"st0\">\"ls\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"-l\"</span><span class=\"sy1\">)</span><span class=\"sy3\">.</span>CombinedOutput<span class=\"sy1\">()</span><br/>  <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>    log<span class=\"sy3\">.</span>Fatal<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>  <span class=\"sy1\">}</span><br/>  fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"kw4\">string</span><span class=\"sy1\">(</span>output<span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 12, "block": "<pre class=\"haskell highlighted_source\">#<span class=\"sy0\">!/</span>usr<span class=\"sy0\">/</span>bin<span class=\"sy0\">/</span>env stack<br/><span class=\"co1\">-- stack --resolver lts-8.15 --install-ghc runghc --package process</span><br/>\u00a0<br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Process <span class=\"br0\">(</span>readProcess<span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    <span class=\"co1\">-- get the output of the process as a list of lines</span><br/>    results <span class=\"sy0\">&lt;-</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:lines\"><span class=\"kw3\">lines</span></a> <span class=\"sy0\">&lt;$&gt;</span> readProcess <span class=\"st0\">\"hexdump\"</span> <span class=\"br0\">[</span><span class=\"st0\">\"-C\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"/etc/passwd\"</span><span class=\"br0\">]</span> <span class=\"st0\">\"\"</span><br/>\u00a0<br/>    <span class=\"co1\">-- print each line in reverse</span><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reverse\"><span class=\"kw3\">reverse</span></a><span class=\"br0\">)</span> results</pre>"}, {"lang": "Icon and Unicon", "loc": 23, "block": "<pre class=\"unicon highlighted_source\"><span class=\"co1\">#</span><br/><span class=\"co1\"># piped.icn, Get system command output</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\"># Dedicated to the public domain</span><br/><span class=\"co1\">#</span><br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"co1\"># start with an empty list</span><br/>    directory <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"co1\"># ls for UNIX, dir for other, assume Windows</span><br/>    command <span class=\"sy0\">:=</span> <span class=\"kw1\">if</span> <span class=\"sy0\">&amp;</span><span class=\"kw3\">features</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"UNIX\"</span> <span class=\"kw1\">then</span> <span class=\"st0\">\"ls\"</span> <span class=\"kw1\">else</span> <span class=\"st0\">\"dir\"</span><br/>\u00a0<br/>    <span class=\"co1\"># open command in pipe mode</span><br/>    p <span class=\"sy0\">:=</span> <span class=\"kw4\">open</span><span class=\"br0\">(</span>command<span class=\"sy0\">,</span> <span class=\"st0\">\"p\"</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw4\">stop</span><span class=\"br0\">(</span><span class=\"st0\">\"Cannot open pipe for \"</span><span class=\"sy0\">,</span> command<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\"># read in results and append to list</span><br/>    <span class=\"kw1\">while</span> <span class=\"kw4\">put</span><span class=\"br0\">(</span>directory<span class=\"sy0\">,</span> <span class=\"kw4\">read</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\"># display the fifth entry, if there is one</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"sy0\">\\</span>directory<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw4\">close</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 5, "block": "<pre class=\"j highlighted_source\">   require <span class=\"st_h\">'task'</span><br/>   &lt;shell <span class=\"st_h\">'uname -imp'</span><br/>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510<br/>\u2502x86_64 x86_64 x86_64 \u2502<br/>\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</pre>"}, {"lang": "Java", "loc": 19, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.io.*</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> SystemCommand <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> args<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">throws</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aioexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IOException</span></a> <span class=\"br0\">{</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> command <span class=\"sy0\">=</span> <span class=\"st0\">\"cmd /c dir\"</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aprocess+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Process</span></a> p <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aruntime+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Runtime</span></a>.<span class=\"me1\">getRuntime</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">exec</span><span class=\"br0\">(</span>command<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">try</span> <span class=\"br0\">(</span>Scanner sc <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Scanner<span class=\"br0\">(</span>p.<span class=\"me1\">getInputStream</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"Output of the command:\u00a0%s\u00a0%n%n\"</span>, command<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>sc.<span class=\"me1\">hasNext</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>sc.<span class=\"me1\">nextLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 1, "block": "<pre class=\"text highlighted_source\">ls = readstring(`ls`)</pre>"}, {"lang": "Kotlin", "loc": 11, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">Scanner</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> command <span class=\"sy0\">=</span> <span class=\"st0\">\"cmd /c chcp\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> p <span class=\"sy0\">=</span> Runtime.<span class=\"me1\">getRuntime</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">exec</span><span class=\"br0\">(</span>command<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sc <span class=\"sy0\">=</span> Scanner<span class=\"br0\">(</span>p.<span class=\"me1\">inputStream</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>sc.<span class=\"me1\">nextLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    sc.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lingo", "loc": 13, "block": "<pre class=\"text highlighted_source\">sx = xtra(\"Shell\").new()<br/>put sx.shell_cmd(\"cd C:\\dev\\lsw\\lib &amp; dir\")<br/>\u00a0<br/>-- \"<br/>&lt;snip&gt;<br/>31.08.2016  21:25    &lt;DIR&gt;          .<br/>31.08.2016  21:25    &lt;DIR&gt;          ..<br/>20.08.2016  04:58    &lt;DIR&gt;          aes<br/>23.06.2016  18:23    &lt;DIR&gt;          audio<br/>21.07.2016  19:19    &lt;DIR&gt;          avmedia<br/>23.06.2016  18:22    &lt;DIR&gt;          base64<br/>23.06.2016  18:21    &lt;DIR&gt;          base9<br/>&lt;snip&gt;\"</pre>"}, {"lang": "Lua", "loc": 2, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">local</span> output <span class=\"sy0\">=</span> <span class=\"kw3\">io</span><span class=\"sy0\">.</span>popen<span class=\"br0\">(</span><span class=\"st0\">\"echo Hurrah!\"</span><span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>output<span class=\"sy0\">:</span><span class=\"kw3\">read</span><span class=\"br0\">(</span><span class=\"st0\">\"*all\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\">RunProcess[\"date\"]</pre>"}, {"lang": "M2000 Interpreter", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module CheckIt {<br/>      Dos \"cd \"+quote$(Dir$) +\" &amp; cmd /U /C  dir *.txt &gt;txt.out\";<br/>      Document txt$<br/>      Repeat {<br/>            Wait 100<br/>            Try  {<br/>                  load.doc txt$, \"txt.out\"<br/>            }<br/>      } Until doc.len(txt$)&lt;&gt;0<br/>      Report txt$<br/>}<br/>Checkit<br/>\u00a0</pre>"}, {"lang": "ooRexx", "loc": 27, "block": "<pre class=\"oorexx highlighted_source\"><span class=\"coMULTI\">/* Execute a system command and retrieve its output into a stem. */</span><br/>  <span class=\"kw1\">trace</span> normal<br/>\u00a0<br/><span class=\"coMULTI\">/* Make the default values for the stem null strings. */</span><br/>  text<span class=\"sy0\">.</span> = <span class=\"st0\">''</span><br/>\u00a0<br/><span class=\"coMULTI\">/* Issue the system command.  \"address command\" is optional.) */</span><br/>  <span class=\"kw1\">address</span> command <span class=\"st0\">'ls -l | rxqueue'</span><br/>\u00a0<br/><span class=\"coMULTI\">/* Remember the return code from the command. */</span><br/>  ls_rc = <span class=\"kw4\">rc</span><br/>\u00a0<br/><span class=\"coMULTI\">/* Remember the number of lines created by the command. */</span><br/>  text<span class=\"sy0\">.</span>0 = <span class=\"kw6\">queued</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"coMULTI\">/* Fetch each line into a stem variable. */</span><br/>  <span class=\"kw1\">do</span> t = <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> text<span class=\"sy0\">.</span>0<br/>    <span class=\"kw1\">parse</span> <span class=\"kw1\">pull</span> text<span class=\"sy0\">.</span>t<br/>  <span class=\"kw3\">end</span><br/>\u00a0<br/><span class=\"coMULTI\">/* Output each line in reverse order. */</span><br/>  <span class=\"kw1\">do</span> t = text<span class=\"sy0\">.</span>0 <span class=\"kw2\">to</span> <span class=\"nu0\">1</span> <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span><br/>    <span class=\"kw1\">say</span> text<span class=\"sy0\">.</span>t<br/>  <span class=\"kw3\">end</span><br/>\u00a0<br/><span class=\"coMULTI\">/* Exit with the system command's return code. */</span><br/><span class=\"kw1\">exit</span> ls_rc</pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\"><span class=\"kw1\">externstr</span><span class=\"br0\">(</span><span class=\"st0\">\"time/t\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 5, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@directories</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/chomp.html\"><span class=\"kw3\">chomp</span></a><span class=\"sy0\">;</span> <span class=\"sy0\">-</span>d <span class=\"br0\">}</span> <span class=\"st0\">`ls`</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">@directories</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/><a href=\"http://perldoc.perl.org/functions/chomp.html\"><span class=\"kw3\">chomp</span></a><span class=\"sy0\">;</span><br/><span class=\"sy0\">...;</span> <span class=\"co1\"># Operate on directories</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 1, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw3\">say</span> run<span class=\"br0\">(</span><span class=\"re0\">$command</span><span class=\"sy0\">,</span> <span class=\"re0\">$arg1</span><span class=\"sy0\">,</span> <span class=\"re0\">$arg2</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>out<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">out</span><span class=\"sy0\">.</span><span class=\"me1\">slurp</span><span class=\"sy0\">-</span>rest<span class=\"sy0\">;</span></pre>"}, {"lang": "PicoLisp", "loc": 2, "block": "<pre class=\"text highlighted_source\">: (in '(uname \"-om\") (line T))<br/>-&gt; \"aarch64 Android\"</pre>"}, {"lang": "PowerShell", "loc": 5, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"re0\">$volume</span> <span class=\"sy0\">=</span> cmd <span class=\"sy0\">/</span>c vol<br/>\u00a0<br/><span class=\"re0\">$volume</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 29, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">import</span> <span class=\"kw3\">subprocess</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> returned_text <span class=\"sy0\">=</span> <span class=\"kw3\">subprocess</span>.<span class=\"me1\">check_output</span><span class=\"br0\">(</span><span class=\"st0\">\"dir\"</span><span class=\"sy0\">,</span> shell<span class=\"sy0\">=</span><span class=\"kw2\">True</span><span class=\"sy0\">,</span> universal_newlines<span class=\"sy0\">=</span><span class=\"kw2\">True</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw2\">type</span><span class=\"br0\">(</span>returned_text<span class=\"br0\">)</span><br/><span class=\"sy0\">&lt;</span><span class=\"kw1\">class</span> <span class=\"st0\">'str'</span><span class=\"sy0\">&gt;</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">print</span><span class=\"br0\">(</span>returned_text<span class=\"br0\">)</span><br/> Volume <span class=\"kw1\">in</span> drive C <span class=\"kw1\">is</span> Windows<br/> Volume Serial Number <span class=\"kw1\">is</span> 44X7-73CE<br/>\u00a0<br/> Directory of C:\\Python33<br/>\u00a0<br/><span class=\"nu0\">04</span>/<span class=\"nu0\">07</span>/<span class=\"nu0\">2013</span>  <span class=\"nu0\">06</span>:<span class=\"nu0\">40</span>    <span class=\"sy0\">&lt;</span>DIR<span class=\"sy0\">&gt;</span>          .<br/><span class=\"nu0\">04</span>/<span class=\"nu0\">07</span>/<span class=\"nu0\">2013</span>  <span class=\"nu0\">06</span>:<span class=\"nu0\">40</span>    <span class=\"sy0\">&lt;</span>DIR<span class=\"sy0\">&gt;</span>          ..<br/><span class=\"nu0\">27</span>/<span class=\"nu0\">05</span>/<span class=\"nu0\">2013</span>  <span class=\"nu0\">07</span>:<span class=\"nu0\">10</span>    <span class=\"sy0\">&lt;</span>DIR<span class=\"sy0\">&gt;</span>          DLLs<br/><span class=\"nu0\">27</span>/<span class=\"nu0\">05</span>/<span class=\"nu0\">2013</span>  <span class=\"nu0\">07</span>:<span class=\"nu0\">10</span>    <span class=\"sy0\">&lt;</span>DIR<span class=\"sy0\">&gt;</span>          Doc<br/><span class=\"nu0\">27</span>/<span class=\"nu0\">05</span>/<span class=\"nu0\">2013</span>  <span class=\"nu0\">07</span>:<span class=\"nu0\">10</span>    <span class=\"sy0\">&lt;</span>DIR<span class=\"sy0\">&gt;</span>          include<br/><span class=\"nu0\">27</span>/<span class=\"nu0\">05</span>/<span class=\"nu0\">2013</span>  <span class=\"nu0\">07</span>:<span class=\"nu0\">10</span>    <span class=\"sy0\">&lt;</span>DIR<span class=\"sy0\">&gt;</span>          Lib<br/><span class=\"nu0\">27</span>/<span class=\"nu0\">05</span>/<span class=\"nu0\">2013</span>  <span class=\"nu0\">07</span>:<span class=\"nu0\">10</span>    <span class=\"sy0\">&lt;</span>DIR<span class=\"sy0\">&gt;</span>          libs<br/><span class=\"nu0\">16</span>/<span class=\"nu0\">05</span>/<span class=\"nu0\">2013</span>  <span class=\"nu0\">00</span>:<span class=\"nu0\">15</span>            <span class=\"nu0\">33</span><span class=\"sy0\">,</span><span class=\"nu0\">326</span> LICENSE.<span class=\"me1\">txt</span><br/><span class=\"nu0\">15</span>/<span class=\"nu0\">05</span>/<span class=\"nu0\">2013</span>  <span class=\"nu0\">22</span>:<span class=\"nu0\">49</span>           <span class=\"nu0\">214</span><span class=\"sy0\">,</span><span class=\"nu0\">554</span> NEWS.<span class=\"me1\">txt</span><br/><span class=\"nu0\">16</span>/<span class=\"nu0\">05</span>/<span class=\"nu0\">2013</span>  <span class=\"nu0\">00</span>:<span class=\"nu0\">03</span>            <span class=\"nu0\">26</span><span class=\"sy0\">,</span><span class=\"nu0\">624</span> python.<span class=\"me1\">exe</span><br/><span class=\"nu0\">16</span>/<span class=\"nu0\">05</span>/<span class=\"nu0\">2013</span>  <span class=\"nu0\">00</span>:<span class=\"nu0\">03</span>            <span class=\"nu0\">27</span><span class=\"sy0\">,</span><span class=\"nu0\">136</span> pythonw.<span class=\"me1\">exe</span><br/><span class=\"nu0\">15</span>/<span class=\"nu0\">05</span>/<span class=\"nu0\">2013</span>  <span class=\"nu0\">22</span>:<span class=\"nu0\">49</span>             <span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">701</span> README.<span class=\"me1\">txt</span><br/><span class=\"nu0\">27</span>/<span class=\"nu0\">05</span>/<span class=\"nu0\">2013</span>  <span class=\"nu0\">07</span>:<span class=\"nu0\">10</span>    <span class=\"sy0\">&lt;</span>DIR<span class=\"sy0\">&gt;</span>          tcl<br/><span class=\"nu0\">27</span>/<span class=\"nu0\">05</span>/<span class=\"nu0\">2013</span>  <span class=\"nu0\">07</span>:<span class=\"nu0\">10</span>    <span class=\"sy0\">&lt;</span>DIR<span class=\"sy0\">&gt;</span>          Tools<br/><span class=\"nu0\">16</span>/<span class=\"nu0\">05</span>/<span class=\"nu0\">2013</span>  <span class=\"nu0\">00</span>:<span class=\"nu0\">02</span>            <span class=\"nu0\">43</span><span class=\"sy0\">,</span><span class=\"nu0\">008</span> w9xpopen.<span class=\"me1\">exe</span><br/>               <span class=\"nu0\">6</span> File<span class=\"br0\">(</span>s<span class=\"br0\">)</span>        <span class=\"nu0\">351</span><span class=\"sy0\">,</span><span class=\"nu0\">349</span> <span class=\"kw3\">bytes</span><br/>               <span class=\"nu0\">9</span> Dir<span class=\"br0\">(</span>s<span class=\"br0\">)</span>  <span class=\"nu0\">46</span><span class=\"sy0\">,</span><span class=\"nu0\">326</span><span class=\"sy0\">,</span><span class=\"nu0\">947</span><span class=\"sy0\">,</span><span class=\"nu0\">840</span> <span class=\"kw3\">bytes</span> free<br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"co1\"># Ref: https://docs.python.org/3/library/subprocess.html</span></pre>"}, {"lang": "Racket", "loc": 28, "block": "<pre class=\"text highlighted_source\">#lang racket/base<br/>\u00a0<br/>(require racket/system<br/>         (only-in racket/port with-output-to-string)<br/>         tests/eli-tester)<br/>\u00a0<br/>(test<br/>\u00a0;; system runs command and outputs to current output port (which is stdout unless we catch it)<br/> (system \"ls /etc/motd\") =&gt; #t<br/>\u00a0;; it throws an error on non-zero exit code (so I need to catch it in this error handler)<br/> (system \"false\") =&gt; #f      \u00a0; nothing printed to stdout/stderr<br/> (system \"ls /etc/mosh\") =&gt; #f\u00a0; error report printed to stderr <br/>\u00a0;; output can be captured by redirecting stdout/stderr (which are known as current-output-port and<br/>\u00a0;; current-error-port in racket parlance).<br/>\u00a0;; the command printed a \\n, so there is a newline captured by the system command<br/> (with-output-to-string (\u03bb () (system \"ls /etc/motd\"))) =&gt; \"/etc/motd\\n\"<br/>\u00a0;; no \\n is captured when none is captured<br/> (with-output-to-string (\u03bb () (system \"echo -n foo\"))) =&gt; \"foo\"<br/>\u00a0;; error is still not captured (it's still printed to stderr)<br/> (with-output-to-string (\u03bb () (system \"echo -n foo; echo bar 1&gt;&amp;2\"))) =&gt; \"foo\"<br/>\u00a0;; we can capture both with:<br/> (let* ((out-str-port (open-output-string))<br/>        (err-str-port (open-output-string))<br/>        (system-rv<br/>         (parameterize ((current-output-port out-str-port) (current-error-port err-str-port))<br/>           (system \"echo -n foo; echo bar 1&gt;&amp;2\"))))<br/>   (values system-rv (get-output-string out-str-port) (get-output-string err-str-port)))<br/> =&gt; (values #t \"foo\" \"bar\\n\"))</pre>"}, {"lang": "REXX", "loc": 10, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  executes a  system command  and displays the results  (from an array).  */</span><br/><span class=\"kw1\">trace</span> <span class=\"kw2\">off</span>                                        <span class=\"coMULTI\">/*suppress REXX error msgs for fails.  */</span><br/>@<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>                                             <span class=\"coMULTI\">/*assign default in case ADDRESS fails.*/</span><br/><span class=\"kw1\">address</span> system <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">with</span> output stem @<span class=\"sy0\">.</span>        <span class=\"coMULTI\">/*issue/execute the command and parms. */</span><br/><span class=\"kw1\">if</span> <span class=\"kw4\">rc</span><span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span>  <span class=\"kw1\">say</span>  <span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">'\u2500'</span>, <span class=\"nu0\">40</span><span class=\"br0\">)</span>     <span class=\"st0\">'return code '</span>    <span class=\"kw4\">rc</span>    <span class=\"st0\">\" from: \"</span>    <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                                                 <span class=\"coMULTI\">/* [\u2191]  tell if an error occurred.     */</span><br/>           <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> @<span class=\"sy0\">.</span>0                       <span class=\"coMULTI\">/*display the output from the command. */</span><br/>           <span class=\"kw1\">say</span> <span class=\"kw6\">strip</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>j, <span class=\"st0\">'T'</span><span class=\"br0\">)</span>                   <span class=\"coMULTI\">/*display one line at a time--&gt;terminal*/</span><br/>           <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*out*/</span>                         <span class=\"coMULTI\">/* [\u2191]  displays all the output.       */</span><br/><span class=\"kw1\">exit</span> <span class=\"nu0\">0</span>                                           <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ring", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>system(\"dir C:\\Ring\\doc\") <br/>\u00a0</pre>"}, {"lang": "Run BASIC", "loc": 3, "block": "<pre class=\"text highlighted_source\">a$ = shell$(\"dir\") ' Returns the directory info into a$<br/>print a$    ' prints the directory<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 2, "block": "<pre class=\"ruby highlighted_source\">str = <span class=\"st0\">`ls`</span>   <br/>arr = <span class=\"st0\">`ls`</span>.<span class=\"me1\">lines</span></pre>"}, {"lang": "Rust", "loc": 11, "block": "<pre class=\"text highlighted_source\">use std::process::Command;<br/>use std::io::{Write, self};<br/>\u00a0<br/>fn main() {<br/>    let output = Command::new(\"/bin/cat\")<br/>                            .arg(\"/etc/fstab\")<br/>                            .output()<br/>                            .expect(\"failed to execute process\");<br/>\u00a0<br/>    io::stdout().write(&amp;output.stdout);<br/>}</pre>"}, {"lang": "Scala", "loc": 6, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">io</span>.<span class=\"me1\">Source</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> command <span class=\"sy0\">=</span> <span class=\"st0\">\"cmd /c echo Time at\u00a0%DATE%\u00a0%TIME%\"</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> p <span class=\"sy0\">=</span> Runtime.<span class=\"me1\">getRuntime</span>.<span class=\"me1\">exec</span><span class=\"br0\">(</span>command<span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sc <span class=\"sy0\">=</span> Source.<span class=\"me1\">fromInputStream</span><span class=\"br0\">(</span>p.<span class=\"me1\">getInputStream</span><span class=\"br0\">)</span><br/>println<span class=\"br0\">(</span>sc.<span class=\"me1\">mkString</span><span class=\"br0\">)</span></pre>"}, {"lang": "Sidef", "loc": 2, "block": "<pre class=\"ruby highlighted_source\">var output = <span class=\"st0\">`ls`</span>             <span class=\"co1\"># `output` is a string</span><br/>var lines  = <span class=\"st0\">`ls`</span>.<span class=\"me1\">lines</span>       <span class=\"co1\"># `lines` is an array</span></pre>"}, {"lang": "Stata", "loc": 15, "block": "<pre class=\"text highlighted_source\">program shellout, rclass<br/>tempfile f<br/>tempname m<br/>shell `0' &gt; `f'<br/>file open `m' using \"`f'\", read binary<br/>file seek `m' eof<br/>file seek `m' query<br/>local n=r(loc)<br/>if `n'&gt;0 {<br/>\tfile seek `m' tof<br/>\tfile read `m'\u00a0%`n's s<br/>\tfile close `m'<br/>\treturn local out \"`s'\"<br/>}<br/>end</pre>"}, {"lang": "Swift", "loc": 16, "block": "<pre class=\"text highlighted_source\">import Foundation<br/>\u00a0<br/>let process = Process()<br/>\u00a0<br/>process.launchPath = \"/usr/bin/env\"<br/>process.arguments = [\"pwd\"]<br/>\u00a0<br/>let pipe = Pipe()<br/>process.standardOutput = pipe<br/>\u00a0<br/>process.launch()<br/>\u00a0<br/>let data = pipe.fileHandleForReading.readDataToEndOfFile()<br/>let output = String.init(data: data, encoding: String.Encoding.utf8)<br/>\u00a0<br/>print(output!)</pre>"}, {"lang": "Tcl", "loc": 2, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">set</span> data <span class=\"br0\">[</span><span class=\"kw2\">exec</span> ls -l<span class=\"br0\">]</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"read [string length $data] bytes and [llength [split $data <span class=\"es0\">\\n</span>]] lines\"</span></pre>"}, {"lang": "VBScript", "loc": 20, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw3\">For</span> <span class=\"kw3\">Each</span> <span class=\"kw4\">line</span> <span class=\"kw3\">In</span> ExecCmd(<span class=\"st0\">\"ipconfig /all\"</span>)<br/>    Wscript.Echo <span class=\"kw4\">line</span><br/><span class=\"kw3\">Next</span><br/>\u00a0<br/><span class=\"co1\">'Execute the given command and return the output in a text array.<br/></span><span class=\"kw2\">Function</span> ExecCmd(cmd)<br/>\u00a0<br/>    <span class=\"co1\">'Execute the command<br/></span>    <span class=\"kw4\">Dim</span> wso\u00a0: <span class=\"kw4\">Set</span> wso = <span class=\"kw2\">CreateObject</span>(<span class=\"st0\">\"Wscript.Shell\"</span>)<br/>    <span class=\"kw4\">Dim</span> exec\u00a0: <span class=\"kw4\">Set</span> exec = wso.Exec(cmd)<br/>    <span class=\"kw4\">Dim</span> res\u00a0: res = <span class=\"st0\">\"\"</span><br/>\u00a0<br/>    <span class=\"co1\">'Read all result text from standard output<br/></span>    <span class=\"kw3\">Do</span><br/>        res = res &amp; VbLf &amp; exec.StdOut.ReadLine<br/>    <span class=\"kw3\">Loop</span> <span class=\"kw3\">Until</span> exec.StdOut.AtEndOfStream<br/>\u00a0<br/>    <span class=\"co1\">'Return as a text array<br/></span>    ExecCmd = Split(Mid(res,2),vbLf)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span></pre>"}, {"lang": "Ursa", "loc": 40, "block": "<pre class=\"text highlighted_source\">&gt; decl iodevice iod<br/>&gt; decl string&lt;&gt; arg<br/>&gt; append \"ifconfig\" arg<br/>&gt; set iod (ursa.util.process.start arg)<br/>&gt; decl string&lt;&gt; output<br/>&gt; set output (iod.readlines)<br/>&gt; for (decl int i) (&lt; i (size output)) (inc i)<br/>..\tout output&lt;i&gt; endl console<br/>..end for<br/>lo0: flags=8049&lt;UP,LOOPBACK,RUNNING,MULTICAST&gt; mtu 16384<br/>\toptions=3&lt;RXCSUM,TXCSUM&gt;<br/>\tinet6\u00a0::1 prefixlen 128 <br/>\tinet 127.0.0.1 netmask 0xff000000 <br/>\tinet6 fe80::1%lo0 prefixlen 64 scopeid 0x1 <br/>\tnd6 options=1&lt;PERFORMNUD&gt;<br/>gif0: flags=8010&lt;POINTOPOINT,MULTICAST&gt; mtu 1280<br/>stf0: flags=0&lt;&gt; mtu 1280<br/>en0: flags=8863&lt;UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST&gt; mtu 1500<br/>\toptions=27&lt;RXCSUM,TXCSUM,VLAN_MTU,TSO4&gt;<br/>\tether d4:9a:20:b8:8d:2c <br/>\tnd6 options=1&lt;PERFORMNUD&gt;<br/>\tmedia: autoselect<br/>\tstatus: inactive<br/>en1: flags=8863&lt;UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST&gt; mtu 1500<br/>\tether 00:26:08:e0:67:cc <br/>\tinet6 fe80::226:8ff:fee0:67cc%en1 prefixlen 64 scopeid 0x5 <br/>\tinet 172.20.30.66 netmask 0xffffff00 broadcast 172.20.30.255<br/>\tnd6 options=1&lt;PERFORMNUD&gt;<br/>\tmedia: autoselect<br/>\tstatus: active<br/>fw0: flags=8863&lt;UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST&gt; mtu 4078<br/>\tlladdr d4:9a:20:ff:fe:b8:8d:2c <br/>\tnd6 options=1&lt;PERFORMNUD&gt;<br/>\tmedia: autoselect &lt;full-duplex&gt;<br/>\tstatus: inactive<br/>p2p0: flags=8843&lt;UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST&gt; mtu 2304<br/>\tether 02:26:08:e0:67:cc <br/>\tmedia: autoselect<br/>\tstatus: inactive<br/>&gt; </pre>"}, {"lang": "zkl", "loc": 4, "block": "<pre class=\"text highlighted_source\">zkl: System.cmd(\"date &gt;foo.txt\")<br/>0  // date return code<br/>zkl: File(\"foo.txt\").read().text<br/>Wed Aug 20 00:28:55 PDT 2014</pre>"}]}