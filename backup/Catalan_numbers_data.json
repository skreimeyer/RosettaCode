{"task": "Catalan_numbers", "blocks": [{"lang": "360 Assembly", "loc": 22, "block": "<pre class=\"text highlighted_source\">CATALAN  CSECT        08/09/2015<br/>         USING  CATALAN,R15<br/>         LA     R7,1               c=1<br/>         LA     R6,1               i=1<br/>LOOPI    CH     R6,=H'15'          do i=1 to 15 <br/>         BH     ELOOPI<br/>         XDECO  R6,PG              edit i<br/>         LR     R5,R6              i<br/>         SLA    R5,1               *2<br/>         BCTR   R5,0               -1<br/>         SLA    R5,1               *2<br/>         MR     R4,R7              *c<br/>         LA     R6,1(R6)           i=i+1<br/>         DR     R4,R6              /i<br/>         LR     R7,R5              c=2*(2*i-1)*c/(i+1)<br/>         XDECO  R7,PG+12           edit c<br/>         XPRNT  PG,24              print<br/>         B      LOOPI              next i<br/>ELOOPI   BR     R14<br/>PG       DS     CL24<br/>         YREGS <br/>         END    CATALAN</pre>"}, {"lang": "Ada", "loc": 16, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;  <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Test_Catalan <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">function</span> Catalan <span class=\"br0\">(</span>N\u00a0: Natural<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Natural <span class=\"kw1\">is</span><br/>      Result\u00a0: Positive\u00a0:= <span class=\"nu0\">1</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"nu0\">1</span>..<span class=\"me1\">N</span> <span class=\"kw1\">loop</span><br/>         Result\u00a0:= Result * <span class=\"nu0\">2</span> * <span class=\"br0\">(</span><span class=\"nu0\">2</span> * I - <span class=\"nu0\">1</span><span class=\"br0\">)</span> / <span class=\"br0\">(</span>I + <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> Result;<br/>   <span class=\"kw1\">end</span> Catalan;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> N <span class=\"kw3\">in</span> <span class=\"nu0\">0</span>..<span class=\"nu0\">15</span> <span class=\"kw1\">loop</span><br/>      Put_Line <span class=\"br0\">(</span>Integer'Image <span class=\"br0\">(</span>N<span class=\"br0\">)</span> &amp; <span class=\"st0\">\" =\"</span> &amp; Integer'Image <span class=\"br0\">(</span>Catalan <span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Test_Catalan;</pre>"}, {"lang": "ALGOL 68", "loc": 32, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># calculate the first few catalan numbers, using LONG INT values        #</span><br/><span class=\"coMULTI\"># (64-bit quantities in Algol 68G which can handle up to C23)           #</span><br/>\u00a0<br/><span class=\"coMULTI\"># returns n!/k!                                                         #</span><br/><span class=\"kw4\">PROC</span> factorial over factorial <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> n<span class=\"sy1\">,</span> k <span class=\"br0\">)</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/>     <span class=\"kw2\">IF</span>      k <span class=\"sy1\">&gt;</span> n <span class=\"kw2\">THEN</span> 0<br/>     <span class=\"kw2\">ELIF</span>    k <span class=\"sy1\">=</span> n <span class=\"kw2\">THEN</span> 1<br/>     <span class=\"kw2\">ELSE</span> <span class=\"coMULTI\">#  k &lt; n #</span><br/>         <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> f <span class=\"sy1\">:=</span> 1<span class=\"sy1\">;</span><br/>         <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> k <span class=\"sy1\">+</span> 1 <span class=\"kw2\">TO</span> n <span class=\"kw2\">DO</span> f <span class=\"sy1\">*:=</span> i <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>         f<br/>     <span class=\"kw2\">FI</span> <span class=\"coMULTI\"># factorial over factorial #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># returns n!                                                             #</span><br/><span class=\"kw4\">PROC</span> factorial <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> n <span class=\"br0\">)</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/>     <span class=\"kw2\">BEGIN</span><br/>         <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> f <span class=\"sy1\">:=</span> 1<span class=\"sy1\">;</span><br/>         <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> 2 <span class=\"kw2\">TO</span> n <span class=\"kw2\">DO</span> f <span class=\"sy1\">*:=</span> i <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>         f<br/>     <span class=\"kw2\">END</span> <span class=\"coMULTI\"># factorial #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># returnss the nth Catalan number using binomial coefficeients            #</span><br/><span class=\"coMULTI\"># uses the factorial over factorial procedure for a slight optimisation   #</span><br/><span class=\"coMULTI\"># note:     Cn = 1/(n+1)(2n n)                                            #</span><br/><span class=\"coMULTI\">#              = (2n)!/((n+1)!n!)                                         #</span><br/><span class=\"coMULTI\">#              = factorial over factorial( 2n, n+1 )/n!                   #</span><br/><span class=\"kw4\">PROC</span> catalan <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> n <span class=\"br0\">)</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span><span class=\"sy1\">:</span> <span class=\"kw2\">IF</span> n <span class=\"sy1\">&lt;</span> 2 <span class=\"kw2\">THEN</span> 1 <span class=\"kw2\">ELSE</span> factorial over factorial<span class=\"br0\">(</span> n <span class=\"sy1\">+</span> n<span class=\"sy1\">,</span> n <span class=\"sy1\">+</span> 1 <span class=\"br0\">)</span> <span class=\"kw12\">OVER</span> factorial<span class=\"br0\">(</span> n <span class=\"br0\">)</span> <span class=\"kw2\">FI</span><span class=\"sy1\">;</span> <br/>\u00a0<br/><span class=\"coMULTI\"># show the first few catalan numbers                                      #</span><br/><span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> 0 <span class=\"kw2\">TO</span> 15 <span class=\"kw2\">DO</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> i<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>2 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\": \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> catalan<span class=\"br0\">(</span> i <span class=\"br0\">)</span><span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw2\">OD</span></pre>"}, {"lang": "ALGOL W", "loc": 10, "block": "<pre class=\"text highlighted_source\">begin<br/>   \u00a0% print the catalan numbers up to C15\u00a0%<br/>    integer Cprev;<br/>    Cprev\u00a0:= 1;\u00a0% C0\u00a0%<br/>    write(     s_w\u00a0:= 0, i_w\u00a0:= 3, 0, \": \", i_w\u00a0:= 9, Cprev );<br/>    for n\u00a0:= 1 until 15 do begin<br/>        Cprev\u00a0:= round( ( ( ( 4 * n ) - 2 ) / ( n + 1 ) ) * Cprev );<br/>        write( s_w\u00a0:= 0, i_w\u00a0:= 3, n, \": \", i_w\u00a0:= 9, Cprev );<br/>    end for_n<br/>end.</pre>"}, {"lang": "APL", "loc": 1, "block": "<pre class=\"text highlighted_source\">      {(!2\u00d7\u2375)\u00f7(!\u2375+1)\u00d7!\u2375}(\u237315)-1</pre>"}, {"lang": "AutoHotkey", "loc": 20, "block": "<pre class=\"ahk highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"nu0\">15</span><br/>   out <span class=\"sy0\">.=</span> <span class=\"st0\">\"`n\"</span> Catalan<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">Msgbox</span></a>\u00a0% <a href=\"http://www.autohotkey.com/docs/Variables.htm#Clipboard\"><span class=\"kw2\">clipboard</span></a> <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>out<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>catalan<span class=\"br0\">(</span> n <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/><span class=\"co1\">; By [VxE]. Returns ((2n)! / ((n + 1)! * n!)) if 0 &lt;= N &lt;= 22 (higher than 22 results in overflow)</span><br/><span class=\"kw1\">If</span> <span class=\"br0\">(</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span> <span class=\"co1\">; values less than 3 are handled specially</span><br/>   <span class=\"kw1\">Return</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span>\u00a0? <span class=\"st0\">\"\"</span>\u00a0: n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\u00a0? <span class=\"nu0\">1</span>\u00a0: n<br/>\u00a0<br/>i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"co1\">; initialize the accumulator to 1</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span> <span class=\"co1\">; build the numerator by multiplying odd values between 2N and N+1</span><br/>   i <span class=\"sy0\">*=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span> n <span class=\"sy0\">-</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>\u00a0<br/>i <span class=\"sy0\">&lt;&lt;=</span> <span class=\"br0\">(</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"co1\">; multiply the numerator by powers of 2 according to N</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% n <span class=\"sy0\">-</span> <span class=\"nu0\">3</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span> <span class=\"co1\">; finish up by (integer) dividing by each of the non-cancelling factors</span><br/>   i <span class=\"sy0\">//=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><br/>\u00a0<br/><span class=\"kw1\">Return</span> i<br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 16, "block": "<pre class=\"awk highlighted_source\"><span class=\"co1\"># syntax: GAWK -f CATALAN_NUMBERS.AWK</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">0</span>; i<span class=\"sy2\">&lt;=</span><span class=\"nu0\">15</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%2d\u00a0%10d<span class=\"es0\">\\n</span>\"</span>,i,catalan<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> catalan<span class=\"br0\">(</span>n,  ans<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy2\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      ans = <span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>      ans = <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span>n<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy3\">/</span><span class=\"br0\">(</span>n<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy3\">*</span>catalan<span class=\"br0\">(</span>n<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw6\">return</span><span class=\"br0\">(</span>ans<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "BASIC", "loc": 18, "block": "<pre class=\"qbasic highlighted_source\"><a href=\"http://www.qbasicnews.com/qboho/qckdeclare.shtml\"><span class=\"kw3\">DECLARE</span></a> <span class=\"kw1\">FUNCTION</span> catalan <span class=\"br0\">(</span>n <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><span class=\"br0\">)</span> <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcksingle.shtml\"><span class=\"kw3\">SINGLE</span></a><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckredim.shtml\"><span class=\"kw3\">REDIM</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckshared.shtml\"><span class=\"kw3\">SHARED</span></a> results<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcksingle.shtml\"><span class=\"kw3\">SINGLE</span></a><br/>\u00a0<br/><span class=\"kw1\">FOR</span> x% <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">15</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> x%<span class=\"sy0\">,</span> catalan <span class=\"br0\">(</span>x%<span class=\"br0\">)</span><br/><span class=\"kw1\">NEXT</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> catalan <span class=\"br0\">(</span>n <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><span class=\"br0\">)</span> <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcksingle.shtml\"><span class=\"kw3\">SINGLE</span></a><br/>    <span class=\"kw1\">IF</span> <a href=\"http://www.qbasicnews.com/qboho/qckubound.shtml\"><span class=\"kw3\">UBOUND</span></a><span class=\"br0\">(</span>results<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> n <span class=\"kw1\">THEN</span> <a href=\"http://www.qbasicnews.com/qboho/qckredim.shtml\"><span class=\"kw3\">REDIM</span></a> PRESERVE results<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">IF</span> <span class=\"nu0\">0</span> <span class=\"sy0\">=</span> n <span class=\"kw1\">THEN</span><br/>    \tresults<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">ELSE</span><br/>    \tresults<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> n<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> catalan<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/>    catalan <span class=\"sy0\">=</span> results<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span></pre>"}, {"lang": "BBC BASIC", "loc": 7, "block": "<pre class=\"text highlighted_source\">      10 FOR i% = 1 TO 15<br/>      20   PRINT FNcatalan(i%)<br/>      30 NEXT<br/>      40 END<br/>      50 DEF FNcatalan(n%)<br/>      60   IF n% = 0 THEN = 1<br/>      70   = 2 * (2 * n% - 1) * FNcatalan(n% - 1) / (n% + 1)</pre>"}, {"lang": "Befunge", "loc": 4, "block": "<pre class=\"text highlighted_source\">0&gt;:.:000p1&gt;\\:00g-#v_v<br/>v 2-1*2p00\u00a0:+1g00\\&lt; $<br/>&gt; **00g1+/^v,*84,\"=\"&lt;<br/>_^#&lt;`*53:+1&gt;#,.#+5&lt; @</pre>"}, {"lang": "Bracmat", "loc": 57, "block": "<pre class=\"text highlighted_source\">( out$straight<br/>&amp; ( C<br/>  =   <br/>    .   ( F<br/>        =   i prod<br/>          .  \u00a0!arg:0&amp;1<br/>            |   1:?prod<br/>              &amp; 0:?i<br/>              &amp;   whl<br/>                ' ( 1+!i:~&gt;!arg:?i<br/>                  &amp;\u00a0!i*!prod:?prod<br/>                  )<br/>              &amp;\u00a0!prod<br/>        )<br/>      &amp; F$(2*!arg)*(F$(!arg+1)*F$!arg)^-1<br/>  )<br/>&amp; -1:?n<br/>&amp;   whl<br/>  ' ( 1+!n:~&gt;15:?n<br/>    &amp; out$(str$(C\u00a0!n \" = \" C$!n))<br/>    )<br/>&amp; out$\"recursive, with memoization, without fractions\"<br/>&amp;\u00a0:?seenCs<br/>&amp; ( C<br/>  =   i sum<br/>    .  \u00a0!arg:0&amp;1<br/>      |   (\u00a0!seenCs:? (!arg.?sum)\u00a0?<br/>          |   0:?sum<br/>            &amp; -1:?i<br/>            &amp;   whl<br/>              ' ( 1+!i:&lt;!arg:?i<br/>                &amp; C$!i*C$(-1+!arg+-1*!i)+!sum:?sum<br/>                )<br/>            &amp; (!arg.!sum)\u00a0!seenCs:?seenCs<br/>          )<br/>        &amp;\u00a0!sum<br/>  )<br/>&amp; -1:?n<br/>&amp;   whl<br/>  ' ( 1+!n:~&gt;15:?n<br/>    &amp; out$(str$(C\u00a0!n \" = \" C$!n))<br/>    )<br/>&amp; out$\"recursive, without memoization, with fractions\"<br/>&amp; ( C<br/>  =   <br/>    .  \u00a0!arg:0&amp;1<br/>      | 2*(2*!arg+-1)*(!arg+1)^-1*C$(!arg+-1)<br/>  )<br/>&amp; -1:?n<br/>&amp;   whl<br/>  ' ( 1+!n:~&gt;15:?n<br/>    &amp; out$(str$(C\u00a0!n \" = \" C$!n))<br/>    )<br/>&amp; out$\"Using taylor expansion of sqrt(1-4X). (See http://bababadalgharaghtakamminarronnkonnbro.blogspot.in/2012/10/algebraic-type-systems-combinatorial.html)\"<br/>&amp; out$(1+(1+-1*tay$((1+-4*X)^1/2,X,16))*(2*X)^-1+-1)<br/>&amp; out$<br/>);</pre>"}, {"lang": "Brat", "loc": 9, "block": "<pre class=\"text highlighted_source\">catalan = { n |<br/>  true? n == 0<br/>    { 1 }<br/>    { (2 * ( 2 * n - 1) / ( n + 1 )) * catalan(n - 1) }<br/>}<br/>\u00a0<br/>0.to 15 { n |<br/>  p \"#{n} - #{catalan n}\"<br/>}</pre>"}, {"lang": "C", "loc": 46, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> <span class=\"kw4\">long</span> ull<span class=\"sy0\">;</span><br/>\u00a0<br/>ull binomial<span class=\"br0\">(</span>ull m<span class=\"sy0\">,</span> ull n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tull r <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> d <span class=\"sy0\">=</span> m <span class=\"sy0\">-</span> n<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>d <span class=\"sy0\">&gt;</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span> n <span class=\"sy0\">=</span> d<span class=\"sy0\">;</span> d <span class=\"sy0\">=</span> m <span class=\"sy0\">-</span> n<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>m <span class=\"sy0\">&gt;</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tr <span class=\"sy0\">*=</span> m<span class=\"sy0\">--;</span><br/>\t\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>d <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span> <span class=\"br0\">(</span>r<span class=\"sy0\">%</span>d<span class=\"br0\">)</span> <span class=\"br0\">)</span> r <span class=\"sy0\">/=</span> d<span class=\"sy0\">--;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> r<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>ull catalan1<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> binomial<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> n<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">+</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>ull catalan2<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\tull r <span class=\"sy0\">=</span> <span class=\"sy0\">!</span>n<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\tr <span class=\"sy0\">+=</span> catalan2<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">*</span> catalan2<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">-</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> r<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>ull catalan3<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> n <span class=\"sy0\">?</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> catalan3<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">+</span> n<span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/puts.html\"><span class=\"kw3\">puts</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\t</span>direct<span class=\"es1\">\\t</span>summing<span class=\"es1\">\\t</span>frac\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">16</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d<span class=\"es1\">\\t</span>%llu<span class=\"es1\">\\t</span>%llu<span class=\"es1\">\\t</span>%llu<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> i<span class=\"sy0\">,</span><br/>\t\t\tcatalan1<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">,</span> catalan2<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">,</span> catalan3<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 114, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">namespace</span> CatalanNumbers<br/><span class=\"br0\">{</span><br/>    <span class=\"co1\">/// &lt;summary&gt;</span><br/>    <span class=\"co1\">/// Class that holds all options.</span><br/>    <span class=\"co1\">/// &lt;/summary&gt;</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">class</span> CatalanNumberGenerator<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> Factorial<span class=\"br0\">(</span><span class=\"kw4\">double</span> n<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">return</span> n <span class=\"sy0\">*</span> Factorial<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">double</span> FirstOption<span class=\"br0\">(</span><span class=\"kw4\">double</span> n<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">const</span> <span class=\"kw4\">double</span> topMultiplier <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> Factorial<span class=\"br0\">(</span>topMultiplier <span class=\"sy0\">*</span> n<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>Factorial<span class=\"br0\">(</span>n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> Factorial<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">double</span> SecondOption<span class=\"br0\">(</span><span class=\"kw4\">double</span> n<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw4\">double</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">double</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                sum <span class=\"sy0\">+=</span> SecondOption<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">*</span> SecondOption<span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> sum<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">double</span> ThirdOption<span class=\"br0\">(</span><span class=\"kw4\">double</span> n<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> ThirdOption<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">// Program.cs</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Configuration</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// Main program</span><br/><span class=\"co1\">// Be sure to add the following to the App.config file and add a reference to System.Configuration:</span><br/><span class=\"co1\">// &lt;?xml version=\"1.0\" encoding=\"utf-8\"\u00a0?&gt;</span><br/><span class=\"co1\">// &lt;configuration&gt;</span><br/><span class=\"co1\">//  &lt;appSettings&gt;</span><br/><span class=\"co1\">//    &lt;clear/&gt;</span><br/><span class=\"co1\">//    &lt;add key=\"MaxCatalanNumber\" value=\"50\"/&gt;</span><br/><span class=\"co1\">//  &lt;/appSettings&gt;</span><br/><span class=\"co1\">// &lt;/configuration&gt;</span><br/><span class=\"kw1\">namespace</span> CatalanNumbers<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            CatalanNumberGenerator generator <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> CatalanNumberGenerator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            DateTime initial<span class=\"sy0\">;</span><br/>            DateTime final<span class=\"sy0\">;</span><br/>            TimeSpan ts<span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">try</span><br/>            <span class=\"br0\">{</span><br/>                initial <span class=\"sy0\">=</span> DateTime<span class=\"sy0\">.</span><span class=\"me1\">Now</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> Convert<span class=\"sy0\">.</span><span class=\"me1\">ToInt32</span><span class=\"br0\">(</span>ConfigurationManager<span class=\"sy0\">.</span><span class=\"me1\">AppSettings</span><span class=\"br0\">[</span><span class=\"st0\">\"MaxCatalanNumber\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"CatalanNumber({0}):{1}\"</span>, i, generator<span class=\"sy0\">.</span><span class=\"me1\">FirstOption</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                final <span class=\"sy0\">=</span> DateTime<span class=\"sy0\">.</span><span class=\"me1\">Now</span><span class=\"sy0\">;</span><br/>                ts <span class=\"sy0\">=</span> final <span class=\"sy0\">-</span> initial<span class=\"sy0\">;</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"It took {0}.{1} to execute<span class=\"es0\">\\n</span>\"</span>, ts<span class=\"sy0\">.</span><span class=\"me1\">Seconds</span>, ts<span class=\"sy0\">.</span><span class=\"me1\">Milliseconds</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                initial <span class=\"sy0\">=</span> DateTime<span class=\"sy0\">.</span><span class=\"me1\">Now</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> Convert<span class=\"sy0\">.</span><span class=\"me1\">ToInt32</span><span class=\"br0\">(</span>ConfigurationManager<span class=\"sy0\">.</span><span class=\"me1\">AppSettings</span><span class=\"br0\">[</span><span class=\"st0\">\"MaxCatalanNumber\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"CatalanNumber({0}):{1}\"</span>, i, generator<span class=\"sy0\">.</span><span class=\"me1\">SecondOption</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                final <span class=\"sy0\">=</span> DateTime<span class=\"sy0\">.</span><span class=\"me1\">Now</span><span class=\"sy0\">;</span><br/>                ts <span class=\"sy0\">=</span> final <span class=\"sy0\">-</span> initial<span class=\"sy0\">;</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"It took {0}.{1} to execute<span class=\"es0\">\\n</span>\"</span>, ts<span class=\"sy0\">.</span><span class=\"me1\">Seconds</span>, ts<span class=\"sy0\">.</span><span class=\"me1\">Milliseconds</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>   <br/>\u00a0<br/>                i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                initial <span class=\"sy0\">=</span> DateTime<span class=\"sy0\">.</span><span class=\"me1\">Now</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> Convert<span class=\"sy0\">.</span><span class=\"me1\">ToInt32</span><span class=\"br0\">(</span>ConfigurationManager<span class=\"sy0\">.</span><span class=\"me1\">AppSettings</span><span class=\"br0\">[</span><span class=\"st0\">\"MaxCatalanNumber\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"CatalanNumber({0}):{1}\"</span>, i, generator<span class=\"sy0\">.</span><span class=\"me1\">ThirdOption</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                final <span class=\"sy0\">=</span> DateTime<span class=\"sy0\">.</span><span class=\"me1\">Now</span><span class=\"sy0\">;</span><br/>                ts <span class=\"sy0\">=</span> final <span class=\"sy0\">-</span> initial<span class=\"sy0\">;</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"It took {0}.{1} to execute\"</span>, ts<span class=\"sy0\">.</span><span class=\"me1\">Seconds</span>, ts<span class=\"sy0\">.</span><span class=\"me1\">Milliseconds</span>, ts<span class=\"sy0\">.</span><span class=\"me1\">TotalMilliseconds</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">catch</span> <span class=\"br0\">(</span>Exception ex<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Stopped at index {0}:\"</span>, i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>ex<span class=\"sy0\">.</span><span class=\"me1\">Message</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 60, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#if\u00a0!defined __ALGORITHMS_H__</span><br/><span class=\"co2\">#define __ALGORITHMS_H__</span><br/>\u00a0<br/><span class=\"kw2\">namespace</span> rosetta<br/>  <span class=\"br0\">{</span><br/>  <span class=\"kw2\">namespace</span> catalanNumbers<br/>    <span class=\"br0\">{</span><br/>    <span class=\"kw2\">namespace</span> detail<br/>      <span class=\"br0\">{</span><br/>\u00a0<br/>      <span class=\"kw2\">class</span> Factorial<br/>        <span class=\"br0\">{</span><br/>        <span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>          <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> <span class=\"kw4\">long</span> operator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> n<span class=\"br0\">)</span><span class=\"kw4\">const</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>      <span class=\"kw2\">class</span> BinomialCoefficient<br/>        <span class=\"br0\">{</span><br/>        <span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>          <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> <span class=\"kw4\">long</span> operator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> n, <span class=\"kw4\">unsigned</span> k<span class=\"br0\">)</span><span class=\"kw4\">const</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>      <span class=\"br0\">}</span> <span class=\"co1\">//namespace detail</span><br/>\u00a0<br/>    <span class=\"kw2\">class</span> CatalanNumbersDirectFactorial<br/>      <span class=\"br0\">{</span><br/>      <span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>        CatalanNumbersDirectFactorial<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> <span class=\"kw4\">long</span> operator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> n<span class=\"br0\">)</span><span class=\"kw4\">const</span><span class=\"sy4\">;</span><br/>      <span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>        detail<span class=\"sy4\">::</span><span class=\"me2\">Factorial</span> factorial<span class=\"sy4\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">class</span> CatalanNumbersDirectBinomialCoefficient<br/>      <span class=\"br0\">{</span><br/>      <span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>        CatalanNumbersDirectBinomialCoefficient<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> <span class=\"kw4\">long</span> operator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> n<span class=\"br0\">)</span><span class=\"kw4\">const</span><span class=\"sy4\">;</span><br/>      <span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>        detail<span class=\"sy4\">::</span><span class=\"me2\">BinomialCoefficient</span> binomialCoefficient<span class=\"sy4\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">class</span> CatalanNumbersRecursiveSum<br/>      <span class=\"br0\">{</span><br/>      <span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>        CatalanNumbersRecursiveSum<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> <span class=\"kw4\">long</span> operator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> n<span class=\"br0\">)</span><span class=\"kw4\">const</span><span class=\"sy4\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">class</span> CatalanNumbersRecursiveFraction<br/>      <span class=\"br0\">{</span><br/>      <span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>        CatalanNumbersRecursiveFraction<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> <span class=\"kw4\">long</span> operator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> n<span class=\"br0\">)</span><span class=\"kw4\">const</span><span class=\"sy4\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"br0\">}</span>   <span class=\"co1\">//namespace catalanNumbers</span><br/>  <span class=\"br0\">}</span>     <span class=\"co1\">//namespace rosetta</span><br/>\u00a0<br/><span class=\"co2\">#endif //!defined __ALGORITHMS_H__</span></pre>"}, {"lang": "Clojure", "loc": 17, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">def</span> <span class=\"sy0\">!</span> <span class=\"br0\">(</span>memoize #<span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"kw1\">inc</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> catalan<span class=\"sy0\">-</span>numbers<span class=\"sy0\">-</span>direct <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">map</span> #<span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t   <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span> <span class=\"br0\">(</span><span class=\"kw1\">inc</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">range</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> catalan<span class=\"sy0\">-</span>numbers<span class=\"sy0\">-</span>recursive<br/>     #<span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"co1\">; [c0 n1]</span><br/>\t   <span class=\"br0\">(</span><span class=\"kw1\">iterate</span> <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>c n<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t\t      <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"br0\">(</span><span class=\"kw1\">dec</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">2</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"kw1\">inc</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span> c<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">inc</span> n<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ,<span class=\"br0\">)</span><br/>\t   <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"kw1\">first</span> ,<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>user<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">take</span> <span class=\"nu0\">15</span> <span class=\"br0\">(</span>catalan<span class=\"sy0\">-</span>numbers<span class=\"sy0\">-</span>direct<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">5</span> <span class=\"nu0\">14</span> <span class=\"nu0\">42</span> <span class=\"nu0\">132</span> <span class=\"nu0\">429</span> <span class=\"nu0\">1430</span> <span class=\"nu0\">4862</span> <span class=\"nu0\">16796</span> <span class=\"nu0\">58786</span> <span class=\"nu0\">208012</span> <span class=\"nu0\">742900</span> <span class=\"nu0\">2674440</span><span class=\"br0\">)</span><br/>\u00a0<br/>user<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">take</span> <span class=\"nu0\">15</span> <span class=\"br0\">(</span>catalan<span class=\"sy0\">-</span>numbers<span class=\"sy0\">-</span>recursive<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">5</span> <span class=\"nu0\">14</span> <span class=\"nu0\">42</span> <span class=\"nu0\">132</span> <span class=\"nu0\">429</span> <span class=\"nu0\">1430</span> <span class=\"nu0\">4862</span> <span class=\"nu0\">16796</span> <span class=\"nu0\">58786</span> <span class=\"nu0\">208012</span> <span class=\"nu0\">742900</span> <span class=\"nu0\">2674440</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 28, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> catalan1 <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"co1\">;; factorial. CLISP actually has \"!\" defined for this</span><br/>  <span class=\"br0\">(</span>labels <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">!</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zerop</span> x<span class=\"br0\">)</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span>* x <span class=\"br0\">(</span><span class=\"sy0\">!</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>- x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>/ <span class=\"br0\">(</span><span class=\"sy0\">!</span> <span class=\"br0\">(</span>* <span class=\"nu0\">2</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; cache</span><br/><span class=\"br0\">(</span>defparameter *catalans* <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> <span class=\"nu0\">5</span><br/>\t\t\t\t     <span class=\"sy0\">:</span><span class=\"me1\">fill-pointer</span> <span class=\"nu0\">0</span><br/>\t\t\t\t     <span class=\"sy0\">:</span><span class=\"me1\">adjustable</span> t<br/>\t\t\t\t     <span class=\"sy0\">:</span><span class=\"me1\">element-type</span> '<span class=\"kw1\">integer</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> catalan2 <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zerop</span> n<span class=\"br0\">)</span> <span class=\"nu0\">1</span><br/>    <span class=\"co1\">;; check cache</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> n <span class=\"br0\">(</span><span class=\"kw1\">length</span> *catalans*<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> *catalans* n<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>loop with c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> for i from <span class=\"nu0\">0</span> to <span class=\"br0\">(</span><span class=\"nu0\">1</span>- n<span class=\"br0\">)</span> collect<br/>\t    <span class=\"br0\">(</span>incf c <span class=\"br0\">(</span>* <span class=\"br0\">(</span>catalan2 i<span class=\"br0\">)</span> <span class=\"br0\">(</span>catalan2 <span class=\"br0\">(</span>- n <span class=\"nu0\">1</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t    <span class=\"co1\">;; lower values always get calculated first, so</span><br/>\t    <span class=\"co1\">;; vector-push-extend is safe</span><br/>\t    finally <span class=\"br0\">(</span><span class=\"kw1\">progn</span> <span class=\"br0\">(</span>vector-push-extend c *catalans*<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">return</span> c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> catalan3 <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zerop</span> n<span class=\"br0\">)</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>* <span class=\"nu0\">2</span> <span class=\"br0\">(</span>+ n n -<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>catalan3 <span class=\"br0\">(</span><span class=\"nu0\">1</span>- n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;; test all three methods</span><br/><span class=\"br0\">(</span>loop for f in <span class=\"br0\">(</span><span class=\"kw1\">list</span> #'catalan1 #'catalan2 #'catalan3<span class=\"br0\">)</span><br/>      for i from <span class=\"nu0\">1</span> to <span class=\"nu0\">3</span> <span class=\"kw1\">do</span><br/>      <span class=\"br0\">(</span>format t <span class=\"st0\">\"~%Method ~d:~%\"</span> i<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>i <span class=\"nu0\">16</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>format t <span class=\"st0\">\"C(~2d) = ~d~%\"</span> i <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> f i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 20, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">bigint</span><span class=\"sy0\">,</span> std.<span class=\"me1\">functional</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">auto</span> product<span class=\"br0\">(</span>R<span class=\"br0\">)</span><span class=\"br0\">(</span>R r<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> reduce<span class=\"sy0\">!</span>q<span class=\"br0\">{</span>a <span class=\"sy0\">*</span> b<span class=\"br0\">}</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>.<span class=\"me1\">BigInt</span><span class=\"sy0\">,</span> r<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">const</span> cats1 <span class=\"sy0\">=</span> sequence<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> iota<span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">product</span> <span class=\"sy0\">/</span> iota<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">product</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>BigInt cats2a<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">alias</span> mcats2a <span class=\"sy0\">=</span> memoize<span class=\"sy0\">!</span>cats2a<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span>.<span class=\"me1\">BigInt</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> n.<span class=\"me1\">iota</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> mcats2a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">*</span> mcats2a<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">-</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">sum</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">const</span> cats2 <span class=\"sy0\">=</span> sequence<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> n.<span class=\"me1\">cats2a</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">const</span> cats3 <span class=\"sy0\">=</span> recurrence<span class=\"sy0\">!</span>q<span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">*</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> a<span class=\"br0\">[</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>.<span class=\"me1\">BigInt</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>cats<span class=\"sy0\">;</span> TypeTuple<span class=\"sy0\">!</span><span class=\"br0\">(</span>cats1<span class=\"sy0\">,</span> cats2<span class=\"sy0\">,</span> cats3<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        cats.<span class=\"me1\">take</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 39, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>lib 'sequences<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>lib 'bigint<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>lib 'math<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; function definition</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>C1 n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span>factorial <span class=\"br0\">(</span><span class=\"sy0\">*</span> n <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>factorial <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>factorial n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"br0\">[</span><span class=\"nu0\">1</span> .. <span class=\"nu0\">16</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">write</span> <span class=\"br0\">(</span>C1 i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">5</span> <span class=\"nu0\">14</span> <span class=\"nu0\">42</span> <span class=\"nu0\">132</span> <span class=\"nu0\">429</span> <span class=\"nu0\">1430</span> <span class=\"nu0\">4862</span> <span class=\"nu0\">16796</span> <span class=\"nu0\">58786</span> <span class=\"nu0\">208012</span> <span class=\"nu0\">742900</span> <span class=\"nu0\">2674440</span> <span class=\"nu0\">9694845</span> <br/>\u00a0<br/><span class=\"co1\">;; using a recursive procedure with memoization</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>C2 n<span class=\"br0\">)</span> <span class=\"co1\">;; ( \u03a3  ...)is the same as (sigma ..)</span><br/>\t<span class=\"br0\">(</span>\u03a3 <span class=\"br0\">(</span><span class=\"kw1\">lambda</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"br0\">(</span>C2 i<span class=\"br0\">)</span> <span class=\"br0\">(</span>C2 <span class=\"br0\">(</span><span class=\"sy0\">-</span> n i <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>remember 'C2 #<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; first term defined here</span><br/>\u00a0<br/><span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"br0\">[</span><span class=\"nu0\">1</span> .. <span class=\"nu0\">16</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">write</span> <span class=\"br0\">(</span>C2 i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">5</span> <span class=\"nu0\">14</span> <span class=\"nu0\">42</span> <span class=\"nu0\">132</span> <span class=\"nu0\">429</span> <span class=\"nu0\">1430</span> <span class=\"nu0\">4862</span> <span class=\"nu0\">16796</span> <span class=\"nu0\">58786</span> <span class=\"nu0\">208012</span> <span class=\"nu0\">742900</span> <span class=\"nu0\">2674440</span> <span class=\"nu0\">9694845</span> <br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;; using procrastinators = infinite sequence</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>catalan n acc<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> acc <span class=\"nu0\">2</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">2</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> C3 <span class=\"br0\">(</span>scanl catalan <span class=\"nu0\">1</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> ..<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>take C3 <span class=\"nu0\">15</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">5</span> <span class=\"nu0\">14</span> <span class=\"nu0\">42</span> <span class=\"nu0\">132</span> <span class=\"nu0\">429</span> <span class=\"nu0\">1430</span> <span class=\"nu0\">4862</span> <span class=\"nu0\">16796</span> <span class=\"nu0\">58786</span> <span class=\"nu0\">208012</span> <span class=\"nu0\">742900</span> <span class=\"nu0\">2674440</span> <span class=\"nu0\">9694845</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;; the same, using infix notation</span><br/><span class=\"br0\">(</span>lib 'match<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">load</span> 'infix.glisp<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>catalan n acc<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> acc <span class=\"sy0\">*</span> <span class=\"br0\">(</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> C3 <span class=\"br0\">(</span>scanl catalan <span class=\"nu0\">1</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> ..<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>take C3 <span class=\"nu0\">15</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">5</span> <span class=\"nu0\">14</span> <span class=\"nu0\">42</span> <span class=\"nu0\">132</span> <span class=\"nu0\">429</span> <span class=\"nu0\">1430</span> <span class=\"nu0\">4862</span> <span class=\"nu0\">16796</span> <span class=\"nu0\">58786</span> <span class=\"nu0\">208012</span> <span class=\"nu0\">742900</span> <span class=\"nu0\">2674440</span> <span class=\"nu0\">9694845</span><span class=\"br0\">)</span><br/><span class=\"co1\">;; or</span><br/><span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span>c C3<span class=\"br0\">)</span> <span class=\"br0\">(</span>i <span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">write</span> c<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">5</span> <span class=\"nu0\">14</span> <span class=\"nu0\">42</span> <span class=\"nu0\">132</span> <span class=\"nu0\">429</span> <span class=\"nu0\">1430</span> <span class=\"nu0\">4862</span> <span class=\"nu0\">16796</span> <span class=\"nu0\">58786</span> <span class=\"nu0\">208012</span> <span class=\"nu0\">742900</span> <span class=\"nu0\">2674440</span> <span class=\"nu0\">9694845</span> <br/>\u00a0</pre>"}, {"lang": "Eiffel", "loc": 39, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span><br/>\tAPPLICATION<br/>\u00a0<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+none&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">NONE</span></a><span class=\"br0\">}</span><br/>\u00a0<br/>\tmake<br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tacross<br/>\t\t\t\t<span class=\"nu0\">0</span> <span class=\"sy0\">|</span>..<span class=\"sy0\">|</span> <span class=\"nu0\">14</span> <span class=\"kw2\">as</span> c<br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\tio.<span class=\"me1\">put_double</span> <span class=\"br0\">(</span>nth_catalan_number <span class=\"br0\">(</span>c.<span class=\"me1\">item</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\tio.<span class=\"me1\">new_line</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tnth_catalan_number <span class=\"br0\">(</span>n<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+double&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">DOUBLE</span></a><br/>\t\t\t<span class=\"co1\">--'n'th number in the sequence of Catalan numbers.</span><br/>\t\t<span class=\"kw2\">require</span><br/>\t\t\tn_not_negative<span class=\"sy0\">:</span> n <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\ts, t<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+double&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">DOUBLE</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">if</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw2\">then</span><br/>\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">1.0</span><br/>\t\t\t<span class=\"kw2\">else</span><br/>\t\t\t\tt <span class=\"sy0\">:=</span> <span class=\"nu0\">4</span> <span class=\"sy0\">*</span> n.<span class=\"me1\">to_double</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><br/>\t\t\t\ts <span class=\"sy0\">:=</span> n.<span class=\"me1\">to_double</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> t <span class=\"sy0\">/</span> s <span class=\"sy0\">*</span> nth_catalan_number <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw2\">end</span><br/>\u00a0<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 23, "block": "<pre class=\"text highlighted_source\">defmodule Catalan do<br/>  def cat(n), do: div( factorial(2*n), factorial(n+1) * factorial(n) )<br/>\u00a0<br/>  defp factorial(n), do: fac1(n,1)<br/>\u00a0<br/>  defp fac1(0, acc), do: acc<br/>  defp fac1(n, acc), do: fac1(n-1, n*acc)<br/>\u00a0<br/>  def cat_r1(0), do: 1<br/>  def cat_r1(n), do: Enum.sum(for i &lt;- 0..n-1, do: cat_r1(i) * cat_r1(n-1-i))<br/>\u00a0<br/>  def cat_r2(0), do: 1<br/>  def cat_r2(n), do: div(cat_r2(n-1) * 2 * (2*n - 1), n + 1)<br/>\u00a0<br/>  def test do<br/>    range = 0..14<br/>   \u00a0:io.format \"Directly:~n~p~n\",            [(for n &lt;- range, do: cat(n))]<br/>   \u00a0:io.format \"1st recusive method:~n~p~n\", [(for n &lt;- range, do: cat_r1(n))]<br/>   \u00a0:io.format \"2nd recusive method:~n~p~n\", [(for n &lt;- range, do: cat_r2(n))]<br/>  end<br/>end<br/>\u00a0<br/>Catalan.test</pre>"}, {"lang": "Erlang", "loc": 30, "block": "<pre class=\"erlang highlighted_source\"><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>catalan<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>test<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">cat</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <br/>   <span class=\"re3\">factorial</span><span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy3\">*</span> <span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"kw2\">div</span> <span class=\"br0\">(</span><span class=\"re3\">factorial</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy3\">*</span> <span class=\"re3\">factorial</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">factorial</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <br/>   <span class=\"re3\">fac1</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">fac1</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <br/>   <span class=\"re5\">Acc</span><span class=\"sy1\">;</span> <br/><span class=\"re3\">fac1</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <br/>   <span class=\"re3\">fac1</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span> <span class=\"sy3\">*</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">cat_r1</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>   <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/><span class=\"re3\">cat_r1</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>   <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">sum</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re3\">cat_r1</span><span class=\"br0\">(</span><span class=\"re5\">I</span><span class=\"br0\">)</span><span class=\"sy3\">*</span><span class=\"re3\">cat_r1</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy3\">-</span><span class=\"re5\">I</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">I</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">cat_r2</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>   <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/><span class=\"re3\">cat_r2</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>   <span class=\"re3\">cat_r2</span><span class=\"br0\">(</span><span class=\"re5\">N</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy3\">*</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy3\">*</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy3\">*</span> <span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">div</span> <span class=\"br0\">(</span><span class=\"re5\">N</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">test</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <br/>    <span class=\"re5\">TestList</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">14</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"Directly:<span class=\"es0\">\\n</span>~p<span class=\"es0\">\\n</span>\"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"re3\">cat</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">N</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">TestList</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"1st recusive method:<span class=\"es0\">\\n</span>~p<span class=\"es0\">\\n</span>\"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"re3\">cat_r1</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">N</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">TestList</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"2nd recusive method:<span class=\"es0\">\\n</span>~p<span class=\"es0\">\\n</span>\"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"re3\">cat_r2</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">N</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">TestList</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "ERRE", "loc": 16, "block": "<pre class=\"text highlighted_source\">PROGRAM CATALAN<br/>\u00a0<br/>PROCEDURE CATALAN(N-&gt;RES)<br/>   RES=1<br/>   FOR I=1 TO N DO<br/>      RES=RES*2*(2*I-1)/(I+1)<br/>   END FOR<br/>END PROCEDURE<br/>\u00a0<br/>BEGIN<br/>   FOR N=0 TO 15 DO<br/>      CATALAN(N-&gt;RES)    <br/>      PRINT(N;\"=\";RES)<br/>   END FOR<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 23, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"co1\">--Catalan number task from Rosetta Code wiki</span><br/><span class=\"co1\">--User:Lnettnay</span><br/>\u00a0<br/><span class=\"co1\">--function from factorial task</span><br/><span class=\"kw1\">function</span> factorial<span class=\"br0\">(</span><span class=\"kw2\">integer</span> n<span class=\"br0\">)</span><br/><span class=\"kw2\">atom</span> f <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">while</span> n &gt; <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>        f <span class=\"sy1\">*=</span> n<br/>        n <span class=\"sy1\">-=</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">while</span><br/>\u00a0<br/><span class=\"kw1\">return</span> f<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> catalan<span class=\"br0\">(</span><span class=\"kw2\">integer</span> n<span class=\"br0\">)</span>  <br/><span class=\"kw2\">atom</span> numerator <span class=\"sy1\">=</span> factorial<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy1\">*</span> n<span class=\"br0\">)</span><br/><span class=\"kw2\">atom</span> denominator <span class=\"sy1\">=</span> factorial<span class=\"br0\">(</span>n<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">*</span>factorial<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"kw1\">return</span> numerator<span class=\"sy1\">/</span>denominator<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">15</span> <span class=\"kw1\">do</span><br/>        <span class=\"sy2\">?</span> catalan<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">for</span></pre>"}, {"lang": "F#", "loc": 1, "block": "<pre>&gt; Seq.unfold(fun (c,n) -&gt; let cc = 2*(2*n-1)*c/(n+1) in Some(c,(cc,n+1))) (1,1) |&gt; Seq.take 15 |&gt; Seq.iter (printf \"%i, \");;\n1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012, 742900, 2674440, val it\u00a0: unit = ()\n</pre>"}, {"lang": "Factor", "loc": 23, "block": "<pre class=\"text highlighted_source\">: next ( seq -- newseq )<br/>  [ ] [ last ] [ length ] tri<br/>  [ 2 * 1 - 2 * ] [ 1 + ] bi /<br/>  * suffix\u00a0;<br/>: Catalan ( n -- seq )  V{ 1 } swap 1 - [ next ] times\u00a0;<br/>15 Catalan .<br/>V{<br/>    1<br/>    1<br/>    2<br/>    5<br/>    14<br/>    42<br/>    132<br/>    429<br/>    1430<br/>    4862<br/>    16796<br/>    58786<br/>    208012<br/>    742900<br/>    2674440<br/>}</pre>"}, {"lang": "Fantom", "loc": 52, "block": "<pre class=\"text highlighted_source\">class Main<br/>{<br/>  static Int factorial (Int n)<br/>  {<br/>    Int res\u00a0:= 1<br/>    if (n&gt;1)<br/>      (2..n).each |i| { res *= i }<br/>    return res<br/>  }<br/>\u00a0<br/>  static Int catalanA (Int n)<br/>  { <br/>    return factorial(2*n)/(factorial(n+1) * factorial(n))<br/>  }<br/>\u00a0<br/>  static Int catalanB (Int n)<br/>  {<br/>    if (n == 0)<br/>    {<br/>      return 1<br/>    }<br/>    else<br/>    {<br/>      sum\u00a0:= 0<br/>      n.times |i| { sum += catalanB(i) * catalanB(n-1-i) } <br/>      return sum<br/>    }<br/>  }<br/>\u00a0<br/>  static Int catalanC (Int n)<br/>  {<br/>    if (n == 0)<br/>    {<br/>      return 1<br/>    }<br/>    else<br/>    {<br/>      return catalanC(n-1)*2*(2*n-1)/(n+1)<br/>    }<br/>  }<br/>\u00a0<br/>  public static Void main ()<br/>  {<br/>    (1..15).each |n|<br/>    {<br/>      echo (n.toStr.padl(4) + <br/>            catalanA(n).toStr.padl(10) +<br/>            catalanB(n).toStr.padl(10) +<br/>            catalanC(n).toStr.padl(10))<br/>    }<br/>  }<br/>}</pre>"}, {"lang": "Forth", "loc": 1, "block": "<pre class=\"text highlighted_source\">: catalan ( n -- )  1 swap 1+ 1 do dup cr .  i 2* 1- 2*  i 1+ */ loop drop\u00a0;</pre>"}, {"lang": "Fortran", "loc": 44, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> main<br/>  <span class=\"co1\">!=======================================================================================</span><br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>  <span class=\"co1\">!=== Local data</span><br/>  <span class=\"kw3\">integer</span>                      <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>\u00a0<br/>  <span class=\"co1\">!=== External procedures</span><br/>  <span class=\"kw3\">double</span> <span class=\"kw4\">precision</span>, <span class=\"kw3\">external</span>   <span class=\"sy0\">::</span> <span class=\"me2\">catalan_numbers</span>         <br/>\u00a0<br/>  <span class=\"co1\">!=== Execution =========================================================================</span><br/>\u00a0<br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">'(1x,a)'</span><span class=\"br0\">)</span><span class=\"st0\">'==============='</span><br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">'(5x,a,6x,a)'</span><span class=\"br0\">)</span><span class=\"st0\">'n'</span>,<span class=\"st0\">'c(n)'</span><br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">'(1x,a)'</span><span class=\"br0\">)</span><span class=\"st0\">'---------------'</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">14</span><br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">'(1x,i5,i10)'</span><span class=\"br0\">)</span> n, <span class=\"kw4\">int</span><span class=\"br0\">(</span>catalan_numbers<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">enddo</span><br/>\u00a0<br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">'(1x,a)'</span><span class=\"br0\">)</span><span class=\"st0\">'==============='</span><br/>\u00a0<br/>  <span class=\"co1\">!=======================================================================================</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> main<br/><span class=\"co1\">!BL</span><br/><span class=\"co1\">!BL</span><br/><span class=\"co1\">!BL</span><br/><span class=\"kw3\">double</span> <span class=\"kw4\">precision</span> <span class=\"kw1\">recursive</span> <span class=\"kw1\">function</span> catalan_numbers<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw3\">result</span><span class=\"br0\">(</span>value<span class=\"br0\">)</span><br/>  <span class=\"co1\">!=======================================================================================</span><br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>  <span class=\"co1\">!=== Input, ouput data</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span>          <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>\u00a0<br/>  <span class=\"co1\">!=== Execution =========================================================================</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span> n <span class=\"kw2\">.<span class=\"me1\">eq</span>.</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    value <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">else</span> <br/>    value <span class=\"sy0\">=</span> <span class=\"br0\">(</span> 2.0d0 <span class=\"sy0\">*</span> dfloat<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> dfloat<span class=\"br0\">(</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy0\">*</span> catalan_numbers<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">endif</span><br/>\u00a0<br/>  <span class=\"co1\">!=======================================================================================</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span> catalan_numbers</pre>"}, {"lang": "FreeBASIC", "loc": 38, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> factorial<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><br/>  <span class=\"kw1\">If</span> n = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Return</span> n * factorial<span class=\"br0\">(</span>n - <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> catalan1<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><br/>  <span class=\"kw1\">Dim</span> prod <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> = <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> = n + <span class=\"nu0\">2</span> <span class=\"kw1\">To</span> <span class=\"nu0\">2</span> * n<br/>     prod *= i<br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Return</span> prod / factorial<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> catalan2<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><br/>  <span class=\"kw1\">If</span> n = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Dim</span> sum <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> n - <span class=\"nu0\">1</span><br/>    sum += catalan2<span class=\"br0\">(</span>i<span class=\"br0\">)</span> * catalan2<span class=\"br0\">(</span>n - <span class=\"nu0\">1</span> - i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Return</span> sum<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> catalan3<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><br/>  <span class=\"kw1\">If</span> n = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Return</span> catalan3<span class=\"br0\">(</span>n - <span class=\"nu0\">1</span><span class=\"br0\">)</span> * <span class=\"nu0\">2</span> * <span class=\"br0\">(</span><span class=\"nu0\">2</span> * n - <span class=\"nu0\">1</span><span class=\"br0\">)</span> \\ <span class=\"br0\">(</span>n + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span> <br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"n\"</span>, <span class=\"st0\">\"First\"</span>, <span class=\"st0\">\"Second\"</span>, <span class=\"st0\">\"Third\"</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"-\"</span>, <span class=\"st0\">\"-----\"</span>, <span class=\"st0\">\"------\"</span>, <span class=\"st0\">\"-----\"</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">15</span><br/>  <span class=\"kw1\">Print</span> i,  catalan1<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, catalan2<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, catalan3<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Frink", "loc": 3, "block": "<pre class=\"text highlighted_source\">catalan[n]\u00a0:= binomial[2n,n]/(n+1)<br/>for n = 0 to 15<br/>   println[catalan[n]]</pre>"}, {"lang": "FunL", "loc": 22, "block": "<pre class=\"text highlighted_source\">import integers.choose<br/>import util.TextTable<br/>\u00a0<br/>def<br/>  catalan( n ) = choose( 2n, n )/(n + 1)<br/>\u00a0<br/>  catalan2( n ) = product( (n + k)/k | k &lt;- 2..n )<br/>\u00a0<br/>  catalan3( 0 ) = 1<br/>  catalan3( n ) = 2*(2n - 1)/(n + 1)*catalan3( n - 1 )<br/>\u00a0<br/>t = TextTable()<br/>t.header( 'n', 'definition', 'product', 'recursive' )<br/>t.line()<br/>\u00a0<br/>for i &lt;- 1..4<br/>  t.rightAlignment( i )<br/>\u00a0<br/>for i &lt;- 0..15<br/>  t.row( i, catalan(i), catalan2(i), catalan3(i) )<br/>\u00a0<br/>println( t )</pre>"}, {"lang": "GAP", "loc": 31, "block": "<pre class=\"text highlighted_source\">Catalan1\u00a0:= n -&gt; Binomial(2*n, n) - Binomial(2*n, n - 1);<br/>\u00a0<br/>Catalan2\u00a0:= n -&gt; Binomial(2*n, n)/(n + 1);<br/>\u00a0<br/>Catalan3\u00a0:= function(n)<br/>    local k, c;<br/>    c\u00a0:= 1;<br/>    k\u00a0:= 0;<br/>    while k &lt; n do<br/>        k\u00a0:= k + 1;<br/>        c\u00a0:= 2*(2*k - 1)*c/(k + 1);<br/>    od;<br/>    return c;<br/>end;<br/>\u00a0<br/>Catalan4_memo\u00a0:= [1];<br/>Catalan4\u00a0:= function(n)<br/>    if not IsBound(Catalan4_memo[n + 1]) then<br/>        Catalan4_memo[n + 1]\u00a0:= Sum([0 .. n - 1], i -&gt; Catalan4(i)*Catalan4(n - 1 - i));<br/>    fi;<br/>    return Catalan4_memo[n + 1];<br/>end;<br/>\u00a0<br/>\u00a0<br/># The first fifteen: 0 to 14\u00a0!<br/>List([0 .. 14], Catalan1);<br/>List([0 .. 14], Catalan2);<br/>List([0 .. 14], Catalan3);<br/>List([0 .. 14], Catalan4);<br/># Same output for all four:<br/># [ 1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012, 742900, 2674440 ]</pre>"}, {"lang": "Go", "loc": 13, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math/big\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> b<span class=\"sy1\">,</span> c <a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><br/>    <span class=\"kw1\">for</span> n <span class=\"sy2\">:=</span> <span class=\"kw4\">int64</span><span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">);</span> n &lt; <span class=\"nu0\">15</span><span class=\"sy1\">;</span> n<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>c<span class=\"sy3\">.</span>Div<span class=\"sy1\">(</span>b<span class=\"sy3\">.</span>Binomial<span class=\"sy1\">(</span>n<span class=\"sy3\">*</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> n<span class=\"sy1\">),</span> c<span class=\"sy3\">.</span>SetInt64<span class=\"sy1\">(</span>n<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)))</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 25, "block": "<pre class=\"groovy highlighted_source\">\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20class\"><span class=\"kw2\">class</span></a> Catalan<br/><span class=\"br0\">{</span><br/> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20public\"><span class=\"kw2\">public</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20static\"><span class=\"kw2\">static</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20void\"><span class=\"kw4\">void</span></a> main<span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?as_q=BigInteger&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">BigInteger</span></a> N <span class=\"sy0\">=</span> <span class=\"nu0\">15</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.de/search?as_q=BigInteger&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">BigInteger</span></a> k,n,num,den<span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.de/search?as_q=BigInteger&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">BigInteger</span></a>  catalan<span class=\"sy0\">;</span><br/>      <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20print\"><span class=\"kw8\">print</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>       <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20for\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span>n<span class=\"sy0\">&lt;=</span>N<span class=\"sy0\">;</span>n<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">{</span><br/>            num <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            den <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>              <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20for\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span>k<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span>k<span class=\"sy0\">&lt;=</span>n<span class=\"sy0\">;</span>k<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">{</span><br/>                    num <span class=\"sy0\">=</span> num<span class=\"sy0\">*</span><span class=\"br0\">(</span>n<span class=\"sy0\">+</span>k<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    den <span class=\"sy0\">=</span> den<span class=\"sy0\">*</span>k<span class=\"sy0\">;</span><br/>                    catalan <span class=\"sy0\">=</span> num/den<span class=\"sy0\">;</span> <br/>                 <span class=\"br0\">}</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a><span class=\"br0\">(</span>catalan<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Harbour", "loc": 19, "block": "<pre class=\"visualfoxpro highlighted_source\">\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">LOCAL</span> i<br/>\u00a0<br/>   <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw3\">to</span> <span class=\"nu0\">15</span><br/>      <span class=\"sy0\">?</span> <span class=\"kw2\">PadL</span><span class=\"br0\">(</span> i<span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\": \"</span> <span class=\"sy0\">+</span> hb_StrFormat<span class=\"br0\">(</span><span class=\"st0\">\"%d\"</span><span class=\"sy0\">,</span> Catalan<span class=\"br0\">(</span> i <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">NEXT</span><br/>\u00a0<br/>   <span class=\"kw2\">RETURN</span><br/>\u00a0<br/>STATIC <span class=\"kw1\">FUNCTION</span> Catalan<span class=\"br0\">(</span> <span class=\"kw2\">n</span> <span class=\"br0\">)</span><br/>   <span class=\"kw1\">LOCAL</span> i<span class=\"sy0\">,</span> nCatalan <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>   <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw3\">TO</span> <span class=\"kw2\">n</span> <br/>      nCatalan <span class=\"sy0\">:=</span> nCatalan <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">NEXT</span><br/>\u00a0<br/>   <span class=\"kw2\">RETURN</span> nCatalan<br/>\u00a0</pre>"}, {"lang": "Haskell", "loc": 10, "block": "<pre class=\"haskell highlighted_source\"><span class=\"co1\">-- Three infinite lists, corresponding to the three definitions in the problem</span><br/><span class=\"co1\">-- statement.</span><br/>\u00a0<br/>cats1 <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>\\n <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:product\"><span class=\"kw3\">product</span></a> <span class=\"br0\">[</span>n<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">..</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>n<span class=\"br0\">]</span> `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:product\"><span class=\"kw3\">product</span></a> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"br0\">]</span><br/>\u00a0<br/>cats2 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\u00a0: <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>\\n <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> <span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reverse\"><span class=\"kw3\">reverse</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> n cats2<span class=\"br0\">)</span><span class=\"br0\">)</span> cats2<span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"br0\">]</span><br/>\u00a0<br/>cats3 <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:scanl\"><span class=\"kw3\">scanl</span></a> <span class=\"br0\">(</span>\\c n <span class=\"sy0\">-&gt;</span> c<span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` <span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"br0\">]</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">15</span><span class=\"br0\">)</span> <span class=\"br0\">[</span>cats1<span class=\"sy0\">,</span> cats2<span class=\"sy0\">,</span> cats3<span class=\"br0\">]</span></pre>"}, {"lang": "Icon and Unicon", "loc": 11, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>arglist<span class=\"br0\">)</span><br/><span class=\"kw1\">every</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span>catalan<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> catalan<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"co1\"># return catalan(n) or fail</span><br/><span class=\"kw2\">static</span> M<br/><span class=\"kw1\">initial</span> M <span class=\"sy1\">:=</span> <span class=\"kw4\">table</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">if</span> n <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <br/>   <span class=\"kw1\">return</span> <span class=\"br0\">(</span>n <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"sy1\">\\</span>M<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy1\">|</span> <span class=\"br0\">(</span> M<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">*</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">*</span>n<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">*</span>catalan<span class=\"br0\">(</span>n<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">/</span><span class=\"br0\">(</span>n<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">   <span class=\"sy0\">((</span>! +:<span class=\"sy0\">)</span>\u00a0% &gt;:<span class=\"sy0\">)</span> i.<span class=\"nu0\">15x</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">5</span> <span class=\"nu0\">14</span> <span class=\"nu0\">42</span> <span class=\"nu0\">132</span> <span class=\"nu0\">429</span> <span class=\"nu0\">1430</span> <span class=\"nu0\">4862</span> <span class=\"nu0\">16796</span> <span class=\"nu0\">58786</span> <span class=\"nu0\">208012</span> <span class=\"nu0\">742900</span> <span class=\"nu0\">2674440</span></pre>"}, {"lang": "Java", "loc": 65, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">import</span> <span class=\"co2\">java.util.HashMap</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.Map</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">public</span> <span class=\"kw2\">class</span> Catalan <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <span class=\"kw2\">final</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Map.html\"><span class=\"kw46\">Map</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Long.html\"><span class=\"kw21\">Long</span></a>, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a><span class=\"sy0\">&gt;</span> facts = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/HashMap.html\"><span class=\"kw46\">HashMap</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Long.html\"><span class=\"kw21\">Long</span></a>, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <span class=\"kw2\">final</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Map.html\"><span class=\"kw46\">Map</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Long.html\"><span class=\"kw21\">Long</span></a>, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a><span class=\"sy0\">&gt;</span> catsI = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/HashMap.html\"><span class=\"kw46\">HashMap</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Long.html\"><span class=\"kw21\">Long</span></a>, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <span class=\"kw2\">final</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Map.html\"><span class=\"kw46\">Map</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Long.html\"><span class=\"kw21\">Long</span></a>, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a><span class=\"sy0\">&gt;</span> catsR1 = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/HashMap.html\"><span class=\"kw46\">HashMap</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Long.html\"><span class=\"kw21\">Long</span></a>, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <span class=\"kw2\">final</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Map.html\"><span class=\"kw46\">Map</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Long.html\"><span class=\"kw21\">Long</span></a>, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a><span class=\"sy0\">&gt;</span> catsR2 = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/HashMap.html\"><span class=\"kw46\">HashMap</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Long.html\"><span class=\"kw21\">Long</span></a>, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Double.html\"><span class=\"kw21\">Double</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw2\">static</span><span class=\"br0\">{</span><span class=\"co1\">//pre-load the memoization maps with some answers </span><br/>\t\tfacts.<span class=\"me1\">put</span><span class=\"br0\">(</span>0L, 1D<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tfacts.<span class=\"me1\">put</span><span class=\"br0\">(</span>1L, 1D<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tfacts.<span class=\"me1\">put</span><span class=\"br0\">(</span>2L, 2D<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tcatsI.<span class=\"me1\">put</span><span class=\"br0\">(</span>0L, 1D<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tcatsR1.<span class=\"me1\">put</span><span class=\"br0\">(</span>0L, 1D<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tcatsR2.<span class=\"me1\">put</span><span class=\"br0\">(</span>0L, 1D<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <span class=\"kw3\">double</span> fact<span class=\"br0\">(</span><span class=\"kw3\">long</span> n<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>facts.<span class=\"me1\">containsKey</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw2\">return</span> facts.<span class=\"me1\">get</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw3\">double</span> fact = <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw3\">long</span> i = <span class=\"nu0\">2</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span>= n<span class=\"sy0\">;</span> i++<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\tfact <span class=\"sy0\">*</span>= i<span class=\"sy0\">;</span> <span class=\"co1\">//could be further optimized, but it would probably be ugly</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\tfacts.<span class=\"me1\">put</span><span class=\"br0\">(</span>n, fact<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw2\">return</span> fact<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <span class=\"kw3\">double</span> catI<span class=\"br0\">(</span><span class=\"kw3\">long</span> n<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>catsI.<span class=\"me1\">containsKey</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\tcatsI.<span class=\"me1\">put</span><span class=\"br0\">(</span>n, fact<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> n<span class=\"br0\">)</span>/<span class=\"br0\">(</span>fact<span class=\"br0\">(</span>n+<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>fact<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw2\">return</span> catsI.<span class=\"me1\">get</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <span class=\"kw3\">double</span> catR1<span class=\"br0\">(</span><span class=\"kw3\">long</span> n<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>catsR1.<span class=\"me1\">containsKey</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw2\">return</span> catsR1.<span class=\"me1\">get</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw3\">double</span> sum = <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw3\">int</span> i = <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i++<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\tsum += catR1<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">*</span> catR1<span class=\"br0\">(</span>n - <span class=\"nu0\">1</span> - i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\tcatsR1.<span class=\"me1\">put</span><span class=\"br0\">(</span>n, sum<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw2\">return</span> sum<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <span class=\"kw3\">double</span> catR2<span class=\"br0\">(</span><span class=\"kw3\">long</span> n<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>catsR2.<span class=\"me1\">containsKey</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\tcatsR2.<span class=\"me1\">put</span><span class=\"br0\">(</span>n, <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">2.0</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>n-<span class=\"nu0\">1</span><span class=\"br0\">)</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>/<span class=\"br0\">(</span>n + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> catR2<span class=\"br0\">(</span>n-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw2\">return</span> catsR2.<span class=\"me1\">get</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw3\">int</span> i = <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">15</span><span class=\"sy0\">;</span> i++<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>catI<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>catR1<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>catR2<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 29, "block": "<pre class=\"javascript highlighted_source\"><span class=\"sy0\">&lt;</span>html<span class=\"sy0\">&gt;&lt;</span>head<span class=\"sy0\">&gt;&lt;</span>title<span class=\"sy0\">&gt;</span>Catalan<span class=\"sy0\">&lt;/</span>title<span class=\"sy0\">&gt;&lt;/</span>head<span class=\"sy0\">&gt;</span><br/><span class=\"sy0\">&lt;</span>body<span class=\"sy0\">&gt;&lt;</span>pre id<span class=\"sy0\">=</span><span class=\"st0\">'x'</span><span class=\"sy0\">&gt;&lt;/</span>pre<span class=\"sy0\">&gt;&lt;</span>script type<span class=\"sy0\">=</span><span class=\"st0\">\"application/javascript\"</span><span class=\"sy0\">&gt;</span><br/><span class=\"kw1\">function</span> disp<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">var</span> e <span class=\"sy0\">=</span> document.<span class=\"me1\">createTextNode</span><span class=\"br0\">(</span>x <span class=\"sy0\">+</span> <span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tdocument.<span class=\"me1\">getElementById</span><span class=\"br0\">(</span><span class=\"st0\">'x'</span><span class=\"br0\">)</span>.<span class=\"me1\">appendChild</span><span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> fc <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> c2 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> c3 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">function</span> fact<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> fc<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">?</span> fc<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">:</span> fc<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n <span class=\"sy0\">?</span> n <span class=\"sy0\">*</span> fact<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"kw1\">function</span> cata1<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span>fact<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> n<span class=\"br0\">)</span> <span class=\"sy0\">/</span> fact<span class=\"br0\">(</span>n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> fact<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">+</span> .5<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"kw1\">function</span> cata2<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>c2<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">var</span> s <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> s <span class=\"sy0\">+=</span> cata2<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">*</span> cata2<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tc2<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> s<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> c2<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">function</span> cata3<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> c3<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">?</span> c3<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">:</span> c3<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span> <span class=\"sy0\">*</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> cata3<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>disp<span class=\"br0\">(</span><span class=\"st0\">\"       meth1   meth2   meth3\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">15</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\tdisp<span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"st0\">'<span class=\"es0\">\\t</span>'</span> <span class=\"sy0\">+</span> cata1<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">'<span class=\"es0\">\\t</span>'</span> <span class=\"sy0\">+</span> cata2<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">'<span class=\"es0\">\\t</span>'</span> <span class=\"sy0\">+</span> cata3<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"sy0\">&lt;/</span>script<span class=\"sy0\">&gt;&lt;/</span>body<span class=\"sy0\">&gt;&lt;/</span>html<span class=\"sy0\">&gt;</span></pre>"}, {"lang": "jq", "loc": 5, "block": "<pre class=\"text highlighted_source\">def catalan:<br/>  if . == 0 then 1<br/>  elif . &lt; 0 then error(\"catalan is not defined on \\(.)\")<br/>  else (2 * (2*. - 1) * ((. - 1) | catalan)) / (. + 1)<br/>  end;</pre>"}, {"lang": "Julia", "loc": 4, "block": "<pre class=\"text highlighted_source\">catalannum(n::Integer) = binomial(2n, n) \u00f7 (n + 1)<br/>\u00a0<br/>@show catalannum.(1:15)<br/>@show catalannum(big(100))</pre>"}, {"lang": "K", "loc": 3, "block": "<pre class=\"text highlighted_source\">  catalan: {_{*/(x-i)%1+i:!y-1}[2*x;x+1]%x+1}<br/>  catalan'!:15<br/>1 1 2 5 14 42 132 429 1430 4862 16796 58786 208012 742900 2674440</pre>"}, {"lang": "Kotlin", "loc": 53, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">abstract</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Catalan <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">abstract</span></a> operator fun invoke<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">:</span> Double<br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">protected</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> m <span class=\"sy0\">=</span> mutableMapOf<span class=\"br0\">(</span><span class=\"nu0\">0</span> to <span class=\"nu0\">1.0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> CatalanI <span class=\"sy0\">:</span> Catalan<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun invoke<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Double <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">!</span>in m<span class=\"br0\">)</span><br/>            m<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> Math.<span class=\"me1\">round</span><span class=\"br0\">(</span>fact<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> n<span class=\"br0\">)</span> / <span class=\"br0\">(</span>fact<span class=\"br0\">(</span>n + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> fact<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> m<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">!!</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun fact<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Double <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n in facts<span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> facts<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">!!</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> f <span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> fact<span class=\"br0\">(</span>n -<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        facts<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> f<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> f<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> facts <span class=\"sy0\">=</span> mutableMapOf<span class=\"br0\">(</span><span class=\"nu0\">0</span> to <span class=\"nu0\">1.0</span>, <span class=\"nu0\">1</span> to <span class=\"nu0\">1.0</span>, <span class=\"nu0\">2</span> to <span class=\"nu0\">2.0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> CatalanR1 <span class=\"sy0\">:</span> Catalan<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun invoke<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Double <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n in m<span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> m<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">!!</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"me1\">n</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            sum +<span class=\"sy0\">=</span> invoke<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">*</span> invoke<span class=\"br0\">(</span>n - <span class=\"nu0\">1</span> - i<span class=\"br0\">)</span><br/>        sum <span class=\"sy0\">=</span> Math.<span class=\"me1\">round</span><span class=\"br0\">(</span>sum<span class=\"br0\">)</span>.<span class=\"me1\">toDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        m<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> sum<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> sum<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> CatalanR2 <span class=\"sy0\">:</span> Catalan<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun invoke<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Double <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">!</span>in m<span class=\"br0\">)</span><br/>            m<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> Math.<span class=\"me1\">round</span><span class=\"br0\">(</span><span class=\"nu0\">2.0</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>n - <span class=\"nu0\">1</span><span class=\"br0\">)</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span> / <span class=\"br0\">(</span>n + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> invoke<span class=\"br0\">(</span>n - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> m<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">!!</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> c <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span>CatalanI, CatalanR1, CatalanR2<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">15</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        c.<span class=\"me1\">forEach</span> <span class=\"br0\">{</span> print<span class=\"br0\">(</span><span class=\"st0\">\"%9d\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>it<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">toLong</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>        println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 53, "block": "<pre class=\"lb highlighted_source\"><span class=\"kw1\">print</span> <span class=\"st0\">\"non-recursive version\"</span><br/><span class=\"kw1\">print</span> catNonRec<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">15</span><br/>    <span class=\"kw1\">print</span> i;<span class=\"st0\">\"   =   \"</span>; catNonRec<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"kw1\">next</span><br/><span class=\"kw1\">print</span><br/>\u00a0<br/><span class=\"kw1\">print</span> <span class=\"st0\">\"recursive version\"</span><br/><span class=\"kw1\">print</span> catRec<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">15</span><br/>    <span class=\"kw1\">print</span> i;<span class=\"st0\">\"   =   \"</span>; catRec<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"kw1\">next</span><br/><span class=\"kw1\">print</span><br/>\u00a0<br/><span class=\"kw1\">print</span> <span class=\"st0\">\"recursive with memoisation\"</span><br/><span class=\"kw1\">redim</span> cats<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span>  <span class=\"co1\">'clear the array</span><br/><span class=\"kw1\">print</span> catRecMemo<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">15</span><br/>    <span class=\"kw1\">print</span> i;<span class=\"st0\">\"   =   \"</span>; catRecMemo<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"kw1\">next</span><br/><span class=\"kw1\">print</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">wait</span><br/>\u00a0<br/><span class=\"kw1\">function</span> catNonRec<span class=\"br0\">(</span>n<span class=\"br0\">)</span>   <span class=\"co1\">'non-recursive version</span><br/>    catNonRec<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n<br/>        catNonRec<span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>i<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>catNonRec<br/>    <span class=\"kw1\">next</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> catRec<span class=\"br0\">(</span>n<span class=\"br0\">)</span>  <span class=\"co1\">'recursive version</span><br/>    <span class=\"kw1\">if</span> n<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>        catRec<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">else</span><br/>        catRec<span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>n<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>catRec<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> catRecMemo<span class=\"br0\">(</span>n<span class=\"br0\">)</span>  <span class=\"co1\">'recursive version with memoisation</span><br/>    <span class=\"kw1\">if</span> n<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>        catRecMemo<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">else</span><br/>        <span class=\"kw1\">if</span> cats<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span>    <span class=\"co1\">'call it recursively only if not already calculated</span><br/>            prev <span class=\"sy0\">=</span> catRecMemo<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">else</span><br/>            prev <span class=\"sy0\">=</span> cats<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>        catRecMemo<span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>n<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>prev<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    cats<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">=</span> catRecMemo    <span class=\"co1\">'memoisation for future use</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span></pre>"}, {"lang": "Lua", "loc": 13, "block": "<pre class=\"lua highlighted_source\"><span class=\"co1\">-- recursive with memoization</span><br/>catalan <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/><span class=\"kw3\">setmetatable</span><span class=\"br0\">(</span>catalan<span class=\"sy0\">,</span> <span class=\"br0\">{</span><br/>\t__index <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>c<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><br/>\t\t\tc<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> c<span class=\"br0\">[</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">return</span> c<span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>\t\t<span class=\"kw1\">end</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">14</span> <span class=\"kw1\">do</span><br/>\t<span class=\"kw3\">print</span><span class=\"br0\">(</span>catalan<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Logo", "loc": 11, "block": "<pre class=\"text highlighted_source\">to factorial\u00a0:n<br/>  output ifelse [less?\u00a0:n 1] 1 [product\u00a0:n factorial difference\u00a0:n 1]<br/>end<br/>to choose\u00a0:n\u00a0:r<br/>  output quotient factorial\u00a0:n product factorial\u00a0:r factorial difference\u00a0:n\u00a0:r<br/>end<br/>to catalan\u00a0:n<br/>  output product (quotient sum\u00a0:n 1) choose product 2\u00a0:n\u00a0:n<br/>end<br/>\u00a0<br/>repeat 15 [print catalan repcount]</pre>"}, {"lang": "Maple", "loc": 5, "block": "<pre class=\"text highlighted_source\">CatalanNumbers\u00a0:= proc( n::posint )<br/>    return seq( (2*i)!/((i + 1)!*i!), i = 0 .. n - 1 );<br/>end proc:<br/>CatalanNumbers(15);<br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 1, "block": "<pre class=\"text highlighted_source\">CatalanN[n_Integer /; n &gt;= 0]\u00a0:= (2 n)!/((n + 1)! n!)</pre>"}, {"lang": "MATLAB / Octave", "loc": 5, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> n = catalanNumber<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a> = <span class=\"br0\">(</span><span class=\"nu0\">1</span>:<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        n<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a><span class=\"br0\">)</span> = <span class=\"br0\">(</span><span class=\"nu0\">1</span>/<span class=\"br0\">(</span>n<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a><span class=\"br0\">)</span>+<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>*<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/nchoosek.html\"><span class=\"kw2\">nchoosek</span></a><span class=\"br0\">(</span><span class=\"nu0\">2</span>*n<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a><span class=\"br0\">)</span>,n<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Maxima", "loc": 11, "block": "<pre class=\"text highlighted_source\">/* The following is an array function, hence the square brackets. It uses memoization automatically */<br/>cata[n]\u00a0:= sum(cata[i]*cata[n - 1 - i], i, 0, n - 1)$<br/>cata[0]: 1$<br/>\u00a0<br/>cata2(n)\u00a0:= binomial(2*n, n)/(n + 1)$<br/>\u00a0<br/>makelist(cata[n], n, 0, 14);<br/>\u00a0<br/>makelist(cata2(n), n, 0, 14);<br/>\u00a0<br/>/* both return [1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012, 742900, 2674440] */</pre>"}, {"lang": "Modula-2", "loc": 65, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">MODULE</span> CatalanNumbers;<br/><span class=\"kw1\">FROM</span> FormatString <span class=\"kw1\">IMPORT</span> FormatString;<br/><span class=\"kw1\">FROM</span> Terminal <span class=\"kw1\">IMPORT</span> WriteString<span class=\"sy0\">,</span>WriteLn<span class=\"sy0\">,</span>ReadChar;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> binomial<span class=\"br0\">(</span>m<span class=\"sy0\">,</span>n <span class=\"sy0\">:</span> <span class=\"kw4\">LONGCARD</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw4\">LONGCARD</span>;<br/><span class=\"kw1\">VAR</span> r<span class=\"sy0\">,</span>d <span class=\"sy0\">:</span> <span class=\"kw4\">LONGCARD</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    r <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span>;<br/>    d <span class=\"sy0\">:=</span> m <span class=\"sy0\">-</span> n;<br/>    <span class=\"kw1\">IF</span> d&gt;n <span class=\"kw1\">THEN</span><br/>        n <span class=\"sy0\">:=</span> d;<br/>        d <span class=\"sy0\">:=</span> m <span class=\"sy0\">-</span> n;<br/>    <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">WHILE</span> m&gt;n <span class=\"kw1\">DO</span><br/>        r <span class=\"sy0\">:=</span> r <span class=\"sy0\">*</span> m;<br/>        <span class=\"kw3\">DEC</span><span class=\"br0\">(</span>m<span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span>d&gt;<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">AND</span> <span class=\"kw1\">NOT</span> <span class=\"br0\">(</span>r <span class=\"kw1\">MOD</span> d <span class=\"sy0\">#</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>            r <span class=\"sy0\">:=</span> r <span class=\"kw1\">DIV</span> d;<br/>            <span class=\"kw3\">DEC</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><br/>        <span class=\"kw1\">END</span><br/>    <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">RETURN</span> r<br/><span class=\"kw1\">END</span> binomial;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> catalan1<span class=\"br0\">(</span>n <span class=\"sy0\">:</span> <span class=\"kw4\">LONGCARD</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw4\">LONGCARD</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">RETURN</span> binomial<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>n<span class=\"sy0\">,</span>n<span class=\"br0\">)</span> <span class=\"kw1\">DIV</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span>n<span class=\"br0\">)</span><br/><span class=\"kw1\">END</span> catalan1;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> catalan2<span class=\"br0\">(</span>n <span class=\"sy0\">:</span> <span class=\"kw4\">LONGCARD</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw4\">LONGCARD</span>;<br/><span class=\"kw1\">VAR</span> i<span class=\"sy0\">,</span>sum <span class=\"sy0\">:</span> <span class=\"kw4\">LONGCARD</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">IF</span> n&gt;<span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span><br/>        sum <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>        <span class=\"kw1\">FOR</span> i<span class=\"sy0\">:=</span><span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>            sum <span class=\"sy0\">:=</span> sum <span class=\"sy0\">+</span> catalan2<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">*</span> catalan2<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">-</span> i<span class=\"br0\">)</span><br/>        <span class=\"kw1\">END</span>;<br/>        <span class=\"kw1\">RETURN</span> sum<br/>    <span class=\"kw1\">ELSE</span><br/>        <span class=\"kw1\">RETURN</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">END</span><br/><span class=\"kw1\">END</span> catalan2;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> catalan3<span class=\"br0\">(</span>n <span class=\"sy0\">:</span> <span class=\"kw4\">LONGCARD</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw4\">LONGCARD</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">IF</span> n<span class=\"sy0\">#</span><span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>        <span class=\"kw1\">RETURN</span> <span class=\"nu0\">2</span>  <span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> catalan3<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">DIV</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">+</span> n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">ELSE</span><br/>        <span class=\"kw1\">RETURN</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">END</span><br/><span class=\"kw1\">END</span> catalan3;<br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>    blah <span class=\"sy0\">:</span> <span class=\"kw4\">LONGCARD</span> <span class=\"sy0\">=</span> <span class=\"nu0\">123</span>;<br/>    buf <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">63</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>    i <span class=\"sy0\">:</span> <span class=\"kw4\">LONGCARD</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    FormatString<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>direct<span class=\"es0\">\\t</span>summing<span class=\"es0\">\\t</span>frac<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> buf<span class=\"br0\">)</span>;<br/>    WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">FOR</span> i<span class=\"sy0\">:=</span><span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">15</span> <span class=\"kw1\">DO</span><br/>        FormatString<span class=\"br0\">(</span><span class=\"st0\">\"%u<span class=\"es0\">\\t</span>%u<span class=\"es0\">\\t</span>%u<span class=\"es0\">\\t</span>%u<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> catalan1<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">,</span> catalan2<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">,</span> catalan3<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>        WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span><br/>    <span class=\"kw1\">END</span>;<br/>    ReadChar<br/><span class=\"kw1\">END</span> CatalanNumbers.</pre>"}, {"lang": "Nim", "loc": 33, "block": "<pre class=\"text highlighted_source\">import strutils<br/>\u00a0<br/>proc binomial(m, n): auto =<br/>  result = 1<br/>  var<br/>    d = m - n<br/>    n = n<br/>    m = m<br/>  if d &gt; n:<br/>    n = d<br/>\u00a0<br/>  while m &gt; n:<br/>    result *= m<br/>    dec m<br/>    while d &gt; 1 and (result mod d) == 0:<br/>      result = result div d<br/>      dec d<br/>\u00a0<br/>proc catalan1(n): auto =<br/>  binomial(2 * n, n) div (n + 1)<br/>\u00a0<br/>proc catalan2(n): auto =<br/>  if n == 0:<br/>    result = 1<br/>  for i in 0 .. &lt;n:<br/>    result += catalan2(i) * catalan2(n - 1 - i)<br/>\u00a0<br/>proc catalan3(n): int =<br/>  if n &gt; 0: 2 * (2 * n - 1) * catalan3(n - 1) div (1 + n)<br/>  else: 1<br/>\u00a0<br/>for i in 0..15:<br/>  echo align($i, 7), \" \", align($catalan1(i), 7), \" \", align($catalan2(i), 7), \" \", align($catalan3(i), 7)</pre>"}, {"lang": "OCaml", "loc": 55, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> imp_catalan n <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> return <span class=\"sy0\">=</span> <span class=\"kw1\">ref</span> <span class=\"nu0\">1</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n <span class=\"kw1\">do</span><br/>    return <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>return <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  <span class=\"sy0\">!</span>return<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> catalan <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>  <span class=\"sy0\">|</span> <span class=\"nu0\">0</span> <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">1</span><br/>  <span class=\"sy0\">|</span> n <span class=\"sy0\">-&gt;</span> catalan <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> memoize f <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> cache <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>create <span class=\"nu0\">20</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">fun</span> n <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">match</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>find_opt cache n <span class=\"kw1\">with</span><br/>    <span class=\"sy0\">|</span> None <span class=\"sy0\">-&gt;</span><br/>      <span class=\"kw1\">let</span> x <span class=\"sy0\">=</span> f n <span class=\"kw1\">in</span><br/>      <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>replace cache n x<span class=\"sy0\">;</span><br/>      x<br/>    <span class=\"sy0\">|</span> Some x <span class=\"sy0\">-&gt;</span> x<br/>\u00a0<br/><span class=\"kw1\">let</span> catalan_cache <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>create <span class=\"nu0\">20</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> memo_catalan n <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">if</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"nu0\">1</span> <span class=\"kw1\">else</span><br/>    <span class=\"kw1\">match</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>find_opt catalan_cache n <span class=\"kw1\">with</span><br/>    <span class=\"sy0\">|</span> None <span class=\"sy0\">-&gt;</span><br/>      <span class=\"kw1\">let</span> x <span class=\"sy0\">=</span> memo_catalan <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>      <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>replace catalan_cache n x<span class=\"sy0\">;</span><br/>      x<br/>    <span class=\"sy0\">|</span> Some x <span class=\"sy0\">-&gt;</span> x<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> <span class=\"sy0\">!</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Sys.html\"><span class=\"kw2\">Sys</span></a><span class=\"sy0\">.</span>interactive <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">let</span> bench label f n times <span class=\"sy0\">=</span><br/>      <span class=\"kw1\">let</span> start <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Unix.html\"><span class=\"kw2\">Unix</span></a><span class=\"sy0\">.</span>gettimeofday <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>      <span class=\"kw1\">begin</span><br/>        <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> times <span class=\"kw1\">do</span> f n <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">let</span> stop <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Unix.html\"><span class=\"kw2\">Unix</span></a><span class=\"sy0\">.</span>gettimeofday <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>        <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"%s (%d runs)\u00a0:\u00a0%.3f\\n\"</span><br/>          label times <span class=\"br0\">(</span>stop <span class=\"sy0\">-.</span> start<span class=\"br0\">)</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">let</span> show f g h f<span class=\"sy0\">'</span> n <span class=\"sy0\">=</span><br/>      <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> n <span class=\"kw1\">do</span><br/>        <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"%2d\u00a0%7d\u00a0%7d\u00a0%7d\u00a0%7d\\n\"</span><br/>          i <span class=\"br0\">(</span>f i<span class=\"br0\">)</span> <span class=\"br0\">(</span>g i<span class=\"br0\">)</span> <span class=\"br0\">(</span>h i<span class=\"br0\">)</span> <span class=\"br0\">(</span>f<span class=\"sy0\">'</span> i<span class=\"br0\">)</span><br/>      <span class=\"kw1\">done</span><br/>    <span class=\"kw1\">in</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>iter <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>l, f<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> bench l f <span class=\"nu0\">15</span> <span class=\"nu0\">10</span>_000_000<span class=\"br0\">)</span><br/>      <span class=\"br0\">[</span><span class=\"st0\">\"imperative\"</span>, imp_catalan<span class=\"sy0\">;</span><br/>       <span class=\"st0\">\"recursive\"</span>, catalan<span class=\"sy0\">;</span><br/>       <span class=\"st0\">\"hand-memoized\"</span>, memo_catalan<span class=\"sy0\">;</span><br/>       <span class=\"st0\">\"memoized\"</span>, <span class=\"br0\">(</span>memoize catalan<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    show imp_catalan catalan memo_catalan <span class=\"br0\">(</span>memoize catalan<span class=\"br0\">)</span> <span class=\"nu0\">15</span><br/>\u00a0</pre>"}, {"lang": "Oforth", "loc": 2, "block": "<pre class=\"text highlighted_source\">: catalan( n -- m ) <br/>    n ifZero: [ 1 ] else: [ catalan( n 1- ) 2 n * 1- * 2 * n 1+ / ]\u00a0;</pre>"}, {"lang": "ooRexx", "loc": 81, "block": "<pre class=\"oorexx highlighted_source\"><span class=\"kw1\">loop</span> i = <span class=\"nu0\">0</span> <span class=\"kw2\">to</span> <span class=\"nu0\">15</span><br/>    <span class=\"kw1\">say</span> <span class=\"st0\">\"catI(\"</span>i<span class=\"st0\">\") =\"</span> <span class=\"sy0\">.</span>catalan~catI<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">say</span> <span class=\"st0\">\"catR1(\"</span>i<span class=\"st0\">\") =\"</span> <span class=\"sy0\">.</span>catalan~catR1<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">say</span> <span class=\"st0\">\"catR2(\"</span>i<span class=\"st0\">\") =\"</span> <span class=\"sy0\">.</span>catalan~catR2<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span><br/>\u00a0<br/><span class=\"co1\">-- This is implemented as static members on a class object</span><br/><span class=\"co1\">-- so that the code is able to keep state information between calls.  This</span><br/><span class=\"co1\">-- memoization will speed up things like factorial calls by remembering previous</span><br/><span class=\"co1\">-- results.</span><br/>::class catalan<br/><span class=\"co1\">-- initialize the class object</span><br/>::method init class<br/>  <span class=\"kw1\">expose</span> facts catI catR1 catR2<br/>         facts = <span class=\"sy0\">.</span>table~new<br/>         catI = <span class=\"sy0\">.</span>table~new<br/>         catR1 = <span class=\"sy0\">.</span>table~new<br/>         catR2 = <span class=\"sy0\">.</span>table~new<br/>         <span class=\"co1\">-- seed a few items</span><br/>         facts<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = <span class=\"nu0\">1</span><br/>         facts<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> = <span class=\"nu0\">1</span><br/>         facts<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> = <span class=\"nu0\">2</span><br/>         catI<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = <span class=\"nu0\">1</span><br/>         catR1<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = <span class=\"nu0\">1</span><br/>         catR2<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = <span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"co1\">-- private factorial method</span><br/>::method fact private class<br/>  <span class=\"kw1\">expose</span> facts<br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> n<br/>  <span class=\"co1\">-- see if we've calculated this before</span><br/>  <span class=\"kw1\">if</span> facts~hasIndex<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> facts<span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">120</span><br/>\u00a0<br/>  fact = <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">loop</span> i = <span class=\"nu0\">2</span> <span class=\"kw2\">to</span> n<br/>      fact <span class=\"sy0\">*</span>= i<br/>  <span class=\"kw3\">end</span><br/>  <span class=\"co1\">-- save this result</span><br/>  facts<span class=\"br0\">[</span>n<span class=\"br0\">]</span> = fact<br/>  <span class=\"kw1\">return</span> fact<br/>\u00a0<br/>::method catI class<br/>  <span class=\"kw1\">expose</span> catI<br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> n<br/>  <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">20</span><br/>\u00a0<br/>  res = catI<span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"kw1\">if</span> res == <span class=\"sy0\">.</span>nil <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>      <span class=\"co1\">-- dividing by 1 removes insignificant trailing 0s</span><br/>      res = <span class=\"br0\">(</span>self~fact<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> n<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>self~fact<span class=\"br0\">(</span>n + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> self~fact<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">1</span><br/>      catI<span class=\"br0\">[</span>n<span class=\"br0\">]</span> = res<br/>  <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">return</span> res<br/>\u00a0<br/>::method catR1 class<br/>  <span class=\"kw1\">expose</span> catR1<br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> n<br/>  <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">20</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> catR1~hasIndex<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> catR1<span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  sum = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">loop</span> i = <span class=\"nu0\">0</span> <span class=\"kw2\">to</span> n - <span class=\"nu0\">1</span><br/>      sum += self~catR1<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">*</span> self~catR1<span class=\"br0\">(</span>n - <span class=\"nu0\">1</span> - i<span class=\"br0\">)</span><br/>  <span class=\"kw3\">end</span><br/>  <span class=\"co1\">-- remove insignificant trailing 0s</span><br/>  sum = sum <span class=\"sy0\">/</span> <span class=\"nu0\">1</span><br/>  catR1<span class=\"br0\">[</span>n<span class=\"br0\">]</span> = sum<br/>  <span class=\"kw1\">return</span> sum<br/>\u00a0<br/>::method catR2 class<br/>  <span class=\"kw1\">expose</span> catR2<br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> n<br/>  <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">20</span><br/>\u00a0<br/>  res = catR2<span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"kw1\">if</span> res == <span class=\"sy0\">.</span>nil <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>     res = <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> n - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> self~catR2<span class=\"br0\">(</span>n - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span>  <span class=\"br0\">(</span>n + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     catR2<span class=\"br0\">[</span>n<span class=\"br0\">]</span> = res<br/>  <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">return</span> res</pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\">catalan<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">binomial</span><span class=\"br0\">(</span><span class=\"nu1\">2</span><span class=\"sy0\">*</span>n<span class=\"sy0\">,</span>n<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>n</pre>"}, {"lang": "Pascal", "loc": 19, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">Program</span> CatalanNumbers<span class=\"br0\">(</span>output<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> catalanNumber1<span class=\"br0\">(</span>n<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> double<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>      catalanNumber1 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1.0</span><br/>    <span class=\"kw1\">else</span> <br/>      catalanNumber1 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> double<span class=\"br0\">(</span><span class=\"nu0\">4</span> <span class=\"sy3\">*</span> n <span class=\"sy3\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy3\">/</span> double<span class=\"br0\">(</span>n <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy3\">*</span> catalanNumber1<span class=\"br0\">(</span>n<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  number<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Catalan Numbers'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Recursion with a fraction:'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> number <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">14</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">writeln</span> <span class=\"br0\">(</span>number<span class=\"sy1\">:</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> round<span class=\"br0\">(</span>catalanNumber1<span class=\"br0\">(</span>number<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 7, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> factorial <span class=\"br0\">{</span> <span class=\"kw1\">my</span> <span class=\"re0\">$f</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"re0\">$f</span> <span class=\"sy0\">*=</span> <span class=\"co5\">$_</span> <span class=\"kw1\">for</span> <span class=\"nu0\">2</span> <span class=\"sy0\">..</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"re0\">$f</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> catalan <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>  factorial<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"re0\">*$n</span><span class=\"br0\">)</span> <span class=\"co2\">/ factorial($n+1) /</span> factorial<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$_<span class=\"es0\">\\t</span>@{[ catalan($_) ]}<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">for</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">20</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 1, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">constant</span> Catalan <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"re0\">@_</span> <span class=\"kw1\">Z</span><span class=\"sy0\">*</span> <span class=\"re0\">@_</span><span class=\"sy0\">.</span><span class=\"kw3\">reverse</span> <span class=\"br0\">}</span> <span class=\"sy0\">...</span> <span class=\"sy0\">*;</span></pre>"}, {"lang": "Phix", "loc": 53, "block": "<pre class=\"text highlighted_source\">-- returns inf/-nan for n&gt;85, and needs the rounding for n&gt;=14, accurate to n=29<br/>function catalan1(integer n)<br/>    return floor(factorial(2*n)/(factorial(n+1)*factorial(n))+0.5)<br/>end function<br/>\u00a0<br/>-- returns inf for n&gt;519, accurate to n=30:<br/>function catalan2(integer n) -- NB: very slow!<br/>atom res = not n<br/>    n -= 1<br/>    for i=0 to n do<br/>        res += catalan2(i)*catalan2(n-i)<br/>    end for<br/>    return res<br/>end function<br/>\u00a0<br/>-- returns inf for n&gt;514, accurate to n=30:<br/>function catalan3(integer n)<br/>    if n=0 then return 1 end if<br/>    return 2*(2*n-1)/(1+n)*catalan3(n-1)<br/>end function <br/>\u00a0<br/>for i=0 to 15 do<br/>    printf(1,\"%2d:\u00a0%10d\u00a0%10d\u00a0%10d\\n\",{i,catalan1(i),catalan2(i),catalan3(i)})<br/>end for<br/>\u00a0<br/>-- An explicitly memoized version of what seems to be the best, and the one that really needed it:<br/>-- (and in fact it turned out to be faster than similarly memoized versions of 1 and 3, when atom)<br/>-- I also converted this to use bigatoms.<br/>\u00a0<br/>include builtins\\bigatom.e<br/>\u00a0<br/>sequence c2cache = {}<br/>\u00a0<br/>function catalan2bc(integer n)  -- very fast!<br/>object r -- result (a bigatom)<br/>    if n&lt;=0 then return BA_ONE end if<br/>    if n&lt;=length(c2cache) then<br/>        r = c2cache[n]<br/>        if r!=0 then return r end if<br/>    else<br/>        c2cache &amp;= repeat(0,n-length(c2cache))<br/>    end if<br/>    r = BA_ZERO<br/>    for i=0 to n-1 do<br/>        r = ba_add(r,ba_multiply(catalan2bc(i),catalan2bc(n-1-i)))<br/>    end for<br/>    c2cache[n] = r<br/>    return r<br/>end function<br/>\u00a0<br/>atom t0 = time() -- (this last call only)<br/>string sc100 = ba_sprint(catalan2bc(100))<br/>printf(1,\"100:\u00a0%s (%3.2fs)\\n\",{sc100,time()-t0})</pre>"}, {"lang": "PHP", "loc": 33, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/>\u00a0<br/><span class=\"kw2\">class</span> CatalanNumbersSerie<br/><span class=\"br0\">{</span><br/>  <span class=\"kw2\">private</span> static <span class=\"re0\">$cache</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw2\">private</span> <span class=\"kw2\">function</span> fill_cache<span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"re0\">$accum</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"re0\">$i</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$k</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$k</span> <span class=\"sy0\">&lt;=</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span> <span class=\"re0\">$k</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"re0\">$accum</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">item</span><span class=\"br0\">(</span><span class=\"re0\">$k</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">item</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"re0\">$k</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <br/>    <span class=\"kw2\">self</span><span class=\"sy0\">::</span><span class=\"re0\">$cache</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$accum</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw2\">function</span> item<span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://www.php.net/isset\"><span class=\"kw3\">isset</span></a><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"sy0\">::</span><span class=\"re0\">$cache</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">fill_cache</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">self</span><span class=\"sy0\">::</span><span class=\"re0\">$cache</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$cn</span> <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> CatalanNumbersSerie<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">15</span><span class=\"sy0\">;</span><span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"re0\">$r</span> <span class=\"sy0\">=</span> <span class=\"re0\">$cn</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">item</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">echo</span> <span class=\"st0\">\"<span class=\"es4\">$i</span> = <span class=\"es4\">$r</span><span class=\"es1\">\\r</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 33, "block": "<pre class=\"text highlighted_source\"># Factorial<br/>(de fact (N)<br/>   (if (=0 N)<br/>      1<br/>      (* N (fact (dec N))) ) )<br/>\u00a0<br/># Directly<br/>(de catalanDir (N)<br/>   (/ (fact (* 2 N)) (fact (inc N)) (fact N)) )<br/>\u00a0<br/># Recursively<br/>(de catalanRec (N)<br/>   (if (=0 N)<br/>      1<br/>      (cache '(NIL) N  # Memoize<br/>         (sum<br/>            '((I) (* (catalanRec I) (catalanRec (- N I 1))))<br/>            (range 0 (dec N)) ) ) ) )<br/>\u00a0<br/># Alternatively<br/>(de catalanAlt (N)<br/>   (if (=0 N)<br/>      1<br/>      (*/ 2 (dec (* 2 N)) (catalanAlt (dec N)) (inc N)) ) )<br/>\u00a0<br/># Test<br/>(for (N 0 (&gt; 15 N) (inc N))<br/>   (tab (2 4 8 8 8)<br/>      N<br/>      \" =&gt; \"<br/>      (catalanDir N)<br/>      (catalanRec N)<br/>      (catalanAlt N) ) )</pre>"}, {"lang": "PL/I", "loc": 19, "block": "<pre class=\"text highlighted_source\">catalan: procedure options (main);   /* 23 February 2012 */<br/>   declare (i, n) fixed;<br/>\u00a0<br/>   put skip list ('How many catalan numbers do you want?');<br/>   get list (n);<br/>\u00a0<br/>   do i = 0 to n;<br/>      put skip list (c(i));<br/>   end;<br/>\u00a0<br/>c: procedure (n) recursive returns (fixed decimal (15));<br/>   declare n fixed;<br/>\u00a0<br/>   if n &lt;= 1 then return (1);<br/>\u00a0<br/>   return ( 2*(2*n-1) * c(n-1) / (n + 1) );<br/>end c;<br/>\u00a0<br/>end catalan;</pre>"}, {"lang": "Plain TeX", "loc": 22, "block": "<pre class=\"text highlighted_source\">\\newcount\\n<br/>\\newcount\\r<br/>\\newcount\\x<br/>\\newcount\\ii<br/>\u00a0<br/>\\def\\catalan#1{%<br/>\t\\n#1\\advance\\n by1\\ii1\\r1%<br/>\t\\loop{%<br/>\t\t\\x\\ii%<br/>\t\t\\multiply\\x by 2 \\advance\\x by -1 \\multiply\\x by 2%<br/>\t\t\\global\\multiply\\r by\\x%<br/>\t\t\\global\\advance\\ii by1%<br/>\t\t\\global\\divide\\r by\\ii%<br/>\t} \\ifnum\\number\\ii&lt;\\n\\repeat%<br/>\t\\the\\r<br/>}<br/>\u00a0<br/>\\rightskip=0pt plus1fil\\parindent=0pt<br/>\\loop{${\\rm Catalan}(\\the\\x) = \\catalan{\\the\\x}$\\hfil\\break}%<br/>\t\\advance\\x by 1\\ifnum\\x&lt;15\\repeat<br/>\u00a0<br/>\\bye</pre>"}, {"lang": "PowerShell", "loc": 12, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> Catalan<span class=\"br0\">(</span><span class=\"br0\">[</span>uint64<span class=\"br0\">]</span><span class=\"re0\">$m</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">function</span> fact<span class=\"br0\">(</span><span class=\"br0\">[</span>bigint<span class=\"br0\">]</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"kw4\">-lt</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>bigint<span class=\"br0\">]</span>::one<span class=\"br0\">}</span><br/>        <span class=\"kw3\">else</span><span class=\"br0\">{</span><span class=\"nu0\">2</span>..<span class=\"re0\">$n</span> <span class=\"sy0\">|</span> <span class=\"kw3\">foreach</span> <span class=\"kw5\">-Begin</span> <span class=\"br0\">{</span><span class=\"re0\">$prod</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>bigint<span class=\"br0\">]</span>::one<span class=\"br0\">}</span> <span class=\"kw5\">-Process</span> <span class=\"br0\">{</span><span class=\"re0\">$prod</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>bigint<span class=\"br0\">]</span>::Multiply<span class=\"br0\">(</span><span class=\"re0\">$prod</span><span class=\"sy0\">,</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"kw5\">-End</span> <span class=\"br0\">{</span><span class=\"re0\">$prod</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$fact</span> <span class=\"sy0\">=</span> fact <span class=\"re0\">$m</span><br/>    <span class=\"re0\">$fact1</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>bigint<span class=\"br0\">]</span>::Multiply<span class=\"br0\">(</span><span class=\"re0\">$m</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"re0\">$fact</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">[</span>bigint<span class=\"br0\">]</span>::divide<span class=\"br0\">(</span><span class=\"br0\">(</span>fact <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"re0\">$m</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>bigint<span class=\"br0\">]</span>::Multiply<span class=\"br0\">(</span><span class=\"re0\">$fact</span><span class=\"sy0\">,</span><span class=\"re0\">$fact1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"nu0\">0</span>..<span class=\"nu0\">15</span> <span class=\"sy0\">|</span> <span class=\"kw3\">foreach</span> <span class=\"br0\">{</span><span class=\"st0\">\"catalan($_): $(catalan $_)\"</span><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 17, "block": "<pre class=\"prolog highlighted_source\">catalan<span class=\"br0\">(</span>N<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tlength<span class=\"br0\">(</span>L1<span class=\"sy4\">,</span> N<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tL <span class=\"sy6\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy5\">|</span> L1<span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>\tinit<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span>L1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnumlist<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> N<span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">NL</span></a><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tmaplist<span class=\"br0\">(</span>my_write<span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">NL</span></a><span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>init<span class=\"br0\">(</span>_<span class=\"sy4\">,</span> _<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>init<span class=\"br0\">(</span>V<span class=\"sy4\">,</span> N<span class=\"sy4\">,</span> <span class=\"br0\">[</span>H <span class=\"sy5\">|</span> T<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tN1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\tH <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"nu0\">2</span> <span class=\"sy3\">*</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy3\">*</span> N <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy3\">*</span> V <span class=\"sy3\">/</span> N1<span class=\"sy4\">,</span><br/>\tinit<span class=\"br0\">(</span>H<span class=\"sy4\">,</span> N1<span class=\"sy4\">,</span> T<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>my_write<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> V<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tformat<span class=\"br0\">(</span><span class=\"st_h\">'~w\u00a0: ~w~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>N<span class=\"sy4\">,</span> V<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 23, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"co1\">; saving the division for last ensures we divide the largest</span><br/><span class=\"co1\">; numerator by the smallest denominator</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.q CatalanNumber<span class=\"br0\">(</span>n.q<span class=\"br0\">)</span><br/><span class=\"kw1\">If</span> n<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span>:<span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">0</span>:<span class=\"kw1\">EndIf</span><br/><span class=\"kw1\">If</span> n<span class=\"sy0\">=</span><span class=\"nu0\">0</span>:<span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">1</span>:<span class=\"kw1\">EndIf</span><br/><span class=\"kw1\">ProcedureReturn</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>CatalanNumber<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/>ls<span class=\"sy0\">=</span><span class=\"nu0\">25</span><br/>rs<span class=\"sy0\">=</span><span class=\"nu0\">12</span><br/>\u00a0<br/>a.s<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><br/>a.s<span class=\"sy0\">+</span><span class=\"kw2\">LSet</span><span class=\"br0\">(</span><span class=\"kw2\">RSet</span><span class=\"br0\">(</span><span class=\"st0\">\"n\"</span>,rs<span class=\"br0\">)</span>,ls<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\"CatalanNumber(n)\"</span><br/><span class=\"co1\">; cw(a.s)</span><br/><span class=\"kw1\">Debug</span> a.s<br/>\u00a0<br/><span class=\"kw1\">For</span> n<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">33</span> <span class=\"co1\">;33 largest correct quad for n </span><br/>a.s<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><br/>a.s<span class=\"sy0\">+</span><span class=\"kw2\">LSet</span><span class=\"br0\">(</span><span class=\"kw2\">RSet</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>,rs<span class=\"br0\">)</span>,ls<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>CatalanNumber<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">; cw(a.s)</span><br/><span class=\"kw1\">Debug</span> a.s<br/><span class=\"kw1\">Next</span></pre>"}, {"lang": "Python", "loc": 44, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">math</span> <span class=\"kw1\">import</span> factorial<br/><span class=\"kw1\">import</span> functools<br/>\u00a0<br/><span class=\"kw1\">def</span> memoize<span class=\"br0\">(</span>func<span class=\"br0\">)</span>:<br/>    cache <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">def</span> memoized<span class=\"br0\">(</span>key<span class=\"br0\">)</span>:<br/>        <span class=\"co1\"># Returned, new, memoized version of decorated function</span><br/>        <span class=\"kw1\">if</span> key <span class=\"kw1\">not</span> <span class=\"kw1\">in</span> cache:<br/>            cache<span class=\"br0\">[</span>key<span class=\"br0\">]</span> <span class=\"sy0\">=</span> func<span class=\"br0\">(</span>key<span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> cache<span class=\"br0\">[</span>key<span class=\"br0\">]</span><br/>    <span class=\"kw1\">return</span> functools.<span class=\"me1\">update_wrapper</span><span class=\"br0\">(</span>memoized<span class=\"sy0\">,</span> func<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"sy0\">@</span>memoize<br/><span class=\"kw1\">def</span> fact<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> factorial<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> cat_direct<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> fact<span class=\"br0\">(</span><span class=\"nu0\">2</span>*n<span class=\"br0\">)</span> // fact<span class=\"br0\">(</span>n + <span class=\"nu0\">1</span><span class=\"br0\">)</span> // fact<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"sy0\">@</span>memoize    <br/><span class=\"kw1\">def</span> catR1<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"kw1\">if</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><br/>             <span class=\"kw1\">else</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span> catR1<span class=\"br0\">(</span>i<span class=\"br0\">)</span> * catR1<span class=\"br0\">(</span>n - <span class=\"nu0\">1</span> - i<span class=\"br0\">)</span><br/>                       <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"sy0\">@</span>memoize    <br/><span class=\"kw1\">def</span> catR2<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"kw1\">if</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><br/>             <span class=\"kw1\">else</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"nu0\">4</span> * n - <span class=\"nu0\">2</span> <span class=\"br0\">)</span> * catR2<span class=\"br0\">(</span> n - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> // <span class=\"br0\">(</span> n + <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    <span class=\"kw1\">def</span> pr<span class=\"br0\">(</span>results<span class=\"br0\">)</span>:<br/>        fmt <span class=\"sy0\">=</span> <span class=\"st0\">'%-10s\u00a0%-10s\u00a0%-10s'</span><br/>        <span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>fmt\u00a0% <span class=\"kw2\">tuple</span><span class=\"br0\">(</span>c.__name__ <span class=\"kw1\">for</span> c <span class=\"kw1\">in</span> defs<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">upper</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">print</span> <span class=\"br0\">(</span>fmt\u00a0% <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">'='</span>*<span class=\"nu0\">10</span><span class=\"sy0\">,</span><span class=\"br0\">)</span>*<span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> r <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>*results<span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">print</span> <span class=\"br0\">(</span>fmt\u00a0% r<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/>    defs <span class=\"sy0\">=</span> <span class=\"br0\">(</span>cat_direct<span class=\"sy0\">,</span> catR1<span class=\"sy0\">,</span> catR2<span class=\"br0\">)</span><br/>    results <span class=\"sy0\">=</span> <span class=\"br0\">[</span> <span class=\"kw2\">tuple</span><span class=\"br0\">(</span>c<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> c <span class=\"kw1\">in</span> defs <span class=\"br0\">]</span><br/>    pr<span class=\"br0\">(</span>results<span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 4, "block": "<pre class=\"text highlighted_source\">catalan &lt;- function(n) choose(2*n, n)/(n + 1)<br/>catalan(0:15)<br/> [1]       1       1       2       5      14      42     132     429    1430<br/>[10]    4862   16796   58786  208012  742900 2674440 9694845</pre>"}, {"lang": "Racket", "loc": 12, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(require planet2)<br/>; (install \"this-and-that\") \u00a0; uncomment to install<br/>(require memoize/memo)<br/>\u00a0<br/>(define/memo* (catalan m)<br/>  (if (= m 0) <br/>      1<br/>      (for/sum ([i m]) <br/>        (* (catalan i) (catalan (- m i 1))))))<br/>\u00a0<br/>(map catalan (range 1 15))</pre>"}, {"lang": "REXX", "loc": 23, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program calculates and displays  Catalan numbers  using  four different methods. */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> LO HI <span class=\"sy0\">.</span>                                <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">if</span> LO==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> LO==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  HI=<span class=\"nu0\">15</span>; LO=<span class=\"nu0\">0</span>;  <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*No args? Then use a range of 0 \u2500\u2500\u25ba 15*/</span><br/><span class=\"kw1\">if</span> HI==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> HI==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span>      HI=LO             <span class=\"coMULTI\">/*No HI?   Then use  LO for the default*/</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"kw6\">max</span><span class=\"br0\">(</span><span class=\"nu0\">20</span>, <span class=\"nu0\">5</span><span class=\"sy0\">*</span>HI<span class=\"br0\">)</span>                     <span class=\"coMULTI\">/*this allows gihugic Catalan numbers. */</span><br/>w=<span class=\"kw6\">length</span><span class=\"br0\">(</span>HI<span class=\"br0\">)</span>                                     <span class=\"coMULTI\">/*W:  is used for aligning the output. */</span><br/><span class=\"kw1\">call</span> hdr 1A;  <span class=\"kw1\">do</span> j=LO  <span class=\"kw2\">to</span> HI;  <span class=\"kw1\">say</span> <span class=\"st0\">'     Catalan'</span>     <span class=\"kw6\">right</span><span class=\"br0\">(</span>j, w<span class=\"br0\">)</span><span class=\"st0\">\": \"</span>      Cat1A<span class=\"br0\">(</span>j<span class=\"br0\">)</span>;   <span class=\"kw3\">end</span><br/><span class=\"kw1\">call</span> hdr 1B;  <span class=\"kw1\">do</span> j=LO  <span class=\"kw2\">to</span> HI;  <span class=\"kw1\">say</span> <span class=\"st0\">'     Catalan'</span>     <span class=\"kw6\">right</span><span class=\"br0\">(</span>j, w<span class=\"br0\">)</span><span class=\"st0\">\": \"</span>      Cat1B<span class=\"br0\">(</span>j<span class=\"br0\">)</span>;   <span class=\"kw3\">end</span><br/><span class=\"kw1\">call</span> hdr <span class=\"nu0\">2</span>\u00a0;  <span class=\"kw1\">do</span> j=LO  <span class=\"kw2\">to</span> HI;  <span class=\"kw1\">say</span> <span class=\"st0\">'     Catalan'</span>     <span class=\"kw6\">right</span><span class=\"br0\">(</span>j, w<span class=\"br0\">)</span><span class=\"st0\">\": \"</span>      Cat2<span class=\"br0\">(</span>j<span class=\"br0\">)</span>\u00a0;   <span class=\"kw3\">end</span><br/><span class=\"kw1\">call</span> hdr <span class=\"nu0\">3</span>\u00a0;  <span class=\"kw1\">do</span> j=LO  <span class=\"kw2\">to</span> HI;  <span class=\"kw1\">say</span> <span class=\"st0\">'     Catalan'</span>     <span class=\"kw6\">right</span><span class=\"br0\">(</span>j, w<span class=\"br0\">)</span><span class=\"st0\">\": \"</span>      Cat3<span class=\"br0\">(</span>j<span class=\"br0\">)</span>\u00a0;   <span class=\"kw3\">end</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>!:     <span class=\"kw1\">arg</span> z; <span class=\"kw1\">if</span>\u00a0!<span class=\"sy0\">.</span>z<span class=\"sy0\">\\</span>==<span class=\"sy0\">.</span> <span class=\"kw3\">then</span> <span class=\"kw1\">return</span>\u00a0!<span class=\"sy0\">.</span>z;\u00a0!=<span class=\"nu0\">1</span>;  <span class=\"kw1\">do</span> k=<span class=\"nu0\">2</span>  <span class=\"kw2\">to</span> z;\u00a0!=!<span class=\"sy0\">*</span>k; <span class=\"kw3\">end</span>; \u00a0!<span class=\"sy0\">.</span>z=!; <span class=\"kw1\">return</span>\u00a0!<br/>Cat1A: <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span>\u00a0!<span class=\"sy0\">.</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> n;     <span class=\"kw1\">return</span> comb<span class=\"br0\">(</span>n+n, n<span class=\"br0\">)</span>   \u00a0%  <span class=\"br0\">(</span>n+<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>Cat1B: <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span>\u00a0!<span class=\"sy0\">.</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> n;     <span class=\"kw1\">return</span>\u00a0!<span class=\"br0\">(</span>n+n<span class=\"br0\">)</span>\u00a0% <span class=\"br0\">(</span><span class=\"br0\">(</span>n+<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span>\u00a0!<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>Cat3:  <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> c<span class=\"sy0\">.</span>;  <span class=\"kw1\">arg</span> n; <span class=\"kw1\">if</span> c<span class=\"sy0\">.</span>n==<span class=\"sy0\">.</span> <span class=\"kw3\">then</span> c<span class=\"sy0\">.</span>n=<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">*</span>n-<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>cat3<span class=\"br0\">(</span>n-<span class=\"nu0\">1</span><span class=\"br0\">)</span>%<span class=\"br0\">(</span>n+<span class=\"nu0\">1</span><span class=\"br0\">)</span>; <span class=\"kw1\">return</span> c<span class=\"sy0\">.</span>n<br/>comb:  <span class=\"kw1\">procedure</span>;            <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x,y;   <span class=\"kw1\">return</span> pFact<span class=\"br0\">(</span>x-y+<span class=\"nu0\">1</span>, x<span class=\"br0\">)</span>\u00a0% pFact<span class=\"br0\">(</span><span class=\"nu0\">2</span>, y<span class=\"br0\">)</span><br/>hdr:  \u00a0!<span class=\"sy0\">.</span>=<span class=\"sy0\">.</span>; c<span class=\"sy0\">.</span>=<span class=\"sy0\">.</span>; c<span class=\"sy0\">.</span>0=<span class=\"nu0\">1</span>; <span class=\"kw1\">say</span>; <span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">'Catalan numbers, method'</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,<span class=\"nu0\">79</span>,<span class=\"st0\">'\u2500'</span><span class=\"br0\">)</span>; <span class=\"kw1\">return</span><br/>pFact: <span class=\"kw1\">procedure</span>;           \u00a0!=<span class=\"nu0\">1</span>;      <span class=\"kw1\">do</span> k=<span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"kw2\">to</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>; \u00a0!=!<span class=\"sy0\">*</span>k;  <span class=\"kw3\">end</span>;    <span class=\"kw1\">return</span>\u00a0!<br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>Cat2:  <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> c<span class=\"sy0\">.</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> n;  $=<span class=\"nu0\">0</span>;         <span class=\"kw1\">if</span> c<span class=\"sy0\">.</span>n<span class=\"sy0\">\\</span>==<span class=\"sy0\">.</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> c<span class=\"sy0\">.</span>n<br/>                                       <span class=\"kw1\">do</span> k=<span class=\"nu0\">0</span>  <span class=\"kw2\">for</span> n;   $=$ + Cat2<span class=\"br0\">(</span>k<span class=\"br0\">)</span> <span class=\"sy0\">*</span> Cat2<span class=\"br0\">(</span>n-k-<span class=\"nu0\">1</span><span class=\"br0\">)</span>;   <span class=\"kw3\">end</span><br/>                             c<span class=\"sy0\">.</span>n=$;           <span class=\"kw1\">return</span> $    <span class=\"coMULTI\">/*use a memoization technique.*/</span></pre>"}, {"lang": "Ring", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>for n = 1 to 15<br/>    see catalan(n) + nl<br/>next<br/>\u00a0<br/>func catalan n<br/>     if n = 0 return 1 ok<br/>     cat = 2 * (2 * n - 1) * catalan(n - 1) / (n + 1)<br/>     return cat<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 39, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> factorial<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">n</span><span class=\"br0\">)</span>.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>,\u00a0:<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\"># direct</span><br/>\u00a0<br/><span class=\"kw1\">def</span> catalan_direct<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  factorial<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>n<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>factorial<span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> factorial<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\"># recursive</span><br/>\u00a0<br/><span class=\"kw1\">def</span> catalan_rec1<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw2\">return</span> <span class=\"nu0\">1</span> <span class=\"kw1\">if</span> n == <span class=\"nu0\">0</span><br/>  <span class=\"br0\">(</span><span class=\"nu0\">0</span>...<span class=\"me1\">n</span><span class=\"br0\">)</span>.<span class=\"me1\">inject</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>sum, i<span class=\"sy0\">|</span> sum <span class=\"sy0\">+</span> catalan_rec1<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">*</span> catalan_rec1<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span>i<span class=\"br0\">)</span><span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> catalan_rec2<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw2\">return</span> <span class=\"nu0\">1</span> <span class=\"kw1\">if</span> n == <span class=\"nu0\">0</span><br/>  <span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> catalan_rec2<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\"># performance and results</span><br/>\u00a0<br/><span class=\"kw3\">require</span> <span class=\"st0\">'benchmark'</span><br/><span class=\"kw3\">require</span> <span class=\"st0\">'memoize'</span><br/><span class=\"kw1\">include</span> Memoize<br/>\u00a0<br/><span class=\"kw4\">Benchmark</span>.<span class=\"me1\">bm</span><span class=\"br0\">(</span><span class=\"nu0\">17</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>b<span class=\"sy0\">|</span><br/>  b.<span class=\"me1\">report</span><span class=\"br0\">(</span><span class=\"st0\">'catalan_direct'</span><span class=\"br0\">)</span>    <span class=\"br0\">{</span><span class=\"nu0\">16</span>.<span class=\"me1\">times</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> catalan_direct<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>  b.<span class=\"me1\">report</span><span class=\"br0\">(</span><span class=\"st0\">'catalan_rec1'</span><span class=\"br0\">)</span>      <span class=\"br0\">{</span><span class=\"nu0\">16</span>.<span class=\"me1\">times</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> catalan_rec1<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>  b.<span class=\"me1\">report</span><span class=\"br0\">(</span><span class=\"st0\">'catalan_rec2'</span><span class=\"br0\">)</span>      <span class=\"br0\">{</span><span class=\"nu0\">16</span>.<span class=\"me1\">times</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> catalan_rec2<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/>  memoize <span class=\"re3\">:catalan_rec1</span><br/>  b.<span class=\"me1\">report</span><span class=\"br0\">(</span><span class=\"st0\">'catalan_rec1(memo)'</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"nu0\">16</span>.<span class=\"me1\">times</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> catalan_rec1<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>       direct     rec1     rec2\"</span><br/><span class=\"nu0\">16</span>.<span class=\"me1\">times</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> <span class=\"kw3\">puts</span> <span class=\"st0\">\"%2d\u00a0:%9d%9d%9d\"</span> <span class=\"sy0\">%</span> <span class=\"br0\">[</span>n, catalan_direct<span class=\"br0\">(</span>n<span class=\"br0\">)</span>, catalan_rec1<span class=\"br0\">(</span>n<span class=\"br0\">)</span>, catalan_rec2<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">}</span></pre>"}, {"lang": "Run BASIC", "loc": 8, "block": "<pre class=\"text highlighted_source\">FOR i = 1 TO 15<br/>    PRINT i;\" \";catalan(i)<br/>NEXT<br/>\u00a0<br/>FUNCTION catalan(n) <br/> catalan = 1<br/> if n &lt;&gt; 0 then catalan = ((2 * ((2 * n) - 1)) / (n + 1)) * catalan(n - 1)<br/>END FUNCTION</pre>"}, {"lang": "Rust", "loc": 12, "block": "<pre class=\"text highlighted_source\">fn c_n(n: u64) -&gt; u64 {<br/>    match n {<br/>        0 =&gt; 1,<br/>        _ =&gt; c_n(n - 1) * 2 * (2 * n - 1) / (n + 1)<br/>    }<br/>}<br/>\u00a0<br/>fn main() {<br/>    for i in 1..16 {<br/>        println!(\"c_n({}) = {}\", i, c_n(i));<br/>    }<br/>}</pre>"}, {"lang": "Scala", "loc": 10, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Catalan <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> factorial<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> BigInt<span class=\"br0\">)</span> <span class=\"sy0\">=</span> BigInt<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">to</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>.<span class=\"me1\">foldLeft</span><span class=\"br0\">(</span>BigInt<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"sy0\">_</span> <span class=\"sy0\">*</span> <span class=\"sy0\">_</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> catalan<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> BigInt<span class=\"br0\">)</span> <span class=\"sy0\">=</span> factorial<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> n<span class=\"br0\">)</span> / <span class=\"br0\">(</span>factorial<span class=\"br0\">(</span>n + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> factorial<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> to <span class=\"nu0\">15</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      println<span class=\"br0\">(</span><span class=\"st0\">\"catalan(\"</span> + n + <span class=\"st0\">\") = \"</span> + catalan<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 8, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>catalan m<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> loop <span class=\"br0\">(</span><span class=\"br0\">(</span>c <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">(</span>n <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">eqv?</span> n m<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">begin</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">display</span> n<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\": \"</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">display</span> c<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span>loop <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> c<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>catalan <span class=\"nu0\">15</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 11, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"bigint.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var bigInteger: n is 0_;<br/>  begin<br/>    for n range 0_ to 15_ do<br/>      writeln((2_ * n)\u00a0! n div succ(n));<br/>    end for;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 2, "block": "<pre class=\"ruby highlighted_source\">func f<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span> i==<span class=\"nu0\">0</span>\u00a0? <span class=\"nu0\">1</span>\u00a0: <span class=\"br0\">(</span>i <span class=\"sy0\">*</span> f<span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>func c<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> f<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>n<span class=\"br0\">)</span> <span class=\"sy0\">/</span> f<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">/</span> f<span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">}</span></pre>"}, {"lang": "smart BASIC", "loc": 30, "block": "<pre class=\"qbasic highlighted_source\"><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"Recursive:\"</span>!<a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a><br/><span class=\"kw1\">FOR</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">15</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> n<span class=\"sy0\">,</span><span class=\"st0\">\"#######\"</span>:catrec<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"kw1\">NEXT</span> n<br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a>!<a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"Non-recursive:\"</span>!<a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a><br/><span class=\"kw1\">FOR</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">15</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> n<span class=\"sy0\">,</span><span class=\"st0\">\"#######\"</span>:catnonrec<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"kw1\">NEXT</span> n<br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckdef.shtml\"><span class=\"kw3\">DEF</span></a> catrec<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    <span class=\"kw1\">IF</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>        temp <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">ELSE</span> <br/>        n <span class=\"sy0\">=</span> x<br/>        temp <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>n<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>catrec<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/>    catrec <span class=\"sy0\">=</span> temp<br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckdef.shtml\"><span class=\"kw3\">DEF</span></a><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckdef.shtml\"><span class=\"kw3\">DEF</span></a> catnonrec<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    temp <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">FOR</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> x<br/>         temp <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>n<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>temp<br/>    <span class=\"kw1\">NEXT</span> n<br/>    catnonrec <span class=\"sy0\">=</span> temp<br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckdef.shtml\"><span class=\"kw3\">DEF</span></a></pre>"}, {"lang": "Standard ML", "loc": 32, "block": "<pre class=\"text highlighted_source\">(*<br/> * val catalan\u00a0: int -&gt; int<br/> * Returns the nth Catalan number.<br/> *)<br/>fun catalan 0 = 1<br/>|   catalan n = ((4 * n - 2) * catalan(n - 1)) div (n + 1);<br/>\u00a0<br/>(*<br/> * val print_catalans\u00a0: int -&gt; unit<br/> * Prints out Catalan numbers 0 through 15.<br/> *)<br/>fun print_catalans(n) =<br/>    if n &gt; 15 then ()<br/>    else (print (Int.toString(catalan n) ^ \"\\n\"); print_catalans(n + 1)); print_catalans(0);<br/>(*<br/> * 1<br/> * 1<br/> * 2<br/> * 5<br/> * 14<br/> * 42<br/> * 132<br/> * 429<br/> * 1430<br/> * 4862<br/> * 16796<br/> * 58786<br/> * 208012<br/> * 742900<br/> * 2674440<br/> * 9694845<br/> *)</pre>"}, {"lang": "Stata", "loc": 5, "block": "<pre class=\"text highlighted_source\">clear<br/>set obs 15<br/>gen catalan=1 in 1<br/>replace catalan=catalan[_n-1]*2*(2*_n-3)/_n in 2/l<br/>list, noobs noh</pre>"}, {"lang": "Swift", "loc": 13, "block": "<pre class=\"text highlighted_source\">func catalan(_ n: Int) -&gt; Int {<br/>  switch n {<br/>  case 0:<br/>    return 1<br/>  case _:<br/>    return catalan(n - 1) * 2 * (2 * n - 1) / (n + 1)<br/>  }<br/>}<br/>\u00a0<br/>for i in 1..&lt;16 {<br/>  print(\"catalan(\\(i)) =&gt; \\(catalan(i))\")<br/>}<br/>\u00a0</pre>"}, {"lang": "Tcl", "loc": 19, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/>\u00a0<br/><span class=\"co1\"># Memoization wrapper</span><br/><span class=\"kw1\">proc</span> memoize <span class=\"br0\">{</span>function value generator<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">variable</span> memoize<br/>    <span class=\"kw1\">set</span> key <span class=\"re0\">$function</span>,<span class=\"re0\">$value</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw2\">info</span> exists memoize<span class=\"br0\">(</span><span class=\"re0\">$key</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> memoize<span class=\"br0\">(</span><span class=\"re0\">$key</span><span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"kw1\">uplevel</span> <span class=\"nu0\">1</span> <span class=\"re0\">$generator</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$memoize</span><span class=\"br0\">(</span><span class=\"re0\">$key</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># The simplest recursive definition</span><br/><span class=\"kw1\">proc</span> tcl::<span class=\"me1\">mathfunc</span>::<span class=\"me1\">catalan</span> n <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">incr</span> n <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">error</span> <span class=\"st0\">\"must not be negative\"</span><span class=\"br0\">}</span><br/>    memoize catalan <span class=\"re0\">$n</span> <span class=\"br0\">{</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><br/>\t<span class=\"re0\">$n</span> == <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span>\u00a0: <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"re0\">$n</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> catalan<span class=\"br0\">(</span><span class=\"re0\">$n</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span> / <span class=\"br0\">(</span><span class=\"re0\">$n</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TI-83 BASIC", "loc": 3, "block": "<pre class=\"text highlighted_source\">:For(I,1,15<br/>:Disp (2I)!/((I+1)!I!<br/>:End</pre>"}, {"lang": "Ursala", "loc": 8, "block": "<pre class=\"text highlighted_source\">#import std<br/>#import nat<br/>\u00a0<br/>catalan = quotient^\\successor choose^/double ~&amp;<br/>\u00a0<br/>#cast\u00a0%nL<br/>\u00a0<br/>t = catalan* iota 16</pre>"}, {"lang": "VBA", "loc": 34, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Public</span> <span class=\"kw2\">Sub</span> Catalan1(n <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>)<br/><span class=\"co1\">'Computes the first n Catalan numbers according to the first recursion given<br/></span><span class=\"kw4\">Dim</span> Cat() <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/><span class=\"kw4\">Dim</span> sum <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>\u00a0<br/><span class=\"kw4\">ReDim</span> Cat(n)<br/>Cat(0) = 1<br/><span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> n - 1<br/>  sum = 0<br/>  <span class=\"kw3\">For</span> j = 0 <span class=\"kw3\">To</span> i<br/>    sum = sum + Cat(j) * Cat(i - j)<br/>  <span class=\"kw3\">Next</span> j<br/>  Cat(i + 1) = sum<br/><span class=\"kw3\">Next</span> i<br/>Debug.<span class=\"kw4\">Print</span><br/><span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> n<br/>  Debug.<span class=\"kw4\">Print</span> i, Cat(i)<br/><span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Public</span> <span class=\"kw2\">Sub</span> Catalan2(n <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>)<br/><span class=\"co1\">'Computes the first n Catalan numbers according to the second recursion given<br/></span><span class=\"kw4\">Dim</span> Cat() <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>\u00a0<br/><span class=\"kw4\">ReDim</span> Cat(n)<br/>Cat(0) = 1<br/><span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> n<br/>  Cat(i) = 2 * Cat(i - 1) * (2 * i - 1) / (i + 1)<br/><span class=\"kw3\">Next</span> i<br/>Debug.<span class=\"kw4\">Print</span><br/><span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> n<br/>  Debug.<span class=\"kw4\">Print</span> i, Cat(i)<br/><span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span></pre>"}, {"lang": "VBScript", "loc": 25, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Function</span> catalan(n)<br/>\tcatalan = factorial(2*n)/(factorial(n+1)*factorial(n))<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> factorial(n)<br/>\t<span class=\"kw3\">If</span> n = 0 <span class=\"kw3\">Then</span><br/>\t\tFactorial = 1<br/>\t<span class=\"kw3\">Else</span><br/>\t\t<span class=\"kw3\">For</span> i = n <span class=\"kw3\">To</span> 1 <span class=\"kw3\">Step</span> -1<br/>\t\t\t<span class=\"kw3\">If</span> i = n <span class=\"kw3\">Then</span><br/>\t\t\t\tfactorial = n<br/>\t\t\t<span class=\"kw3\">Else</span><br/>\t\t\t\tfactorial = factorial * i<br/>\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t<span class=\"kw3\">Next</span><br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"co1\">'Find the first 15 Catalan numbers.<br/></span><span class=\"kw3\">For</span> j = 1 <span class=\"kw3\">To</span> 15<br/>\tWScript.StdOut.Write j &amp; <span class=\"st0\">\" = \"</span> &amp; catalan(j)<br/>\tWScript.StdOut.WriteLine<br/><span class=\"kw3\">Next</span><br/>\u00a0</pre>"}, {"lang": "Wortel", "loc": 6, "block": "<pre class=\"text highlighted_source\">; the following number expression calculcates the nth Catalan number<br/>#~ddiFSFmSoFSn<br/>; which stands for: dup dup inc fac swap fac mult swap double fac swap divide<br/>; to get the first 15 Catalan numbers we map this function over a list from 0 to 15<br/>!*#~ddiFSFmSoFSn @til 15<br/>; returns [1 1 2 5 14 42 132 429 1430 4862 16796 58786 208012 742900 2674439.9999999995]</pre>"}, {"lang": "XLISP", "loc": 11, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> catalan <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> n <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t<span class=\"nu0\">1</span><br/>\t\t<span class=\"br0\">(</span>* <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>* <span class=\"nu0\">2</span> <span class=\"br0\">(</span>- <span class=\"br0\">(</span>* <span class=\"nu0\">2</span> n<span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>+ n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>catalan <span class=\"br0\">(</span>- n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> range <span class=\"br0\">(</span>x y<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">cons</span> x<br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> x y<span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">(</span>range <span class=\"br0\">(</span>+ x <span class=\"nu0\">1</span><span class=\"br0\">)</span> y<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> catalan <span class=\"br0\">(</span>range <span class=\"nu0\">0</span> <span class=\"nu0\">14</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "XPL0", "loc": 9, "block": "<pre class=\"text highlighted_source\">code CrLf=9, IntOut=11;<br/>int  C, N;<br/>[C:= 1;<br/>IntOut(0, C);  CrLf(0);<br/>for N:= 1 to 14 do<br/>    [C:= C*2*(2*N-1)/(N+1);<br/>    IntOut(0, C);  CrLf(0);<br/>    ];<br/>]</pre>"}, {"lang": "zkl", "loc": 9, "block": "<pre class=\"text highlighted_source\">var BN=Import(\"zklBigNum\");<br/>fcn catalan(n){<br/>   BN(2*n).factorial() / BN(n+1).factorial() / BN(n).factorial();<br/>}<br/>\u00a0<br/>foreach n in (16){<br/>   println(\"%2d --&gt;\u00a0%,d\".fmt(n, catalan(n)));<br/>}<br/>println(\"%2d --&gt;\u00a0%,d\".fmt(100, catalan(100)));</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 13, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">15</span><br/><span class=\"nu0\">20</span> <span class=\"kw1\">LET</span> n=i: <span class=\"kw1\">LET</span> m=<span class=\"nu0\">2</span>*n<br/><span class=\"nu0\">30</span> <span class=\"kw1\">LET</span> r=<span class=\"nu0\">1</span>: <span class=\"kw1\">LET</span> d=m-n<br/><span class=\"nu0\">40</span> <span class=\"kw1\">IF</span> d&gt;n <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> n=d: <span class=\"kw1\">LET</span> d=m-n<br/><span class=\"nu0\">50</span> <span class=\"kw1\">IF</span> m&lt;=n <span class=\"kw1\">THEN</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">90</span><br/><span class=\"nu0\">60</span> <span class=\"kw1\">LET</span> r=r*m: <span class=\"kw1\">LET</span> m=m-<span class=\"nu0\">1</span><br/><span class=\"nu0\">70</span> <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>d&gt;<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw4\">AND</span> <span class=\"kw4\">NOT</span> FN m<span class=\"br0\">(</span>r,d<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> r=r/d: <span class=\"kw1\">LET</span> d=d-<span class=\"nu0\">1</span>: <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">70</span><br/><span class=\"nu0\">80</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">50</span><br/><span class=\"nu0\">90</span> <span class=\"kw1\">PRINT</span> i;TAB <span class=\"nu0\">4</span>;r/<span class=\"br0\">(</span><span class=\"nu0\">1</span>+n<span class=\"br0\">)</span><br/><span class=\"nu0\">100</span> <span class=\"kw1\">NEXT</span> i<br/><span class=\"nu0\">110</span> STOP <br/><span class=\"nu0\">120</span> DEF FN m<span class=\"br0\">(</span>a,b<span class=\"br0\">)</span>=a-<span class=\"kw3\">INT</span> <span class=\"br0\">(</span>a/b<span class=\"br0\">)</span>*b: <span class=\"co3\">REM Modulus function</span><br/>\u00a0</pre>"}]}