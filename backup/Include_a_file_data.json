{"task": "Include_a_file", "blocks": [{"lang": "360 Assembly", "loc": 1, "block": "<pre class=\"text highlighted_source\">         COPY  member</pre>"}, {"lang": "ACL2", "loc": 1, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>include-book <span class=\"st0\">\"filename\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Ada", "loc": 7, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>, Another_Package; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;    <br/>  <span class=\"co1\">-- the with-clause tells the compiler to include the Text_IO package from the Ada standard </span><br/>  <span class=\"co1\">-- and Another_Package. Subprograms from these packages may be called as follows: </span><br/>  <span class=\"co1\">--               Ada.Text_IO.Put_Line(\"some text\");</span><br/>  <span class=\"co1\">--               Another_Package.Do_Something(\"some text\"); </span><br/>  <span class=\"co1\">-- The use-clause allows the program author to write a subprogram call shortly as </span><br/>  <span class=\"co1\">--               Put_Line(\"some text\");</span></pre>"}, {"lang": "ALGOL 68", "loc": 1, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"co2\">PR read \"file.a68\" PR</span></pre>"}, {"lang": "AntLang", "loc": 1, "block": "<pre class=\"text highlighted_source\">load[\"script.ant\"]</pre>"}, {"lang": "Applesoft BASIC", "loc": 5, "block": "<pre class=\"text highlighted_source\"> 10  REMPROGRAM TWO<br/> 20  DEF  FN A(X) = X * Y<br/> 30  PRINT  FN A(2)<br/>\u00a0<br/>SAVE PROGRAM TWO</pre>"}, {"lang": "AutoHotkey", "loc": 4, "block": "<pre class=\"autohotkey highlighted_source\">\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/_Include.htm\"><span class=\"kw5\">#Include</span></a> FileOrDirName<br/><a href=\"http://www.autohotkey.com/docs/commands/_IncludeAgain.htm\"><span class=\"kw5\">#IncludeAgain</span></a> FileOrDirName<br/>\u00a0</pre>"}, {"lang": "AWK", "loc": 1, "block": "<pre class=\"text highlighted_source\">awk -f one.awk -f two.awk</pre>"}, {"lang": "Axe", "loc": 1, "block": "<pre class=\"text highlighted_source\">prgmOTHER</pre>"}, {"lang": "BaCon", "loc": 1, "block": "<pre class=\"freebasic highlighted_source\">other = <span class=\"nu0\">42</span></pre>"}, {"lang": "BASIC", "loc": 2, "block": "<pre class=\"qbasic highlighted_source\">REM $INCLUDE: <span class=\"co1\">'file.bi'</span><br/><span class=\"co1\">'$INCLUDE: 'file.bi'</span></pre>"}, {"lang": "Batch File", "loc": 3, "block": "<pre class=\"dos highlighted_source\">\u00a0<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a> file2.bat<br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 1, "block": "<pre class=\"text highlighted_source\">      CALL filepath$</pre>"}, {"lang": "Bracmat", "loc": 1, "block": "<pre class=\"text highlighted_source\">get$\"&lt;i&gt;module&lt;/i&gt;\"</pre>"}, {"lang": "ChucK", "loc": 1, "block": "<pre class=\"text highlighted_source\">Machine.add(me.dir() + \"/MyOwnClassesDefinitions.ck\");</pre>"}, {"lang": "C / C++", "loc": 5, "block": "<pre class=\"c highlighted_source\"><span class=\"coMULTI\">/* Standard and other library header names are enclosed between chevrons */</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* User/in-project header names are usually enclosed between double-quotes */</span><br/><span class=\"co2\">#include \"myutil.h\"</span></pre>"}, {"lang": "C#", "loc": 4, "block": "<pre class=\"csharp highlighted_source\"><span class=\"coMULTI\">/* The C# language specification does not give a mechanism for 'including' one source file within another,<br/> * likely because there is no need - all code compiled within one 'assembly' (individual IDE projects<br/> * are usually compiled to separate assemblies) can 'see' all other code within that assembly.<br/> */</span></pre>"}, {"lang": "Clipper", "loc": 1, "block": "<pre class=\"text highlighted_source\">  #include \"inkey.ch\" </pre>"}, {"lang": "Clojure", "loc": 1, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">load</span> <span class=\"st0\">\"path/to/file\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "COBOL", "loc": 4, "block": "<pre class=\"cobol highlighted_source\"><span class=\"kw2\">COPY</span> <span class=\"st0\">\"copy.cpy\"</span><span class=\"sy0\">.</span> *&gt; The full <span class=\"kw3\">stop</span> <span class=\"kw3\">is</span> mandatory<span class=\"sy0\">,</span> wherever the <span class=\"kw2\">COPY</span> <span class=\"kw3\">is</span><span class=\"sy0\">.</span><br/><span class=\"kw2\">COPY</span> <span class=\"st0\">\"another-copy.cpy\"</span> <span class=\"kw2\">REPLACING</span> foo <span class=\"kw3\">BY</span> bar<br/>                                  <span class=\"kw3\">SPACE</span> <span class=\"kw3\">BY</span> <span class=\"kw3\">ZERO</span><br/>                                  <span class=\"sy0\">==</span><span class=\"kw3\">text</span> <span class=\"kw2\">to</span> <span class=\"kw3\">replace</span><span class=\"sy0\">==</span> <span class=\"kw3\">BY</span> <span class=\"sy0\">==</span>replacement <span class=\"kw3\">text</span><span class=\"sy0\">==.</span></pre>"}, {"lang": "Common Lisp", "loc": 1, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>load <span class=\"st0\">\"path/to/file\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 1, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span></pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 5, "block": "<pre class=\"text highlighted_source\">#with the module system:<br/>!import!foo<br/>\u00a0<br/>#passing a file name (only works with compiled bytecode files):<br/>!run-file \"/path/file.vu\"</pre>"}, {"lang": "Delphi", "loc": 4, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">uses</span> SysUtils<span class=\"sy1\">;</span>    <span class=\"co1\">// Lets you use the contents of SysUtils.pas from the current unit</span><br/>\u00a0<br/><span class=\"co2\">{$Include Common}</span> <span class=\"co1\">// Inserts the contents of Common.pas into the current unit</span><br/><span class=\"co2\">{$I Common}</span>       <span class=\"co1\">// Same as the previous line, but in a shorter form</span></pre>"}, {"lang": "DWScript", "loc": 7, "block": "<pre class=\"delphi highlighted_source\">\u00a0<br/><span class=\"co2\">{$INCLUDE Common}</span>      <span class=\"co1\">// Inserts the contents of Common.pas into the current unit</span><br/><span class=\"co2\">{$I Common}</span>            <span class=\"co1\">// Same as the previous line, but in a shorter form</span><br/><span class=\"co2\">{$INCLUDE_ONCE Common}</span> <span class=\"co1\">// Inserts the contents of Common.pas into the current unit only if not included already</span><br/><span class=\"co2\">{$FILTER Common}</span>       <span class=\"co1\">// Inserts the contents of Common.pas into the current unit after filtering</span><br/><span class=\"co2\">{$F Common}</span>            <span class=\"co1\">// Same as the previous line, but in a shorter form</span><br/>\u00a0</pre>"}, {"lang": "Emacs Lisp", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(defun sum (ls)<br/>  (apply '+ ls) )<br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 3, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">include</span><span class=\"br0\">(</span><span class=\"st0\">\"my_header.hrl\"</span><span class=\"br0\">)</span><span class=\"sy1\">.</span> <span class=\"co1\">% Includes the file at my_header.erl</span><br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 3, "block": "<pre class=\"euphoria highlighted_source\">\u00a0<br/><span class=\"kw1\">include</span> my_header.e<br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>USING: vocaba vocabb...\u00a0;<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 1, "block": "<pre class=\"text highlighted_source\">include matrix.fs</pre>"}, {"lang": "Fortran", "loc": 1, "block": "<pre class=\"fortran highlighted_source\">include <span class=\"st0\">''</span>char<span class=\"sy0\">-</span>literal<span class=\"sy0\">-</span>constant<span class=\"st0\">''</span></pre>"}, {"lang": "FreeBASIC", "loc": 10, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' person.bi file</span><br/><span class=\"kw1\">Type</span> Person<br/>  <span class=\"kw1\">name</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/>  age <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><br/>  <span class=\"kw1\">Declare</span> Operator Cast<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Type</span><br/>\u00a0<br/>Operator Person.<span class=\"me1\">Cast</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/>  <span class=\"kw1\">Return</span> <span class=\"st0\">\"[\"</span> + This.<span class=\"kw1\">name</span> + <span class=\"st0\">\", \"</span> + <span class=\"kw1\">Str</span><span class=\"br0\">(</span>This.<span class=\"me1\">age</span><span class=\"br0\">)</span> + <span class=\"st0\">\"]\"</span><br/><span class=\"kw1\">End</span> Operator</pre>"}, {"lang": "Furryscript", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>include resources \"SomeImage.png\"<br/>include resources \"SomeMovie.mpeg\"<br/>include resources \"SomeSound.aiff\"<br/>include resources \"SomeIcon.icns\"<br/>include resources \"Info.plist\"   //Custom preference file to replace FB's generic app preferences<br/>\u00a0</pre>"}, {"lang": "FutureBasic", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>include resources \"SomeImage.png\"<br/>include resources \"SomeMovie.mpeg\"<br/>include resources \"SomeSound.aiff\"<br/>include resources \"SomeIcon.icns\"<br/>include resources \"Info.plist\"   //Custom preference file to replace FB's generic app preferences<br/>\u00a0</pre>"}, {"lang": "Gambas", "loc": 7, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Form_Open<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sFile <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><br/>\u00a0<br/>sFile <span class=\"sy0\">=</span> <a href=\"http://gambasdoc.org/help/lang/type/file\"><span class=\"kw4\">File</span></a>.<span class=\"me1\">Load</span><span class=\"br0\">(</span><span class=\"st0\">\"FileToLoad\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a><br/>\u00a0</pre>"}, {"lang": "Gambas", "loc": 7, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Form_Open<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sFile <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><br/>\u00a0<br/>sFile <span class=\"sy0\">=</span> <a href=\"http://gambasdoc.org/help/lang/type/file\"><span class=\"kw4\">File</span></a>.<span class=\"me1\">Load</span><span class=\"br0\">(</span><span class=\"st0\">\"FileToLoad\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a><br/>\u00a0</pre>"}, {"lang": "GAP", "loc": 1, "block": "<pre class=\"text highlighted_source\">Read(\"file\");</pre>"}, {"lang": "Gnuplot", "loc": 1, "block": "<pre class=\"gnuplot highlighted_source\"><span class=\"kw1\">load</span> <span class=\"st0\">\"filename.gnuplot\"</span></pre>"}, {"lang": "Harbour", "loc": 1, "block": "<pre class=\"visualfoxpro highlighted_source\"><span class=\"kw1\">#include</span> <span class=\"st0\">\"inkey.ch\"</span></pre>"}, {"lang": "Haskell", "loc": 7, "block": "<pre class=\"haskell highlighted_source\"><span class=\"co1\">-- Due to Haskell's module system, textual includes are rarely needed. In</span><br/><span class=\"co1\">-- general, one will import a module, like so:</span><br/><span class=\"kw1\">import</span> SomeModule<br/><span class=\"co1\">-- For actual textual inclusion, alternate methods are available. The Glasgow</span><br/><span class=\"co1\">-- Haskell Compiler runs the C preprocessor on source code, so #include may be</span><br/><span class=\"co1\">-- used:</span><br/>#include <span class=\"st0\">\"SomeModule.hs\"</span></pre>"}, {"lang": "HTML", "loc": 2, "block": "<pre class=\"text highlighted_source\">&lt;iframe src=\"foobar.html\"&gt;<br/>Sorry: Your browser cannot show the included content.&lt;/iframe&gt;</pre>"}, {"lang": "Icon and Unicon", "loc": 1, "block": "<pre class=\"icon highlighted_source\"><span class=\"sy2\">$</span><span class=\"kw6\">include</span> <span class=\"st0\">\"filename.icn\"</span></pre>"}, {"lang": "IWBASIC", "loc": 1, "block": "<pre class=\"text highlighted_source\">$INCLUDE \"ishelllink.inc\"</pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">require <span class=\"st_h\">'myheader.ijs'</span></pre>"}, {"lang": "Java", "loc": 4, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Class1 <span class=\"kw1\">extends</span> Class2<br/><span class=\"br0\">{</span><br/>\t<span class=\"co1\">//code here</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 6, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">var</span> s <span class=\"sy0\">=</span> document.<span class=\"me1\">createElement</span><span class=\"br0\">(</span><span class=\"st0\">'script'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>s.<span class=\"me1\">type</span> <span class=\"sy0\">=</span> <span class=\"st0\">'application/javascript'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// path to the desired file</span><br/>s.<span class=\"me1\">src</span> <span class=\"sy0\">=</span> <span class=\"st0\">'http://code.jquery.com/jquery-1.6.2.js'</span><span class=\"sy0\">;</span><br/>document.<span class=\"me1\">body</span>.<span class=\"me1\">appendChild</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 3, "block": "<pre class=\"text highlighted_source\">include \"gort\";<br/>\u00a0<br/>hello</pre>"}, {"lang": "Julia", "loc": 1, "block": "<pre class=\"text highlighted_source\">include(\"foo.jl\")</pre>"}, {"lang": "Kotlin", "loc": 1, "block": "<pre class=\"scala highlighted_source\">fun f<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> println<span class=\"br0\">(</span><span class=\"st0\">\"f called\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "LabVIEW", "loc": 1, "block": "<pre class=\"text highlighted_source\">web_response -&gt; include('my_file.inc')</pre>"}, {"lang": "LabVIEW", "loc": 1, "block": "<pre class=\"text highlighted_source\">web_response -&gt; include('my_file.inc')</pre>"}, {"lang": "Lasso", "loc": 1, "block": "<pre class=\"text highlighted_source\">include('myfile.lasso')</pre>"}, {"lang": "Lingo", "loc": 13, "block": "<pre class=\"text highlighted_source\">-- load Lingo code from file<br/>fp = xtra(\"fileIO\").new()<br/>fp.openFile(_movie.path&amp;\"someinclude.ls\", 1)<br/>code = fp.readFile()<br/>fp.closeFile()<br/>\u00a0<br/>-- create new script member, assign loaded code<br/>m = new(#script)<br/>m.name = \"someinclude\"<br/>m.scriptText = code<br/>\u00a0<br/>-- use it instantly in the current script (i.e. the script that contained the above include code)<br/>script(\"someinclude\").foo()</pre>"}, {"lang": "Logtalk", "loc": 7, "block": "<pre class=\"logtalk highlighted_source\">\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw1\">object</span>(foo).<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> include(bar).<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw2\">end_object</span>.<br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 1, "block": "<pre class=\"lua highlighted_source\"> <span class=\"kw3\">require</span> <span class=\"st0\">\"myheader\"</span> </pre>"}, {"lang": "M2000 Interpreter", "loc": 25, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Document A$={<br/>Module Global Beta {<br/>      Print \"This is Beta\"<br/>      x=10<br/>      Print x<br/>      }<br/>      Print \"This is statement to execute\"<br/>      Beta  ' this call not happen<br/>}<br/>Save.Doc A$, \"TestThis.Gsb\"<br/>Module checkit {<br/>      \\\\ we can delete Global<br/>      \\\\ usinf New Modules we get latest TestThis, excluding statements calling modules.<br/>      Load New Modules TestThis<br/>      \\\\ check if Beta exist<br/>      Print Module(Beta)=True<br/>      \\\\ so now we call Beta<br/>      Beta<br/>      Print Valid(x)=False ' x is local to beta<br/>}<br/>Checkit<br/>\\\\ now Beta erased (after return form Checkit)<br/>Print Module(Beta)=False<br/>\u00a0</pre>"}, {"lang": "m4", "loc": 1, "block": "<pre class=\"text highlighted_source\">include(filename)</pre>"}, {"lang": "Maple", "loc": 1, "block": "<pre class=\"text highlighted_source\">$include &lt;somefile&gt;</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 1, "block": "<pre class=\"text highlighted_source\"> Get[\"myfile.m\"] </pre>"}, {"lang": "MATLAB / Octave", "loc": 7, "block": "<pre class=\"matlab highlighted_source\">  <span class=\"co1\">% add a new directory at the end of the path</span><br/>  <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/path.html\"><span class=\"kw2\">path</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/path.html\"><span class=\"kw2\">path</span></a>,newdir<span class=\"br0\">)</span>;  <br/>  <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/addpath.html\"><span class=\"kw2\">addpath</span></a><span class=\"br0\">(</span>newdir,<span class=\"co2\">'-end'</span><span class=\"br0\">)</span>;  <span class=\"co1\">% same as before</span><br/>\u00a0<br/>  <span class=\"co1\">% add a new directory at the beginning</span><br/>  <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/addpath.html\"><span class=\"kw2\">addpath</span></a><span class=\"br0\">(</span>newdir<span class=\"br0\">)</span>;<br/>  <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/path.html\"><span class=\"kw2\">path</span></a><span class=\"br0\">(</span>newdir,<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/path.html\"><span class=\"kw2\">path</span></a><span class=\"br0\">)</span>;       <span class=\"co1\">% same as before</span></pre>"}, {"lang": "Maxima", "loc": 4, "block": "<pre class=\"text highlighted_source\">load(\"c:/.../source.mac\")$<br/>\u00a0<br/>/* or if source.mac is in Maxima search path (see\u00a0??file_search_maxima), simply */<br/>load(source)$</pre>"}, {"lang": "Modula-2", "loc": 1, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">IMPORT</span>  InOut<span class=\"sy0\">,</span> NumConv<span class=\"sy0\">,</span> Strings;</pre>"}, {"lang": "Modula-3", "loc": 2, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"kw1\">IMPORT</span> IO<span class=\"sy0\">,</span> Text <span class=\"kw1\">AS</span> Str;<br/><span class=\"kw1\">FROM</span> Str <span class=\"kw1\">IMPORT</span> T</pre>"}, {"lang": "Nemerle", "loc": 1, "block": "<pre class=\"text highlighted_source\">using System.Console;</pre>"}, {"lang": "NewLISP", "loc": 5, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"co1\">;; local file</span><br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#load\"><span class=\"kw1\">load</span></a> <span class=\"st0\">\"file.lsp\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; URLs (both http:// and file:// URLs are supported)</span><br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#load\"><span class=\"kw1\">load</span></a> <span class=\"st0\">\"http://www.newlisp.org/code/modules/ftp.lsp\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Nim", "loc": 4, "block": "<pre class=\"text highlighted_source\">import someModule<br/>import strutils except parseInt<br/>import strutils as su, sequtils as qu # su.x works<br/>import lib.pure.strutils, lib/pure/os, \"lib/pure/times\" # still strutils.x</pre>"}, {"lang": "OASYS Assembler", "loc": 1, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"sy0\">#</span>use <span class=\"st0\">\"some_file.ml\"</span></pre>"}, {"lang": "OCaml", "loc": 1, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"sy0\">#</span>use <span class=\"st0\">\"some_file.ml\"</span></pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">\"filename\" load</pre>"}, {"lang": "ooRexx", "loc": 1, "block": "<pre class=\"oorexx highlighted_source\">  \u00a0::requires <span class=\"st0\">\"regex.cls\"</span></pre>"}, {"lang": "OpenEdge/Progress", "loc": 1, "block": "<pre class=\"progress highlighted_source\"><span class=\"br0\">{</span>file<span class=\"sy0\">.</span>i<span class=\"br0\">}</span></pre>"}, {"lang": "Openscad", "loc": 5, "block": "<pre class=\"text highlighted_source\">//Include and run the file foo.scad<br/>include &lt;foo.scad&gt;;<br/>\u00a0<br/>//Import modules and functions, but do not execute<br/>use &lt;bar.scad&gt;;</pre>"}, {"lang": "PARI/GP", "loc": 3, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!/usr/bin/perl</span><br/><span class=\"kw1\">do</span> <span class=\"st0\">\"include.pl\"</span><span class=\"sy0\">;</span>        <span class=\"co1\"># Utilize source from another file</span><br/>sayhello<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Pascal", "loc": 3, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!/usr/bin/perl</span><br/><span class=\"kw1\">do</span> <span class=\"st0\">\"include.pl\"</span><span class=\"sy0\">;</span>        <span class=\"co1\"># Utilize source from another file</span><br/>sayhello<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl", "loc": 3, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!/usr/bin/perl</span><br/><span class=\"kw1\">do</span> <span class=\"st0\">\"include.pl\"</span><span class=\"sy0\">;</span>        <span class=\"co1\"># Utilize source from another file</span><br/>sayhello<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 1, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">use</span> MyModule<span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 1, "block": "<pre class=\"text highlighted_source\">include arwen.ew</pre>"}, {"lang": "PHP", "loc": 1, "block": "<pre class=\"php highlighted_source\"><span class=\"kw1\">include</span><span class=\"br0\">(</span><span class=\"st0\">\"file.php\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "PicoLisp", "loc": 1, "block": "<pre class=\"text highlighted_source\">(load \"file1.l\" \"file2.l\" \"file3.l\")</pre>"}, {"lang": "PL/I", "loc": 1, "block": "<pre class=\"pli highlighted_source\">%include myfile<span class=\"sy0\">;</span></pre>"}, {"lang": "PowerBASIC", "loc": 2, "block": "<pre class=\"text highlighted_source\">#INCLUDE \"Win32API.inc\"<br/>#INCLUDE ONCE \"Win32API.inc\"</pre>"}, {"lang": "PowerShell", "loc": 16, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"coMULTI\">&lt;#<br/>    A module is a set of related Windows PowerShell functionalities, grouped together as a convenient unit (usually saved in a<br/>    single directory). By defining a set of related script files, assemblies, and related resources as a module, you can<br/>    reference, load, persist, and share your code much easier than you would otherwise.<br/>#&gt;</span><br/>\u00a0<br/>Import<span class=\"sy0\">-</span>Module <span class=\"kw5\">-Name</span> MyModule<br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\">&lt;#<br/>    When you dot source a script (or scriptblock), all variables and functions defined in the script (or scriptblock) will<br/>    persist in the shell when the script ends.<br/>#&gt;</span><br/>. .\\MyFunctions.ps1<br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 1, "block": "<pre class=\"prolog highlighted_source\"><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">consult</span></a><span class=\"br0\">(</span><span class=\"st_h\">'filename'</span><span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 1, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">IncludeFile</span> <span class=\"st0\">\"Filename\"</span></pre>"}, {"lang": "Python", "loc": 1, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> mymodule</pre>"}, {"lang": "R", "loc": 1, "block": "<pre class=\"text highlighted_source\">source(\"filename.R\")</pre>"}, {"lang": "Racket", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(include \"other-file.rkt\")<br/>\u00a0</pre>"}, {"lang": "RapidQ", "loc": 3, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/>$INCLUDE <span class=\"st0\">\"RAPIDQ.INC\"</span><br/>\u00a0</pre>"}, {"lang": "Retro", "loc": 1, "block": "<pre class=\"text highlighted_source\">include filename.ext</pre>"}, {"lang": "REXX", "loc": 1, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*%INCLUDE member */</span></pre>"}, {"lang": "RPG", "loc": 13, "block": "<pre class=\"text highlighted_source\">      // fully qualified syntax:<br/>      /include library/file,member<br/>\u00a0<br/>      // most sensible; file found on *libl:<br/>      /include file,member<br/>\u00a0<br/>      // shortest one, the same library and file:<br/>      /include member<br/>\u00a0<br/>      // and alternative:<br/>      /copy library/file,member<br/>\u00a0<br/>      //... farther like \"include\"</pre>"}, {"lang": "Ring", "loc": 1, "block": "<pre class=\"text highlighted_source\">Load 'file.ring'</pre>"}, {"lang": "Ruby", "loc": 1, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'file'</span></pre>"}, {"lang": "Run BASIC", "loc": 2, "block": "<pre class=\"text highlighted_source\">run SomeProgram.bas\",#include         ' this gives it a handle of #include<br/>render #include                       ' render will RUN the program with handle #include</pre>"}, {"lang": "Rust", "loc": 5, "block": "<pre class=\"text highlighted_source\">mod test<br/>\u00a0<br/>fn main() {<br/>    test::some_function();<br/>}</pre>"}, {"lang": "Scala", "loc": 1, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";</pre>"}, {"lang": "Seed7", "loc": 1, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";</pre>"}, {"lang": "Sidef", "loc": 1, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">include</span> <span class=\"st0\">'file.sf'</span>;</pre>"}, {"lang": "Smalltalk", "loc": 1, "block": "<pre class=\"smalltalk highlighted_source\">aFilename asFilename readStream fileIn</pre>"}, {"lang": "SNOBOL4", "loc": 1, "block": "<pre class=\"text highlighted_source\">-INCLUDE \"path/to/filename.inc\"</pre>"}, {"lang": "SPL", "loc": 1, "block": "<pre class=\"text highlighted_source\">$include.txt</pre>"}, {"lang": "Standard ML", "loc": 1, "block": "<pre class=\"text highlighted_source\">use \"path/to/file\";</pre>"}, {"lang": "Tcl", "loc": 1, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">source</span> <span class=\"st0\">\"foobar.tcl\"</span></pre>"}, {"lang": "UNIX Shell", "loc": 1, "block": "<pre class=\"bash highlighted_source\">. myfile.sh    <span class=\"co0\"># Include the contents of myfile.sh </span></pre>"}, {"lang": "Ursa", "loc": 1, "block": "<pre class=\"text highlighted_source\">import \"filename.u\"</pre>"}, {"lang": "Vala", "loc": 1, "block": "<pre>valac maps.vala --pkg gee-1.0\n</pre>"}, {"lang": "VBScript", "loc": 10, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/>Include <span class=\"st0\">\"D:\\include\\pad.vbs\"</span><br/>\u00a0<br/>Wscript.Echo lpad(12,14,<span class=\"st0\">\"-\"</span>)<br/>\u00a0<br/><span class=\"kw2\">Sub</span> Include (file)<br/>   <span class=\"kw4\">dim</span> fso: <span class=\"kw4\">set</span> fso = <span class=\"kw2\">CreateObject</span>(<span class=\"st0\">\"Scripting.FileSystemObject\"</span>)<br/>   <span class=\"kw3\">if</span> fso.FileExists(file) <span class=\"kw3\">then</span> ExecuteGlobal fso.OpenTextFile(file).ReadAll<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0</pre>"}, {"lang": "Verbexx", "loc": 33, "block": "<pre class=\"text highlighted_source\">/******************************************************************************* <br/>*   /#   @INCLUDE file:\"filename.filetype\"     <br/>*        - file: is just the filename <br/>*        - actual full pathname is VERBEXX_INCLUDE_PATH\\filename.filetype  <br/>*          where VERBEXX_INCLUDE_PATH is the contents of an environment variable<br/>*<br/>*   /#   @INCLUDE file:\"E:\\xxx\\xxx\\xxx\\filename.filetype\"<br/>*        - file: specifies the complete pathname of file to include<br/>*   <br/>*   @INCLUDE verb can appear only in pre-processor code (after /#  /{  etc.) <br/>*******************************************************************************/<br/>\u00a0<br/>/{  //////////////////////////////////////////////// start of pre-processor code<br/>\u00a0<br/>    @IF (@IS_VAR include_counter) <br/>        else:{@VAR include_counter global: = 0};  // global, so all code sees it<br/>\u00a0<br/>    include_counter++; <br/>    @SAY \"    In pre-processor -- include counter = \" include_counter; <br/>\u00a0<br/>    @IF (include_counter &lt; 3) <br/>        then:{@INCLUDE file:\"rosetta\\include_a_file.txt\"};     // include self<br/>\u00a0<br/>}/  ////////////////////////////////////////////////// end of pre-processor code<br/>\u00a0<br/>@SAY \"Not in pre-processor -- include_counter = \" include_counter;<br/>/]<br/>Output:      In preprocessor -- include_counter = 1<br/>             In preprocessor -- include_counter = 2<br/>             In preprocessor -- include_counter = 3 <br/>         Not in preprocessor -- include_counter = 3 <br/>         Not in preprocessor -- include_counter = 3<br/>         Not in preprocessor -- include_counter = 3</pre>"}, {"lang": "x86 Assembly", "loc": 1, "block": "<pre class=\"asm highlighted_source\">include <span class=\"st0\">'MyFile.INC'</span></pre>"}, {"lang": "XPL0", "loc": 2, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\stdlib;<br/>DateOut(0, GetDate)</pre>"}, {"lang": "zkl", "loc": 1, "block": "<pre class=\"text highlighted_source\">include(vm.h.zkl, compiler.h.zkl, zkl.h.zkl, opcode.h.zkl);</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 7, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">9950</span><br/><span class=\"nu0\">5000</span> <span class=\"co3\">REM We reserve line numbers 5000 to 8999 for merged code</span><br/><span class=\"nu0\">9000</span> STOP: <span class=\"co3\">REM In case our line numbers are wrong</span><br/><span class=\"nu0\">9950</span> <span class=\"co3\">REM Merge in our module</span><br/><span class=\"nu0\">9955</span> MERGE <span class=\"st0\">\"MODULE\"</span><br/><span class=\"nu0\">9960</span> <span class=\"co3\">REM Jump to the merged code. Pray it has the right line numbers!</span><br/><span class=\"nu0\">9965</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">5000</span> </pre>"}]}