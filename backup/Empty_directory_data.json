{"task": "Empty_directory", "blocks": [{"lang": "Ada", "loc": 24, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Directories</span>;<br/><span class=\"kw3\">procedure</span> EmptyDir <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">function</span> Empty <span class=\"br0\">(</span>path\u00a0: String<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Directories</span>;<br/>      result\u00a0: String\u00a0:= <span class=\"st0\">\"Is empty.\"</span>;<br/>      <span class=\"kw3\">procedure</span> check <span class=\"br0\">(</span>ent\u00a0: Directory_Entry_Type<span class=\"br0\">)</span> <span class=\"kw1\">is</span> <span class=\"kw1\">begin</span><br/>         <span class=\"kw1\">if</span> Simple_Name <span class=\"br0\">(</span>ent<span class=\"br0\">)</span> /= <span class=\"st0\">\".\"</span> <span class=\"kw2\">and</span> Simple_Name <span class=\"br0\">(</span>ent<span class=\"br0\">)</span> /= <span class=\"st0\">\"..\"</span> <span class=\"kw1\">then</span><br/>            Empty.<span class=\"me1\">result</span>\u00a0:= <span class=\"st0\">\"Not empty\"</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> check;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> <span class=\"kw2\">not</span> Exists <span class=\"br0\">(</span>path<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"Does not exist.\"</span>;<br/>      <span class=\"kw1\">elsif</span> Kind <span class=\"br0\">(</span>path<span class=\"br0\">)</span> /= Directory <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"Not a Directory.\"</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      Search <span class=\"br0\">(</span>path, <span class=\"st0\">\"\"</span>, Process =&gt; check'<span class=\"kw3\">Access</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">return</span> result;<br/>   <span class=\"kw1\">end</span> Empty;<br/><span class=\"kw1\">begin</span><br/>   Put_Line <span class=\"br0\">(</span>Empty <span class=\"br0\">(</span><span class=\"st0\">\".\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Put_Line <span class=\"br0\">(</span>Empty <span class=\"br0\">(</span><span class=\"st0\">\"./empty\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Put_Line <span class=\"br0\">(</span>Empty <span class=\"br0\">(</span><span class=\"st0\">\"./emptydir.adb\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Put_Line <span class=\"br0\">(</span>Empty <span class=\"br0\">(</span><span class=\"st0\">\"./foobar\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> EmptyDir;</pre>"}, {"lang": "ALGOL 68", "loc": 32, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># returns TRUE if the specified directory is empty, FALSE if it doesn't exist or is non-empty #</span><br/><span class=\"kw4\">PROC</span> is empty directory <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> directory <span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span><br/>     <span class=\"kw2\">IF</span> <span class=\"kw8\">NOT</span> file is directory<span class=\"br0\">(</span> directory <span class=\"br0\">)</span><br/>     <span class=\"kw2\">THEN</span><br/>         <span class=\"coMULTI\"># directory doesn't exist #</span><br/>         <span class=\"kw7\">FALSE</span><br/>     <span class=\"kw2\">ELSE</span><br/>         <span class=\"coMULTI\"># directory is empty if it contains no files or just \".\" and possibly \"..\" #</span><br/>         <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">STRING</span> files   <span class=\"sy1\">=</span> get directory<span class=\"br0\">(</span> directory <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>         <span class=\"kw3\">BOOL</span>     result <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span><br/>         <span class=\"kw2\">FOR</span> f <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> files <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> files<br/>         <span class=\"kw2\">WHILE</span> result <span class=\"sy1\">:=</span> files<span class=\"br0\">[</span> f <span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">\".\"</span> <span class=\"kw16\">OR</span> files<span class=\"br0\">[</span> f <span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"..\"</span><br/>         <span class=\"kw2\">DO</span><br/>             <span class=\"kw7\">SKIP</span><br/>         <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>         result<br/>     <span class=\"kw2\">FI</span> <span class=\"coMULTI\"># is empty directory #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># test the is empty directory procedure #</span><br/><span class=\"coMULTI\"># show whether the directories specified on the command line ( following \"-\" ) are empty or not #</span><br/><span class=\"kw3\">BOOL</span> directory name parameter <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span><br/><span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> <span class=\"kw27\">argc</span> <span class=\"kw2\">DO</span><br/>    <span class=\"kw2\">IF</span> <span class=\"kw27\">argv</span><span class=\"br0\">(</span> i <span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"-\"</span><br/>    <span class=\"kw2\">THEN</span><br/>        <span class=\"coMULTI\"># marker to indicate directory names follow #</span><br/>        directory name parameter <span class=\"sy1\">:=</span> <span class=\"kw7\">TRUE</span><br/>    <span class=\"kw2\">ELIF</span> directory name parameter<br/>    <span class=\"kw2\">THEN</span><br/>        <span class=\"coMULTI\"># have a directory name - report whether it is emty or not #</span><br/>        <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw27\">argv</span><span class=\"br0\">(</span> i <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\" is \"</span><span class=\"sy1\">,</span> <span class=\"kw2\">IF</span> is empty directory<span class=\"br0\">(</span> <span class=\"kw27\">argv</span><span class=\"br0\">(</span> i <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw2\">THEN</span> <span class=\"st0\">\"empty\"</span> <span class=\"kw2\">ELSE</span> <span class=\"st0\">\"not empty\"</span> <span class=\"kw2\">FI</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"kw2\">FI</span><br/><span class=\"kw2\">OD</span></pre>"}, {"lang": "AutoHotkey", "loc": 7, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% isDir_empty<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_ScriptDir\"><span class=\"kw2\">A_ScriptDir</span></a><span class=\"br0\">)</span>?<span class=\"st0\">\"true\"</span>:<span class=\"st0\">\"false\"</span><br/>\u00a0<br/>isDir_empty<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%p%</span>\\<span class=\"sy0\">*</span> <span class=\"sy0\">,</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 39, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f EMPTY_DIRECTORY.AWK</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    n = <span class=\"kw4\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"C:<span class=\"es0\">\\\\</span>TEMP3,C:<span class=\"es0\">\\\\</span>NOTHERE,C:<span class=\"es0\">\\\\</span>AWK<span class=\"es0\">\\\\</span>FILENAME,C:<span class=\"es0\">\\\\</span>WINDOWS\"</span>,arr,<span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;=</span>n; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"'%s'\u00a0%s<span class=\"es0\">\\n</span>\"</span>,arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span>,is_dir<span class=\"br0\">(</span>arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> is_dir<span class=\"br0\">(</span>path,  cmd,dots,entries,msg,rec,valid_dir<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    cmd = <span class=\"kw4\">sprintf</span><span class=\"br0\">(</span><span class=\"st0\">\"DIR\u00a0%s 2&gt;NUL\"</span>,path<span class=\"br0\">)</span> <span class=\"co1\"># MS-Windows</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>cmd | <span class=\"kw5\">getline</span> rec<span class=\"br0\">)</span> <span class=\"sy2\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>rec <span class=\"sy4\">~</span> <span class=\"sy3\">/</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy3\">-</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy5\">:</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy3\">-</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy3\">-</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>rec <span class=\"sy4\">~</span> <span class=\"sy3\">/</span> <span class=\"br0\">(</span>\\.|\\.\\.<span class=\"br0\">)</span>$<span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># . or ..</span><br/>          dots<span class=\"sy3\">++</span><br/>          <span class=\"kw1\">continue</span><br/>        <span class=\"br0\">}</span><br/>        entries<span class=\"sy3\">++</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>rec <span class=\"sy4\">~</span> <span class=\"sy3\">/</span> Dir\\<span class=\"br0\">(</span>s\\<span class=\"br0\">)</span> .<span class=\"sy3\">*</span> bytes free$<span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        valid_dir = <span class=\"nu0\">1</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw5\">close</span><span class=\"br0\">(</span>cmd<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>valid_dir <span class=\"sy2\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      msg = <span class=\"st0\">\"does not exist\"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>valid_dir <span class=\"sy2\">==</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&amp;&amp;</span> entries <span class=\"sy2\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      msg = <span class=\"st0\">\"is an empty directory\"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dots <span class=\"sy2\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">&amp;&amp;</span> entries <span class=\"sy2\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      msg = <span class=\"st0\">\"is a file\"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>      msg = <span class=\"kw4\">sprintf</span><span class=\"br0\">(</span><span class=\"st0\">\"is a directory with\u00a0%d entries\"</span>,entries<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw6\">return</span><span class=\"br0\">(</span>msg<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BaCon", "loc": 19, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' empty directory test</span><br/>somedir$ = <span class=\"st0\">\"somedir\"</span><br/>files = testdir<span class=\"br0\">(</span>somedir$<span class=\"br0\">)</span><br/><span class=\"kw1\">IF</span> files = <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">PRINT</span> somedir$, <span class=\"st0\">\" directory empty\"</span><br/>\u00a0<br/>files = testdir<span class=\"br0\">(</span><span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">PRINT</span> <span class=\"st0\">\"Current directory holds \"</span>, files, <span class=\"st0\">\" files\"</span><br/><span class=\"kw1\">END</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> testdir<span class=\"br0\">(</span>somedir$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">OPEN</span> somedir$ <span class=\"kw1\">FOR</span> DIRECTORY <span class=\"kw1\">AS</span> adir<br/>    total = <span class=\"nu0\">0</span><br/>    REPEAT<br/>        GETFILE afile$ FROM adir<br/>        <span class=\"kw1\">IF</span> afile$\u00a0!= <span class=\"st0\">\".\"</span> AND afile$\u00a0!= <span class=\"st0\">\"..\"</span> AND afile$\u00a0!= <span class=\"st0\">\"\"</span> <span class=\"kw1\">THEN</span> INCR total<br/>    <span class=\"kw1\">UNTIL</span> ISFALSE<span class=\"br0\">(</span><span class=\"kw1\">LEN</span><span class=\"br0\">(</span>afile$<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw1\">long</span><span class=\"br0\">)</span>adir\u00a0!= <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">CLOSE</span> DIRECTORY adir<br/>    <span class=\"kw1\">RETURN</span> total<br/><span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span></pre>"}, {"lang": "Batch File", "loc": 30, "block": "<pre class=\"dos highlighted_source\"><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> \"<span class=\"sy0\">%</span><span class=\"re3\">~1</span>\"==\"\" <a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b 3<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"samp_path=<span class=\"sy0\">%</span><span class=\"re3\">~1</span>\"<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"tst_var=\"<br/>\u00a0<br/>\t<span class=\"sy0\">%</span><span class=\"re3\">== Store the current directory of the CMD ==</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /f <span class=\"sy0\">%%</span><span class=\"re3\">T</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>'<a href=\"http://www.ss64.com/nt/cd.html\"><span class=\"kw3\">cd</span></a>'<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> curr_dir=<span class=\"sy0\">%%</span><span class=\"re3\">T</span><br/>\u00a0<br/>\t<span class=\"sy0\">%</span><span class=\"re3\">== Go to the samp_path ==</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/cd.html\"><span class=\"kw3\">cd</span></a> <span class=\"sy0\">%</span><span class=\"re3\">samp_path</span><span class=\"sy0\">%</span> 2<span class=\"sy0\">&gt;</span><a href=\"http://www.ss64.com/nt/nul.html\"><span class=\"kw4\">nul</span></a> <span class=\"sy0\">||</span><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">folder_not_found</span><br/>\u00a0<br/>\t<span class=\"sy0\">%</span><span class=\"re3\">== The current directory is now samp_path ==</span><span class=\"sy0\">%</span><br/>\t<span class=\"sy0\">%</span><span class=\"re3\">== Scan what is inside samp_path ==</span><span class=\"sy0\">%</span>\t<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /f \"usebackq delims=\" <span class=\"sy0\">%%</span><span class=\"re3\">D</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span><br/>\t`<a href=\"http://www.ss64.com/nt/dir.html\"><span class=\"kw3\">dir</span></a> /b 2<span class=\"co3\">^&gt;</span><a href=\"http://www.ss64.com/nt/nul.html\"><span class=\"kw4\">nul</span></a> <span class=\"co3\">^&amp;</span> <a href=\"http://www.ss64.com/nt/dir.html\"><span class=\"kw3\">dir</span></a> /b /ah 2<span class=\"co3\">^&gt;</span><a href=\"http://www.ss64.com/nt/nul.html\"><span class=\"kw4\">nul</span></a>`<br/><span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"tst_var=1\"<br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> \"<span class=\"sy0\">%</span><span class=\"re3\">tst_var</span><span class=\"sy0\">%</span>\"==\"1\" <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> \"<span class=\"sy0\">%</span><span class=\"re3\">samp_path</span><span class=\"sy0\">%</span>\" is <a href=\"http://www.ss64.com/nt/not.html\"><span class=\"kw2\">NOT</span></a> empty.<br/>\t<a href=\"http://www.ss64.com/nt/cd.html\"><span class=\"kw3\">cd</span></a> <span class=\"sy0\">%</span><span class=\"re3\">curr_dir</span><span class=\"sy0\">%</span><br/>\t<a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b 1<br/><span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/else.html\"><span class=\"kw1\">else</span></a> <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> \"<span class=\"sy0\">%</span><span class=\"re3\">samp_path</span><span class=\"sy0\">%</span>\" is empty.<br/>\t<a href=\"http://www.ss64.com/nt/cd.html\"><span class=\"kw3\">cd</span></a> <span class=\"sy0\">%</span><span class=\"re3\">curr_dir</span><span class=\"sy0\">%</span><br/>\t<a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b 0<br/><span class=\"sy0\">)</span><br/>\u00a0<br/>:<span class=\"re0\">folder_not_found</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> Folder <a href=\"http://www.ss64.com/nt/not.html\"><span class=\"kw2\">not</span></a> found.<br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b 2</pre>"}, {"lang": "BBC BASIC", "loc": 17, "block": "<pre class=\"text highlighted_source\">      IF FNisdirectoryempty(\"C:\\\") PRINT \"C:\\ is empty\" ELSE PRINT \"C:\\ is not empty\"<br/>      IF FNisdirectoryempty(\"C:\\temp\") PRINT \"C:\\temp is empty\" ELSE PRINT \"C:\\temp is not empty\"<br/>      END<br/>\u00a0<br/>      DEF FNisdirectoryempty(dir$)<br/>      LOCAL dir%, sh%, res%<br/>      DIM dir% LOCAL 317<br/>      IF RIGHT$(dir$)&lt;&gt;\"\\\" dir$ += \"\\\"<br/>      SYS \"FindFirstFile\", dir$+\"*\", dir% TO sh%<br/>      IF sh% = -1 ERROR 100, \"Directory doesn't exist\"<br/>      res% = 1<br/>      REPEAT<br/>        IF $$(dir%+44)&lt;&gt;\".\" IF $$(dir%+44)&lt;&gt;\"..\" EXIT REPEAT<br/>        SYS \"FindNextFile\", sh%, dir% TO res%<br/>      UNTIL res% == 0<br/>      SYS \"FindClose\", sh%<br/>      = (res% == 0)</pre>"}, {"lang": "C", "loc": 40, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;dirent.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> dir_empty<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>path<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">struct</span> dirent <span class=\"sy0\">*</span>ent<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> ret <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tDIR <span class=\"sy0\">*</span>d <span class=\"sy0\">=</span> opendir<span class=\"br0\">(</span>path<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>d<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span> <span class=\"st0\">\"%s: \"</span><span class=\"sy0\">,</span> path<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/perror.html\"><span class=\"kw3\">perror</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>ent <span class=\"sy0\">=</span> readdir<span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcmp.html\"><span class=\"kw3\">strcmp</span></a><span class=\"br0\">(</span>ent<span class=\"sy0\">-&gt;</span>d_name<span class=\"sy0\">,</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcmp.html\"><span class=\"kw3\">strcmp</span></a><span class=\"br0\">(</span>ent<span class=\"sy0\">-&gt;</span>d_name<span class=\"sy0\">,</span> <span class=\"st0\">\"..\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\t\tret <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tclosedir<span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> ret<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> c<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">**</span>v<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> ret <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> i<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> c<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tret <span class=\"sy0\">=</span> dir_empty<span class=\"br0\">(</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>ret <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s:\u00a0%sempty<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> ret <span class=\"sy0\">?</span> <span class=\"st0\">\"\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"not \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 18, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;boost/filesystem.hpp&gt;</span><br/>\u00a0<br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> boost<span class=\"sy4\">::</span><span class=\"me2\">filesystem</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> argc<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        path p<span class=\"br0\">(</span>argv<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>exists<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"sy3\">&amp;&amp;</span> is_directory<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"'\"</span> <span class=\"sy1\">&lt;&lt;</span> argv<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"' is\"</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span><span class=\"sy3\">!</span>is_empty<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"sy4\">?</span> <span class=\"st0\">\" not\"</span> <span class=\"sy4\">:</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" empty<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">else</span><br/>            std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"dir '\"</span> <span class=\"sy1\">&lt;&lt;</span> argv<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"' could not be found<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 20, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.IO</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span> <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span> <span class=\"kw4\">string</span> dir <span class=\"kw1\">in</span> args <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span> <span class=\"st0\">\"'{0}' {1} empty\"</span>, dir, IsDirectoryEmpty<span class=\"br0\">(</span> dir <span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"is\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"is not\"</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> IsDirectoryEmpty<span class=\"br0\">(</span> <span class=\"kw4\">string</span> dir <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">(</span> Directory<span class=\"sy0\">.</span><span class=\"me1\">GetFiles</span><span class=\"br0\">(</span> dir <span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span><br/>            Directory<span class=\"sy0\">.</span><span class=\"me1\">GetDirectories</span><span class=\"br0\">(</span> dir <span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 6, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span>require '<span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>java<span class=\"sy0\">.</span>io\u00a0:<span class=\"me1\">as</span> io<span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> empty<span class=\"sy0\">-</span>dir? <span class=\"br0\">[</span>path<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>file <span class=\"br0\">(</span>io<span class=\"sy0\">/</span>file path<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>assert <span class=\"br0\">(</span><span class=\"sy0\">.</span>exists file<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>assert <span class=\"br0\">(</span><span class=\"sy0\">.</span>isDirectory file<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">-&gt;</span> file <span class=\"sy0\">.</span>list <span class=\"kw1\">empty?</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; .list ignores \".\" and \"..\"</span></pre>"}, {"lang": "CoffeeScript", "loc": 9, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/>fs = require <span class=\"st0\">'fs'</span><br/>\u00a0<br/>is_empty_dir = <span class=\"br0\">(</span>dir<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"kw1\">throw</span> Error <span class=\"st0\">\"#{dir} is not a dir\"</span> <span class=\"kw1\">unless</span> fs.<span class=\"me1\">statSync</span><span class=\"br0\">(</span>dir<span class=\"br0\">)</span>.<span class=\"me1\">isDirectory</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"co1\"># readdirSync does not return . or ..</span><br/>  fns = fs.<span class=\"me1\">readdirSync</span> dir<br/>  fns.<span class=\"me1\">length</span> == <span class=\"nu0\">0</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 5, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> empty-directory-p <span class=\"br0\">(</span>path<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"kw1\">null</span> <span class=\"br0\">(</span>directory <span class=\"br0\">(</span>concatenate 'string path <span class=\"st0\">\"/*\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">null</span> <span class=\"br0\">(</span>directory <span class=\"br0\">(</span>concatenate 'string path <span class=\"st0\">\"/*/\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 12, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">file</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> dir <span class=\"sy0\">=</span> <span class=\"st0\">\"somedir\"</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>dir <span class=\"sy0\">~</span> <span class=\"st0\">\" is empty: \"</span><span class=\"sy0\">,</span> dirEmpty<span class=\"br0\">(</span>dir<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> dirEmpty<span class=\"br0\">(</span><span class=\"kw4\">string</span> dirname<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>exists<span class=\"br0\">(</span>dirname<span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"sy0\">!</span>isDir<span class=\"br0\">(</span>dirname<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">throw</span> <span class=\"kw2\">new</span> <span class=\"kw3\">Exception</span><span class=\"br0\">(</span><span class=\"st0\">\"dir not found: \"</span> <span class=\"sy0\">~</span> dirname<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> dirEntries<span class=\"br0\">(</span>dirname<span class=\"sy0\">,</span> SpanMode.<span class=\"me1\">shallow</span><span class=\"br0\">)</span>.<span class=\"me1\">empty</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 2, "block": "<pre class=\"text highlighted_source\">path = hd(System.argv)<br/>IO.puts File.dir?(path) and Enum.empty?( File.ls!(path) )</pre>"}, {"lang": "Erlang", "loc": 1, "block": "<pre>3&gt; {ok, []} = file:list_dir_all(\"/usr\").   \n** exception error: no match of right hand side value \n                    {ok,[\"X11R6\",\"X11\",\"standalone\",\"share\",\"sbin\",\"local\",\n                         \"libexec\",\"lib\",\"bin\"]}\n4&gt; {ok, []} = file:list_dir_all(\"/asd\").\n** exception error: no match of right hand side value {error,enoent}\n5&gt; {ok, []} = file:list_dir_all(\"./empty\").\n{ok,[]}\n</pre>"}, {"lang": "Factor", "loc": 2, "block": "<pre class=\"text highlighted_source\">USE: io.directories<br/>: empty-directory? ( path --\u00a0? ) directory-entries empty?\u00a0;</pre>"}, {"lang": "FreeBASIC", "loc": 43, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"co2\">#Include \"dir.bi\"</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> IsDirEmpty<span class=\"br0\">(</span>dirPath <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> Boolean<br/>  <span class=\"kw1\">Err</span> = <span class=\"nu0\">0</span><br/>  <span class=\"co1\">' check dirPath is a valid directory</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> fileName = <span class=\"kw1\">Dir</span><span class=\"br0\">(</span>dirPath, fbDirectory<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>fileName<span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>    <span class=\"kw1\">Err</span> = <span class=\"nu0\">1000</span>  <span class=\"co1\">' dirPath is not a valid path</span><br/>    <span class=\"kw1\">Return</span> <span class=\"kw1\">False</span><br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>  <span class=\"co1\">' now check if there are any files/subdirectories in it other than . and ..</span><br/>  <span class=\"kw1\">Dim</span> fileSpec <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> = dirPath + <span class=\"st0\">\"<span class=\"es0\">\\*</span>.*\"</span><br/>  <span class=\"kw1\">Const</span> attribMask = fbNormal <span class=\"kw1\">Or</span> fbHidden <span class=\"kw1\">Or</span> fbSystem <span class=\"kw1\">Or</span> fbDirectory<br/>  <span class=\"kw1\">Dim</span> outAttrib <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><br/>  fileName = <span class=\"kw1\">Dir</span><span class=\"br0\">(</span>fileSpec, attribMask, outAttrib<span class=\"br0\">)</span>  <span class=\"co1\">' get first file</span><br/>  <span class=\"kw1\">Do</span><br/>    <span class=\"kw1\">If</span> fileName &lt;&gt; <span class=\"st0\">\"..\"</span> AndAlso fileName &lt;&gt; <span class=\"st0\">\".\"</span> <span class=\"kw1\">Then</span><br/>      <span class=\"kw1\">If</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>fileName<span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">True</span><br/>      <span class=\"kw1\">Exit</span> <span class=\"kw1\">Do</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    fileName = <span class=\"kw1\">Dir</span>  <span class=\"co1\">' get next file</span><br/>  <span class=\"kw1\">Loop</span><br/>  <span class=\"kw1\">Return</span> <span class=\"kw1\">False</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> outAttrib <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><br/><span class=\"kw1\">Dim</span> dirPath <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> = <span class=\"st0\">\"c:<span class=\"es0\">\\f</span>reebasic<span class=\"es0\">\\d</span>ocs\"</span>  <span class=\"co1\">' known to be empty</span><br/><span class=\"kw1\">Dim</span> empty <span class=\"kw1\">As</span> Boolean = IsDirEmpty<span class=\"br0\">(</span>dirPath<span class=\"br0\">)</span><br/><span class=\"kw1\">Dim</span> e <span class=\"kw1\">As</span> <span class=\"kw1\">Long</span> = <span class=\"kw1\">Err</span><br/><span class=\"kw1\">If</span> e = <span class=\"nu0\">1000</span> <span class=\"kw1\">Then</span><br/>  <span class=\"kw1\">Print</span> <span class=\"st0\">\"'\"</span>; dirPath; <span class=\"st0\">\"' is not a valid directory\"</span><br/>  <span class=\"kw1\">End</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">If</span> empty <span class=\"kw1\">Then</span><br/>  <span class=\"kw1\">Print</span> <span class=\"st0\">\"'\"</span>; dirPath; <span class=\"st0\">\"' is empty\"</span><br/><span class=\"kw1\">Else</span><br/>  <span class=\"kw1\">Print</span> <span class=\"st0\">\"'\"</span>; dirPath; <span class=\"st0\">\"' is not empty\"</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "F#", "loc": 2, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System.<span class=\"me1\">IO</span><br/><span class=\"kw1\">let</span> isEmptyDirectory x <span class=\"sy0\">=</span> <span class=\"br0\">(</span>Directory.<span class=\"me1\">GetFiles</span> x<span class=\"br0\">)</span>.<span class=\"me1\">Length</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> &amp;&amp; <span class=\"br0\">(</span>Directory.<span class=\"me1\">GetDirectories</span> x<span class=\"br0\">)</span>.<span class=\"me1\">Length</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span></pre>"}, {"lang": "Gambas", "loc": 12, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sFolder <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=user+site:http://gambasdoc.org/&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw6\">User</span></a>.<span class=\"me1\">home</span> <span class=\"sy0\">&amp;/</span> <span class=\"st0\">\"Rosetta\"</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sDir <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://gambasdoc.org/help/lang/dir\"><span class=\"kw2\">Dir</span></a><span class=\"br0\">(</span>sFolder<span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sTemp <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sOutput <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">=</span> sfolder <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" is NOT empty\"</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/try\"><span class=\"kw1\">Try</span></a> sTemp <span class=\"sy0\">=</span> sDir<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/><a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> <a href=\"http://gambasdoc.org/help/lang/error\"><span class=\"kw1\">Error</span></a> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> sOutput <span class=\"sy0\">=</span> sfolder <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" is empty\"</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> sOutput<br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "Go", "loc": 28, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>\t<span class=\"st0\">\"fmt\"</span><br/>\t<span class=\"st0\">\"io/ioutil\"</span><br/>\t<span class=\"st0\">\"log\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\tempty<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> IsEmptyDir<span class=\"sy1\">(</span><span class=\"st0\">\"/tmp\"</span><span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>\t\tlog<span class=\"sy3\">.</span>Fatalln<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">if</span> empty <span class=\"sy1\">{</span><br/>\t\tfmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"/tmp is empty<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>\t\tfmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"/tmp is not empty<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> IsEmptyDir<span class=\"sy1\">(</span>name <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span><span class=\"kw4\">bool</span><span class=\"sy1\">,</span> error<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\tentries<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> ioutil<span class=\"sy3\">.</span>ReadDir<span class=\"sy1\">(</span>name<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy1\">,</span> err<br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>entries<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"kw2\">nil</span><br/><span class=\"sy1\">}</span><br/>\u00a0</pre>"}, {"lang": "Groovy", "loc": 4, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> isDirEmpty <span class=\"sy0\">=</span> <span class=\"br0\">{</span> dirName <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> dir <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> <a href=\"http://www.google.de/search?as_q=File&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">File</span></a><span class=\"br0\">(</span>dirName<span class=\"br0\">)</span><br/>    dir.<span class=\"me1\">exists</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> dir.<span class=\"me1\">directory</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>dir.<span class=\"me1\">list</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as\"><span class=\"kw2\">as</span></a> <a href=\"http://www.google.de/search?as_q=List&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">List</span></a><span class=\"br0\">)</span>.<span class=\"me1\">empty</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 9, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Directory <span class=\"br0\">(</span>getDirectoryContents<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Environment <span class=\"br0\">(</span>getArgs<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/>isEmpty x <span class=\"sy0\">=</span> getDirectoryContents x <span class=\"sy0\">&gt;&gt;=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"sy0\">.</span> f <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"sy0\">==</span> <span class=\"br0\">[</span><span class=\"st0\">\".\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"..\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">where</span> f True <span class=\"sy0\">=</span> <span class=\"st0\">\"Directory is empty\"</span><br/>          f False <span class=\"sy0\">=</span> <span class=\"st0\">\"Directory is not empty\"</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> getArgs <span class=\"sy0\">&gt;&gt;=</span> isEmpty <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"sy0\">!!</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;&gt;=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a></pre>"}, {"lang": "Icon and Unicon", "loc": 15, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">every</span> dir <span class=\"sy1\">:=</span> <span class=\"st0\">\".\"</span> <span class=\"sy1\">|</span> <span class=\"st0\">\"./empty\"</span> <span class=\"kw1\">do</span> <br/>      <span class=\"kw4\">write</span><span class=\"br0\">(</span>dir<span class=\"sy1\">,</span> <span class=\"kw1\">if</span> isdirempty<span class=\"br0\">(</span>dir<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"st0\">\" is empty\"</span> <span class=\"kw1\">else</span> <span class=\"st0\">\" is not empty\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> isdirempty<span class=\"br0\">(</span>s<span class=\"br0\">)</span>  <span class=\"co1\">#: succeeds if directory s is empty (and a directory)</span><br/><span class=\"kw2\">local</span> d<span class=\"sy1\">,</span>f<br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"kw4\">stat</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy1\">.</span><span class=\"me1\">mode</span> <span class=\"sy1\">?</span> <span class=\"sy1\">=</span><span class=\"st0\">\"d\"</span> <span class=\"br0\">)</span> <span class=\"sy1\">&amp;</span> <span class=\"br0\">(</span> d <span class=\"sy1\">:=</span> <span class=\"kw4\">open</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>         <span class=\"kw1\">while</span> f <span class=\"sy1\">:=</span> <span class=\"kw4\">read</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <br/>            <span class=\"kw1\">if</span> f <span class=\"sy1\">==</span> <span class=\"br0\">(</span><span class=\"st0\">\".\"</span><span class=\"sy1\">|</span><span class=\"st0\">\"..\"</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">next</span> <span class=\"kw1\">else</span> <span class=\"kw1\">fail</span> <br/>         <span class=\"kw4\">close</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><br/>         <span class=\"kw1\">return</span> s<br/>         <span class=\"br0\">}</span><br/>   <span class=\"kw1\">else</span> <span class=\"kw4\">stop</span><span class=\"br0\">(</span>s<span class=\"sy1\">,</span><span class=\"st0\">\" is not a directory or will not open\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">require <span class=\"st_h\">'dir'</span><br/>empty_dir=: <span class=\"nu0\">0</span> = <span class=\"st_h\">'/*'</span> #@<a class=\"__cf_email__\" data-cfemail=\"c2a6abb082\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>,~ ]</pre>"}, {"lang": "Java", "loc": 5, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">import</span> <span class=\"co2\">java.nio.file.Paths</span><span class=\"sy0\">;</span><br/><span class=\"co1\">//... other class code here</span><br/><span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">boolean</span> isEmptyDir<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> dirName<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw2\">return</span> Paths.<span class=\"me1\">get</span><span class=\"br0\">(</span>dirName<span class=\"br0\">)</span>.<span class=\"me1\">toFile</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">listFiles</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">length</span> == <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 6, "block": "<pre class=\"text highlighted_source\"># v0.6.0<br/>isemptydir(dir::AbstractString) = isempty(readdir(dir))<br/>\u00a0<br/>@show isemptydir(\".\")<br/>@show isemptydir(\"/home\")<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 9, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.4</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"me1\">File</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dirPath <span class=\"sy0\">=</span> <span class=\"st0\">\"docs\"</span> <span class=\"co1\">// or whatever</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> isEmpty <span class=\"sy0\">=</span> <span class=\"br0\">(</span>File<span class=\"br0\">(</span>dirPath<span class=\"br0\">)</span>.<span class=\"me1\">list</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">isEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"$dirPath is ${if (isEmpty) \"</span>empty<span class=\"st0\">\" else \"</span>not empty<span class=\"st0\">\"}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 3, "block": "<pre class=\"text highlighted_source\">dir('has_content') -&gt; isEmpty<br/>'&lt;br /&gt;'<br/>dir('no_content') -&gt; isEmpty</pre>"}, {"lang": "Liberty BASIC", "loc": 17, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/><span class=\"kw1\">dim</span> info$<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/><span class=\"kw1\">files</span> <span class=\"st0\">\"c:\\\"</span><span class=\"sy0\">,</span> info$<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>qtyFiles<span class=\"sy0\">=</span><span class=\"kw2\">val</span><span class=\"br0\">(</span>info$<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>n <span class=\"sy0\">=</span> qtyFiles<span class=\"sy0\">+</span><span class=\"nu0\">1</span>  <span class=\"co1\">'begin directory info</span><br/>\u00a0<br/>folder$ <span class=\"sy0\">=</span> info$<span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>  <span class=\"co1\">'path to first directory in c:</span><br/>\u00a0<br/><span class=\"kw1\">files</span> folder$<span class=\"sy0\">,</span> info$<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">'re-fill array with data from sub folder</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"kw2\">val</span><span class=\"br0\">(</span>info$<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"kw2\">val</span><span class=\"br0\">(</span>info$<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"Folder \"</span>;folder$;<span class=\"st0\">\" is not empty.\"</span><br/><span class=\"kw1\">else</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"Folder \"</span>;folder$;<span class=\"st0\">\" is empty.\"</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0</pre>"}, {"lang": "Lingo", "loc": 3, "block": "<pre class=\"text highlighted_source\">on isDirEmpty (dir)<br/>  return getNthFileNameInFolder(dir, 1) = EMPTY<br/>end</pre>"}, {"lang": "Lua", "loc": 18, "block": "<pre class=\"lua highlighted_source\">\u00a0<br/><span class=\"kw1\">function</span> scandir<span class=\"br0\">(</span>directory<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">local</span> i<span class=\"sy0\">,</span> t<span class=\"sy0\">,</span> popen <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"kw3\">io</span><span class=\"sy0\">.</span>popen<br/>\t<span class=\"kw1\">local</span> pfile <span class=\"sy0\">=</span> popen<span class=\"br0\">(</span><span class=\"st0\">'ls -a \"'</span><span class=\"sy0\">..</span>directory<span class=\"sy0\">..</span><span class=\"st0\">'\"'</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">for</span> filename <span class=\"kw2\">in</span> pfile<span class=\"sy0\">:</span>lines<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>\t\t<span class=\"kw1\">if</span> filename <span class=\"sy0\">~=</span> <span class=\"st0\">'.'</span> <span class=\"kw2\">and</span> filename <span class=\"sy0\">~=</span> <span class=\"st0\">'..'</span> <span class=\"kw1\">then</span><br/>\t\t\ti <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\tt<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> filename<br/>\t\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">end</span><br/>\tpfile<span class=\"sy0\">:</span>close<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">return</span> t<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> isemptydir<span class=\"br0\">(</span>directory<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">return</span> <span class=\"sy0\">#</span>scandir<span class=\"br0\">(</span>directory<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>emptydirectory\u00a0:= proc (dir) <br/>is(listdir(dir) = [\".\", \"..\"]); <br/>end proc;<br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 5, "block": "<pre class=\"text highlighted_source\">EmptyDirectoryQ[x_]\u00a0:= (SetDirectory[x]; If[FileNames[] == {}, True, False])<br/>\u00a0<br/>Example use:<br/>EmptyDirectoryQ[\"C:\\\\Program Files\\\\Wolfram Research\\\\Mathematica\\\\9\"]<br/>-&gt;True</pre>"}, {"lang": "MATLAB / Octave", "loc": 10, "block": "<pre class=\"matlab highlighted_source\">\u00a0<br/>  <span class=\"kw1\">function</span> x = isEmptyDirectory<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> isdir<span class=\"br0\">(</span>p<span class=\"br0\">)</span>\t\t<br/>      f = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/dir.html\"><span class=\"kw2\">dir</span></a><span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>      x = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>f<span class=\"br0\">)</span>&gt;<span class=\"nu0\">2</span>;<br/>    <span class=\"kw1\">else</span> <br/>      <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/error.html\"><span class=\"kw2\">error</span></a><span class=\"br0\">(</span><span class=\"co2\">'Error:\u00a0%s is not a directory'</span><span class=\"br0\">)</span>;     <br/>    <span class=\"kw1\">end</span>; <br/>  <span class=\"kw1\">end</span>; <br/>\u00a0</pre>"}, {"lang": "Nemerle", "loc": 19, "block": "<pre class=\"text highlighted_source\">using System.IO;<br/>using System.Console;<br/>\u00a0<br/>module EmptyDirectory<br/>{<br/>    IsDirectoryEmpty(dir\u00a0: string)\u00a0: bool<br/>    {<br/>        Directory.GetFileSystemEntries(dir).Length == 0<br/>    }<br/>\u00a0<br/>    Main(args\u00a0: array[string])\u00a0: void<br/>    {<br/>        foreach (dir in args) {<br/>            when (Directory.Exists(dir)) {<br/>                WriteLine(\"{0} {1} empty.\", dir, if (IsDirectoryEmpty(dir))  \"is\" else \"is not\");<br/>            }<br/>        }<br/>    }<br/>}</pre>"}, {"lang": "NewLISP", "loc": 5, "block": "<pre class=\"newlisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#define\"><span class=\"kw1\">define</span></a> <span class=\"br0\">(</span>empty<span class=\"sy1\">-</span>dir? path<span class=\"sy1\">-</span>to<span class=\"sy1\">-</span>check<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#empty%3F\"><span class=\"kw1\">empty?</span></a> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#clean\"><span class=\"kw1\">clean</span></a> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#lambda\"><span class=\"kw1\">lambda</span></a> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#or\"><span class=\"kw1\">or</span></a> <span class=\"br0\">(</span><span class=\"sy1\">=</span> <span class=\"st0\">\".\"</span> x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy1\">=</span> <span class=\"st0\">\"..\"</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#directory\"><span class=\"kw1\">directory</span></a> path<span class=\"sy1\">-</span>to<span class=\"sy1\">-</span>check<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 7, "block": "<pre class=\"text highlighted_source\">import os, rdstdin<br/>\u00a0<br/>var empty = true<br/>for f in walkDir(readLineFromStdin \"directory: \"):<br/>  empty = false<br/>  break<br/>echo empty</pre>"}, {"lang": "Objeck", "loc": 3, "block": "<pre class=\"objeck highlighted_source\"><span class=\"kw1\">function</span> <span class=\"sy0\">:</span> IsEmptyDirectory<span class=\"br0\">(</span>dir <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Bool</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> Directory<span class=\"sy0\">-&gt;</span><span class=\"me1\">List</span><span class=\"br0\">(</span>dir<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 2, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> is_dir_empty d <span class=\"sy0\">=</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Sys.html\"><span class=\"kw2\">Sys</span></a><span class=\"sy0\">.</span>readdir d <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">|</span> <span class=\"sy0\">|</span><span class=\"br0\">]</span></pre>"}, {"lang": "ooRexx", "loc": 20, "block": "<pre class=\"oorexx highlighted_source\"><span class=\"kw1\">Call</span> test <span class=\"st0\">'D:\\nodir'</span>        <span class=\"coMULTI\">/* no such directory      */</span><br/><span class=\"kw1\">Call</span> test <span class=\"st0\">'D:\\edir'</span>         <span class=\"coMULTI\">/* an empty directory     */</span><br/><span class=\"kw1\">Call</span> test <span class=\"st0\">'D:\\somedir'</span>      <span class=\"coMULTI\">/* directory with 2 files */</span><br/><span class=\"kw1\">Call</span> test <span class=\"st0\">'D:\\somedir'</span>,<span class=\"st0\">'S'</span>  <span class=\"coMULTI\">/* directory with 3 files */</span><br/><span class=\"kw1\">Exit</span><br/>test: <span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> fd,nest<br/><span class=\"kw1\">If</span> SysIsFileDirectory<span class=\"br0\">(</span>fd<span class=\"br0\">)</span>=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span><br/>  <span class=\"kw1\">Say</span> <span class=\"st0\">'Directory'</span> fd <span class=\"st0\">'not found'</span><br/><span class=\"kw3\">Else</span> <span class=\"kw1\">Do</span><br/>  ret=SysFileTree<span class=\"br0\">(</span>fd<span class=\"st0\">'\\*.*'</span>,<span class=\"st0\">'X'</span>, <span class=\"st0\">'F'</span>nest<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> x<span class=\"sy0\">.</span>0=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span><br/>    <span class=\"kw1\">say</span> <span class=\"st0\">'Directory'</span> fd <span class=\"st0\">'is empty'</span><br/>  <span class=\"kw3\">Else</span> <span class=\"kw1\">Do</span><br/>    <span class=\"kw1\">If</span> nest=<span class=\"st0\">''</span> <span class=\"kw3\">Then</span><br/>      <span class=\"kw1\">say</span> <span class=\"st0\">'Directory'</span> fd <span class=\"st0\">'contains'</span> x<span class=\"sy0\">.</span>0 <span class=\"st0\">'files'</span><br/>    <span class=\"kw3\">Else</span><br/>      <span class=\"kw1\">say</span> <span class=\"st0\">'Directory'</span> fd <span class=\"st0\">'contains'</span> x<span class=\"sy0\">.</span>0 <span class=\"st0\">'files (some nested)'</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Return</span></pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\">chkdir<span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">extern</span><span class=\"br0\">(</span><span class=\"kw1\">concat</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">\"[ -d '\"</span><span class=\"sy0\">,</span>d<span class=\"sy0\">,</span><span class=\"st0\">\"' ]&amp;&amp;ls -A '\"</span><span class=\"sy0\">,</span>d<span class=\"sy0\">,</span><span class=\"st0\">\"'|wc -l||echo -1\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 1, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> dir_is_empty <span class=\"br0\">{</span><span class=\"sy0\">!&lt;</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">/*&gt;</span><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 1, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> dir<span class=\"sy0\">-</span>is<span class=\"sy0\">-</span>empty <span class=\"br0\">(</span><span class=\"re0\">$d</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">not</span> dir <span class=\"re0\">$d</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 27, "block": "<pre class=\"text highlighted_source\">procedure test(string filename)<br/>string msg<br/>    switch get_file_type(filename) do<br/>        case FILETYPE_UNDEFINED: msg = \"is UNDEFINED\"<br/>        case FILETYPE_NOT_FOUND: msg = \"is NOT_FOUND\"<br/>        case FILETYPE_FILE:      msg = \"is a FILE\"<br/>        case FILETYPE_DIRECTORY:<br/>            sequence d = dir(filename)<br/>            integer count = 0<br/>            for i=1 to length(d) do<br/>                if not find(d[i][D_NAME],{\".\",\"..\"}) then<br/>                    count += 1<br/>                end if<br/>            end for<br/>            if count=0 then<br/>                msg = \"is an empty directory\"<br/>            else<br/>                msg = sprintf(\"is a directory containing\u00a0%d files\",{count})<br/>            end if<br/>    end switch<br/>    printf(1,\"%s\u00a0%s\\n\",{filename,msg})<br/>end procedure<br/>\u00a0<br/>constant tests = {\"C:\\\\xx\",\"C:\\\\not_there\",\"C:\\\\Program Files (x86)\\\\Phix\\\\p.exe\",\"C:\\\\Windows\"}<br/>for i=1 to length(tests) do<br/>    test(tests[i])<br/>end for</pre>"}, {"lang": "PHP", "loc": 20, "block": "<pre class=\"php highlighted_source\">\u00a0<br/>\u00a0<br/><span class=\"re0\">$dir</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'path_here'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">if</span><span class=\"br0\">(</span><a href=\"http://www.php.net/is_dir\"><span class=\"kw3\">is_dir</span></a><span class=\"br0\">(</span><span class=\"re0\">$dir</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  <span class=\"co1\">//scandir grabs the contents of a directory and array_diff is being used to filter out .. and .</span><br/>  <span class=\"re0\">$list</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array_diff\"><span class=\"kw3\">array_diff</span></a><span class=\"br0\">(</span><a href=\"http://www.php.net/scandir\"><span class=\"kw3\">scandir</span></a><span class=\"br0\">(</span><span class=\"re0\">$dir</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"st_h\">'..'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'.'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"co1\">//now we can just use empty to check if the variable has any contents regardless of it's type</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span><a href=\"http://www.php.net/empty\"><span class=\"kw3\">empty</span></a><span class=\"br0\">(</span><span class=\"re0\">$list</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw1\">echo</span> <span class=\"st_h\">'dir is empty'</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">else</span><span class=\"br0\">{</span><br/>    <span class=\"kw1\">echo</span> <span class=\"st_h\">'dir is not empty'</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">else</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">echo</span> <span class=\"st_h\">'not a directory'</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "PicoLisp", "loc": 1, "block": "<pre class=\"text highlighted_source\">(prinl \"myDir is\" (and (dir \"myDir\") \" not\") \" empty\")</pre>"}, {"lang": "PowerShell", "loc": 8, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"re0\">$path</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"C:\\Users\"</span><br/><span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw2\">Dir</span> <span class=\"re0\">$path</span><span class=\"br0\">)</span>.Count <span class=\"kw4\">-eq</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">\"$path is empty\"</span><br/><span class=\"br0\">}</span> <span class=\"kw3\">else</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">\"$path is not empty\"</span><br/><span class=\"br0\">}</span> <br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 29, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> isDirEmpty<span class=\"br0\">(</span>path$<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw2\">Right</span><span class=\"br0\">(</span>path$, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"st0\">\"\\\"</span>: path$ <span class=\"sy0\">+</span> <span class=\"st0\">\"\\\"</span>: <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">Protected</span> dirID <span class=\"sy0\">=</span> <span class=\"kw2\">ExamineDirectory</span><span class=\"br0\">(</span>#PB_Any, path$, <span class=\"st0\">\"*.*\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> result<br/>\u00a0<br/>  <span class=\"kw1\">If</span> dirID<br/>    result <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">While</span> <span class=\"kw2\">NextDirectoryEntry</span><span class=\"br0\">(</span>dirID<span class=\"br0\">)</span><br/>      <span class=\"kw1\">If</span> <span class=\"kw2\">DirectoryEntryType</span><span class=\"br0\">(</span>dirID<span class=\"br0\">)</span> <span class=\"sy0\">=</span> #PB_DirectoryEntry_File <span class=\"kw1\">Or</span> <span class=\"br0\">(</span><span class=\"kw2\">DirectoryEntryName</span><span class=\"br0\">(</span>dirID<span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"st0\">\".\"</span> <span class=\"kw1\">And</span> <span class=\"kw2\">DirectoryEntryName</span><span class=\"br0\">(</span>dirID<span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"st0\">\"..\"</span><span class=\"br0\">)</span><br/>        result <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">Break</span><br/>      <span class=\"kw1\">EndIf</span> <br/>    <span class=\"kw1\">Wend</span> <br/>    <span class=\"kw2\">FinishDirectory</span><span class=\"br0\">(</span>dirID<span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndIf</span> <br/>  <span class=\"kw1\">ProcedureReturn</span> result<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Define</span> path$, result$<br/>\u00a0<br/>path$ <span class=\"sy0\">=</span> <span class=\"kw2\">PathRequester</span><span class=\"br0\">(</span><span class=\"st0\">\"Choose a path\"</span>, <span class=\"st0\">\"C:\\\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">If</span> path$<br/>  <span class=\"kw1\">If</span> isDirEmpty<span class=\"br0\">(</span>path$<span class=\"br0\">)</span><br/>    result$ <span class=\"sy0\">=</span> <span class=\"st0\">\" is empty.\"</span><br/>  <span class=\"kw1\">Else</span><br/>    result$ <span class=\"sy0\">=</span> <span class=\"st0\">\" is not empty.\"</span><br/>  <span class=\"kw1\">EndIf</span> <br/>  <span class=\"kw2\">MessageRequester</span><span class=\"br0\">(</span><span class=\"st0\">\"Empty directory test\"</span>, #DQUOTE$ <span class=\"sy0\">+</span> path$ <span class=\"sy0\">+</span> #DQUOTE$ <span class=\"sy0\">+</span> result$<span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span> </pre>"}, {"lang": "Python", "loc": 6, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">os</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">if</span> <span class=\"kw3\">os</span>.<span class=\"me1\">listdir</span><span class=\"br0\">(</span><span class=\"kw2\">raw_input</span><span class=\"br0\">(</span><span class=\"st0\">\"directory\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"not empty\"</span><br/><span class=\"kw1\">else</span>:<br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"empty\"</span><br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(empty? (directory-list \"some-directory\"))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 14, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX pgm checks to see if a directory is empty; if not, lists entries.*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> xdir;  <span class=\"kw1\">if</span> xdir=<span class=\"st0\">''</span> <span class=\"kw3\">then</span> xdir=<span class=\"st0\">'\\someDir'</span> <span class=\"coMULTI\">/*Any DIR? Use default.*/</span><br/>@<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>                                   <span class=\"coMULTI\">/*default in case ADDRESS fails. */</span><br/><span class=\"kw1\">trace</span> <span class=\"kw2\">off</span>                              <span class=\"coMULTI\">/*suppress REXX err msg for fails*/</span><br/><span class=\"kw1\">address</span> system <span class=\"st0\">'DIR'</span> xdir <span class=\"st0\">'/b'</span> <span class=\"kw2\">with</span> output stem @<span class=\"sy0\">.</span>  <span class=\"coMULTI\">/*issue the DIR cmd.*/</span><br/><span class=\"kw1\">if</span> <span class=\"kw4\">rc</span><span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>                                  <span class=\"coMULTI\">/*an error happened?*/</span><br/>                <span class=\"kw1\">say</span> <span class=\"st0\">'***error!*** from DIR'</span> xDIR    <span class=\"coMULTI\">/*indicate que pasa.*/</span><br/>                <span class=\"kw1\">say</span> <span class=\"st0\">'return code='</span>  <span class=\"kw4\">rc</span>              <span class=\"coMULTI\">/*show the ret Code.*/</span><br/>                <span class=\"kw1\">exit</span> <span class=\"kw4\">rc</span>                             <span class=\"coMULTI\">/*exit with the  RC.*/</span><br/>                <span class=\"kw3\">end</span>                                 <span class=\"coMULTI\">/* [\u2191]  bad address.*/</span><br/>#<a class=\"__cf_email__\" data-cfemail=\"f9c4b9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span><span class=\"kw4\">rc</span>                                              <span class=\"coMULTI\">/*number of entries.*/</span><br/><span class=\"kw1\">if</span> #==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> #=<span class=\"st0\">'   no   '</span>                          <span class=\"coMULTI\">/*use a word, \u00aczero.*/</span><br/><span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">'directory '</span> xdir <span class=\"st0\">\" has \"</span>     #     <span class=\"st0\">' entries.'</span>,<span class=\"nu0\">79</span>,<span class=\"st0\">'\u2500'</span><span class=\"br0\">)</span><br/><span class=\"kw1\">exit</span> @<span class=\"sy0\">.</span>0+<span class=\"kw4\">rc</span>                            <span class=\"coMULTI\">/*stick a fork in it, we're done.*/</span></pre>"}, {"lang": "Ring", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>myList = dir(\"C:\\Ring\\bin\")<br/>if len(myList) &gt; 0 see \"C:\\Ring\\bin is not empty\" + nl<br/>else see \"C:\\Ring\\bin is empty\" + nl ok<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 1, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw4\">Dir</span>.<span class=\"me1\">entries</span><span class=\"br0\">(</span><span class=\"st0\">\"testdir\"</span><span class=\"br0\">)</span>.<span class=\"me1\">empty</span>? </pre>"}, {"lang": "Run BASIC", "loc": 4, "block": "<pre class=\"text highlighted_source\">files #f, DefaultDir$ + \"\\*.*\"         ' open some directory. <br/>\u00a0<br/>print \"hasanswer: \";#f HASANSWER()     ' if it has an answer it is not MT<br/>print \"rowcount:  \";#f ROWCOUNT()      ' if not MT, how many files?</pre>"}, {"lang": "Rust", "loc": 20, "block": "<pre class=\"text highlighted_source\">use std::fs::read_dir;<br/>use std::error::Error;<br/>\u00a0<br/>fn main() {<br/>    for path in std::env::args().skip(1) { // iterate over the arguments, skipping the first (which is the executable)<br/>        match read_dir(path.as_str()) { // try to read the directory specified<br/>            Ok(contents) =&gt; {<br/>                let len = contents.collect::&lt;Vec&lt;_&gt;&gt;().len(); // calculate the amount of items in the directory<br/>                if len == 0 {<br/>                    println!(\"{} is empty\", path);<br/>                } else {<br/>                    println!(\"{} is not empty\", path);<br/>                }<br/>            },<br/>            Err(e) =&gt; { // If the attempt failed, print the corresponding error msg<br/>                println!(\"Failed to read directory \\\"{}\\\": {}\", path, e.description());<br/>            }<br/>        }<br/>    }<br/>}</pre>"}, {"lang": "Scala", "loc": 4, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"me1\">File</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> isDirEmpty<span class=\"br0\">(</span>file<span class=\"sy0\">:</span>File<span class=\"br0\">)</span> <span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> file.<span class=\"me1\">exists</span> <span class=\"sy0\">&amp;&amp;</span> file.<span class=\"me1\">isDirectory</span> <span class=\"sy0\">&amp;&amp;</span> file.<span class=\"me1\">list</span>.<span class=\"me1\">isEmpty</span></pre>"}, {"lang": "Seed7", "loc": 10, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"osfiles.s7i\";<br/>\u00a0<br/>const func boolean: dirEmpty (in string: dirName) is<br/>  return fileType(dirName) = FILE_DIR and length(readDir(dirName)) = 0;<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    writeln(dirEmpty(\"somedir\"));<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 1, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw4\">Dir</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"st0\">'/my/dir'</span><span class=\"br0\">)</span>.<span class=\"me1\">is_empty</span>;    <span class=\"co1\"># true, false or nil</span></pre>"}, {"lang": "Standard ML", "loc": 12, "block": "<pre class=\"text highlighted_source\">fun isDirEmpty(path: string) = <br/>  let<br/>    val dir = OS.FileSys.openDir path<br/>    val dirEntryOpt = OS.FileSys.readDir dir<br/>  in<br/>    (<br/>      OS.FileSys.closeDir(dir);<br/>      case dirEntryOpt of <br/>        NONE =&gt; true<br/>      | _    =&gt; false<br/>    )<br/>  end;</pre>"}, {"lang": "Tcl", "loc": 6, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> isEmptyDir <span class=\"br0\">{</span>dir<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\"># Get list of _all_ files in directory</span><br/>    <span class=\"kw1\">set</span> filenames <span class=\"br0\">[</span><span class=\"kw2\">glob</span> -nocomplain -tails -directory <span class=\"re0\">$dir</span> <span class=\"sy0\">*</span> .<span class=\"sy0\">*</span><span class=\"br0\">]</span><br/>    <span class=\"co1\"># Check whether list is empty (after filtering specials)</span><br/>    <span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"br0\">[</span><span class=\"kw2\">lsearch</span> -all -not -<span class=\"kw2\">regexp</span> <span class=\"re0\">$filenames</span> <span class=\"br0\">{</span>^\\.\\.<span class=\"sy0\">?$</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "UNIX Shell", "loc": 5, "block": "<pre class=\"bash highlighted_source\">\u00a0<br/><span class=\"co0\">#!/bin/sh</span><br/><span class=\"re2\">DIR</span>=<span class=\"sy0\">/</span>tmp<span class=\"sy0\">/</span>foo<br/><span class=\"br0\">[</span> <span class=\"sy0\">`</span><span class=\"kw2\">ls</span> <span class=\"re5\">-a</span> <span class=\"re1\">$DIR</span><span class=\"sy0\">|</span><span class=\"kw2\">wc</span> -l<span class=\"sy0\">`</span> <span class=\"re5\">-gt</span> <span class=\"nu0\">2</span> <span class=\"br0\">]</span>  <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw3\">echo</span> <span class=\"re1\">$DIR</span> is NOT empty <span class=\"sy0\">||</span> <span class=\"kw3\">echo</span> <span class=\"re1\">$DIR</span> is empty<br/>\u00a0</pre>"}, {"lang": "VBA", "loc": 11, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Sub</span> Main()<br/>    Debug.<span class=\"kw4\">Print</span> IsEmptyDirectory(<span class=\"st0\">\"C:\\Temp\"</span>)<br/>    Debug.<span class=\"kw4\">Print</span> IsEmptyDirectory(<span class=\"st0\">\"C:\\Temp\\\"</span>)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Function</span> IsEmptyDirectory(D <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span><br/><span class=\"kw4\">Dim</span> Sep <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/>    Sep = Application.PathSeparator<br/>    D = IIf(Right(D, 1) &lt;&gt; Sep, D &amp; Sep, D)<br/>    IsEmptyDirectory = (Dir(D &amp; <span class=\"st0\">\"*.*\"</span>) = <span class=\"st0\">\"\"</span>)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span></pre>"}, {"lang": "VBScript", "loc": 14, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Function</span> IsDirEmpty(path)<br/>\tIsDirEmpty = <span class=\"kw5\">False</span><br/>\t<span class=\"kw4\">Set</span> objFSO = <span class=\"kw2\">CreateObject</span>(<span class=\"st0\">\"Scripting.FileSystemObject\"</span>)<br/>\t<span class=\"kw4\">Set</span> objFolder = objFSO.GetFolder(path)<br/>\t<span class=\"kw3\">If</span> objFolder.Files.Count = 0 <span class=\"kw3\">And</span> objFolder.SubFolders.Count = 0 <span class=\"kw3\">Then</span><br/>\t\tIsDirEmpty = <span class=\"kw5\">True</span><br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"co1\">'Test<br/></span>WScript.StdOut.WriteLine IsDirEmpty(<span class=\"st0\">\"C:\\Temp\"</span>)<br/>WScript.StdOut.WriteLine IsDirEmpty(<span class=\"st0\">\"C:\\Temp\\test\"</span>)<br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 3, "block": "<pre class=\"text highlighted_source\">path:=\"Empty\"; File.isDir(path).println();<br/>File.mkdir(path); File.isDir(path).println();<br/>File.glob(path+\"/*\").println(); // show contents of directory</pre>"}]}