{"task": "2048", "blocks": [{"lang": "AutoHotkey", "loc": 224, "block": "<pre class=\"autohotkey highlighted_source\">Grid <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> s <span class=\"sy0\">:=</span> <span class=\"nu0\">16</span><span class=\"sy0\">,</span> w <span class=\"sy0\">:=</span> h <span class=\"sy0\">:=</span> S <span class=\"sy0\">*</span> <span class=\"nu0\">4.5</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Font\"><span class=\"kw7\">font</span></a><span class=\"sy0\">,</span> s<span class=\"re0\">%s%</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Text\"><span class=\"kw8\">text</span></a><span class=\"sy0\">,</span> y1<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><br/><span class=\"br0\">{</span><br/>\trow <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><br/>\t<span class=\"br0\">{</span><br/>\t\tcol <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>\t\t<span class=\"kw1\">if</span> col <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Button\"><span class=\"kw8\">button</span></a><span class=\"sy0\">,</span> v<span class=\"re0\">%row%</span>_<span class=\"re0\">%col%</span> xs  y<span class=\"sy0\">+</span><span class=\"nu0\">1</span> w<span class=\"re0\">%w%</span> h<span class=\"re0\">%h%</span> <span class=\"sy0\">-</span>TabStop<span class=\"sy0\">,</span>\u00a0% Grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span>col<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw1\">else</span><br/>\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Button\"><span class=\"kw8\">button</span></a><span class=\"sy0\">,</span> v<span class=\"re0\">%row%</span>_<span class=\"re0\">%col%</span> x<span class=\"sy0\">+</span><span class=\"nu0\">1</span> yp  w<span class=\"re0\">%w%</span> h<span class=\"re0\">%h%</span>  <span class=\"sy0\">-</span>TabStop<span class=\"sy0\">,</span>\u00a0% Grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span>col<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Show\"><span class=\"kw7\">show</span></a><span class=\"sy0\">,,</span> <span class=\"nu0\">2048</span><br/><span class=\"co1\">;------------------------------</span><br/>\u00a0<br/><span class=\"re2\">Start:<br/></span>for row<span class=\"sy0\">,</span> obj in Grid<br/>\tfor col<span class=\"sy0\">,</span> val in obj<br/>\t\tGrid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span>col<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>Grid<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">:=</span><span class=\"nu0\">2</span><br/>ShowGrid<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">;------------------------------</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#GuiClose\"><span class=\"kw7\">GuiClose</span></a>:<br/><a href=\"http://www.autohotkey.com/docs/commands/ExitApp.htm\"><span class=\"kw3\">ExitApp</span></a><br/><span class=\"kw1\">return</span><br/><span class=\"co1\">;------------------------------</span><br/><a href=\"http://www.autohotkey.com/docs/commands/_IfWinActive.htm\"><span class=\"kw5\">#IfWinActive</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">2048</span><br/><span class=\"co1\">;------------------------------</span><br/><span class=\"kw6\">up</span>::<br/>move <span class=\"sy0\">:=</span> false<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><br/><span class=\"br0\">{</span><br/>\tcol <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><br/>\t<span class=\"br0\">{</span><br/>\t\trow <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>\t\t<span class=\"kw1\">if</span> Grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>Grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">=</span> Grid<span class=\"br0\">[</span>row<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> col<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\tGrid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">*=</span><span class=\"nu0\">2</span>\t<span class=\"sy0\">,</span> Grid<span class=\"br0\">[</span>row<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> move <span class=\"sy0\">:=</span> true<br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><br/><span class=\"br0\">{</span><br/>\trow <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><br/>\t<span class=\"br0\">{</span><br/>\t\tcol <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><br/>\t\t\t<span class=\"kw1\">if</span>\u00a0!Grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span><br/>\t\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><br/>\t\t\t\t\t<span class=\"kw1\">if</span>\u00a0!Grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> Grid<span class=\"br0\">[</span>row<span class=\"sy0\">+</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">,</span> col<span class=\"br0\">]</span><br/>\t\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t\tGrid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> Grid<span class=\"br0\">[</span>row<span class=\"sy0\">+</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">,</span> col<span class=\"br0\">]</span>\t<span class=\"sy0\">,</span> Grid<span class=\"br0\">[</span>row<span class=\"sy0\">+</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> move <span class=\"sy0\">:=</span> true<br/>\t\t\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>Grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">=</span> Grid<span class=\"br0\">[</span>row<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> col<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t\t\t\t\tGrid<span class=\"br0\">[</span>row<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">*=</span><span class=\"nu0\">2</span>\t<span class=\"sy0\">,</span> Grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> move <span class=\"sy0\">:=</span> true<br/>\t\t\t\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gosub.htm\"><span class=\"kw3\">gosub</span></a><span class=\"sy0\">,</span> AddNew<br/><span class=\"kw1\">return</span><br/><span class=\"co1\">;------------------------------</span><br/><span class=\"kw6\">Down</span>::<br/>move <span class=\"sy0\">:=</span> false<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><br/><span class=\"br0\">{</span><br/>\tcol <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><br/>\t<span class=\"br0\">{</span><br/>\t\trow <span class=\"sy0\">:=</span> <span class=\"nu0\">5</span><span class=\"sy0\">-</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>\t\t<span class=\"kw1\">if</span> Grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>Grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">=</span> Grid<span class=\"br0\">[</span>row<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> col<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\tGrid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">*=</span><span class=\"nu0\">2</span>\t<span class=\"sy0\">,</span> Grid<span class=\"br0\">[</span>row<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> move <span class=\"sy0\">:=</span> true<br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><br/><span class=\"br0\">{</span><br/>\trow <span class=\"sy0\">:=</span> <span class=\"nu0\">5</span><span class=\"sy0\">-</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><br/>\t<span class=\"br0\">{</span><br/>\t\tcol <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><br/>\t\t\t<span class=\"kw1\">if</span>\u00a0!Grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span><br/>\t\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><br/>\t\t\t\t\t<span class=\"kw1\">if</span>\u00a0!Grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> Grid<span class=\"br0\">[</span>row<span class=\"sy0\">-</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">,</span> col<span class=\"br0\">]</span><br/>\t\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t\tGrid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> Grid<span class=\"br0\">[</span>row<span class=\"sy0\">-</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">,</span> col<span class=\"br0\">]</span>\t<span class=\"sy0\">,</span> Grid<span class=\"br0\">[</span>row<span class=\"sy0\">-</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> move <span class=\"sy0\">:=</span> true<br/>\t\t\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>Grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">=</span> Grid<span class=\"br0\">[</span>row<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> col<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t\t\t\t\tGrid<span class=\"br0\">[</span>row<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">*=</span><span class=\"nu0\">2</span>\t<span class=\"sy0\">,</span> Grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> move <span class=\"sy0\">:=</span> true<br/>\t\t\t\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gosub.htm\"><span class=\"kw3\">gosub</span></a><span class=\"sy0\">,</span> AddNew<br/><span class=\"kw1\">return</span><br/><span class=\"co1\">;------------------------------</span><br/><span class=\"kw6\">Left</span>::<br/>move <span class=\"sy0\">:=</span> false<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><br/><span class=\"br0\">{</span><br/>\trow <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><br/>\t<span class=\"br0\">{</span><br/>\t\tcol <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>\t\t<span class=\"kw1\">if</span> Grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>Grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">=</span> Grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\tGrid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">*=</span><span class=\"nu0\">2</span>\t<span class=\"sy0\">,</span> Grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> move <span class=\"sy0\">:=</span> true<br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><br/><span class=\"br0\">{</span><br/>\tcol <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><br/>\t<span class=\"br0\">{</span><br/>\t\trow <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><br/>\t\t\t<span class=\"kw1\">if</span>\u00a0!Grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span><br/>\t\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><br/>\t\t\t\t\t<span class=\"kw1\">if</span>\u00a0!Grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> Grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"sy0\">+</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">]</span><br/>\t\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t\tGrid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> Grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"sy0\">+</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">]</span>\t<span class=\"sy0\">,</span> Grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"sy0\">+</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> move <span class=\"sy0\">:=</span> true<br/>\t\t\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>Grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">=</span> Grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t\t\t\t\tGrid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">*=</span><span class=\"nu0\">2</span>\t<span class=\"sy0\">,</span> Grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> move <span class=\"sy0\">:=</span> true<br/>\t\t\t\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gosub.htm\"><span class=\"kw3\">gosub</span></a><span class=\"sy0\">,</span> AddNew<br/><span class=\"kw1\">return</span><br/><span class=\"co1\">;------------------------------</span><br/><span class=\"kw6\">Right</span>::<br/>move <span class=\"sy0\">:=</span> false<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><br/><span class=\"br0\">{</span><br/>\trow <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><br/>\t<span class=\"br0\">{</span><br/>\t\tcol <span class=\"sy0\">:=</span> <span class=\"nu0\">5</span><span class=\"sy0\">-</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>\t\t<span class=\"kw1\">if</span> Grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>Grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">=</span> Grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\tGrid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">*=</span><span class=\"nu0\">2</span>\t<span class=\"sy0\">,</span> Grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> move <span class=\"sy0\">:=</span> true<br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><br/><span class=\"br0\">{</span><br/>\tcol <span class=\"sy0\">:=</span> <span class=\"nu0\">5</span><span class=\"sy0\">-</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><br/>\t<span class=\"br0\">{</span><br/>\t\trow <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><br/>\t\t\t<span class=\"kw1\">if</span>\u00a0!Grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span><br/>\t\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><br/>\t\t\t\t\t<span class=\"kw1\">if</span>\u00a0!Grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> Grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"sy0\">-</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">]</span><br/>\t\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t\tGrid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> Grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"sy0\">-</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">]</span>\t<span class=\"sy0\">,</span> Grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"sy0\">-</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> move <span class=\"sy0\">:=</span> true<br/>\t\t\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>Grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">=</span> Grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t\t\t\t\tGrid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">*=</span><span class=\"nu0\">2</span>\t<span class=\"sy0\">,</span> Grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span> col<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> move <span class=\"sy0\">:=</span> true<br/>\t\t\t\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gosub.htm\"><span class=\"kw3\">gosub</span></a><span class=\"sy0\">,</span> AddNew<br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">;------------------------------</span><br/><a href=\"http://www.autohotkey.com/docs/commands/_IfWinActive.htm\"><span class=\"kw5\">#IfWinActive</span></a><br/><span class=\"co1\">;------------------------------</span><br/><span class=\"re2\">AddNew:<br/></span><span class=\"kw1\">if</span> EndOfGame<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a> Done `nPress OK to retry<br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Goto.htm\"><span class=\"kw3\">goto</span></a> start<br/><span class=\"br0\">}</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">;------------------------------</span><br/>EndOfGame<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tglobal<br/>\t<span class=\"kw1\">if</span> Move<br/>\t\tAddRandom<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\tShowGrid<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\tfor row<span class=\"sy0\">,</span> obj in Grid<br/>\t\tfor col<span class=\"sy0\">,</span> val in obj<br/>\t\t\t<span class=\"kw1\">if</span>\u00a0!grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span>col<span class=\"br0\">]</span><br/>\t\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>\tfor row<span class=\"sy0\">,</span> obj in Grid<br/>\t\tfor col<span class=\"sy0\">,</span> val in obj<br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span>col<span class=\"br0\">]</span> <span class=\"sy0\">=</span> grid<span class=\"br0\">[</span>row<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>col<span class=\"br0\">]</span><span class=\"br0\">)</span> || <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span>col<span class=\"br0\">]</span> <span class=\"sy0\">=</span> grid<span class=\"br0\">[</span>row<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>col<span class=\"br0\">]</span><span class=\"br0\">)</span> || <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span>col<span class=\"br0\">]</span> <span class=\"sy0\">=</span> grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span>col<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> || <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span>col<span class=\"br0\">]</span> <span class=\"sy0\">=</span> grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span>col<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">;------------------------------</span><br/>ShowGrid<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tglobal Grid<br/>\tfor row<span class=\"sy0\">,</span> obj in Grid<br/>\t\tfor col<span class=\"sy0\">,</span> val in obj<br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,,</span> <span class=\"re0\">%row%</span>_<span class=\"re0\">%col%</span><span class=\"sy0\">,</span> <span class=\"re0\">%val%</span><br/>\t\t\t<span class=\"kw1\">if</span> val<br/>\t\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Show\"><span class=\"kw7\">Show</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%row%</span>_<span class=\"re0\">%col%</span><br/>\t\t\t<span class=\"kw1\">else</span><br/>\t\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,</span> Hide<span class=\"sy0\">,</span> <span class=\"re0\">%row%</span>_<span class=\"re0\">%col%</span><br/>\t\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">;------------------------------</span><br/>AddRandom<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tglobal Grid<br/>\tShowGrid<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Sleep.htm\"><span class=\"kw3\">Sleep</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">200</span><br/>\tfor row<span class=\"sy0\">,</span> obj in Grid<br/>\t\tfor col<span class=\"sy0\">,</span> val in obj<br/>\t\t\t<span class=\"kw1\">if</span>\u00a0!grid<span class=\"br0\">[</span>row<span class=\"sy0\">,</span>col<span class=\"br0\">]</span><br/>\t\t\t\tlist <span class=\"sy0\">.=</span> <span class=\"br0\">(</span>list?<span class=\"st0\">\"`n\"</span>:<span class=\"st0\">\"\"</span><span class=\"br0\">)</span> row <span class=\"st0\">\",\"</span> col<br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Sort.htm\"><span class=\"kw3\">Sort</span></a><span class=\"sy0\">,</span> list<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">random</span></a><br/>\tRnd <span class=\"sy0\">:=</span> StrSplit<span class=\"br0\">(</span>list<span class=\"sy0\">,</span> <span class=\"st0\">\"`n\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span>1<br/>\tGrid<span class=\"br0\">[</span>StrSplit<span class=\"br0\">(</span>rnd<span class=\"sy0\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span>1<span class=\"sy0\">,</span> StrSplit<span class=\"br0\">(</span>rnd<span class=\"sy0\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span>2<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">;------------------------------</span></pre>"}, {"lang": "Batch File", "loc": 156, "block": "<pre class=\"dos highlighted_source\"><span class=\"co2\">::2048 Game Task from RosettaCode.org</span><br/><span class=\"co2\">::Batch File Implementation</span><br/>\u00a0<br/><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/>cls<br/>\u00a0<br/>:<span class=\"re0\">begin_game</span><br/>\t<span class=\"sy0\">%</span><span class=\"re3\">== <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">Set</span></a> variables ==</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"score=0\"<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"won=0\"<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"SUP_score=0\"<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">A</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>1,1,4<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">B</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>1,1,4<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a \"X_<span class=\"sy0\">%%</span><span class=\"re3\">A</span><span class=\"sy0\">%%</span><span class=\"re3\">B</span>=0\"<br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">addtile</span><br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">addtile</span><br/>\u00a0<br/>\t<span class=\"sy0\">%</span><span class=\"re3\">== Main game loop ==</span><span class=\"sy0\">%</span><br/>:<span class=\"re0\">main_loop</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"changed=0\"<br/>\t<a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">display</span><br/>\t<a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a><span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> Keys: WASD <span class=\"sy0\">(</span>Slide Movement<span class=\"co3\">^)</span>, N <span class=\"sy0\">(</span>New game<span class=\"co3\">^)</span>, P <span class=\"sy0\">(</span><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">Exit</span></a><span class=\"co3\">^)</span><br/>\u00a0<br/>\t<span class=\"sy0\">%</span><span class=\"re3\">== Get Keypress ==</span><span class=\"sy0\">%</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"key=\"<br/>\t<a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /f \"delims=\" <span class=\"sy0\">%</span><span class=\"sy0\">%</span>? <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>'xcopy /w \"<span class=\"sy0\">%</span><span class=\"re3\">~f0</span>\" \"<span class=\"sy0\">%</span><span class=\"re3\">~f0</span>\" 2<span class=\"co3\">^&gt;</span><a href=\"http://www.ss64.com/nt/nul.html\"><span class=\"kw4\">nul</span></a>'<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <a href=\"http://www.ss64.com/nt/not.html\"><span class=\"kw2\">not</span></a> <a href=\"http://www.ss64.com/nt/defined.html\"><span class=\"kw2\">defined</span></a> key <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"key=<span class=\"sy0\">%</span><span class=\"sy0\">%</span>?\"<br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"key=<span class=\"sy0\">%</span><span class=\"re3\">key:~-1</span><span class=\"sy0\">%</span>\"<br/>\u00a0<br/>\t<span class=\"sy0\">%</span><span class=\"re3\">== Process keypress ==</span><span class=\"sy0\">%</span><br/>\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> /i \"<span class=\"sy0\">!</span><span class=\"re2\">key</span><span class=\"sy0\">!</span>\"==\"W\" <span class=\"sy0\">(</span><br/>\t\t<a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%</span><span class=\"sy0\">%</span>? <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>1,1,4<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">slide</span> X_1<span class=\"sy0\">%</span><span class=\"sy0\">%</span>? X_2<span class=\"sy0\">%</span><span class=\"sy0\">%</span>? X_3<span class=\"sy0\">%</span><span class=\"sy0\">%</span>? X_4<span class=\"sy0\">%</span><span class=\"sy0\">%</span>?<br/>\t<span class=\"sy0\">)</span><br/>\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> /i \"<span class=\"sy0\">!</span><span class=\"re2\">key</span><span class=\"sy0\">!</span>\"==\"A\" <span class=\"sy0\">(</span><br/>\t\t<a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%</span><span class=\"sy0\">%</span>? <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>1,1,4<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">slide</span> X_<span class=\"sy0\">%</span><span class=\"sy0\">%</span>?1 X_<span class=\"sy0\">%</span><span class=\"sy0\">%</span>?2 X_<span class=\"sy0\">%</span><span class=\"sy0\">%</span>?3 X_<span class=\"sy0\">%</span><span class=\"sy0\">%</span>?4<br/>\t<span class=\"sy0\">)</span><br/>\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> /i \"<span class=\"sy0\">!</span><span class=\"re2\">key</span><span class=\"sy0\">!</span>\"==\"S\" <span class=\"sy0\">(</span><br/>\t\t<a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%</span><span class=\"sy0\">%</span>? <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>1,1,4<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">slide</span> X_4<span class=\"sy0\">%</span><span class=\"sy0\">%</span>? X_3<span class=\"sy0\">%</span><span class=\"sy0\">%</span>? X_2<span class=\"sy0\">%</span><span class=\"sy0\">%</span>? X_1<span class=\"sy0\">%</span><span class=\"sy0\">%</span>?<br/>\t<span class=\"sy0\">)</span><br/>\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> /i \"<span class=\"sy0\">!</span><span class=\"re2\">key</span><span class=\"sy0\">!</span>\"==\"D\" <span class=\"sy0\">(</span><br/>\t\t<a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%</span><span class=\"sy0\">%</span>? <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>1,1,4<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">slide</span> X_<span class=\"sy0\">%</span><span class=\"sy0\">%</span>?4 X_<span class=\"sy0\">%</span><span class=\"sy0\">%</span>?3 X_<span class=\"sy0\">%</span><span class=\"sy0\">%</span>?2 X_<span class=\"sy0\">%</span><span class=\"sy0\">%</span>?1<br/>\t<span class=\"sy0\">)</span><br/>\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> /i \"<span class=\"sy0\">!</span><span class=\"re2\">key</span><span class=\"sy0\">!</span>\"==\"N\" <a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">begin_game</span><br/>\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> /i \"<span class=\"sy0\">!</span><span class=\"re2\">key</span><span class=\"sy0\">!</span>\"==\"P\" <a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b<br/>\u00a0<br/>\t<span class=\"sy0\">%</span><span class=\"re3\">== Check <a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> the board changed ==</span><span class=\"sy0\">%</span><br/>\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">changed</span><span class=\"sy0\">%</span> <a href=\"http://www.ss64.com/nt/neq.html\"><span class=\"kw2\">neq</span></a> 0 <a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">addtile</span><br/>\u00a0<br/>\t<span class=\"sy0\">%</span><span class=\"re3\">== Check <a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> already won ==</span><span class=\"sy0\">%</span><br/>\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">won</span><span class=\"sy0\">%</span> <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">equ</span></a> 1 <span class=\"sy0\">(</span><br/>\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"msg=Nice one... You WON<span class=\"co3\">^!</span><span class=\"co3\">^!</span>\"<br/>\t\t<a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">gameover</span><br/>\t<span class=\"sy0\">)</span><br/>\u00a0<br/>\t<span class=\"sy0\">%</span><span class=\"re3\">== Check <a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> lose condition ==</span><span class=\"sy0\">%</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a \"real_blanks=blank_count-1\"<br/>\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">real_blanks</span><span class=\"sy0\">%</span> <a href=\"http://www.ss64.com/nt/leq.html\"><span class=\"kw2\">leq</span></a> 0 <span class=\"sy0\">(</span><br/>\t\t<a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">A</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>1,1,4<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">B</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>1,1,4<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"TRY_<span class=\"sy0\">%%</span><span class=\"re3\">A</span><span class=\"sy0\">%%</span><span class=\"re3\">B</span>=<span class=\"sy0\">!</span><span class=\"re2\">X_%%<span class=\"re3\">A</span><span class=\"sy0\">%%</span><span class=\"re3\">B</span></span><span class=\"sy0\">!</span>\"<br/>\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"TRY_changed=<span class=\"sy0\">%</span><span class=\"re3\">changed</span><span class=\"sy0\">%</span>\" <span class=\"sy0\">&amp;</span> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"changed=0\"<br/>\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"SUP_score=1\"<br/>\t\t<a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%</span><span class=\"sy0\">%</span>? <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>1,1,4<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">slide</span> TRY_<span class=\"sy0\">%</span><span class=\"sy0\">%</span>?1 TRY_<span class=\"sy0\">%</span><span class=\"sy0\">%</span>?2 TRY_<span class=\"sy0\">%</span><span class=\"sy0\">%</span>?3 TRY_<span class=\"sy0\">%</span><span class=\"sy0\">%</span>?4<br/>\t\t<a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%</span><span class=\"sy0\">%</span>? <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>1,1,4<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">slide</span> TRY_1<span class=\"sy0\">%</span><span class=\"sy0\">%</span>? TRY_2<span class=\"sy0\">%</span><span class=\"sy0\">%</span>? TRY_3<span class=\"sy0\">%</span><span class=\"sy0\">%</span>? TRY_4<span class=\"sy0\">%</span><span class=\"sy0\">%</span>?<br/>\t\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">changed</span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">equ</span></a> 0 <span class=\"sy0\">(</span><br/>\t\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"msg=No moves are possible... Game Over\u00a0:<span class=\"re0\">(\"</span><br/>\t\t\t<a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">gameover</span><br/>\t\t<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/else.html\"><span class=\"kw1\">else</span></a> <span class=\"sy0\">(</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"changed=<span class=\"sy0\">!</span><span class=\"re2\">TRY_changed</span><span class=\"sy0\">!</span>\" <span class=\"sy0\">&amp;</span> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"SUP_score=0\"<span class=\"sy0\">)</span><br/>\t<span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> main_loop<br/><span class=\"co2\"><br/>\u00a0<br/>::~~~~~~~~~~~~~~~~~~~~ Sub Procedures ~~~~~~~~~~~~~~~~~~~~::</span><br/>\t<span class=\"sy0\">%</span><span class=\"re3\">== Game Over xD ==</span><span class=\"sy0\">%</span><br/>:<span class=\"re0\">gameover</span><br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">display</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a><span class=\"sy0\">(</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a><span class=\"sy0\">(!</span><span class=\"re2\">msg</span><span class=\"sy0\">!</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a><span class=\"sy0\">(</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a><span class=\"sy0\">(</span>Keys: N <span class=\"sy0\">(</span>New game<span class=\"co3\">^)</span>, P <span class=\"sy0\">(</span><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">Exit</span></a><span class=\"co3\">^)</span><br/>\u00a0<br/>:<span class=\"re0\">key_loop</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"key=\"<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /f \"delims=\" <span class=\"sy0\">%</span><span class=\"sy0\">%</span>? <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>'xcopy /w \"<span class=\"sy0\">%</span><span class=\"re3\">~f0</span>\" \"<span class=\"sy0\">%</span><span class=\"re3\">~f0</span>\" 2<span class=\"co3\">^&gt;</span><a href=\"http://www.ss64.com/nt/nul.html\"><span class=\"kw4\">nul</span></a>'<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <a href=\"http://www.ss64.com/nt/not.html\"><span class=\"kw2\">not</span></a> <a href=\"http://www.ss64.com/nt/defined.html\"><span class=\"kw2\">defined</span></a> key <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"key=<span class=\"sy0\">%</span><span class=\"sy0\">%</span>?\"<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"key=<span class=\"sy0\">%</span><span class=\"re3\">key:~-1</span><span class=\"sy0\">%</span>\"<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> /i \"<span class=\"sy0\">!</span><span class=\"re2\">key</span><span class=\"sy0\">!</span>\"==\"N\" <a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">begin_game</span><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> /i \"<span class=\"sy0\">!</span><span class=\"re2\">key</span><span class=\"sy0\">!</span>\"==\"P\" <a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b<br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">key_loop</span><br/>\u00a0<br/>\t<span class=\"sy0\">%</span><span class=\"re3\">== The main slider of numbers <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> tiles ==</span><span class=\"sy0\">%</span><br/>:<span class=\"re0\">slide</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"next=\"<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"slide_1=\"<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"slide_2=\"<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> <span class=\"sy0\">%</span><span class=\"sy0\">%</span>? <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(%</span><span class=\"re3\">*</span><span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">%%?</span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/neq.html\"><span class=\"kw2\">neq</span></a> 0 <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"slide_1=<span class=\"sy0\">!</span><span class=\"re2\">slide_1</span><span class=\"sy0\">!</span> <span class=\"sy0\">!</span><span class=\"re2\">%%?</span><span class=\"sy0\">!</span>\"<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> <span class=\"sy0\">%</span><span class=\"sy0\">%</span>? <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(!</span><span class=\"re2\">slide_1</span><span class=\"sy0\">!)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"scan=<span class=\"sy0\">%</span><span class=\"sy0\">%</span>?\"<br/>\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> \"<span class=\"sy0\">!</span><span class=\"re2\">scan</span><span class=\"sy0\">!</span><span class=\"re2\">\"==\"</span><span class=\"sy0\">!</span><span class=\"re2\">next</span><span class=\"sy0\">!</span>\" <span class=\"sy0\">(</span><br/>\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a \"next*=2\"<br/>\t\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">SUP_score</span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">equ</span></a> 0 <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a \"score+=<span class=\"sy0\">!</span><span class=\"re2\">next</span><span class=\"sy0\">!</span>\"<br/>\t\t<span class=\"sy0\">%</span><span class=\"re3\">== WINNING CONDITION!<span class=\"sy0\">!</span>! ==</span><span class=\"sy0\">%</span><br/>\t\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> \"<span class=\"sy0\">!</span><span class=\"re2\">next</span><span class=\"sy0\">!</span>\" <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">equ</span></a> \"2048\" <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"won=1\"<br/>\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"scan=\"<br/>\t<span class=\"sy0\">)</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"slide_2=<span class=\"sy0\">!</span><span class=\"re2\">slide_2</span><span class=\"sy0\">!</span> <span class=\"sy0\">!</span><span class=\"re2\">next</span><span class=\"sy0\">!</span>\"<br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"next=<span class=\"sy0\">!</span><span class=\"re2\">scan</span><span class=\"sy0\">!</span>\"<br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"slide_2=<span class=\"sy0\">!</span><span class=\"re2\">slide_2</span><span class=\"sy0\">!</span> <span class=\"sy0\">!</span><span class=\"re2\">next</span><span class=\"sy0\">!</span>\"<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%</span><span class=\"sy0\">%</span>? <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>1,1,4<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"final_<span class=\"sy0\">%</span><span class=\"sy0\">%</span>?=0\"<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"cnt=0\" <span class=\"sy0\">&amp;</span> <a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> <span class=\"sy0\">%</span><span class=\"sy0\">%</span>? <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(!</span><span class=\"re2\">slide_2</span><span class=\"sy0\">!)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">cnt</span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/lss.html\"><span class=\"kw2\">lss</span></a> 4 <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a \"cnt+=1\"<br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"final_<span class=\"sy0\">!</span><span class=\"re2\">cnt</span><span class=\"sy0\">!</span>=<span class=\"sy0\">%</span><span class=\"sy0\">%</span>?\"<br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <a href=\"http://www.ss64.com/nt/not.html\"><span class=\"kw2\">not</span></a> \"<span class=\"sy0\">!</span><span class=\"re2\">%<span class=\"re3\">1</span></span><span class=\"sy0\">!</span><span class=\"sy0\">!</span><span class=\"re2\">%<span class=\"re3\">2</span></span><span class=\"sy0\">!</span><span class=\"sy0\">!</span><span class=\"re2\">%<span class=\"re3\">3</span></span><span class=\"sy0\">!</span><span class=\"sy0\">!</span><span class=\"re2\">%<span class=\"re3\">4</span></span><span class=\"sy0\">!</span><span class=\"re2\">\"==\"</span><span class=\"sy0\">!</span><span class=\"re2\">final_1</span><span class=\"sy0\">!!</span><span class=\"re2\">final_2</span><span class=\"sy0\">!!</span><span class=\"re2\">final_3</span><span class=\"sy0\">!!</span><span class=\"re2\">final_4</span><span class=\"sy0\">!</span>\" <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"changed=1\"<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"cnt=0\" <span class=\"sy0\">&amp;</span> <a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> <span class=\"sy0\">%</span><span class=\"sy0\">%</span>? <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(%</span><span class=\"re3\">*</span><span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a \"cnt+=1\"<br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a \"<span class=\"sy0\">%</span><span class=\"sy0\">%</span>?=final_<span class=\"sy0\">!</span><span class=\"re2\">cnt</span><span class=\"sy0\">!</span>\"<br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">EOF</span><br/>\u00a0<br/>\t<span class=\"sy0\">%</span><span class=\"re3\">== Add number to tile ==</span><span class=\"sy0\">%</span><br/>:<span class=\"re0\">addtile</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"blank_list=\"<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"blank_count=0\"<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">A</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>1,1,4<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">B</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>1,1,4<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">X_%%<span class=\"re3\">A</span><span class=\"sy0\">%%</span><span class=\"re3\">B</span></span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">equ</span></a> 0 <span class=\"sy0\">(</span><br/>\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"blank_list=<span class=\"sy0\">!</span><span class=\"re2\">blank_list</span><span class=\"sy0\">!</span>X_<span class=\"sy0\">%%</span><span class=\"re3\">A</span><span class=\"sy0\">%%</span><span class=\"re3\">B</span>\"<br/>\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a blank_count+=1<br/>\t<span class=\"sy0\">)</span><br/><span class=\"sy0\">)</span>\t<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a \"pick_tile=<span class=\"sy0\">(%</span><span class=\"re3\">random</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"re3\">blank_count</span><span class=\"sy0\">%)</span>*4\"<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a \"rnd=<span class=\"sy0\">%</span><span class=\"re3\">random</span><span class=\"sy0\">%%%</span><span class=\"re3\">1</span>0+1\"<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"tile_new=<span class=\"sy0\">!</span><span class=\"re2\">blank_list:~%<span class=\"re3\">pick_tile</span>%,4</span><span class=\"sy0\">!</span>\"<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">rnd</span><span class=\"sy0\">%</span>==5 <span class=\"sy0\">(</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> <span class=\"sy0\">!</span><span class=\"re2\">tile_new</span><span class=\"sy0\">!</span>=4<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/else.html\"><span class=\"kw1\">else</span></a> <span class=\"sy0\">(</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> <span class=\"sy0\">!</span><span class=\"re2\">tile_new</span><span class=\"sy0\">!</span>=2<span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">EOF</span><br/>\u00a0<br/>\t<span class=\"sy0\">%</span><span class=\"re3\">== Display the table ==</span><span class=\"sy0\">%</span><br/>:<span class=\"re0\">display</span><br/>cls<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> 2048 Game <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> Batch<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a><span class=\"sy0\">(</span><br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">A</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>1,1,4<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">B</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>1,1,4<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"DX_<span class=\"sy0\">%%</span><span class=\"re3\">A</span><span class=\"sy0\">%%</span><span class=\"re3\">B</span>=<span class=\"sy0\">!</span><span class=\"re2\">X_%%<span class=\"re3\">A</span><span class=\"sy0\">%%</span><span class=\"re3\">B</span></span><span class=\"sy0\">!</span>\"<br/>\t\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">tile_new</span><span class=\"sy0\">!</span>==X_<span class=\"sy0\">%%</span><span class=\"re3\">A</span><span class=\"sy0\">%%</span><span class=\"re3\">B</span> <span class=\"sy0\">(</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"DX_<span class=\"sy0\">%%</span><span class=\"re3\">A</span><span class=\"sy0\">%%</span><span class=\"re3\">B</span>=  +<span class=\"sy0\">!</span><span class=\"re2\">X_%%<span class=\"re3\">A</span><span class=\"sy0\">%%</span><span class=\"re3\">B</span></span><span class=\"sy0\">!</span>\"<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/else.html\"><span class=\"kw1\">else</span></a> <span class=\"sy0\">(</span><br/>\t\t\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">X_%%<span class=\"re3\">A</span><span class=\"sy0\">%%</span><span class=\"re3\">B</span></span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/lss.html\"><span class=\"kw2\">lss</span></a> 1000 <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"DX_<span class=\"sy0\">%%</span><span class=\"re3\">A</span><span class=\"sy0\">%%</span><span class=\"re3\">B</span>= <span class=\"sy0\">!</span><span class=\"re2\">DX_%%<span class=\"re3\">A</span><span class=\"sy0\">%%</span><span class=\"re3\">B</span></span><span class=\"sy0\">!</span>\"<br/>\t\t\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">X_%%<span class=\"re3\">A</span><span class=\"sy0\">%%</span><span class=\"re3\">B</span></span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/lss.html\"><span class=\"kw2\">lss</span></a> 100 <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"DX_<span class=\"sy0\">%%</span><span class=\"re3\">A</span><span class=\"sy0\">%%</span><span class=\"re3\">B</span>= <span class=\"sy0\">!</span><span class=\"re2\">DX_%%<span class=\"re3\">A</span><span class=\"sy0\">%%</span><span class=\"re3\">B</span></span><span class=\"sy0\">!</span>\"<br/>\t\t\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">X_%%<span class=\"re3\">A</span><span class=\"sy0\">%%</span><span class=\"re3\">B</span></span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/lss.html\"><span class=\"kw2\">lss</span></a> 10 <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"DX_<span class=\"sy0\">%%</span><span class=\"re3\">A</span><span class=\"sy0\">%%</span><span class=\"re3\">B</span>= <span class=\"sy0\">!</span><span class=\"re2\">DX_%%<span class=\"re3\">A</span><span class=\"sy0\">%%</span><span class=\"re3\">B</span></span><span class=\"sy0\">!</span>\"<br/>\t\t\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">X_%%<span class=\"re3\">A</span><span class=\"sy0\">%%</span><span class=\"re3\">B</span></span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">equ</span></a> 0 <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"DX_<span class=\"sy0\">%%</span><span class=\"re3\">A</span><span class=\"sy0\">%%</span><span class=\"re3\">B</span>=    \"<br/>\t\t<span class=\"sy0\">)</span><br/>\t<span class=\"sy0\">)</span><br/>\t\t<a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> +----+----+----+----+<br/>\t\t<a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"co3\">^|</span><span class=\"sy0\">!</span><span class=\"re2\">DX_%%A1</span><span class=\"sy0\">!</span><span class=\"co3\">^|</span><span class=\"sy0\">!</span><span class=\"re2\">DX_%%A2</span><span class=\"sy0\">!</span><span class=\"co3\">^|</span><span class=\"sy0\">!</span><span class=\"re2\">DX_%%A3</span><span class=\"sy0\">!</span><span class=\"co3\">^|</span><span class=\"sy0\">!</span><span class=\"re2\">DX_%%A4</span><span class=\"sy0\">!</span><span class=\"co3\">^|</span><br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> +----+----+----+----+<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a><span class=\"sy0\">(</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> Score: <span class=\"sy0\">%</span><span class=\"re3\">score</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">EOF</span></pre>"}, {"lang": "BBC BASIC", "loc": 70, "block": "<pre class=\"text highlighted_source\">      SIZE = 4    \u00a0: MAX = SIZE-1<br/>      Won% = FALSE\u00a0: Lost% = FALSE<br/>      @% = 5<br/>      DIM Board(MAX,MAX),Stuck% 3<br/>\u00a0<br/>      PROCBreed<br/>      PROCPrint<br/>      REPEAT<br/>        Direction = GET-135<br/>        IF Direction &gt; 0 AND Direction &lt; 5 THEN<br/>          Moved% = FALSE<br/>          PROCShift<br/>          PROCMerge<br/>          PROCShift<br/>          IF Moved% THEN PROCBreed\u00a0:\u00a0!Stuck%=0 ELSE\u00a0?(Stuck%+Direction-1)=-1\u00a0: Lost% =\u00a0!Stuck%=-1<br/>          PROCPrint<br/>        ENDIF<br/>      UNTIL Won% OR Lost%<br/>      IF Won% THEN PRINT \"You WON!\u00a0:-)\" ELSE PRINT \"You lost\u00a0:-(\"<br/>      END<br/>\u00a0<br/>      REM -----------------------------------------------------------------------------------------------------------------------<br/>      DEF PROCPrint<br/>      FOR i = 0 TO SIZE*SIZE-1<br/>        IF Board(i DIV SIZE,i MOD SIZE) THEN PRINT Board(i DIV SIZE,i MOD SIZE); ELSE PRINT \"    _\";<br/>        IF i MOD SIZE = MAX THEN PRINT<br/>      NEXT<br/>      PRINT STRING$(SIZE,\"-----\")<br/>      ENDPROC<br/>\u00a0<br/>      REM ----------------------------------------------------------------------------------------------------------------------<br/>      DEF PROCShift<br/>      IF Direction = 2 OR Direction = 3 THEN loopend = MAX\u00a0: step = -1 ELSE loopend = 0\u00a0: step = 1<br/>      FOR row = loopend TO MAX-loopend STEP step<br/>        zeros = 0<br/>        FOR col = loopend TO MAX-loopend STEP step<br/>          IF Direction &lt; 3 THEN<br/>            IF Board(row,col) = 0 THEN zeros += step ELSE IF zeros THEN SWAP Board(row,col),Board(row,col-zeros)\u00a0: Moved% = TRUE<br/>          ELSE<br/>            IF Board(col,row) = 0 THEN zeros += step ELSE IF zeros THEN SWAP Board(col,row),Board(col-zeros,row)\u00a0: Moved% = TRUE<br/>          ENDIF<br/>        NEXT<br/>      NEXT<br/>      ENDPROC<br/>\u00a0<br/>      REM -----------------------------------------------------------------------------------------------------------------------<br/>      DEF PROCMerge<br/>      IF Direction = 1 THEN loopend =   0\u00a0: rowoff =  0\u00a0: coloff =  1\u00a0: step =  1<br/>      IF Direction = 2 THEN loopend = MAX\u00a0: rowoff =  0\u00a0: coloff = -1\u00a0: step = -1<br/>      IF Direction = 3 THEN loopend = MAX\u00a0: rowoff = -1\u00a0: coloff =  0\u00a0: step = -1<br/>      IF Direction = 4 THEN loopend =   0\u00a0: rowoff =  1\u00a0: coloff =  0\u00a0: step =  1<br/>      FOR row = loopend TO MAX-loopend-rowoff STEP step<br/>        FOR col = loopend TO MAX-loopend-coloff STEP step<br/>          IF Board(row,col) THEN IF Board(row,col) = Board(row+rowoff,col+coloff) THEN<br/>            Board(row,col) *= 2\u00a0: Board(row+rowoff,col+coloff) = 0<br/>            Moved% = TRUE<br/>            IF NOT Won% THEN Won% = Board(row,col)=2048<br/>          ENDIF<br/>        NEXT<br/>      NEXT<br/>      ENDPROC<br/>\u00a0<br/>      REM -----------------------------------------------------------------------------------------------------------------------<br/>      DEF PROCBreed<br/>      cell = RND(SIZE*SIZE)-1<br/>      FOR i = 0 TO SIZE*SIZE-1<br/>        z = (cell+i) MOD (SIZE*SIZE)<br/>        IF Board(z DIV SIZE,z MOD SIZE) = 0 THEN Board(z DIV SIZE,z MOD SIZE) = 2-(RND(10)=1)*2\u00a0: EXIT FOR<br/>      NEXT<br/>      ENDPROC</pre>"}, {"lang": "C", "loc": 281, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/><span class=\"co2\">#include &lt;termios.h&gt;</span><br/><span class=\"co2\">#include &lt;time.h&gt;</span><br/><span class=\"co2\">#include &lt;unistd.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define D_INVALID -1</span><br/><span class=\"co2\">#define D_UP       1</span><br/><span class=\"co2\">#define D_DOWN     2</span><br/><span class=\"co2\">#define D_RIGHT    3</span><br/><span class=\"co2\">#define D_LEFT     4</span><br/>\u00a0<br/><span class=\"kw4\">const</span> <span class=\"kw4\">long</span> values<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"sy0\">,</span> <span class=\"nu0\">32</span><span class=\"sy0\">,</span> <span class=\"nu0\">64</span><span class=\"sy0\">,</span> <span class=\"nu0\">128</span><span class=\"sy0\">,</span> <span class=\"nu0\">256</span><span class=\"sy0\">,</span> <span class=\"nu0\">512</span><span class=\"sy0\">,</span> <span class=\"nu0\">1024</span><span class=\"sy0\">,</span> <span class=\"nu0\">2048</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>colors<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">\"39\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"31\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"32\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"33\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"34\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"35\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"36\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"37\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"91\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"92\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"93\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"94\"</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> gamestate_struct__ <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> grid<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> have_moved<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">long</span> total_score<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">long</span> score_last_move<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> blocks_in_play<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> game<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> termios oldt<span class=\"sy0\">,</span> newt<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> do_draw<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es5\">\\033</span>[2J<span class=\"es5\">\\033</span>[HScore:\u00a0%ld\"</span><span class=\"sy0\">,</span> game.<span class=\"me1\">total_score</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>game.<span class=\"me1\">score_last_move</span><span class=\"br0\">)</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\" (+%ld)\"</span><span class=\"sy0\">,</span> game.<span class=\"me1\">score_last_move</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">25</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"-\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> y <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>game.<span class=\"me1\">grid</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es5\">\\033</span>[7m<span class=\"es5\">\\033</span>[%sm%*zd <span class=\"es5\">\\033</span>[0m|\"</span><span class=\"sy0\">,</span> colors<span class=\"br0\">[</span>game.<span class=\"me1\">grid</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                        <span class=\"nu0\">4</span><span class=\"sy0\">,</span> values<span class=\"br0\">[</span>game.<span class=\"me1\">grid</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span><br/>                <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%*s |\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">25</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"-\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> do_merge<span class=\"br0\">(</span><span class=\"kw4\">int</span> d<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/><span class=\"coMULTI\">/* These macros look pretty scary, but mainly demonstrate some space saving */</span><br/><span class=\"co2\">#define MERGE_DIRECTION(_v1, _v2, _xs, _xc, _xi, _ys, _yc, _yi, _x, _y)     \\<br/>    do {                                                                    \\<br/>        for (int _v1 = _xs; _v1 _xc; _v1 += _xi) {                          \\<br/>            for (int _v2 = _ys; _v2 _yc; _v2 += _yi) {                      \\<br/>                if (game.grid[x][y] &amp;&amp; (game.grid[x][y] ==                  \\<br/>                                    game.grid[x + _x][y + _y])) {           \\<br/>                    game.grid[x][y] += (game.have_moved = 1);               \\<br/>                    game.grid[x + _x][y + _y] = (0 * game.blocks_in_play--);\\<br/>                    game.score_last_move += values[game.grid[x][y]];        \\<br/>                    game.total_score += values[game.grid[x][y]];            \\<br/>                }                                                           \\<br/>            }                                                               \\<br/>        }                                                                   \\<br/>    } while (0)</span><br/>\u00a0<br/>    game.<span class=\"me1\">score_last_move</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>d<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">case</span> D_LEFT<span class=\"sy0\">:</span><br/>            MERGE_DIRECTION<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">case</span> D_RIGHT<span class=\"sy0\">:</span><br/>            MERGE_DIRECTION<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">case</span> D_DOWN<span class=\"sy0\">:</span><br/>            MERGE_DIRECTION<span class=\"br0\">(</span>y<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">case</span> D_UP<span class=\"sy0\">:</span><br/>            MERGE_DIRECTION<span class=\"br0\">(</span>y<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">#undef MERGE_DIRECTION</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> do_gravity<span class=\"br0\">(</span><span class=\"kw4\">int</span> d<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/><span class=\"co2\">#define GRAVITATE_DIRECTION(_v1, _v2, _xs, _xc, _xi, _ys, _yc, _yi, _x, _y) \\<br/>    do {                                                                    \\<br/>        int break_cond = 0;                                                 \\<br/>        while (!break_cond) {                                               \\<br/>            break_cond = 1;                                                 \\<br/>            for (int _v1 = _xs; _v1 _xc; _v1 += _xi) {                      \\<br/>                for (int _v2 = _ys; _v2 _yc; _v2 += _yi) {                  \\<br/>                    if (!game.grid[x][y] &amp;&amp; game.grid[x + _x][y + _y]) {    \\<br/>                        game.grid[x][y] = game.grid[x + _x][y + _y];        \\<br/>                        game.grid[x + _x][y + _y] = break_cond = 0;         \\<br/>                        game.have_moved = 1;                                \\<br/>                    }                                                       \\<br/>                }                                                           \\<br/>            }                                                               \\<br/>            do_draw(); usleep(40000);                                       \\<br/>        }                                                                   \\<br/>    } while (0)</span><br/>\u00a0<br/>    <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>d<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">case</span> D_LEFT<span class=\"sy0\">:</span><br/>            GRAVITATE_DIRECTION<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">case</span> D_RIGHT<span class=\"sy0\">:</span><br/>            GRAVITATE_DIRECTION<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">case</span> D_DOWN<span class=\"sy0\">:</span><br/>            GRAVITATE_DIRECTION<span class=\"br0\">(</span>y<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">case</span> D_UP<span class=\"sy0\">:</span><br/>            GRAVITATE_DIRECTION<span class=\"br0\">(</span>y<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">#undef GRAVITATE_DIRECTION</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> do_check_end_condition<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> ret <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> y <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>values<span class=\"br0\">[</span>game.<span class=\"me1\">grid</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2048</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>game.<span class=\"me1\">grid</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> <span class=\"sy0\">||</span><br/>                  <span class=\"br0\">(</span><span class=\"br0\">(</span>x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>game.<span class=\"me1\">grid</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> <span class=\"sy0\">==</span> game.<span class=\"me1\">grid</span><span class=\"br0\">[</span>x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span><br/>                  <span class=\"br0\">(</span><span class=\"br0\">(</span>y <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>game.<span class=\"me1\">grid</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> <span class=\"sy0\">==</span> game.<span class=\"me1\">grid</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                ret <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> ret<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> do_tick<span class=\"br0\">(</span><span class=\"kw4\">int</span> d<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    game.<span class=\"me1\">have_moved</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    do_gravity<span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    do_merge<span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    do_gravity<span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> game.<span class=\"me1\">have_moved</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> do_newblock<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>game.<span class=\"me1\">blocks_in_play</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> bn <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span><span class=\"nu0\">16</span> <span class=\"sy0\">-</span> game.<span class=\"me1\">blocks_in_play</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> pn <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> y <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>game.<span class=\"me1\">grid</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pn <span class=\"sy0\">==</span> bn<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                game.<span class=\"me1\">grid</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">10</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>                game.<span class=\"me1\">blocks_in_play</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                <span class=\"sy0\">++</span>pn<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"coMULTI\">/* Initialize terminal settings */</span><br/>    tcgetattr<span class=\"br0\">(</span>STDIN_FILENO<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>oldt<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    newt <span class=\"sy0\">=</span> oldt<span class=\"sy0\">;</span><br/>    newt.<span class=\"me1\">c_lflag</span> <span class=\"sy0\">&amp;=</span> ~<span class=\"br0\">(</span>ICANON <span class=\"sy0\">|</span> ECHO<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    tcsetattr<span class=\"br0\">(</span>STDIN_FILENO<span class=\"sy0\">,</span> TCSANOW<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>newt<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/srand.html\"><span class=\"kw3\">srand</span></a><span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/time.html\"><span class=\"kw3\">time</span></a><span class=\"br0\">(</span>NULL<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memset.html\"><span class=\"kw3\">memset</span></a><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>game<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>game<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    do_newblock<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    do_newblock<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    do_draw<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> found_valid_key<span class=\"sy0\">,</span> direction<span class=\"sy0\">,</span> value<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>            found_valid_key <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            direction       <span class=\"sy0\">=</span> D_INVALID<span class=\"sy0\">;</span><br/>            value           <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/getchar.html\"><span class=\"kw3\">getchar</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>value<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">case</span> <span class=\"st0\">'h'</span><span class=\"sy0\">:</span> <span class=\"kw1\">case</span> <span class=\"st0\">'a'</span><span class=\"sy0\">:</span><br/>                    direction <span class=\"sy0\">=</span> D_LEFT<span class=\"sy0\">;</span><br/>                    <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">case</span> <span class=\"st0\">'l'</span><span class=\"sy0\">:</span> <span class=\"kw1\">case</span> <span class=\"st0\">'d'</span><span class=\"sy0\">:</span><br/>                    direction <span class=\"sy0\">=</span> D_RIGHT<span class=\"sy0\">;</span><br/>                    <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">case</span> <span class=\"st0\">'j'</span><span class=\"sy0\">:</span> <span class=\"kw1\">case</span> <span class=\"st0\">'s'</span><span class=\"sy0\">:</span><br/>                    direction <span class=\"sy0\">=</span> D_DOWN<span class=\"sy0\">;</span><br/>                    <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">case</span> <span class=\"st0\">'k'</span><span class=\"sy0\">:</span> <span class=\"kw1\">case</span> <span class=\"st0\">'w'</span><span class=\"sy0\">:</span><br/>                    direction <span class=\"sy0\">=</span> D_UP<span class=\"sy0\">;</span><br/>                    <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">case</span> <span class=\"st0\">'q'</span><span class=\"sy0\">:</span><br/>                    <span class=\"kw1\">goto</span> game_quit<span class=\"sy0\">;</span><br/>                    <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">case</span> <span class=\"nu0\">27</span><span class=\"sy0\">:</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/getchar.html\"><span class=\"kw3\">getchar</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">91</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        value <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/getchar.html\"><span class=\"kw3\">getchar</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>value<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            <span class=\"kw1\">case</span> <span class=\"nu0\">65</span><span class=\"sy0\">:</span><br/>                                direction <span class=\"sy0\">=</span> D_UP<span class=\"sy0\">;</span><br/>                                <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>                            <span class=\"kw1\">case</span> <span class=\"nu0\">66</span><span class=\"sy0\">:</span><br/>                                direction <span class=\"sy0\">=</span> D_DOWN<span class=\"sy0\">;</span><br/>                                <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>                            <span class=\"kw1\">case</span> <span class=\"nu0\">67</span><span class=\"sy0\">:</span><br/>                                direction <span class=\"sy0\">=</span> D_RIGHT<span class=\"sy0\">;</span><br/>                                <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>                            <span class=\"kw1\">case</span> <span class=\"nu0\">68</span><span class=\"sy0\">:</span><br/>                                direction <span class=\"sy0\">=</span> D_LEFT<span class=\"sy0\">;</span><br/>                                <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>                            <span class=\"kw1\">default</span><span class=\"sy0\">:</span><br/>                                found_valid_key <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                                <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span><br/>                    <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">default</span><span class=\"sy0\">:</span><br/>                    found_valid_key <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span>  <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>found_valid_key<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        do_tick<span class=\"br0\">(</span>direction<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>game.<span class=\"me1\">have_moved</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                do_newblock<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        do_draw<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>do_check_end_condition<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">case</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><br/>                <span class=\"kw1\">goto</span> game_lose<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span><br/>                <span class=\"kw1\">goto</span> game_win<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> <span class=\"nu0\">0</span><span class=\"sy0\">:</span><br/>                <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>game_lose<span class=\"sy0\">:</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"You lose!<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">goto</span> game_quit<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>game_win<span class=\"sy0\">:</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"You win!<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">goto</span> game_quit<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>game_quit<span class=\"sy0\">:</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* Restore terminal settings */</span><br/>    tcsetattr<span class=\"br0\">(</span>STDIN_FILENO<span class=\"sy0\">,</span> TCSANOW<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>oldt<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C++", "loc": 195, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;time.h&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;iomanip&gt;</span><br/><span class=\"co2\">#include &lt;cstdlib&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> uint<span class=\"sy4\">;</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/><span class=\"kw2\">enum</span> movDir <span class=\"br0\">{</span> UP, DOWN, LEFT, RIGHT <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> tile<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    tile<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy4\">:</span> val<span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span>, blocked<span class=\"br0\">(</span> <span class=\"kw2\">false</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    uint val<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">bool</span> blocked<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> g2048<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    g2048<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy4\">:</span> done<span class=\"br0\">(</span> <span class=\"kw2\">false</span> <span class=\"br0\">)</span>, win<span class=\"br0\">(</span> <span class=\"kw2\">false</span> <span class=\"br0\">)</span>, moved<span class=\"br0\">(</span> <span class=\"kw2\">true</span> <span class=\"br0\">)</span>, score<span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> loop<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\taddTile<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"kw2\">true</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> moved <span class=\"br0\">)</span> addTile<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    drawBoard<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> done <span class=\"br0\">)</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t    waitKey<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\tstring s <span class=\"sy1\">=</span> <span class=\"st0\">\"Game Over!\"</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> win <span class=\"br0\">)</span> s <span class=\"sy1\">=</span> <span class=\"st0\">\"You've made it!\"</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> s <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">void</span> drawBoard<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw3\">system</span><span class=\"br0\">(</span> <span class=\"st0\">\"cls\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"SCORE: \"</span> <span class=\"sy1\">&lt;&lt;</span> score <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> y <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> y <span class=\"sy1\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span> y<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"+------+------+------+------+\"</span> <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"| \"</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span>board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"br0\">)</span> <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> setw<span class=\"br0\">(</span> <span class=\"nu0\">4</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> setw<span class=\"br0\">(</span> <span class=\"nu0\">4</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" | \"</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"+------+------+------+------+\"</span> <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> waitKey<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tmoved <span class=\"sy1\">=</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span> <span class=\"kw4\">char</span> c<span class=\"sy4\">;</span> <br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"(W)Up (S)Down (A)Left (D)Right \"</span><span class=\"sy4\">;</span> <span class=\"kw3\">cin</span> <span class=\"sy1\">&gt;&gt;</span> c<span class=\"sy4\">;</span> c <span class=\"sy3\">&amp;</span><span class=\"sy1\">=</span> <span class=\"nu12\">0x5F</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">switch</span><span class=\"br0\">(</span> c <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">case</span> <span class=\"st0\">'W'</span><span class=\"sy4\">:</span> move<span class=\"br0\">(</span> UP <span class=\"br0\">)</span><span class=\"sy4\">;</span><span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">case</span> <span class=\"st0\">'A'</span><span class=\"sy4\">:</span> move<span class=\"br0\">(</span> LEFT <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">case</span> <span class=\"st0\">'S'</span><span class=\"sy4\">:</span> move<span class=\"br0\">(</span> DOWN <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">case</span> <span class=\"st0\">'D'</span><span class=\"sy4\">:</span> move<span class=\"br0\">(</span> RIGHT <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> y <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> y <span class=\"sy1\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span> y<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t\tboard<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">blocked</span> <span class=\"sy1\">=</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> addTile<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> y <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> y <span class=\"sy1\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span> y<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span>board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t    uint a, b<span class=\"sy4\">;</span><br/>\t\t    <span class=\"kw1\">do</span><br/>\t\t    <span class=\"br0\">{</span> a <span class=\"sy1\">=</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span> b <span class=\"sy1\">=</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\t\t    <span class=\"kw1\">while</span><span class=\"br0\">(</span> board<span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">[</span>b<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t\t    <span class=\"kw4\">int</span> s <span class=\"sy1\">=</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">100</span><span class=\"sy4\">;</span><br/>\t\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> s <span class=\"sy1\">&gt;</span> <span class=\"nu0\">89</span> <span class=\"br0\">)</span> board<span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">[</span>b<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">=</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span><br/>\t\t    <span class=\"kw1\">else</span> board<span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">[</span>b<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span><br/>\t\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> canMove<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\tdone <span class=\"sy1\">=</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">bool</span> canMove<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> y <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> y <span class=\"sy1\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span> y<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span>board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> y <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> y <span class=\"sy1\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span> y<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> testAdd<span class=\"br0\">(</span> x <span class=\"sy2\">+</span> <span class=\"nu0\">1</span>, y, board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> testAdd<span class=\"br0\">(</span> x <span class=\"sy2\">-</span> <span class=\"nu0\">1</span>, y, board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> testAdd<span class=\"br0\">(</span> x, y <span class=\"sy2\">+</span> <span class=\"nu0\">1</span>, board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> testAdd<span class=\"br0\">(</span> x, y <span class=\"sy2\">-</span> <span class=\"nu0\">1</span>, board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">bool</span> testAdd<span class=\"br0\">(</span> <span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y, uint v <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> x <span class=\"sy1\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy3\">||</span> x <span class=\"sy1\">&gt;</span> <span class=\"nu0\">3</span> <span class=\"sy3\">||</span> y <span class=\"sy1\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy3\">||</span> y <span class=\"sy1\">&gt;</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">return</span> board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">==</span> v<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> moveVert<span class=\"br0\">(</span> <span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y, <span class=\"kw4\">int</span> d <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y <span class=\"sy2\">+</span> d<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy3\">&amp;&amp;</span> board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y <span class=\"sy2\">+</span> d<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">==</span> board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy3\">&amp;&amp;</span> <span class=\"sy3\">!</span>board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">blocked</span> <span class=\"sy3\">&amp;&amp;</span> <span class=\"sy3\">!</span>board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y <span class=\"sy2\">+</span> d<span class=\"br0\">]</span>.<span class=\"me1\">blocked</span>  <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t    board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y <span class=\"sy2\">+</span> d<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy2\">*</span><span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span><br/>\t    score <span class=\"sy2\">+</span><span class=\"sy1\">=</span> board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y <span class=\"sy2\">+</span> d<span class=\"br0\">]</span>.<span class=\"me1\">val</span><span class=\"sy4\">;</span><br/>\t    board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y <span class=\"sy2\">+</span> d<span class=\"br0\">]</span>.<span class=\"me1\">blocked</span> <span class=\"sy1\">=</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>\t    moved <span class=\"sy1\">=</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span>board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y <span class=\"sy2\">+</span> d<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy3\">&amp;&amp;</span> board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y <span class=\"sy2\">+</span> d<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">=</span> board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span><span class=\"sy4\">;</span><br/>\t    board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t    moved <span class=\"sy1\">=</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> d <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> y <span class=\"sy2\">+</span> d <span class=\"sy1\">&lt;</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span> moveVert<span class=\"br0\">(</span> x, y <span class=\"sy2\">+</span> d,  <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\t<span class=\"kw1\">else</span>        <span class=\"br0\">{</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> y <span class=\"sy2\">+</span> d <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> moveVert<span class=\"br0\">(</span> x, y <span class=\"sy2\">+</span> d, <span class=\"sy2\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> moveHori<span class=\"br0\">(</span> <span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y, <span class=\"kw4\">int</span> d <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> board<span class=\"br0\">[</span>x <span class=\"sy2\">+</span> d<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy3\">&amp;&amp;</span> board<span class=\"br0\">[</span>x <span class=\"sy2\">+</span> d<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">==</span> board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy3\">&amp;&amp;</span> <span class=\"sy3\">!</span>board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">blocked</span> <span class=\"sy3\">&amp;&amp;</span> <span class=\"sy3\">!</span>board<span class=\"br0\">[</span>x <span class=\"sy2\">+</span> d<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">blocked</span>  <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t    board<span class=\"br0\">[</span>x <span class=\"sy2\">+</span> d<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy2\">*</span><span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span><br/>\t    score <span class=\"sy2\">+</span><span class=\"sy1\">=</span> board<span class=\"br0\">[</span>x <span class=\"sy2\">+</span> d<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span><span class=\"sy4\">;</span><br/>\t    board<span class=\"br0\">[</span>x <span class=\"sy2\">+</span> d<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">blocked</span> <span class=\"sy1\">=</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>\t    moved <span class=\"sy1\">=</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span>board<span class=\"br0\">[</span>x <span class=\"sy2\">+</span> d<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy3\">&amp;&amp;</span> board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    board<span class=\"br0\">[</span>x <span class=\"sy2\">+</span> d<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">=</span> board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span><span class=\"sy4\">;</span><br/>\t    board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t    moved <span class=\"sy1\">=</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> d <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> x <span class=\"sy2\">+</span> d <span class=\"sy1\">&lt;</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span> moveHori<span class=\"br0\">(</span> x <span class=\"sy2\">+</span> d, y,  <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\t<span class=\"kw1\">else</span>        <span class=\"br0\">{</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> x <span class=\"sy2\">+</span> d <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> moveHori<span class=\"br0\">(</span> x <span class=\"sy2\">+</span> d, y, <span class=\"sy2\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> move<span class=\"br0\">(</span> movDir d <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">switch</span><span class=\"br0\">(</span> d <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">case</span> UP<span class=\"sy4\">:</span><br/>\t    \t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t    <span class=\"kw4\">int</span> y <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\t\t    <span class=\"kw1\">while</span><span class=\"br0\">(</span> y <span class=\"sy1\">&lt;</span> <span class=\"nu0\">4</span> <span class=\"br0\">)</span><br/>\t\t    <span class=\"br0\">{</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"br0\">)</span> moveVert<span class=\"br0\">(</span> x, y, <span class=\"sy2\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> y<span class=\"sy2\">++</span><span class=\"sy4\">;</span><span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">case</span> DOWN<span class=\"sy4\">:</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t    <span class=\"kw4\">int</span> y <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span><br/>\t\t    <span class=\"kw1\">while</span><span class=\"br0\">(</span> y <span class=\"sy1\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/>\t\t    <span class=\"br0\">{</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"br0\">)</span> moveVert<span class=\"br0\">(</span> x, y, <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> y<span class=\"sy2\">--</span><span class=\"sy4\">;</span><span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">case</span> LEFT<span class=\"sy4\">:</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> y <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> y <span class=\"sy1\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span> y<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t    <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\t\t    <span class=\"kw1\">while</span><span class=\"br0\">(</span> x <span class=\"sy1\">&lt;</span> <span class=\"nu0\">4</span> <span class=\"br0\">)</span><br/>\t\t    <span class=\"br0\">{</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"br0\">)</span> moveHori<span class=\"br0\">(</span> x, y, <span class=\"sy2\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> x<span class=\"sy2\">++</span><span class=\"sy4\">;</span><span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">case</span> RIGHT<span class=\"sy4\">:</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> y <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> y <span class=\"sy1\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span> y<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t    <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span><br/>\t\t    <span class=\"kw1\">while</span><span class=\"br0\">(</span> x <span class=\"sy1\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/>\t\t    <span class=\"br0\">{</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"br0\">)</span> moveHori<span class=\"br0\">(</span> x, y, <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> x<span class=\"sy2\">--</span><span class=\"sy4\">;</span><span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    tile board<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">bool</span> win, done, moved<span class=\"sy4\">;</span><br/>    uint score<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw3\">srand</span><span class=\"br0\">(</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span>uint<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> <span class=\"kw3\">time</span><span class=\"br0\">(</span> <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    g2048 g<span class=\"sy4\">;</span> g.<span class=\"me1\">loop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw3\">system</span><span class=\"br0\">(</span> <span class=\"st0\">\"pause\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 120, "block": "<pre class=\"clojure highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">ns</span> <span class=\"nu0\">2048</span><br/>  <span class=\"br0\">(</span>:<span class=\"me1\">require</span> <span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>string\u00a0:<span class=\"me1\">as</span> <span class=\"kw1\">str</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;Preferences</span><br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> textures <span class=\"br0\">{</span>:<span class=\"me1\">wall</span>      <span class=\"st0\">\"----+\"</span><br/>              \u00a0:<span class=\"me1\">cell</span>      <span class=\"st0\">\"%4s|\"</span><br/>              \u00a0:<span class=\"me1\">cell</span><span class=\"sy0\">-</span>edge <span class=\"st0\">\"|\"</span><br/>              \u00a0:<span class=\"me1\">wall</span><span class=\"sy0\">-</span>edge <span class=\"st0\">\"+\"</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> directions <span class=\"br0\">{</span>:<span class=\"me1\">w</span>\u00a0:<span class=\"me1\">up</span><br/>                \u00a0:<span class=\"me1\">s</span>\u00a0:<span class=\"me1\">down</span><br/>                \u00a0:<span class=\"me1\">a</span>\u00a0:<span class=\"me1\">left</span><br/>                \u00a0:<span class=\"me1\">d</span>\u00a0:<span class=\"me1\">right</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> field<span class=\"sy0\">-</span>size <span class=\"br0\">{</span>:<span class=\"me1\">y</span> <span class=\"nu0\">4</span>\u00a0:<span class=\"me1\">x</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;Output</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> cells<span class=\"sy0\">-&gt;</span><span class=\"kw1\">str</span> <span class=\"br0\">[</span>line<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">str</span> <span class=\"br0\">(</span>:<span class=\"me1\">cell</span><span class=\"sy0\">-</span>edge textures<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">str</span><span class=\"sy0\">/</span>join <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span>partial <span class=\"kw1\">format</span> <span class=\"br0\">(</span>:<span class=\"me1\">cell</span> textures<span class=\"br0\">)</span><span class=\"br0\">)</span> line<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> walls<span class=\"sy0\">-&gt;</span><span class=\"kw1\">str</span> <span class=\"br0\">[</span>width<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">str</span> <span class=\"br0\">(</span>:<span class=\"me1\">wall</span><span class=\"sy0\">-</span>edge textures<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">str</span><span class=\"sy0\">/</span>join <span class=\"br0\">(</span><span class=\"kw1\">repeat</span> width <span class=\"br0\">(</span>:<span class=\"me1\">wall</span> textures<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> field<span class=\"sy0\">-&gt;</span><span class=\"kw1\">str</span> <span class=\"br0\">[</span>field<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>height <span class=\"br0\">(</span><span class=\"kw1\">count</span> field<span class=\"br0\">)</span><br/>        width <span class=\"br0\">(</span><span class=\"kw1\">count</span> <span class=\"br0\">(</span><span class=\"kw1\">first</span> field<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">str</span> <span class=\"br0\">(</span><span class=\"kw1\">str</span><span class=\"sy0\">/</span>join <span class=\"br0\">(</span><span class=\"kw1\">interleave</span> <span class=\"br0\">(</span><span class=\"kw1\">repeat</span> height <span class=\"br0\">(</span>walls<span class=\"sy0\">-&gt;</span><span class=\"kw1\">str</span> width<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                               <span class=\"br0\">(</span><span class=\"kw1\">map</span> cells<span class=\"sy0\">-&gt;</span><span class=\"kw1\">str</span> field<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>walls<span class=\"sy0\">-&gt;</span><span class=\"kw1\">str</span> width<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;Misc</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> handle<span class=\"sy0\">-</span>input <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>input <span class=\"br0\">(</span>read<span class=\"br0\">)</span><br/>        try<span class=\"sy0\">-</span>dir <span class=\"br0\">(</span><span class=\"br0\">(</span>keyword input<span class=\"br0\">)</span> directions<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> try<span class=\"sy0\">-</span>dir try<span class=\"sy0\">-</span>dir <span class=\"br0\">(</span><span class=\"kw1\">recur</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> get<span class=\"sy0\">-</span>columns <span class=\"br0\">[</span>field<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">vec</span> <span class=\"br0\">(</span><span class=\"kw1\">for</span> <span class=\"br0\">[</span>x <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> <span class=\"br0\">(</span><span class=\"kw1\">first</span> field<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">vec</span> <span class=\"br0\">(</span><span class=\"kw1\">for</span> <span class=\"br0\">[</span>y <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> field<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>                <span class=\"br0\">(</span>get<span class=\"sy0\">-</span>in field <span class=\"br0\">[</span>y x<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> reverse<span class=\"sy0\">-</span>lines <span class=\"br0\">[</span>field<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>mapv #<span class=\"br0\">(</span><span class=\"kw1\">vec</span> <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span> field<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> padding <span class=\"br0\">[</span>coll n sym<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">vec</span> <span class=\"br0\">(</span><span class=\"kw1\">concat</span> coll <span class=\"br0\">(</span><span class=\"kw1\">repeat</span> n sym<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> find<span class=\"sy0\">-</span>empties <span class=\"br0\">[</span>field<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">remove</span><br/>    <span class=\"kw1\">nil?</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">for</span> <span class=\"br0\">[</span>y <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> field<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          x <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> <span class=\"br0\">(</span>nth field y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>get<span class=\"sy0\">-</span>in field <span class=\"br0\">[</span>y x<span class=\"br0\">]</span><span class=\"br0\">)</span> \\space<span class=\"br0\">)</span> <span class=\"br0\">[</span>y x<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> random<span class=\"sy0\">-</span>add <span class=\"br0\">[</span>field<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>empties <span class=\"br0\">(</span><span class=\"kw1\">vec</span> <span class=\"br0\">(</span>find<span class=\"sy0\">-</span>empties field<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>assoc<span class=\"sy0\">-</span>in field<br/>              <span class=\"br0\">(</span>rand<span class=\"sy0\">-</span>nth empties<span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span>rand<span class=\"sy0\">-</span>nth <span class=\"br0\">(</span><span class=\"kw1\">conj</span> <span class=\"br0\">(</span><span class=\"kw1\">vec</span> <span class=\"br0\">(</span><span class=\"kw1\">repeat</span> <span class=\"nu0\">9</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> win<span class=\"sy0\">-</span>check <span class=\"br0\">[</span>field<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">2048</span><br/>     <span class=\"br0\">(</span>transduce<br/>       <span class=\"br0\">(</span><span class=\"kw1\">filter</span> number?<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>completing max<span class=\"br0\">)</span><br/>       <span class=\"nu0\">0</span><br/>       <span class=\"br0\">(</span>flatten field<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> lose<span class=\"sy0\">-</span>check <span class=\"br0\">[</span>field<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">empty?</span> <span class=\"br0\">(</span><span class=\"kw1\">filter</span> <span class=\"br0\">(</span>partial <span class=\"sy0\">=</span> \\space<span class=\"br0\">)</span> <span class=\"br0\">(</span>flatten field<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> create<span class=\"sy0\">-</span>start<span class=\"sy0\">-</span>field <span class=\"br0\">[</span>y x<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">vec</span> <span class=\"br0\">(</span><span class=\"kw1\">repeat</span> y <span class=\"br0\">(</span><span class=\"kw1\">vec</span> <span class=\"br0\">(</span><span class=\"kw1\">repeat</span> x \\space<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>random<span class=\"sy0\">-</span>add<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>random<span class=\"sy0\">-</span>add<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;Algo</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> lines<span class=\"sy0\">-</span>by<span class=\"sy0\">-</span>dir <span class=\"br0\">[</span>back? direction field<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>case direction<br/>   \u00a0:<span class=\"me1\">left</span> field<br/>   \u00a0:<span class=\"me1\">right</span> <span class=\"br0\">(</span>reverse<span class=\"sy0\">-</span>lines field<span class=\"br0\">)</span><br/>   \u00a0:<span class=\"me1\">down</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> back?<br/>            <span class=\"br0\">(</span>get<span class=\"sy0\">-</span>columns <span class=\"br0\">(</span>reverse<span class=\"sy0\">-</span>lines field<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>reverse<span class=\"sy0\">-</span>lines <span class=\"br0\">(</span>get<span class=\"sy0\">-</span>columns field<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   \u00a0:<span class=\"me1\">up</span> <span class=\"br0\">(</span>get<span class=\"sy0\">-</span>columns field<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> shift<span class=\"sy0\">-</span>line <span class=\"br0\">[</span>line<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>len <span class=\"br0\">(</span><span class=\"kw1\">count</span> line<span class=\"br0\">)</span><br/>        line <span class=\"br0\">(</span><span class=\"kw1\">vec</span> <span class=\"br0\">(</span><span class=\"kw1\">filter</span> number? line<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        max<span class=\"sy0\">-</span>idx <span class=\"br0\">(</span><span class=\"kw1\">dec</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> line<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">loop</span> <span class=\"br0\">[</span>new <span class=\"br0\">[</span><span class=\"br0\">]</span> idx <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> idx max<span class=\"sy0\">-</span>idx<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>padding new <span class=\"br0\">(</span><span class=\"sy0\">-</span> len <span class=\"br0\">(</span><span class=\"kw1\">count</span> new<span class=\"br0\">)</span><span class=\"br0\">)</span> \\space<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>nth line idx<span class=\"br0\">)</span> <span class=\"br0\">(</span>get line <span class=\"br0\">(</span><span class=\"kw1\">inc</span> idx<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span><span class=\"kw1\">conj</span> new <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"br0\">(</span>nth line idx<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"nu0\">2</span> idx<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span><span class=\"kw1\">conj</span> new <span class=\"br0\">(</span>nth line idx<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">inc</span> idx<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> shift<span class=\"sy0\">-</span>field <span class=\"br0\">[</span>direction field<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span> <span class=\"br0\">(</span>lines<span class=\"sy0\">-</span>by<span class=\"sy0\">-</span>dir false direction field<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>mapv shift<span class=\"sy0\">-</span>line<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>lines<span class=\"sy0\">-</span>by<span class=\"sy0\">-</span>dir true direction<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> handle<span class=\"sy0\">-</span>turn <span class=\"br0\">[</span>field<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>direction <span class=\"br0\">(</span>handle<span class=\"sy0\">-</span>input<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span> <span class=\"br0\">(</span>shift<span class=\"sy0\">-</span>field direction field<span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>random<span class=\"sy0\">-</span>add<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> play<span class=\"sy0\">-</span><span class=\"nu0\">2048</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">loop</span> <span class=\"br0\">[</span>field <span class=\"br0\">(</span>create<span class=\"sy0\">-</span>start<span class=\"sy0\">-</span>field <span class=\"br0\">(</span>:<span class=\"me1\">y</span> field<span class=\"sy0\">-</span>size<span class=\"br0\">)</span> <span class=\"br0\">(</span>:<span class=\"me1\">x</span> field<span class=\"sy0\">-</span>size<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>println <span class=\"br0\">(</span>field<span class=\"sy0\">-&gt;</span><span class=\"kw1\">str</span> field<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span>win<span class=\"sy0\">-</span>check field<span class=\"br0\">)</span> <span class=\"br0\">(</span>println <span class=\"st0\">\"You win\"</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>lose<span class=\"sy0\">-</span>check field<span class=\"br0\">)</span> <span class=\"br0\">(</span>println <span class=\"st0\">\"You lose\"</span><span class=\"br0\">)</span><br/>         \u00a0:<span class=\"me1\">default</span> <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span>handle<span class=\"sy0\">-</span>turn field<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>play<span class=\"sy0\">-</span><span class=\"nu0\">2048</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 201, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>ql<span class=\"sy0\">:</span><span class=\"me1\">quickload</span> '<span class=\"br0\">(</span>cffi alexandria<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defpackage <span class=\"sy0\">:</span><span class=\"nu0\">2048</span>-lisp<br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">use</span> <span class=\"sy0\">:</span><span class=\"me1\">common-lisp</span> <span class=\"sy0\">:</span><span class=\"me1\">cffi</span> <span class=\"sy0\">:</span><span class=\"me1\">alexandria</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>in-package <span class=\"sy0\">:</span><span class=\"nu0\">2048</span>-lisp<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defvar *lib-loaded* <span class=\"kw1\">nil</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>unless *lib-loaded*<br/>  <span class=\"co1\">;; Load msvcrt.dll to access _getch.</span><br/>  <span class=\"br0\">(</span>define-foreign-library msvcrt<br/>    <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">windows</span> <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">default</span> <span class=\"st0\">\"msvcrt\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"br0\">(</span>use-foreign-library msvcrt<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"br0\">(</span>defcfun <span class=\"st0\">\"_getch\"</span> <span class=\"sy0\">:</span><span class=\"me1\">int</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"br0\">(</span><span class=\"kw1\">setf</span> *lib-loaded* t<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> read-arrow <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Get an arrow key from input as UP, DOWN, LEFT, or RIGHT, otherwise<br/>return a char of whatever was pressed.\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>first-char <span class=\"br0\">(</span>-getch<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">224</span> first-char<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">case</span> <span class=\"br0\">(</span>-getch<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"nu0\">75</span> 'left<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"nu0\">80</span> 'down<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"nu0\">77</span> 'right<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"nu0\">72</span> 'up<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>code-char first-char<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defmacro</span> swap <span class=\"br0\">(</span>place1 place2<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Exchange the values of two places.\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>temp <span class=\"br0\">(</span><span class=\"kw1\">gensym</span> <span class=\"st0\">\"TEMP\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    `<span class=\"br0\">(</span>cl<span class=\"sy0\">:</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">,</span>temp <span class=\"sy0\">,</span>place1<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>cl<span class=\"sy0\">:</span><span class=\"kw1\">setf</span> <span class=\"sy0\">,</span>place1 <span class=\"sy0\">,</span>place2<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>cl<span class=\"sy0\">:</span><span class=\"kw1\">setf</span> <span class=\"sy0\">,</span>place2 <span class=\"sy0\">,</span>temp<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> nflip <span class=\"br0\">(</span>board <span class=\"sy0\">&amp;</span>optional <span class=\"br0\">(</span>left-right t<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Flip the elements of a BOARD left and right or optionally up and down.\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>y-len <span class=\"br0\">(</span>array-dimension board <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>x-len <span class=\"br0\">(</span>array-dimension board <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>y-<span class=\"kw1\">max</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> left-right y-len <span class=\"br0\">(</span><span class=\"kw1\">truncate</span> y-len <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>x-<span class=\"kw1\">max</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> left-right <span class=\"br0\">(</span><span class=\"kw1\">truncate</span> x-len <span class=\"nu0\">2</span><span class=\"br0\">)</span> x-len<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>loop for y from <span class=\"nu0\">0</span> below y-<span class=\"kw1\">max</span><br/>       for y-place <span class=\"sy0\">=</span> <span class=\"br0\">(</span>- y-len <span class=\"nu0\">1</span> y<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>         <span class=\"br0\">(</span>loop for x from <span class=\"nu0\">0</span> below x-<span class=\"kw1\">max</span><br/>            for x-place <span class=\"sy0\">=</span> <span class=\"br0\">(</span>- x-len <span class=\"nu0\">1</span> x<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">if</span> left-right<br/>                  <span class=\"br0\">(</span>swap <span class=\"br0\">(</span><span class=\"kw1\">aref</span> board y x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> board y x-place<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span>swap <span class=\"br0\">(</span><span class=\"kw1\">aref</span> board y x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> board y-place x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    board<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> flip <span class=\"br0\">(</span>board <span class=\"sy0\">&amp;</span>optional <span class=\"br0\">(</span>left-right t<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Flip the elements of a BOARD left and right or optionally up and down.<br/>Non-destructive version.\"</span><br/>  <span class=\"br0\">(</span>nflip <span class=\"br0\">(</span>copy-<span class=\"kw1\">array</span> board<span class=\"br0\">)</span> left-right<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> transpose <span class=\"br0\">(</span>board<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Transpose the elements of BOARD into a new array.\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>y-len <span class=\"br0\">(</span>array-dimension board <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>x-len <span class=\"br0\">(</span>array-dimension board <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>new-board <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> <span class=\"br0\">(</span>array-dimensions board<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>loop for y from <span class=\"nu0\">0</span> below y-len <span class=\"kw1\">do</span><br/>         <span class=\"br0\">(</span>loop for x from <span class=\"nu0\">0</span> below x-len <span class=\"kw1\">do</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> new-board x y<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> board y x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    new-board<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> add-random-piece <span class=\"br0\">(</span>board<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Find a random empty spot on the BOARD to add a new piece.<br/>Return T if successful, NIL otherwise.\"</span><br/>  <span class=\"br0\">(</span>loop<br/>     for x from <span class=\"nu0\">0</span> below <span class=\"br0\">(</span>array-total-size board<span class=\"br0\">)</span><br/>     unless <span class=\"br0\">(</span>row-major-<span class=\"kw1\">aref</span> board x<span class=\"br0\">)</span><br/>     count <span class=\"nu0\">1</span> into count<br/>     <span class=\"kw1\">and</span> collect x into indices<br/>     finally<br/>       <span class=\"br0\">(</span>unless <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">0</span> count<span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>row-major-<span class=\"kw1\">aref</span> board <span class=\"br0\">(</span><span class=\"kw1\">nth</span> <span class=\"br0\">(</span><span class=\"kw1\">random</span> count<span class=\"br0\">)</span> indices<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"kw1\">random</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">4</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">return</span> t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> squash-line <span class=\"br0\">(</span>line<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Reduce a sequence of numbers from left to right according to<br/>the rules of 2048. Return the score of squashing as well.\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>squashed<br/>          <span class=\"br0\">(</span>reduce<br/>           <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>acc x<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">equal</span> x <span class=\"br0\">(</span><span class=\"kw1\">car</span> acc<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span>* <span class=\"nu0\">2</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> acc<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span><span class=\"kw1\">cons</span> x acc<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>nreverse <span class=\"br0\">(</span>remove-<span class=\"kw1\">if</span> #'<span class=\"kw1\">null</span> line<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"sy0\">:</span><span class=\"me1\">initial-</span><span class=\"kw1\">value</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>new-line <span class=\"br0\">(</span>flatten squashed<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">append</span> <span class=\"br0\">(</span><span class=\"kw1\">make-list</span> <span class=\"br0\">(</span>- <span class=\"br0\">(</span><span class=\"kw1\">length</span> line<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> new-line<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> new-line<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>reduce #'+ <span class=\"br0\">(</span>flatten <span class=\"br0\">(</span>remove-if-<span class=\"kw1\">not</span> #'<span class=\"kw1\">listp</span> squashed<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> squash-board <span class=\"br0\">(</span>board<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Reduce each row of a board from left to right according to<br/>the rules of 2048. Return the total score of squashing the board as well.\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>y-len <span class=\"br0\">(</span>array-dimension board <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>x-len <span class=\"br0\">(</span>array-dimension board <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>total <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> <span class=\"br0\">(</span>array-dimensions board<span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"me1\">initial-contents</span><br/>                      <span class=\"br0\">(</span>loop for y from <span class=\"nu0\">0</span> below y-len<br/>                         for <span class=\"br0\">(</span>line score<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>                           <span class=\"br0\">(</span>squash-line<br/>                            <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> x-len<br/>                                        <span class=\"sy0\">:</span><span class=\"me1\">displaced-to</span> board<br/>                                        <span class=\"sy0\">:</span><span class=\"me1\">displaced-index-offset</span><br/>                                        <span class=\"br0\">(</span>array-row-major-index board y <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                         collect line<br/>                         <span class=\"kw1\">do</span> <span class=\"br0\">(</span>incf total score<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          total<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> make-move <span class=\"br0\">(</span>board direction<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Make a move in the given DIRECTION on a new board.\"</span><br/>  <span class=\"co1\">;; Move by always squashing right, but transforming the board as needed.</span><br/>  <span class=\"br0\">(</span>destructuring-bind <span class=\"br0\">(</span>new-board score<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">case</span> direction<br/>        <span class=\"br0\">(</span>up <span class=\"br0\">(</span>squash-board <span class=\"br0\">(</span>flip <span class=\"br0\">(</span>transpose board<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>down <span class=\"br0\">(</span>squash-board <span class=\"br0\">(</span>flip <span class=\"br0\">(</span>transpose board<span class=\"br0\">)</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>left <span class=\"br0\">(</span>squash-board <span class=\"br0\">(</span>nflip <span class=\"br0\">(</span>flip board <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>right <span class=\"br0\">(</span>squash-board board<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>new-board<br/>           <span class=\"co1\">;; Reverse the transformation.</span><br/>           <span class=\"br0\">(</span><span class=\"kw1\">case</span> direction<br/>             <span class=\"br0\">(</span>up <span class=\"br0\">(</span>transpose <span class=\"br0\">(</span>nflip new-board<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>down <span class=\"br0\">(</span>transpose <span class=\"br0\">(</span>nflip new-board <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>left <span class=\"br0\">(</span>nflip <span class=\"br0\">(</span>nflip new-board <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>right new-board<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>unless <span class=\"br0\">(</span>equalp board new-board<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>add-random-piece new-board<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">list</span> new-board score<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> winp <span class=\"br0\">(</span>board winning-tile<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Determine if a BOARD is in a winning state.\"</span><br/>  <span class=\"br0\">(</span>loop for x from <span class=\"nu0\">0</span> below <span class=\"br0\">(</span>array-total-size board<span class=\"br0\">)</span><br/>     for val <span class=\"sy0\">=</span> <span class=\"br0\">(</span>row-major-<span class=\"kw1\">aref</span> board x<span class=\"br0\">)</span><br/>     <span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">eql</span> val winning-tile<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw1\">return</span> t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> game-overp <span class=\"br0\">(</span>board<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Determine if a BOARD is in a game over state.\"</span><br/>  <span class=\"co1\">;; If a move is simulated in every direction and nothing changes,</span><br/>  <span class=\"co1\">;; then we can assume there are no valid moves left.</span><br/>  <span class=\"br0\">(</span>notany <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>dir<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> <span class=\"br0\">(</span>make-move board dir<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          '<span class=\"br0\">(</span>up down left right<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> print-divider <span class=\"br0\">(</span>cells cell-size<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"A print helper function for PRINT-BOARD.\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>_ cells<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">princ</span> <span class=\"st0\">\"+\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>_ cell-size<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">princ</span> <span class=\"st0\">\"-\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">princ</span> <span class=\"st0\">\"+\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>terpri<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> print-board <span class=\"br0\">(</span>board cell-size<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Pretty print the given BOARD with a particular CELL-SIZE.\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>y-len <span class=\"br0\">(</span>array-dimension board <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>x-len <span class=\"br0\">(</span>array-dimension board <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>super-size <span class=\"br0\">(</span>+ <span class=\"nu0\">2</span> cell-size<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>loop for y from <span class=\"nu0\">0</span> below y-len <span class=\"kw1\">do</span><br/>         <span class=\"br0\">(</span>print-divider x-len super-size<span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>loop for x from <span class=\"nu0\">0</span> below x-len<br/>            for val <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> board y x<span class=\"br0\">)</span><br/>            <span class=\"kw1\">do</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">princ</span> <span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">if</span> val<br/>                  <span class=\"br0\">(</span>format t <span class=\"st0\">\" ~VD \"</span> cell-size val<span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>_ super-size<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">princ</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">princ</span> <span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>terpri<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>print-divider x-len super-size<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> init-board <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>board <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> '<span class=\"br0\">(</span><span class=\"nu0\">4</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"me1\">initial-element</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>row-major-<span class=\"kw1\">aref</span> board <span class=\"br0\">(</span><span class=\"kw1\">random</span> <span class=\"br0\">(</span>array-total-size board<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    board<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> prompt-input <span class=\"br0\">(</span>board score <span class=\"sy0\">&amp;</span>optional <span class=\"br0\">(</span>check t<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">and</span> check <span class=\"br0\">(</span>winp board <span class=\"nu0\">2048</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>format t <span class=\"st0\">\"You win!\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">and</span> check <span class=\"br0\">(</span>game-overp board<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>format t <span class=\"st0\">\"Game over...\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>t <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>choice <span class=\"br0\">(</span>read-arrow<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>           <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">symbolp</span> choice<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>destructuring-bind <span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>optional move <span class=\"br0\">(</span>new-score <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span>make-move board choice<span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">if</span> move<br/>                  <span class=\"br0\">(</span>prompt move <span class=\"br0\">(</span>+ score new-score<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span>prompt-input board score<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span><span class=\"br0\">(</span>find choice <span class=\"st0\">\"qQ\"</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>format t <span class=\"st0\">\"Quitting.\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>t <span class=\"br0\">(</span>prompt-input board score <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> prompt <span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>optional <span class=\"br0\">(</span>board <span class=\"br0\">(</span>init-board<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>score <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>format t <span class=\"st0\">\"~%   Score: ~D~%\"</span> score<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>print-board board <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>prompt-input board score<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 192, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">random</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> core.<span class=\"me1\">stdc</span>.<span class=\"me1\">stdlib</span><span class=\"sy0\">:</span> exit<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> G2048 <span class=\"br0\">{</span><br/>    <span class=\"kw4\">public</span> <span class=\"kw4\">void</span> gameLoop<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*@safe @nogc*/</span> <span class=\"br0\">{</span><br/>        addTile<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>moved<span class=\"br0\">)</span><br/>                addTile<span class=\"sy0\">;</span><br/>            drawBoard<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>done<span class=\"br0\">)</span><br/>                <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            waitKey<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        writeln<span class=\"br0\">(</span>win <span class=\"sy0\">?</span> <span class=\"st0\">\"You win!\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"Game Over!\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">private</span><span class=\"sy0\">:</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">struct</span> Tile <span class=\"br0\">{</span><br/>        <span class=\"kw4\">uint</span> val <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">bool</span> blocked <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">enum</span> moveDir <span class=\"br0\">{</span> up<span class=\"sy0\">,</span> down<span class=\"sy0\">,</span> left<span class=\"sy0\">,</span> right <span class=\"br0\">}</span><br/>    <span class=\"kw4\">enum</span> <span class=\"kw4\">uint</span> side <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    Tile<span class=\"br0\">[</span>side<span class=\"br0\">]</span><span class=\"br0\">[</span>side<span class=\"br0\">]</span> board<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">bool</span> win <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">,</span> done <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">,</span> moved <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">uint</span> score <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> drawBoard<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"coMULTI\">/*@safe @nogc*/</span> <span class=\"br0\">{</span><br/>        writeln<span class=\"br0\">(</span><span class=\"st0\">\"SCORE: \"</span><span class=\"sy0\">,</span> score<span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> y<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">side</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            write<span class=\"br0\">(</span><span class=\"st0\">\"+------+------+------+------+<span class=\"es1\">\\n</span>| \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> x<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">side</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span><span class=\"br0\">)</span><br/>                    writef<span class=\"br0\">(</span><span class=\"st0\">\"%4d\"</span><span class=\"sy0\">,</span> board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">else</span><br/>                    writef<span class=\"br0\">(</span><span class=\"st0\">\"%4s\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                write<span class=\"br0\">(</span><span class=\"st0\">\" | \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            writeln<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"st0\">\"+------+------+------+------+<span class=\"es1\">\\n</span>\"</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> waitKey<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*@safe*/</span> <span class=\"br0\">{</span><br/>        moved <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"st0\">\"(W)Up (S)Down (A)Left (D)Right (Q)Quit: \"</span>.<span class=\"me1\">write</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">immutable</span> c <span class=\"sy0\">=</span> readln.<span class=\"me1\">strip</span>.<span class=\"me1\">toLower</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">\"w\"</span><span class=\"sy0\">:</span> move<span class=\"br0\">(</span>moveDir.<span class=\"me1\">up</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">\"a\"</span><span class=\"sy0\">:</span> move<span class=\"br0\">(</span>moveDir.<span class=\"me1\">left</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">\"s\"</span><span class=\"sy0\">:</span> move<span class=\"br0\">(</span>moveDir.<span class=\"me1\">down</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">\"d\"</span><span class=\"sy0\">:</span> move<span class=\"br0\">(</span>moveDir.<span class=\"me1\">right</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">\"q\"</span><span class=\"sy0\">:</span> endGame<span class=\"sy0\">;</span>             <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw2\">default</span><span class=\"sy0\">:</span>                       <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> y<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">side</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> x<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">side</span><span class=\"br0\">)</span><br/>                board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">blocked</span> <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> endGame<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span><br/>        writeln<span class=\"br0\">(</span><span class=\"st0\">\"Game ended with score: \"</span><span class=\"sy0\">,</span> score<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> addTile<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*nothrow*/</span> @<span class=\"kw4\">safe</span> <span class=\"coMULTI\">/*@nogc*/</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> y<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">side</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> x<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">side</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw4\">uint</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>                        a <span class=\"sy0\">=</span> uniform<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> side<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        b <span class=\"sy0\">=</span> uniform<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> side<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>board<span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">[</span>b<span class=\"br0\">]</span>.<span class=\"me1\">val</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                    board<span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">[</span>b<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>uniform01 <span class=\"sy0\">&gt;</span> <span class=\"nu16\">0.89</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> side <span class=\"sy0\">:</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>canMove<span class=\"br0\">)</span><br/>                        <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        done <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">bool</span> canMove<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> y<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">side</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> x<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">side</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> y<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">side</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> x<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">side</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>testAdd<span class=\"br0\">(</span>x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span><br/>                    testAdd<span class=\"br0\">(</span>x <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span><br/>                    testAdd<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span><br/>                    testAdd<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">bool</span> testAdd<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> x<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> y<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> v<span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&gt;</span> <span class=\"nu0\">3</span> <span class=\"sy0\">||</span> y <span class=\"sy0\">&gt;</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy0\">==</span> v<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> moveVertically<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> x<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> y<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> d<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y <span class=\"sy0\">+</span> d<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy0\">&amp;&amp;</span> board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y <span class=\"sy0\">+</span> d<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy0\">==</span> board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy0\">&amp;&amp;</span><br/>            <span class=\"sy0\">!</span>board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">blocked</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y <span class=\"sy0\">+</span> d<span class=\"br0\">]</span>.<span class=\"me1\">blocked</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y <span class=\"sy0\">+</span> d<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>            score <span class=\"sy0\">+=</span> board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y <span class=\"sy0\">+</span> d<span class=\"br0\">]</span>.<span class=\"me1\">val</span><span class=\"sy0\">;</span><br/>            board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y <span class=\"sy0\">+</span> d<span class=\"br0\">]</span>.<span class=\"me1\">blocked</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>            moved <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y <span class=\"sy0\">+</span> d<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy0\">&amp;&amp;</span> board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y <span class=\"sy0\">+</span> d<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy0\">=</span> board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span><span class=\"sy0\">;</span><br/>            board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            moved <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>d <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>y <span class=\"sy0\">+</span> d <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>                moveVertically<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y <span class=\"sy0\">+</span> d<span class=\"sy0\">,</span>  <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>y <span class=\"sy0\">+</span> d <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                moveVertically<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y <span class=\"sy0\">+</span> d<span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> moveHorizontally<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> x<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> y<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> d<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>board<span class=\"br0\">[</span>x <span class=\"sy0\">+</span> d<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy0\">&amp;&amp;</span> board<span class=\"br0\">[</span>x <span class=\"sy0\">+</span> d<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy0\">==</span> board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy0\">&amp;&amp;</span><br/>            <span class=\"sy0\">!</span>board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">blocked</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>board<span class=\"br0\">[</span>x <span class=\"sy0\">+</span> d<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">blocked</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            board<span class=\"br0\">[</span>x <span class=\"sy0\">+</span> d<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>            score <span class=\"sy0\">+=</span> board<span class=\"br0\">[</span>x <span class=\"sy0\">+</span> d<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span><span class=\"sy0\">;</span><br/>            board<span class=\"br0\">[</span>x <span class=\"sy0\">+</span> d<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">blocked</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>            moved <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>board<span class=\"br0\">[</span>x <span class=\"sy0\">+</span> d<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy0\">&amp;&amp;</span> board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            board<span class=\"br0\">[</span>x <span class=\"sy0\">+</span> d<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy0\">=</span> board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span><span class=\"sy0\">;</span><br/>            board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            moved <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>d <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">+</span> d <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>                moveHorizontally<span class=\"br0\">(</span>x <span class=\"sy0\">+</span> d<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span>  <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">+</span> d <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                moveHorizontally<span class=\"br0\">(</span>x <span class=\"sy0\">+</span> d<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> move<span class=\"br0\">(</span><span class=\"kw2\">in</span> moveDir d<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>        <span class=\"kw4\">final</span> <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>d<span class=\"br0\">)</span> <span class=\"kw2\">with</span><span class=\"br0\">(</span>moveDir<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">case</span> up<span class=\"sy0\">:</span><br/>                <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> x<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">side</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> y<span class=\"sy0\">;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"me1\">side</span><span class=\"br0\">)</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span><span class=\"br0\">)</span><br/>                            moveVertically<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> down<span class=\"sy0\">:</span><br/>                <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> x<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">side</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">foreach_reverse</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> y<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span><span class=\"br0\">)</span><br/>                            moveVertically<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> left<span class=\"sy0\">:</span><br/>                <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> y<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">side</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> x<span class=\"sy0\">;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"me1\">side</span><span class=\"br0\">)</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span><span class=\"br0\">)</span><br/>                            moveHorizontally<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> right<span class=\"sy0\">:</span><br/>                <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> y<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">side</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">foreach_reverse</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> x<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>board<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">val</span><span class=\"br0\">)</span><br/>                            moveHorizontally<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*safe*/</span> <span class=\"br0\">{</span><br/>    G2048 g<span class=\"sy0\">;</span><br/>    g.<span class=\"me1\">gameLoop</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 115, "block": "<pre class=\"text highlighted_source\">defmodule Game2048 do<br/>  @size 4<br/>  @range <a class=\"__cf_email__\" data-cfemail=\"a2928c8ce2d1cbd8c78f93\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>\u00a0<br/>  def play(goal \\\\ 2048), do: setup() |&gt; play(goal)<br/>\u00a0<br/>  defp play(board, goal) do<br/>    show(board)<br/>    cond do<br/>      goal in Map.values(board) -&gt;<br/>          IO.puts \"You win!\"<br/>          exit(:normal)<br/>      0 in Map.values(board) or combinable?(board) -&gt;<br/>          moved = move(board, keyin())<br/>          if moved == board, do: play(board, goal), else: add_tile(moved) |&gt; play(goal)<br/>      true -&gt;<br/>          IO.puts \"Game Over!\"<br/>          exit(:normal)<br/>    end<br/>  end<br/>\u00a0<br/>  defp setup do<br/>    (for i &lt;- @range, j &lt;- @range, into:\u00a0%{}, do: {{i,j},0})<br/>    |&gt; add_tile<br/>    |&gt; add_tile<br/>  end<br/>\u00a0<br/>  defp add_tile(board) do<br/>    position = blank_space(board) |&gt; Enum.random<br/>    tile = if\u00a0:rand.uniform(10)==1, do: 4, else: 2<br/>   \u00a0%{board | position =&gt; tile}<br/>  end<br/>\u00a0<br/>  defp blank_space(board) do<br/>    for {key, 0} &lt;- board, do: key<br/>  end<br/>\u00a0<br/>  defp keyin do<br/>    key = IO.gets(\"key in wasd or q: \")<br/>    case String.first(key) do<br/>      \"w\" -&gt;\u00a0:up<br/>      \"a\" -&gt;\u00a0:left<br/>      \"s\" -&gt;\u00a0:down<br/>      \"d\" -&gt;\u00a0:right<br/>      \"q\" -&gt; exit(:normal)<br/>      _   -&gt; keyin()<br/>    end<br/>  end<br/>\u00a0<br/>  defp move(board,\u00a0:up) do<br/>    Enum.reduce(@range, board, fn j,acc -&gt;<br/>      Enum.map(@range, fn i -&gt; acc[{i,j}] end)<br/>      |&gt; move_and_combine<br/>      |&gt; Enum.with_index<br/>      |&gt; Enum.reduce(acc, fn {v,i},map -&gt; Map.put(map, {i,j}, v) end)<br/>    end)<br/>  end<br/>  defp move(board,\u00a0:down) do<br/>    Enum.reduce(@range, board, fn j,acc -&gt;<br/>      Enum.map(@size-1..0, fn i -&gt; acc[{i,j}] end)<br/>      |&gt; move_and_combine<br/>      |&gt; Enum.reverse<br/>      |&gt; Enum.with_index<br/>      |&gt; Enum.reduce(acc, fn {v,i},map -&gt; Map.put(map, {i,j}, v) end)<br/>    end)<br/>  end<br/>  defp move(board,\u00a0:left) do<br/>    Enum.reduce(@range, board, fn i,acc -&gt;<br/>      Enum.map(@range, fn j -&gt; acc[{i,j}] end)<br/>      |&gt; move_and_combine<br/>      |&gt; Enum.with_index<br/>      |&gt; Enum.reduce(acc, fn {v,j},map -&gt; Map.put(map, {i,j}, v) end)<br/>    end)<br/>  end<br/>  defp move(board,\u00a0:right) do<br/>    Enum.reduce(@range, board, fn i,acc -&gt;<br/>      Enum.map(@size-1..0, fn j -&gt; acc[{i,j}] end)<br/>      |&gt; move_and_combine<br/>      |&gt; Enum.reverse<br/>      |&gt; Enum.with_index<br/>      |&gt; Enum.reduce(acc, fn {v,j},map -&gt; Map.put(map, {i,j}, v) end)<br/>    end)<br/>  end<br/>\u00a0<br/>  defp move_and_combine(tiles) do<br/>    (Enum.filter(tiles, &amp;(&amp;1&gt;0)) ++ [0,0,0,0])<br/>    |&gt; Enum.take(@size)<br/>    |&gt; case do<br/>         [a,a,b,b] -&gt; [a*2, b*2, 0, 0]<br/>         [a,a,b,c] -&gt; [a*2, b, c, 0]<br/>         [a,b,b,c] -&gt; [a, b*2, c, 0]<br/>         [a,b,c,c] -&gt; [a, b, c*2, 0]<br/>         x         -&gt; x<br/>       end<br/>  end<br/>\u00a0<br/>  defp combinable?(board) do<br/>    Enum.any?(for i &lt;- @range, j &lt;- <a class=\"__cf_email__\" data-cfemail=\"84b4aaaac4f7edfee1a9b6\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, do: board[{i,j}]==board[{i,j+1}]) or<br/>    Enum.any?(for j &lt;- @range, i &lt;- <a class=\"__cf_email__\" data-cfemail=\"65554b4b25160c1f004857\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, do: board[{i,j}]==board[{i+1,j}])<br/>  end<br/>\u00a0<br/>  @frame   String.duplicate(\"+----\", @size) &lt;&gt; \"+\"<br/>  @format (String.duplicate(\"|~4w\", @size) &lt;&gt; \"|\") |&gt; to_charlist   # before 1.3 to_char_list<br/>\u00a0<br/>  defp show(board) do<br/>    Enum.each(@range, fn i -&gt;<br/>      IO.puts @frame<br/>      row = for j &lt;- @range, do: board[{i,j}]<br/>      IO.puts (:io_lib.fwrite @format, row) |&gt; to_string |&gt; String.replace(\" 0|\", \"  |\")<br/>    end)<br/>    IO.puts @frame<br/>  end<br/>end<br/>\u00a0<br/>Game2048.play 512</pre>"}, {"lang": "Elm", "loc": 403, "block": "<pre class=\"text highlighted_source\">module Main exposing (..)<br/>\u00a0<br/>import Html exposing (Html, div, p, text, button, span, h2)<br/>import Html.Attributes exposing (class, style)<br/>import Html.Events exposing (onClick)<br/>import Keyboard exposing (KeyCode)<br/>import Random<br/>import Tuple<br/>\u00a0<br/>\u00a0<br/>main =<br/>    Html.program<br/>        { init = ( { initialModel | waitingForRandom = True }, generateRandomTiles 2 )<br/>        , view = view<br/>        , update = update<br/>        , subscriptions = always (Keyboard.downs KeyPress)<br/>        }<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>-- MODEL<br/>\u00a0<br/>\u00a0<br/>-- tiles either have a value (2, 4, 8, ...) or are empty<br/>type alias Tile =<br/>    Maybe Int<br/>\u00a0<br/>\u00a0<br/>type alias Model =<br/>    { score\u00a0: Int<br/>    , tiles\u00a0: List Tile<br/>    , hasLost\u00a0: Bool<br/>    , winKeepPlaying\u00a0: Bool<br/>    , waitingForRandom\u00a0: Bool -- prevent user from giving input while waiting for Random Cmd to return<br/>    }<br/>\u00a0<br/>\u00a0<br/>initialModel\u00a0: Model<br/>initialModel =<br/>    { score = 0, tiles = List.repeat 16 Nothing, waitingForRandom = False, hasLost = False, winKeepPlaying = False}<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>-- UPDATE<br/>\u00a0<br/>\u00a0<br/>type alias RandomTileInfo =<br/>    ( Int, Int )<br/>\u00a0<br/>\u00a0<br/>type Msg<br/>    = KeyPress KeyCode<br/>    | AddRandomTiles (List RandomTileInfo)<br/>    | NewGame<br/>    | KeepPlaying<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>-- asks the random generator to generate the information required for later adding random tiles<br/>-- generate a random position for the and value (4 10%, 2 90%) for each tile <br/>-- this uses Random.pair and Random.list to get a variable number of such pairs with one Cmd<br/>generateRandomTiles\u00a0: Int -&gt; Cmd Msg<br/>generateRandomTiles num =<br/>    let<br/>        randomPosition =<br/>            Random.int 0 15<br/>\u00a0<br/>        randomValue =<br/>            Random.int 1 10<br/>                |&gt; Random.map<br/>                    (\\rnd -&gt;<br/>                        if rnd == 10 then<br/>                            4<br/>                        else<br/>                            2<br/>                    )<br/>\u00a0<br/>        -- 10% chance<br/>        randomPositionAndValue =<br/>            Random.pair randomPosition randomValue<br/>    in<br/>        Random.list num randomPositionAndValue |&gt; Random.generate AddRandomTiles<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>-- actually add a random tile to the model<br/>addRandomTile\u00a0: RandomTileInfo -&gt; List Tile -&gt; List Tile<br/>addRandomTile ( newPosition, newValue ) tiles =<br/>    let<br/>        -- newPosition is a value between 0 and 15<br/>        -- go through the list and count the amount of empty tiles we've seen.<br/>        -- if we reached the newPosition\u00a0% emptyTileCount'th empty tile, set its value to newValue<br/>        emptyTileCount =<br/>            List.filter ((==) Nothing) tiles |&gt; List.length<br/>\u00a0<br/>        -- if there are less than 16 empty tiles this is the number of empty tiles we pass<br/>        targetCount =<br/>            newPosition\u00a0% emptyTileCount<br/>\u00a0<br/>        set_ith_empty_tile tile ( countEmpty, newList ) =<br/>            case tile of<br/>                Just value -&gt;<br/>                    ( countEmpty, (Just value)\u00a0:: newList )<br/>\u00a0<br/>                Nothing -&gt;<br/>                    if countEmpty == targetCount then<br/>                        -- replace this empty tile with the new value<br/>                        ( countEmpty + 1, (Just newValue)\u00a0:: newList )<br/>                    else<br/>                        ( countEmpty + 1, Nothing\u00a0:: newList )<br/>    in<br/>        List.foldr set_ith_empty_tile ( 0, [] ) tiles |&gt; Tuple.second<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>-- core game mechanic: move numbers (to the left,<br/>-- moving to the right is equivalent to moving left on the reversed array)<br/>-- this function works on single columns/rows<br/>moveNumbers\u00a0: List Tile -&gt; ( List Tile, Int )<br/>moveNumbers tiles =<br/>    let<br/>        last =<br/>            List.head &lt;&lt; List.reverse<br/>\u00a0<br/>        -- init is to last what tail is to head<br/>        init =<br/>           List.reverse &lt;&lt; List.drop 1 &lt;&lt; List.reverse<br/>\u00a0<br/>        doMove tile ( newTiles, addScore ) =<br/>            case tile of<br/>                -- omit empty tiles when shifting<br/>                Nothing -&gt;<br/>                    ( newTiles, addScore )<br/>\u00a0<br/>                Just value -&gt;<br/>                    case last newTiles of<br/>                        -- if the last already moved tile ...<br/>                        Just (Just value2) -&gt;<br/>                            -- ... has the same value, add a tile with the summed value<br/>                            if value == value2 then<br/>                                ( (init newTiles) ++ [ Just (2 * value) ]<br/>                                , addScore + 2 * value )<br/>                            else<br/>                                -- ... else just add the tile<br/>                                ( newTiles ++ [ Just value ], addScore )<br/>\u00a0<br/>                        _ -&gt;<br/>                            -- ... else just add the tile<br/>                            ( newTiles ++ [ Just value ], addScore )<br/>\u00a0<br/>        ( movedTiles, addScore ) =<br/>            List.foldl doMove ( [], 0 ) tiles<br/>    in<br/>        ( movedTiles ++ List.repeat (4 - List.length movedTiles) Nothing, addScore )<br/>\u00a0<br/>\u00a0<br/>update\u00a0: Msg -&gt; Model -&gt; ( Model, Cmd Msg )<br/>update msg model =<br/>    case msg of<br/>        -- new game button press<br/>        NewGame -&gt;<br/>            if not model.waitingForRandom then<br/>                ( { initialModel | waitingForRandom = True }, generateRandomTiles 2 )<br/>            else<br/>                ( model, Cmd.none )<br/>\u00a0<br/>        -- \"keep playing\" button on win screen<br/>        KeepPlaying -&gt;<br/>            ( { model | winKeepPlaying = True }, Cmd.none)<br/>\u00a0<br/>        -- Random generator Cmd response<br/>        AddRandomTiles tileInfos -&gt;<br/>            let<br/>                newTiles =<br/>                    List.foldl addRandomTile model.tiles tileInfos<br/>            in<br/>                ( { model | tiles = newTiles, waitingForRandom = False }, Cmd.none )<br/>\u00a0<br/>\u00a0<br/>        KeyPress code -&gt;<br/>            let<br/>                -- zip list and indices, apply filter, unzip<br/>                indexedFilter func list =<br/>                    List.map2 (,) (List.range 0 (List.length list - 1)) list<br/>                        |&gt; List.filter func<br/>                        |&gt; List.map Tuple.second<br/>\u00a0<br/>                -- the i'th row (of 4) contains elements i*4, i*4+1, i*4+2, i*4+3<br/>                -- so all elements for which index//4 == i<br/>                i_th_row list i =<br/>                    indexedFilter (((==) i) &lt;&lt; (flip (//) 4) &lt;&lt; Tuple.first) list<br/>\u00a0<br/>                -- the i'th col (of 4) contain elements i, i+4, i+2*4, i+3*4<br/>                -- so all elements for which index%4 == i<br/>                i_th_col list i =<br/>                    indexedFilter (((==) i) &lt;&lt; (flip (%) 4) &lt;&lt; Tuple.first) list<br/>\u00a0<br/>                -- rows and columns of the grid<br/>                rows list =<br/>                    List.map (i_th_row list) (List.range 0 3)<br/>\u00a0<br/>                cols list =<br/>                    List.map (i_th_col list) (List.range 0 3)<br/>\u00a0<br/>                -- move each row or column and unzip the results from each call to moveNumbers<br/>                move =<br/>                    List.unzip &lt;&lt; List.map moveNumbers<br/>\u00a0<br/>                moveReverse =<br/>                    List.unzip &lt;&lt; List.map (Tuple.mapFirst List.reverse &lt;&lt; moveNumbers &lt;&lt; List.reverse)<br/>\u00a0<br/>                -- concat rows back into a flat array and sum all addScores<br/>                unrows =<br/>                    Tuple.mapSecond List.sum &lt;&lt; Tuple.mapFirst List.concat<br/>\u00a0<br/>                -- turn columns back into a flat array and sum all addScores<br/>                uncols =<br/>                    Tuple.mapSecond List.sum &lt;&lt; Tuple.mapFirst (List.concat &lt;&lt; cols &lt;&lt; List.concat)<br/>\u00a0<br/>\u00a0<br/>                -- when shifting left or right each row can be (reverse-) shifted separately<br/>                -- when shifting up or down each column can be (reveerse-) shifted separately<br/>                ( newTiles, addScore ) =<br/>                    case code of<br/>                        37 -&gt;<br/>                            -- left<br/>                            unrows &lt;| move &lt;| rows model.tiles<br/>\u00a0<br/>                        38 -&gt;<br/>                            -- up<br/>                            uncols &lt;| move &lt;| cols model.tiles<br/>\u00a0<br/>                        39 -&gt;<br/>                            -- right<br/>                            unrows &lt;| moveReverse &lt;| rows model.tiles<br/>\u00a0<br/>                        40 -&gt;<br/>                            -- down<br/>                            uncols &lt;| moveReverse &lt;| cols model.tiles<br/>\u00a0<br/>                        _ -&gt;<br/>                            ( model.tiles, 0 )<br/>\u00a0<br/>\u00a0<br/>                containsEmptyTiles =<br/>                    List.any ((==) Nothing)<br/>\u00a0<br/>                containsAnySameNeighbours\u00a0: List Tile -&gt; Bool<br/>                containsAnySameNeighbours list =<br/>                    let<br/>                        tail = List.drop 1 list<br/>                        init = List.reverse &lt;| List.drop 1 &lt;| List.reverse list<br/>                    in<br/>                        List.any (uncurry (==)) &lt;| List.map2 (,) init tail<br/>                hasLost =<br/>                     -- grid full<br/>                    (not (containsEmptyTiles newTiles))<br/>                        -- and no left/right move possible<br/>                        &amp;&amp; (not &lt;| List.any containsAnySameNeighbours &lt;| rows newTiles)<br/>                        -- and no up/down move possible<br/>                        &amp;&amp; (not &lt;| List.any containsAnySameNeighbours &lt;| cols newTiles)<br/>\u00a0<br/>                ( cmd, waiting ) =<br/>                    if List.all identity &lt;| List.map2 (==) model.tiles newTiles then<br/>                        ( Cmd.none, False )<br/>                    else<br/>                        ( generateRandomTiles 1, True )<br/>\u00a0<br/>                score =<br/>                    model.score + addScore<br/>            in<br/>                -- unsure whether this actually happens but regardless:<br/>                -- keep the program from accepting a new keyboard input when a new tile hasn't been spawned yet<br/>                if model.waitingForRandom then<br/>                    ( model, Cmd.none )<br/>                else<br/>                    ( { model | tiles = newTiles, waitingForRandom = waiting, score = score, hasLost = hasLost }, cmd )<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>-- VIEW<br/>\u00a0<br/>\u00a0<br/>containerStyle\u00a0: List ( String, String )<br/>containerStyle =<br/>    [ ( \"width\", \"450px\" )<br/>    , ( \"height\", \"450px\" )<br/>    , ( \"background-color\", \"#bbada0\" )<br/>    , ( \"float\", \"left\" )<br/>    , ( \"border-radius\", \"6px\")<br/>    ]<br/>\u00a0<br/>\u00a0<br/>tileStyle\u00a0: Int -&gt; List ( String, String )<br/>tileStyle value =<br/>    let<br/>        color =<br/>            case value of<br/>                0 -&gt;<br/>                    \"#776e65\"<br/>\u00a0<br/>                2 -&gt;<br/>                    \"#eee4da\"<br/>\u00a0<br/>                4 -&gt;<br/>                    \"#ede0c8\"<br/>\u00a0<br/>                8 -&gt;<br/>                    \"#f2b179\"<br/>\u00a0<br/>                16 -&gt;<br/>                    \"#f59563\"<br/>\u00a0<br/>                32 -&gt;<br/>                    \"#f67c5f\"<br/>\u00a0<br/>                64 -&gt;<br/>                    \"#f65e3b\"<br/>\u00a0<br/>                128 -&gt;<br/>                    \"#edcf72\"<br/>\u00a0<br/>                256 -&gt;<br/>                    \"#edcc61\"<br/>\u00a0<br/>                512 -&gt;<br/>                    \"#edc850\"<br/>\u00a0<br/>                1024 -&gt;<br/>                    \"#edc53f\"<br/>\u00a0<br/>                2048 -&gt;<br/>                    \"#edc22e\"<br/>\u00a0<br/>                _ -&gt;<br/>                    \"#edc22e\"<br/>    in<br/>        [ ( \"width\", \"100px\" )<br/>        , ( \"height\", \"70px\" )<br/>        , ( \"background-color\", color )<br/>        , ( \"float\", \"left\" )<br/>        , ( \"margin-left\", \"10px\" )<br/>        , ( \"margin-top\", \"10px\" )<br/>        , ( \"padding-top\", \"30px\" )<br/>        , ( \"text-align\", \"center\" )<br/>        , ( \"font-size\", \"30px\" )<br/>        , ( \"font-weight\", \"bold\" )<br/>        , ( \"border-radius\", \"6px\")<br/>        ]<br/>\u00a0<br/>\u00a0<br/>viewTile\u00a0: Tile -&gt; Html Msg<br/>viewTile tile =<br/>    div [ style &lt;| tileStyle &lt;| Maybe.withDefault 0 tile ]<br/>        [ span [] [ text &lt;| Maybe.withDefault \"\" &lt;| Maybe.map toString tile ]<br/>        ]<br/>\u00a0<br/>\u00a0<br/>viewGrid\u00a0: List Tile -&gt; Html Msg<br/>viewGrid tiles =<br/>    div [ style containerStyle ] &lt;| List.map viewTile tiles<br/>\u00a0<br/>\u00a0<br/>viewLost\u00a0: Html Msg<br/>viewLost =<br/>    div<br/>        [ style containerStyle ]<br/>        [ div<br/>            [ style [ ( \"text-align\", \"center\" ) ] ]<br/>            [ h2 [] [ text \"You lost!\" ]<br/>            ]<br/>        ]<br/>\u00a0<br/>viewWin\u00a0: Html Msg<br/>viewWin =<br/>    div<br/>        [ style containerStyle ]<br/>        [ div<br/>            [ style [ ( \"text-align\", \"center\" ) ] ]<br/>            [ h2 [] [ text \"Congratulations, You won!\" ]<br/>            , button<br/>                [ style [ ( \"margin-bottom\", \"16px\" ), ( \"margin-top\", \"16px\" ) ], onClick KeepPlaying ]<br/>                [ text \"Keep playing\" ]<br/>            ]<br/>        ]<br/>\u00a0<br/>\u00a0<br/>view\u00a0: Model -&gt; Html Msg<br/>view model =<br/>    div [ style [ ( \"width\", \"450px\" ) ] ]<br/>        [ p [ style [ ( \"float\", \"left\" ) ] ] [ text &lt;| \"Your Score: \" ++ toString model.score ]<br/>        , button<br/>            [ style [ ( \"margin-bottom\", \"16px\" ), ( \"margin-top\", \"16px\" ), ( \"float\", \"right\" ) ], onClick NewGame ]<br/>            [ text \"New Game\" ]<br/>        , if model.hasLost then<br/>            viewLost<br/>          else if List.any ((==) (Just 2048)) model.tiles &amp;&amp; not model.winKeepPlaying then<br/>            viewWin<br/>          else<br/>            viewGrid model.tiles<br/>        ]<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 235, "block": "<pre class=\"text highlighted_source\">\\ in Forth, you do many things on your own. This word is used to define 2D arrays<br/>: 2D-ARRAY ( height width )<br/>\tCREATE DUP ,<br/>\t* CELLS ALLOT<br/>\tDOES&gt; ( y x baseaddress )<br/>\t\tROT    ( x baseaddress y )<br/>\t\tOVER @ ( x baseaddress y width )<br/>\t\t*      ( x baseaddress y*width )<br/>\t\tROT    ( baseaddress y*width x )<br/>\t\t+ 1+ CELLS +<br/>;<br/>\u00a0<br/>require random.fs<br/>HERE SEED\u00a0!<br/>\u00a0<br/>0 CONSTANT D-INVALID<br/>1 CONSTANT D-UP<br/>2 CONSTANT D-DOWN<br/>3 CONSTANT D-LEFT<br/>4 CONSTANT D-RIGHT<br/>\u00a0<br/>4 CONSTANT NROWS<br/>4 CONSTANT NCOLS<br/>\u00a0<br/>NROWS NCOLS * CONSTANT GRIDSIZE<br/>NROWS NCOLS 2D-ARRAY GRID<br/>CREATE HAVE-MOVED CELL ALLOT<br/>CREATE TOTAL-SCORE CELL ALLOT<br/>CREATE MOVE-SCORE CELL ALLOT<br/>\u00a0<br/>: DIE-DIRECTIONCONST .\" Unknown direction constant:\" . BYE\u00a0;<br/>: ESC #ESC EMIT\u00a0;<br/>: CLS<br/>\tESC .\" [2J\"<br/>\tESC .\" [H\"<br/>;<br/>\u00a0<br/>: GRID-VALUE 1 SWAP LSHIFT\u00a0;<br/>: DASHES 0\u00a0?DO [CHAR] - EMIT LOOP\u00a0;<br/>\u00a0<br/>: DRAW ( -- )<br/>\tCLS .\" Score: \"<br/>\tTOTAL-SCORE @ 0 U.R<br/>\tMOVE-SCORE  @\u00a0?DUP IF<br/>\t\t.\"  (+\" 0 U.R .\" )\"<br/>\tTHEN<br/>\tCR 25 DASHES CR<br/>\u00a0<br/>\tNROWS 0\u00a0?DO<br/>\t\t.\" |\"<br/>\t\tNCOLS 0\u00a0?DO<br/>\t\t\tJ I GRID @\u00a0?DUP IF<br/>\t\t\t\tGRID-VALUE 4 U.R<br/>\t\t\tELSE<br/>\t\t\t\t4 SPACES<br/>\t\t\tTHEN<br/>\t\t\t.\"  |\"<br/>\t\tLOOP<br/>\t\tCR<br/>\tLOOP<br/>\u00a0<br/>\t25 DASHES CR<br/>;<br/>\u00a0<br/>: COUNT-FREE-SPACES ( -- free-spaces )<br/>\t0 ( count )<br/>\tNROWS 0\u00a0?DO<br/>\t\tNCOLS 0\u00a0?DO<br/>\t\t\tJ I GRID @ 0= IF 1+ THEN<br/>\t\tLOOP<br/>\tLOOP<br/>;<br/>\u00a0<br/>: GET-FREE-SPACE ( index -- addr )<br/>\t0 0 GRID SWAP ( curr-addr index )<br/>\t0 0 GRID @ 0&lt;&gt; IF 1+ THEN<br/>\t0\u00a0?DO ( find the next free space index times )<br/>\t\tBEGIN<br/>\t\t\tCELL+ DUP @ 0=<br/>\t\tUNTIL<br/>\tLOOP<br/>;<br/>\u00a0<br/>: NEW-BLOCK ( -- )<br/>\tCOUNT-FREE-SPACES<br/>\tDUP 0&lt;= IF DROP EXIT THEN<br/>\tRANDOM GET-FREE-SPACE<br/>\t10 RANDOM 0= IF 2 ELSE 1 THEN SWAP\u00a0!<br/>;<br/>\u00a0<br/>: 2GRID ( a-y a-x b-y b-x -- a-addr b-addr ) GRID -ROT GRID SWAP\u00a0;<br/>: CAN-MERGE ( dest-addr other-addr -- can-merge? )<br/>\t@ SWAP @ ( other-val dest-val )<br/>\tDUP 0&lt;&gt; -ROT = AND<br/>;<br/>\u00a0<br/>: CAN-GRAVITY ( dest-addr other-addr -- can-gravity? )<br/>\t@ SWAP @ ( other-val dest-val )<br/>\t0= SWAP 0&lt;&gt; AND<br/>;<br/>\u00a0<br/>: TRY-MERGE ( dest-y dest-x other-y other-x -- )<br/>\t2GRID ( dest-addr other-addr )<br/>\t2DUP CAN-MERGE IF<br/>\t\tTRUE HAVE-MOVED\u00a0!<br/>\t\t0 SWAP\u00a0! ( dest-addr )<br/>\t\tDUP @ 1+ DUP ( dest-addr dest-val dest-val )<br/>\t\tROT\u00a0! ( dest-val )<br/>\t\tGRID-VALUE DUP ( score-diff score-diff )<br/>\t\tMOVE-SCORE +!<br/>\t\tTOTAL-SCORE +!<br/>\tELSE<br/>\t\t2DROP<br/>\tTHEN<br/>;<br/>\u00a0<br/>: TRY-GRAVITY ( did-something-before operator dest-y dest-x other-y other-x -- did-something-after operator )<br/>\t2GRID ( ... dest-addr other-addr )<br/>\t2DUP CAN-GRAVITY IF<br/>\t\tTRUE HAVE-MOVED\u00a0!<br/>\t\tDUP @ ( ... dest-addr other-addr other-val )<br/>\t\tROT ( ... other-addr other-val dest-addr )\u00a0! ( ... other-addr )<br/>\t\t0 SWAP\u00a0!<br/>\t\tNIP TRUE SWAP<br/>\tELSE<br/>\t\t2DROP<br/>\tTHEN<br/>;<br/>\u00a0<br/>: TRY-LOST? ( lost-before operator dy dx oy ox -- lost-after operator )<br/>\t2GRID CAN-MERGE INVERT ( lost-before operator lost-now )<br/>\tROT AND SWAP ( lost-after operator )<br/>;<br/>\u00a0<br/>: MOVEMENT-LOOP ( direction operator -- ) CASE<br/>\tSWAP<br/>\tD-UP OF NROWS 1- 0\u00a0?DO<br/>\t\tNCOLS 0\u00a0?DO<br/>\t\t\tJ I J 1+ I 4 PICK EXECUTE<br/>\t\tLOOP<br/>\tLOOP ENDOF<br/>\tD-DOWN OF 1 NROWS 1-\u00a0?DO<br/>\t\tNCOLS 0\u00a0?DO<br/>\t\t\tJ I J 1- I 4 PICK EXECUTE<br/>\t\tLOOP<br/>\t-1 +LOOP ENDOF<br/>\tD-LEFT OF NCOLS 1- 0\u00a0?DO<br/>\t\tNROWS 0\u00a0?DO<br/>\t\t\tI J I J 1+ 4 PICK EXECUTE<br/>\t\tLOOP<br/>\tLOOP ENDOF<br/>\tD-RIGHT OF 1 NCOLS 1-\u00a0?DO<br/>\t\tNROWS 0\u00a0?DO<br/>\t\t\tI J I J 1- 4 PICK EXECUTE<br/>\t\tLOOP<br/>\t-1 +LOOP ENDOF<br/>\tDIE-DIRECTIONCONST<br/>ENDCASE DROP\u00a0;<br/>\u00a0<br/>: MERGE ( move -- ) ['] TRY-MERGE MOVEMENT-LOOP\u00a0;<br/>: GRAVITY-ONCE ( move -- success? ) FALSE SWAP ['] TRY-GRAVITY MOVEMENT-LOOP\u00a0;<br/>: GRAVITY ( move -- )<br/>\tBEGIN<br/>\t\tDUP GRAVITY-ONCE INVERT<br/>\tUNTIL DROP<br/>;<br/>\u00a0<br/>: MOVE-LOST? ( move -- lost? ) TRUE SWAP ['] TRY-LOST? MOVEMENT-LOOP\u00a0;<br/>: END-IF-LOST ( -- lost? )<br/>\tCOUNT-FREE-SPACES 0= IF<br/>\t\tTRUE<br/>\t\t5 1 DO I MOVE-LOST? AND LOOP<br/>\t\tIF .\" You lose!\" CR BYE THEN<br/>\tTHEN<br/>;<br/>\u00a0<br/>: END-IF-WON ( -- )<br/>\tNROWS 0\u00a0?DO<br/>\t\tNCOLS 0\u00a0?DO<br/>\t\t\tJ I GRID @ GRID-VALUE 2048 = IF .\" You win!\" CR BYE THEN<br/>\t\tLOOP<br/>\tLOOP<br/>;<br/>\u00a0<br/>: TICK ( move -- )<br/>\tFALSE HAVE-MOVED\u00a0!<br/>\t0 MOVE-SCORE\u00a0!<br/>\tDUP GRAVITY DUP MERGE GRAVITY<br/>\tHAVE-MOVED @ IF NEW-BLOCK DRAW THEN<br/>\tEND-IF-WON<br/>\tEND-IF-LOST<br/>;<br/>\u00a0<br/>: GET-MOVE ( -- move )<br/>\tBEGIN<br/>\t\tKEY CASE<br/>\t\t\t#EOF OF BYE ENDOF<br/>\t\t\t#ESC OF BYE ENDOF<br/>\t\t\t[CHAR] q OF BYE ENDOF<br/>\t\t\t[CHAR] Q OF BYE ENDOF<br/>\t\t\t[CHAR] k OF D-UP TRUE ENDOF<br/>\t\t\t[CHAR] K OF D-UP TRUE ENDOF<br/>\t\t\t[CHAR] j OF D-DOWN TRUE ENDOF<br/>\t\t\t[CHAR] J OF D-DOWN TRUE ENDOF<br/>\t\t\t[CHAR] h OF D-LEFT TRUE ENDOF<br/>\t\t\t[CHAR] H OF D-LEFT TRUE ENDOF<br/>\t\t\t[CHAR] l OF D-RIGHT TRUE ENDOF<br/>\t\t\t[CHAR] L OF D-RIGHT TRUE ENDOF<br/>\t\t\tFALSE SWAP<br/>\t\tENDCASE<br/>\tUNTIL<br/>;<br/>\u00a0<br/>: INIT ( -- )<br/>\tNROWS 0\u00a0?DO<br/>\t\tNCOLS 0\u00a0?DO<br/>\t\t\t0 J I GRID\u00a0!<br/>\t\tLOOP<br/>\tLOOP<br/>\u00a0<br/>\t0 TOTAL-SCORE\u00a0!<br/>\t0 MOVE-SCORE\u00a0!<br/>\tNEW-BLOCK<br/>\tNEW-BLOCK<br/>\tDRAW<br/>;<br/>\u00a0<br/>: MAIN-LOOP ( -- )<br/>\tBEGIN<br/>\t\tGET-MOVE TICK<br/>\tAGAIN<br/>;<br/>\u00a0<br/>INIT<br/>MAIN-LOOP</pre>"}, {"lang": "Fortran", "loc": 7, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/>        WRITE <span class=\"br0\">(</span>MSG,<span class=\"nu0\">1</span><span class=\"br0\">)</span>\t\t<span class=\"co1\">!Roll forth a top/bottom boundary. No corner characters (etc.), damnit.</span><br/>    <span class=\"nu0\">1</span>   FORMAT <span class=\"br0\">(</span><span class=\"st0\">\"|\"</span>,&lt;NC&gt;<span class=\"br0\">(</span>&lt;W&gt;<span class=\"br0\">(</span><span class=\"st0\">\"-\"</span><span class=\"br0\">)</span>,<span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Heavy reliance on runtime values in NC and W. But see FORMAT 22.</span><br/>    <span class=\"nu0\">2</span>     FORMAT <span class=\"br0\">(</span><span class=\"st0\">\"|\"</span>,&lt;NC&gt;<span class=\"br0\">(</span>&lt;W&gt;<span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span>,<span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\t<span class=\"co1\">!No horizontal markings within a tile. See FORMAT 1.</span><br/>          WRITE <span class=\"br0\">(</span>MSG,<span class=\"nu0\">22</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span>,L1  <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,W<span class=\"br0\">)</span>,<span class=\"st0\">\"|\"</span>,C <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,NC<span class=\"br0\">)</span>\t<span class=\"co1\">!Compare to FORMAT 2.</span><br/>   <span class=\"nu0\">22</span>     FORMAT <span class=\"br0\">(</span><span class=\"st0\">\"|\"</span>,666A1<span class=\"br0\">)</span>\t\t\t\t<span class=\"co1\">!A constant FORMAT, a tricky WRITE.</span><br/>    <span class=\"nu0\">4</span>     FORMAT <span class=\"br0\">(</span><span class=\"st0\">\"|\"</span>,&lt;NC <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>&gt;<span class=\"br0\">(</span>&lt;W&gt;<span class=\"br0\">(</span><span class=\"st0\">\"-\"</span><span class=\"br0\">)</span>,<span class=\"st0\">\"+\"</span><span class=\"br0\">)</span>,&lt;W&gt;<span class=\"br0\">(</span><span class=\"st0\">\"-\"</span><span class=\"br0\">)</span>,<span class=\"st0\">\"|\"</span><span class=\"br0\">)</span>\t<span class=\"co1\">!With internal + rather than |.</span></pre>"}, {"lang": "Go", "loc": 270, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>\t<span class=\"st0\">\"bufio\"</span><br/>\t<span class=\"st0\">\"fmt\"</span><br/>\t<span class=\"st0\">\"log\"</span><br/>\t<span class=\"st0\">\"math/rand\"</span><br/>\t<span class=\"st0\">\"os\"</span><br/>\t<span class=\"st0\">\"os/exec\"</span><br/>\t<span class=\"st0\">\"strconv\"</span><br/>\t<span class=\"st0\">\"strings\"</span><br/>\t<span class=\"st0\">\"text/template\"</span><br/>\t<span class=\"st0\">\"time\"</span><br/>\t<span class=\"st0\">\"unicode\"</span><br/>\u00a0<br/>\t<span class=\"st0\">\"golang.org/x/crypto/ssh/terminal\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">const</span> maxPoints <span class=\"sy2\">=</span> <span class=\"nu0\">2048</span><br/><span class=\"kw1\">const</span> <span class=\"sy1\">(</span><br/>\tfieldSizeX <span class=\"sy2\">=</span> <span class=\"nu0\">4</span><br/>\tfieldSizeY <span class=\"sy2\">=</span> <span class=\"nu0\">4</span><br/><span class=\"sy1\">)</span><br/><span class=\"kw1\">const</span> tilesAtStart <span class=\"sy2\">=</span> <span class=\"nu0\">2</span><br/><span class=\"kw1\">const</span> probFor2 <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><span class=\"sy3\">.</span><span class=\"nu0\">9</span><br/>\u00a0<br/><span class=\"kw1\">type</span> button <span class=\"kw4\">int</span><br/>\u00a0<br/><span class=\"kw1\">const</span> <span class=\"sy1\">(</span><br/>\t_ button <span class=\"sy2\">=</span> iota<br/>\tup<br/>\tdown<br/>\tright<br/>\tleft<br/>\tquit<br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">var</span> labels <span class=\"sy2\">=</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"kw4\">map</span><span class=\"sy1\">[</span>button<span class=\"sy1\">]</span>rune <span class=\"sy1\">{</span><br/>\tm <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">map</span><span class=\"sy1\">[</span>button<span class=\"sy1\">]</span>rune<span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">)</span><br/>\tm<span class=\"sy1\">[</span>up<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"st0\">'W'</span><br/>\tm<span class=\"sy1\">[</span>down<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"st0\">'S'</span><br/>\tm<span class=\"sy1\">[</span>right<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"st0\">'D'</span><br/>\tm<span class=\"sy1\">[</span>left<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"st0\">'A'</span><br/>\t<span class=\"kw1\">return</span> m<br/><span class=\"sy1\">}()</span><br/><span class=\"kw1\">var</span> keybinding <span class=\"sy2\">=</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"kw4\">map</span><span class=\"sy1\">[</span>rune<span class=\"sy1\">]</span>button <span class=\"sy1\">{</span><br/>\tm <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">map</span><span class=\"sy1\">[</span>rune<span class=\"sy1\">]</span>button<span class=\"sy1\">,</span> <span class=\"nu0\">8</span><span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">for</span> b<span class=\"sy1\">,</span> r <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> labels <span class=\"sy1\">{</span><br/>\t\tm<span class=\"sy1\">[</span>r<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> b<br/>\t\t<span class=\"kw1\">if</span> unicode<span class=\"sy3\">.</span>IsUpper<span class=\"sy1\">(</span>r<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t\t\tr <span class=\"sy2\">=</span> unicode<span class=\"sy3\">.</span>ToLower<span class=\"sy1\">(</span>r<span class=\"sy1\">)</span><br/>\t\t<span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>\t\t\tr <span class=\"sy2\">=</span> unicode<span class=\"sy3\">.</span>ToUpper<span class=\"sy1\">(</span>r<span class=\"sy1\">)</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t\tm<span class=\"sy1\">[</span>r<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> b<br/>\t<span class=\"sy1\">}</span><br/>\tm<span class=\"sy1\">[</span><span class=\"nu0\">0x03</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> quit<br/>\t<span class=\"kw1\">return</span> m<br/><span class=\"sy1\">}()</span><br/>\u00a0<br/><span class=\"kw1\">var</span> model <span class=\"sy2\">=</span> <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>\tScore <span class=\"kw4\">int</span><br/>\tField <span class=\"sy1\">[</span>fieldSizeY<span class=\"sy1\">][</span>fieldSizeX<span class=\"sy1\">]</span><span class=\"kw4\">int</span><br/><span class=\"sy1\">}{}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> view <span class=\"sy2\">=</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=template.Template\"><span class=\"kw5\">template.<span class=\"me1\">Template</span></span></a> <span class=\"sy1\">{</span><br/>\tmaxWidth <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> maxPoints<span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &gt;<span class=\"sy2\">=</span> <span class=\"nu0\">10</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> <span class=\"sy2\">/=</span> <span class=\"nu0\">10</span> <span class=\"sy1\">{</span><br/>\t\tmaxWidth<span class=\"sy2\">++</span><br/>\t<span class=\"sy1\">}</span><br/>\u00a0<br/>\tw <span class=\"sy2\">:=</span> maxWidth <span class=\"sy3\">+</span> <span class=\"nu0\">3</span><br/>\tr <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">byte</span><span class=\"sy1\">,</span> fieldSizeX<span class=\"sy3\">*</span>w<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> r <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"nu2\">i</span><span class=\"sy3\">%</span>w <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>\t\t\tr<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"st0\">'+'</span><br/>\t\t<span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>\t\t\tr<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"st0\">'-'</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/>\trawBorder <span class=\"sy2\">:=</span> <span class=\"kw4\">string</span><span class=\"sy1\">(</span>r<span class=\"sy1\">)</span><br/>\u00a0<br/>\tv<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> template<span class=\"sy3\">.</span>New<span class=\"sy1\">(</span><span class=\"st0\">\"\"</span><span class=\"sy1\">)</span><span class=\"sy3\">.</span><span class=\"me1\">Parse</span><span class=\"sy1\">(</span><span class=\"co2\">`SCORE: {{.Score}}<br/>{{range .Field}}<br/>`</span> <span class=\"sy3\">+</span> rawBorder <span class=\"sy3\">+</span> <span class=\"co2\">`<br/>|{{range .}} {{if .}}{{printf \"%`</span> <span class=\"sy3\">+</span> strconv<span class=\"sy3\">.</span><span class=\"me1\">Itoa</span><span class=\"sy1\">(</span>maxWidth<span class=\"sy1\">)</span> <span class=\"sy3\">+</span> <span class=\"co2\">`d\" .}}{{else}}`</span> <span class=\"sy3\">+</span><br/>\t\tstrings<span class=\"sy3\">.</span><span class=\"me1\">Repeat</span><span class=\"sy1\">(</span><span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> maxWidth<span class=\"sy1\">)</span> <span class=\"sy3\">+</span> <span class=\"co2\">`{{end}} |{{end}}{{end}}<br/>`</span> <span class=\"sy3\">+</span> rawBorder <span class=\"sy3\">+</span> <span class=\"co2\">`<br/>\u00a0<br/>(`</span> <span class=\"sy3\">+</span> <span class=\"kw4\">string</span><span class=\"sy1\">(</span>labels<span class=\"sy1\">[</span>up<span class=\"sy1\">])</span> <span class=\"sy3\">+</span> <span class=\"co2\">`)Up (`</span> <span class=\"sy3\">+</span><br/>\t\t<span class=\"kw4\">string</span><span class=\"sy1\">(</span>labels<span class=\"sy1\">[</span>down<span class=\"sy1\">])</span> <span class=\"sy3\">+</span> <span class=\"co2\">`)Down (`</span> <span class=\"sy3\">+</span><br/>\t\t<span class=\"kw4\">string</span><span class=\"sy1\">(</span>labels<span class=\"sy1\">[</span>left<span class=\"sy1\">])</span> <span class=\"sy3\">+</span> <span class=\"co2\">`)Left (`</span> <span class=\"sy3\">+</span><br/>\t\t<span class=\"kw4\">string</span><span class=\"sy1\">(</span>labels<span class=\"sy1\">[</span>right<span class=\"sy1\">])</span> <span class=\"sy3\">+</span> <span class=\"co2\">`)Right<br/>`</span><span class=\"sy1\">)</span><br/>\tcheck<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">return</span> v<br/><span class=\"sy1\">}()</span><br/>\u00a0<br/><span class=\"kw4\">func</span> check<span class=\"sy1\">(</span>err error<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>\t\tlog<span class=\"sy3\">.</span>Panicln<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> clear<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\tc <span class=\"sy2\">:=</span> exec<span class=\"sy3\">.</span>Command<span class=\"sy1\">(</span><span class=\"st0\">\"clear\"</span><span class=\"sy1\">)</span><br/>\tc<span class=\"sy3\">.</span>Stdout <span class=\"sy2\">=</span> os<span class=\"sy3\">.</span>Stdout<br/>\tcheck<span class=\"sy1\">(</span>c<span class=\"sy3\">.</span>Run<span class=\"sy1\">())</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> draw<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\tclear<span class=\"sy1\">()</span><br/>\tcheck<span class=\"sy1\">(</span>view<span class=\"sy3\">.</span>Execute<span class=\"sy1\">(</span>os<span class=\"sy3\">.</span>Stdout<span class=\"sy1\">,</span> model<span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> addRandTile<span class=\"sy1\">()</span> <span class=\"sy1\">(</span>full <span class=\"kw4\">bool</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\tfree <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"sy3\">*</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> fieldSizeX<span class=\"sy3\">*</span>fieldSizeY<span class=\"sy1\">)</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> x <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> x &lt; fieldSizeX<span class=\"sy1\">;</span> x<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">for</span> y <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> y &lt; fieldSizeY<span class=\"sy1\">;</span> y<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> model<span class=\"sy3\">.</span>Field<span class=\"sy1\">[</span>y<span class=\"sy1\">][</span>x<span class=\"sy1\">]</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>\t\t\t\tfree <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>free<span class=\"sy1\">,</span> &amp;model<span class=\"sy3\">.</span>Field<span class=\"sy1\">[</span>y<span class=\"sy1\">][</span>x<span class=\"sy1\">])</span><br/>\t\t\t<span class=\"sy1\">}</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/>\u00a0<br/>\tval <span class=\"sy2\">:=</span> <span class=\"nu0\">4</span><br/>\t<span class=\"kw1\">if</span> rand<span class=\"sy3\">.</span>Float64<span class=\"sy1\">()</span> &lt; probFor2 <span class=\"sy1\">{</span><br/>\t\tval <span class=\"sy2\">=</span> <span class=\"nu0\">2</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy3\">*</span>free<span class=\"sy1\">[</span>rand<span class=\"sy3\">.</span>Intn<span class=\"sy1\">(</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>free<span class=\"sy1\">))]</span> <span class=\"sy2\">=</span> val<br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>free<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">1</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> point <span class=\"kw4\">struct</span><span class=\"sy1\">{</span> x<span class=\"sy1\">,</span> y <span class=\"kw4\">int</span> <span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>p point<span class=\"sy1\">)</span> get<span class=\"sy1\">()</span> <span class=\"kw4\">int</span>      <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> model<span class=\"sy3\">.</span>Field<span class=\"sy1\">[</span>p<span class=\"sy3\">.</span>y<span class=\"sy1\">][</span>p<span class=\"sy3\">.</span>x<span class=\"sy1\">]</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>p point<span class=\"sy1\">)</span> set<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span>     <span class=\"sy1\">{</span> model<span class=\"sy3\">.</span>Field<span class=\"sy1\">[</span>p<span class=\"sy3\">.</span>y<span class=\"sy1\">][</span>p<span class=\"sy3\">.</span>x<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> n <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>p point<span class=\"sy1\">)</span> inField<span class=\"sy1\">()</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> p<span class=\"sy3\">.</span>x &gt;<span class=\"sy2\">=</span> <span class=\"nu0\">0</span> &amp;&amp; p<span class=\"sy3\">.</span>y &gt;<span class=\"sy2\">=</span> <span class=\"nu0\">0</span> &amp;&amp; p<span class=\"sy3\">.</span>x &lt; fieldSizeX &amp;&amp; p<span class=\"sy3\">.</span>y &lt; fieldSizeY <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>p <span class=\"sy3\">*</span>point<span class=\"sy1\">)</span> next<span class=\"sy1\">(</span>n point<span class=\"sy1\">)</span> <span class=\"sy1\">{</span> p<span class=\"sy3\">.</span>x <span class=\"sy2\">+=</span> n<span class=\"sy3\">.</span>x<span class=\"sy1\">;</span> p<span class=\"sy3\">.</span>y <span class=\"sy2\">+=</span> n<span class=\"sy3\">.</span>y <span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> controller<span class=\"sy1\">(</span>key rune<span class=\"sy1\">)</span> <span class=\"sy1\">(</span>gameOver <span class=\"kw4\">bool</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\tb <span class=\"sy2\">:=</span> keybinding<span class=\"sy1\">[</span>key<span class=\"sy1\">]</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> b <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">if</span> b <span class=\"sy3\">==</span> quit <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>\t<span class=\"sy1\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">var</span> starts <span class=\"sy1\">[]</span>point<br/>\t<span class=\"kw1\">var</span> next point<br/>\u00a0<br/>\t<span class=\"kw1\">switch</span> b <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">case</span> up<span class=\"sy1\">:</span><br/>\t\tnext <span class=\"sy2\">=</span> point<span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">}</span><br/>\t\tstarts <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span>point<span class=\"sy1\">,</span> fieldSizeX<span class=\"sy1\">)</span><br/>\t\t<span class=\"kw1\">for</span> x <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> x &lt; fieldSizeX<span class=\"sy1\">;</span> x<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>\t\t\tstarts<span class=\"sy1\">[</span>x<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> point<span class=\"sy1\">{</span>x<span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">}</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">case</span> down<span class=\"sy1\">:</span><br/>\t\tnext <span class=\"sy2\">=</span> point<span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">}</span><br/>\t\tstarts <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span>point<span class=\"sy1\">,</span> fieldSizeX<span class=\"sy1\">)</span><br/>\t\t<span class=\"kw1\">for</span> x <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> x &lt; fieldSizeX<span class=\"sy1\">;</span> x<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>\t\t\tstarts<span class=\"sy1\">[</span>x<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> point<span class=\"sy1\">{</span>x<span class=\"sy1\">,</span> fieldSizeY <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">}</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">case</span> right<span class=\"sy1\">:</span><br/>\t\tnext <span class=\"sy2\">=</span> point<span class=\"sy1\">{</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">}</span><br/>\t\tstarts <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span>point<span class=\"sy1\">,</span> fieldSizeY<span class=\"sy1\">)</span><br/>\t\t<span class=\"kw1\">for</span> y <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> y &lt; fieldSizeY<span class=\"sy1\">;</span> y<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>\t\t\tstarts<span class=\"sy1\">[</span>y<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> point<span class=\"sy1\">{</span>fieldSizeX <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> y<span class=\"sy1\">}</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">case</span> left<span class=\"sy1\">:</span><br/>\t\tnext <span class=\"sy2\">=</span> point<span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">}</span><br/>\t\tstarts <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span>point<span class=\"sy1\">,</span> fieldSizeY<span class=\"sy1\">)</span><br/>\t\t<span class=\"kw1\">for</span> y <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> y &lt; fieldSizeY<span class=\"sy1\">;</span> y<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>\t\t\tstarts<span class=\"sy1\">[</span>y<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> point<span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> y<span class=\"sy1\">}</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/>\u00a0<br/>\tmoved <span class=\"sy2\">:=</span> <span class=\"kw2\">false</span><br/>\twinning <span class=\"sy2\">:=</span> <span class=\"kw2\">false</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> s <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> starts <span class=\"sy1\">{</span><br/>\t\tn <span class=\"sy2\">:=</span> s<br/>\t\tmove <span class=\"sy2\">:=</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>set <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t\t\tmoved <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>\t\t\ts<span class=\"sy3\">.</span>set<span class=\"sy1\">(</span>set<span class=\"sy1\">)</span><br/>\t\t\tn<span class=\"sy3\">.</span>set<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">)</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t\t<span class=\"kw1\">for</span> n<span class=\"sy3\">.</span>next<span class=\"sy1\">(</span>next<span class=\"sy1\">);</span> n<span class=\"sy3\">.</span>inField<span class=\"sy1\">();</span> n<span class=\"sy3\">.</span>next<span class=\"sy1\">(</span>next<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> s<span class=\"sy3\">.</span>get<span class=\"sy1\">()</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>\t\t\t\t<span class=\"kw1\">if</span> n<span class=\"sy3\">.</span>get<span class=\"sy1\">()</span> <span class=\"sy3\">==</span> s<span class=\"sy3\">.</span>get<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\t\t\t\t\tscore <span class=\"sy2\">:=</span> s<span class=\"sy3\">.</span>get<span class=\"sy1\">()</span> <span class=\"sy3\">*</span> <span class=\"nu0\">2</span><br/>\t\t\t\t\tmodel<span class=\"sy3\">.</span>Score <span class=\"sy2\">+=</span> score<br/>\t\t\t\t\twinning <span class=\"sy2\">=</span> score &gt;<span class=\"sy2\">=</span> maxPoints<br/>\u00a0<br/>\t\t\t\t\tmove<span class=\"sy1\">(</span>score<span class=\"sy1\">)</span><br/>\t\t\t\t\ts<span class=\"sy3\">.</span>next<span class=\"sy1\">(</span>next<span class=\"sy1\">)</span><br/>\t\t\t\t<span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> n<span class=\"sy3\">.</span>get<span class=\"sy1\">()</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>\t\t\t\t\ts<span class=\"sy3\">.</span>next<span class=\"sy1\">(</span>next<span class=\"sy1\">)</span><br/>\t\t\t\t\t<span class=\"kw1\">if</span> s<span class=\"sy3\">.</span>get<span class=\"sy1\">()</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>\t\t\t\t\t\tmove<span class=\"sy1\">(</span>n<span class=\"sy3\">.</span>get<span class=\"sy1\">())</span><br/>\t\t\t\t\t<span class=\"sy1\">}</span><br/>\t\t\t\t<span class=\"sy1\">}</span><br/>\t\t\t<span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> n<span class=\"sy3\">.</span>get<span class=\"sy1\">()</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>\t\t\t\tmove<span class=\"sy1\">(</span>n<span class=\"sy3\">.</span>get<span class=\"sy1\">())</span><br/>\t\t\t<span class=\"sy1\">}</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"sy3\">!</span>moved <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>\t<span class=\"sy1\">}</span><br/>\u00a0<br/>\tlost <span class=\"sy2\">:=</span> <span class=\"kw2\">false</span><br/>\t<span class=\"kw1\">if</span> addRandTile<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\t\tlost <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>\tOut<span class=\"sy1\">:</span><br/>\t\t<span class=\"kw1\">for</span> x <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> x &lt; fieldSizeX<span class=\"sy1\">;</span> x<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"kw1\">for</span> y <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> y &lt; fieldSizeY<span class=\"sy1\">;</span> y<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"sy1\">(</span>y &gt; <span class=\"nu0\">0</span> &amp;&amp; model<span class=\"sy3\">.</span>Field<span class=\"sy1\">[</span>y<span class=\"sy1\">][</span>x<span class=\"sy1\">]</span> <span class=\"sy3\">==</span> model<span class=\"sy3\">.</span>Field<span class=\"sy1\">[</span>y<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">][</span>x<span class=\"sy1\">])</span> <span class=\"sy3\">||</span><br/>\t\t\t\t\t<span class=\"sy1\">(</span>x &gt; <span class=\"nu0\">0</span> &amp;&amp; model<span class=\"sy3\">.</span>Field<span class=\"sy1\">[</span>y<span class=\"sy1\">][</span>x<span class=\"sy1\">]</span> <span class=\"sy3\">==</span> model<span class=\"sy3\">.</span>Field<span class=\"sy1\">[</span>y<span class=\"sy1\">][</span>x<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">])</span> <span class=\"sy1\">{</span><br/>\t\t\t\t\tlost <span class=\"sy2\">=</span> <span class=\"kw2\">false</span><br/>\t\t\t\t\t<span class=\"kw1\">break</span> Out<br/>\t\t\t\t<span class=\"sy1\">}</span><br/>\t\t\t<span class=\"sy1\">}</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/>\u00a0<br/>\tdraw<span class=\"sy1\">()</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> winning <span class=\"sy1\">{</span><br/>\t\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"You win!\"</span><span class=\"sy1\">)</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">if</span> lost <span class=\"sy1\">{</span><br/>\t\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Game Over\"</span><span class=\"sy1\">)</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>\t<span class=\"sy1\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\toldState<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> terminal<span class=\"sy3\">.</span>MakeRaw<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">)</span><br/>\tcheck<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">defer</span> terminal<span class=\"sy3\">.</span>Restore<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> oldState<span class=\"sy1\">)</span><br/>\u00a0<br/>\trand<span class=\"sy3\">.</span>Seed<span class=\"sy1\">(</span>time<span class=\"sy3\">.</span>Now<span class=\"sy1\">()</span><span class=\"sy3\">.</span>Unix<span class=\"sy1\">())</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> tilesAtStart<span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &gt; <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">--</span> <span class=\"sy1\">{</span><br/>\t\taddRandTile<span class=\"sy1\">()</span><br/>\t<span class=\"sy1\">}</span><br/>\tdraw<span class=\"sy1\">()</span><br/>\u00a0<br/>\tstdin <span class=\"sy2\">:=</span> bufio<span class=\"sy3\">.</span>NewReader<span class=\"sy1\">(</span>os<span class=\"sy3\">.</span>Stdin<span class=\"sy1\">)</span><br/>\u00a0<br/>\treadKey <span class=\"sy2\">:=</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> rune <span class=\"sy1\">{</span><br/>\t\tr<span class=\"sy1\">,</span> _<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> stdin<span class=\"sy3\">.</span>ReadRune<span class=\"sy1\">()</span><br/>\t\tcheck<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>\t\t<span class=\"kw1\">return</span> r<br/>\t<span class=\"sy1\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"sy3\">!</span>controller<span class=\"sy1\">(</span>readKey<span class=\"sy1\">())</span> <span class=\"sy1\">{</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0</pre>"}, {"lang": "Haskell", "loc": 133, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a><br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Random<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Random<span class=\"sy0\">.</span>Distribution<span class=\"sy0\">.</span>Categorical<br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Console<span class=\"sy0\">.</span>ANSI<br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span>Lens<br/>\u00a0<br/><span class=\"co1\">-- Logic</span><br/>\u00a0<br/><span class=\"co1\">-- probability to get a 4</span><br/>prob4 <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Double\"><span class=\"kw4\">Double</span></a><br/>prob4 <span class=\"sy0\">=</span> <span class=\"nu0\">0.1</span><br/>\u00a0<br/><span class=\"kw1\">type</span> Position <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/>combine<span class=\"sy0\">,</span> shift <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><br/>combine <span class=\"br0\">(</span>x:y:l<span class=\"br0\">)</span> <span class=\"sy0\">|</span> x<span class=\"sy0\">==</span>y <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>x<span class=\"br0\">)</span>\u00a0: combine l<br/>combine <span class=\"br0\">(</span>x:l<span class=\"br0\">)</span> <span class=\"sy0\">=</span> x\u00a0: combine l<br/>combine <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/>shift l <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> l<span class=\"br0\">)</span> <span class=\"sy0\">$</span> combine <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> l<span class=\"br0\">)</span> <span class=\"sy0\">++</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"br0\">]</span><br/>\u00a0<br/>reflect <span class=\"sy0\">::</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>reflect <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reverse\"><span class=\"kw3\">reverse</span></a><br/>\u00a0<br/><span class=\"kw1\">type</span> Move <span class=\"sy0\">=</span> Position <span class=\"sy0\">-&gt;</span> Position<br/>\u00a0<br/>left<span class=\"sy0\">,</span> right<span class=\"sy0\">,</span> up<span class=\"sy0\">,</span> down <span class=\"sy0\">::</span> Move<br/>left <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> shift<br/>right <span class=\"sy0\">=</span> reflect <span class=\"sy0\">.</span> left <span class=\"sy0\">.</span> reflect<br/>up <span class=\"sy0\">=</span> transpose <span class=\"sy0\">.</span> left <span class=\"sy0\">.</span> transpose<br/>down <span class=\"sy0\">=</span> transpose <span class=\"sy0\">.</span> right <span class=\"sy0\">.</span> transpose<br/>\u00a0<br/>progress <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq\"><span class=\"kw4\">Eq</span></a> a <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>a <span class=\"sy0\">-&gt;</span> a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> a<br/>progress f pos <span class=\"sy0\">=</span> <span class=\"kw1\">if</span> pos<span class=\"sy0\">==</span>next<span class=\"sy0\">_</span>pos <span class=\"kw1\">then</span> Nothing <span class=\"kw1\">else</span> Just next<span class=\"sy0\">_</span>pos <span class=\"kw1\">where</span> next<span class=\"sy0\">_</span>pos<span class=\"sy0\">=</span> f pos<br/>\u00a0<br/>lost<span class=\"sy0\">,</span> win<span class=\"sy0\">::</span> Position <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>lost pos <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:all\"><span class=\"kw3\">all</span></a> isNothing <span class=\"br0\">[</span>progress move pos<span class=\"sy0\">|</span> move<span class=\"sy0\">&lt;-</span><span class=\"br0\">[</span>left<span class=\"sy0\">,</span>right<span class=\"sy0\">,</span>up<span class=\"sy0\">,</span>down<span class=\"br0\">]</span> <span class=\"br0\">]</span><br/>\u00a0<br/>win <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:any\"><span class=\"kw3\">any</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:any\"><span class=\"kw3\">any</span></a> <span class=\"br0\">(</span><span class=\"sy0\">&gt;=</span><span class=\"nu0\">2048</span><span class=\"br0\">)</span><br/>\u00a0<br/>go <span class=\"sy0\">::</span> Position <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> Move <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> Position<br/>go pos move <span class=\"sy0\">=</span> move <span class=\"sy0\">&gt;&gt;=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:flip\"><span class=\"kw3\">flip</span></a> progress pos<br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\">{-<br/>-- Adding 2 or 4 without lens:<br/>update l i a = l1 ++ a\u00a0: l2 where (l1,_:l2)=splitAt i l<br/>indicesOf l = [0..length l-1]<br/>\u00a0<br/>add a x y pos = update pos y $ update (pos\u00a0!! y) x a<br/>\u00a0<br/>add2or4\u00a0::  Position -&gt; RVar Position<br/>add2or4 pos = do<br/>  (x,y) &lt;-  randomElement [(x,y) | y&lt;-indicesOf pos, x&lt;-indicesOf (pos!!y), pos!!y!!x ==0  ]<br/>  a &lt;- categorical [(0.9::Double,2), (0.1,4) ]<br/>  return $ add a x y pos<br/>-}</span><br/>\u00a0<br/><span class=\"co1\">-- or with lens:</span><br/>indicesOf <span class=\"sy0\">::</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>ReifiedTraversal<span class=\"st0\">' [a] a]<br/>indicesOf l = [ Traversal $ ix i | i &lt;- [0..length l - 1] ]<br/>\u00a0<br/>indices2Of\u00a0:: [[a]] -&gt; [ReifiedTraversal'</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">]</span> a<span class=\"br0\">]</span><br/>indices2Of ls <span class=\"sy0\">=</span> <span class=\"br0\">[</span> Traversal <span class=\"sy0\">$</span> i<span class=\"sy0\">.</span>j <span class=\"sy0\">|</span> Traversal i <span class=\"sy0\">&lt;-</span> indicesOf ls<span class=\"sy0\">,</span> <span class=\"kw1\">let</span> Just l <span class=\"sy0\">=</span> ls <span class=\"sy0\">^?</span> i<span class=\"sy0\">,</span> Traversal j <span class=\"sy0\">&lt;-</span> indicesOf l<span class=\"br0\">]</span><br/>\u00a0<br/>add2or4 <span class=\"sy0\">::</span>  Position <span class=\"sy0\">-&gt;</span> RVar Position<br/>add2or4 pos <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  xy <span class=\"sy0\">&lt;-</span>  randomElement <span class=\"br0\">[</span> xy <span class=\"sy0\">|</span> Traversal xy <span class=\"sy0\">&lt;-</span> indices2Of pos<span class=\"sy0\">,</span> pos <span class=\"sy0\">^?</span> xy <span class=\"sy0\">==</span> Just <span class=\"nu0\">0</span> <span class=\"br0\">]</span><br/>  a <span class=\"sy0\">&lt;-</span> categorical <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span>prob4<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>prob4<span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">]</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"sy0\">$</span>  pos &amp; xy <span class=\"sy0\">.~</span> a<br/><span class=\"co1\">-- Easy, is'n it'?</span><br/>\u00a0<br/><span class=\"co1\">-- Main loop</span><br/>play <span class=\"sy0\">::</span> Position <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>play pos <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>   c <span class=\"sy0\">&lt;-</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:getChar\"><span class=\"kw3\">getChar</span></a><br/>   <span class=\"kw1\">case</span> go pos <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:lookup\"><span class=\"kw3\">lookup</span></a> c <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"st0\">'D'</span><span class=\"sy0\">,</span>left<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"st0\">'C'</span><span class=\"sy0\">,</span>right<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"st0\">'A'</span><span class=\"sy0\">,</span>up<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"st0\">'B'</span><span class=\"sy0\">,</span>down<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span><br/>      Nothing <span class=\"sy0\">-&gt;</span> play pos<br/>      Just pos1 <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">do</span><br/>         pos2 <span class=\"sy0\">&lt;-</span> sample <span class=\"sy0\">$</span> add2or4 pos1<br/>         draw pos2<br/>         when <span class=\"br0\">(</span>win pos2 <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:not\"><span class=\"kw3\">not</span></a> <span class=\"br0\">(</span>win pos<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <span class=\"st0\">\"You win! You may keep going.\"</span><br/>         <span class=\"kw1\">if</span> lost pos2 <span class=\"kw1\">then</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"You lost!\"</span><br/>            <span class=\"kw1\">else</span> play pos2<br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  pos <span class=\"sy0\">&lt;-</span> sample <span class=\"sy0\">$</span> add2or4 <span class=\"sy0\">$</span> replicate <span class=\"nu0\">4</span> <span class=\"br0\">(</span>replicate <span class=\"nu0\">4</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  draw pos<br/>  play pos<br/>\u00a0<br/><span class=\"co1\">-- Rendering</span><br/><span class=\"co1\">-- See https://en.wikipedia.org/wiki/ANSI_escape_code#Colors</span><br/>colors <span class=\"sy0\">=</span><br/> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"st0\">\"<span class=\"es0\">\\E</span>SC[38;5;234;48;5;250m     \"</span><span class=\"br0\">)</span><br/> <span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"st0\">\"<span class=\"es0\">\\E</span>SC[38;5;234;48;5;255m  2  \"</span><span class=\"br0\">)</span><br/> <span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"st0\">\"<span class=\"es0\">\\E</span>SC[38;5;234;48;5;230m  4  \"</span><span class=\"br0\">)</span><br/> <span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span><span class=\"st0\">\"<span class=\"es0\">\\E</span>SC[38;5;15;48;5;208m  8  \"</span><span class=\"br0\">)</span><br/> <span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">16</span><span class=\"sy0\">,</span><span class=\"st0\">\"<span class=\"es0\">\\E</span>SC[38;5;15;48;5;209m  16 \"</span><span class=\"br0\">)</span><br/> <span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"sy0\">,</span><span class=\"st0\">\"<span class=\"es0\">\\E</span>SC[38;5;15;48;5;203m  32 \"</span><span class=\"br0\">)</span><br/> <span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">64</span><span class=\"sy0\">,</span><span class=\"st0\">\"<span class=\"es0\">\\E</span>SC[38;5;15;48;5;9m  64 \"</span><span class=\"br0\">)</span><br/> <span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">128</span><span class=\"sy0\">,</span><span class=\"st0\">\"<span class=\"es0\">\\E</span>SC[38;5;15;48;5;228m 128 \"</span><span class=\"br0\">)</span><br/> <span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">256</span><span class=\"sy0\">,</span><span class=\"st0\">\"<span class=\"es0\">\\E</span>SC[38;5;15;48;5;227m 256 \"</span><span class=\"br0\">)</span><br/> <span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">512</span><span class=\"sy0\">,</span><span class=\"st0\">\"<span class=\"es0\">\\E</span>SC[38;5;15;48;5;226m 512 \"</span><span class=\"br0\">)</span><br/> <span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">1024</span><span class=\"sy0\">,</span><span class=\"st0\">\"<span class=\"es0\">\\E</span>SC[38;5;15;48;5;221m 1024\"</span><span class=\"br0\">)</span><br/> <span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">2048</span><span class=\"sy0\">,</span><span class=\"st0\">\"<span class=\"es0\">\\E</span>SC[38;5;15;48;5;220m 2048\"</span><span class=\"br0\">)</span><br/> <span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">4096</span><span class=\"sy0\">,</span><span class=\"st0\">\"<span class=\"es0\">\\E</span>SC[38;5;15;48;5;0m 4096\"</span><span class=\"br0\">)</span><br/> <span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">8192</span><span class=\"sy0\">,</span><span class=\"st0\">\"<span class=\"es0\">\\E</span>SC[38;5;15;48;5;0m 8192\"</span><span class=\"br0\">)</span><br/> <span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">16384</span><span class=\"sy0\">,</span><span class=\"st0\">\"<span class=\"es0\">\\E</span>SC[38;5;15;48;5;0m16384\"</span><span class=\"br0\">)</span><br/> <span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">32768</span><span class=\"sy0\">,</span><span class=\"st0\">\"<span class=\"es0\">\\E</span>SC[38;5;15;48;5;0m32768\"</span><span class=\"br0\">)</span><br/> <span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">65536</span><span class=\"sy0\">,</span><span class=\"st0\">\"<span class=\"es0\">\\E</span>SC[38;5;15;48;5;0m65536\"</span><span class=\"br0\">)</span><br/> <span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">131072</span><span class=\"sy0\">,</span><span class=\"st0\">\"<span class=\"es0\">\\E</span>SC[38;5;15;48;5;90m131072\"</span><span class=\"br0\">)</span><br/> <span class=\"br0\">]</span><br/>\u00a0<br/>showTile x <span class=\"sy0\">=</span> fromJust <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:lookup\"><span class=\"kw3\">lookup</span></a> x colors<span class=\"br0\">)</span> <span class=\"sy0\">++</span> <span class=\"st0\">\"<span class=\"es0\">\\E</span>SC[B<span class=\"es0\">\\^</span>H<span class=\"es0\">\\^</span>H<span class=\"es0\">\\^</span>H<span class=\"es0\">\\^</span>H<span class=\"es0\">\\^</span>H     <span class=\"es0\">\\E</span>SC[A<span class=\"es0\">\\E</span>SC[C\"</span><br/>\u00a0<br/>draw <span class=\"sy0\">::</span> Position <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>draw pos <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  setSGR <span class=\"br0\">[</span>Reset<span class=\"br0\">]</span><br/>  clearScreen<br/>  hideCursor<br/>  hSetEcho stdin False<br/>  hSetBuffering stdin NoBuffering<br/>  setSGR <span class=\"br0\">[</span>SetConsoleIntensity BoldIntensity<span class=\"br0\">]</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStr\"><span class=\"kw3\">putStr</span></a> <span class=\"st0\">\"<span class=\"es0\">\\E</span>SC[38;5;234;48;5;248m\"</span> <span class=\"co1\">-- set board color</span><br/>  setCursorPosition <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/>  replicateM<span class=\"sy0\">_</span> <span class=\"nu0\">13</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> replicate <span class=\"nu0\">26</span> <span class=\"st0\">' '</span><br/>  setCursorPosition <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> intercalate <span class=\"st0\">\"<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span><span class=\"es0\">\\n</span><span class=\"es0\">\\E</span>SC[C\"</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concatMap\"><span class=\"kw3\">concatMap</span></a> showTile `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a>` pos<br/>\u00a0</pre>"}, {"lang": "J", "loc": 106, "block": "<pre class=\"j highlighted_source\"><span class=\"co1\">NB. 2048.ijs script</span><br/><span class=\"co1\">NB. =========================================================</span><br/><span class=\"co1\">NB. 2048 game engine</span><br/>\u00a0<br/>require <span class=\"st_h\">'guid'</span><br/><span class=\"sy0\">(</span>[ <span class=\"nu0\">9</span>!:<span class=\"nu0\">1</span><span class=\"sy0\">)</span> <span class=\"nu0\">_2</span> <span class=\"sy0\">(</span><span class=\"nu0\">3</span>!:<span class=\"nu0\">4</span><span class=\"sy0\">)</span> , guids <span class=\"nu0\">1</span>            <span class=\"co1\">NB. randomly set initial random seed</span><br/>\u00a0<br/>coclass <span class=\"st_h\">'g2048'</span><br/>Target=: <span class=\"nu0\">2048</span><br/>\u00a0<br/>new2048=: verb define<br/>  Gridsz=: <span class=\"nu0\">4</span> <span class=\"nu0\">4</span><br/>  Points=: Score=: <span class=\"nu0\">0</span><br/>  Grid=: newnum^:<span class=\"nu0\">2</span> ] Gridsz $ <span class=\"nu0\">0</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/>newnum=: verb define<br/>  num=. <span class=\"nu0\">2</span> <span class=\"nu0\">4</span> {~ <span class=\"nu0\">0.1</span> &gt;\u00a0?<span class=\"nu0\">0</span>   <span class=\"co1\">NB. 10% chance of 4</span><br/>  idx=. <span class=\"nu0\">4</span> $. $. <span class=\"nu0\">0</span> = <span class=\"kw2\">y</span>        <span class=\"co1\">NB. indicies of 0s</span><br/>  <span class=\"kw1\">if.</span> #idx <span class=\"kw1\">do.</span>               <span class=\"co1\">NB. handle full grid</span><br/>    idx=. ,/ <span class=\"sy0\">(</span>{~ <span class=\"nu0\">1</span>\u00a0? #<span class=\"sy0\">)</span> idx  <span class=\"co1\">NB. choose an index</span><br/>    num <span class=\"sy0\">(</span>&lt;idx<span class=\"sy0\">)</span>} <span class=\"kw2\">y</span><br/>  <span class=\"kw1\">else.</span> <span class=\"kw1\">return.</span> <span class=\"kw2\">y</span><br/>  <span class=\"kw1\">end.</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/>mskmerge=: [: &gt;/\\.&amp;.|. <span class=\"nu0\">2</span> =/\\ ,&amp;<span class=\"nu0\">_1</span><br/>mergerow=: <span class=\"sy0\">((</span>* &gt;:<span class=\"sy0\">)</span> #~ <span class=\"nu0\">_1</span> |. <a class=\"__cf_email__\" data-cfemail=\"e0cdcea0\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>]<span class=\"sy0\">)</span> mskmerge<br/>scorerow=: +/@<span class=\"sy0\">(</span>+: #~ mskmerge<span class=\"sy0\">)</span><br/>\u00a0<br/>compress=: -.&amp;<span class=\"nu0\">0</span><br/>toLeft=: <span class=\"nu0\">1</span>\u00a0:<span class=\"st_h\">'4&amp;{<a class=\"__cf_email__\" data-cfemail=\"89a7c9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(<a class=\"__cf_email__\" data-cfemail=\"710431121e1c0103140202\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)\"1'</span><br/>toRight=: <span class=\"nu0\">1</span>\u00a0: <span class=\"st_h\">'_4&amp;{<a class=\"__cf_email__\" data-cfemail=\"d9f799\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(<a class=\"__cf_email__\" data-cfemail=\"f683b695999b8684938585\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&amp;.|.)\"1'</span><br/>toUp=: <span class=\"nu0\">1</span>\u00a0: <span class=\"st_h\">'(4&amp;{<a class=\"__cf_email__\" data-cfemail=\"f0deb0\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(<a class=\"__cf_email__\" data-cfemail=\"c7b287a4a8aab7b5a2b4b4\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)\"1)&amp;.|:'</span><br/>toDown=: <span class=\"nu0\">1</span>\u00a0: <span class=\"st_h\">'(_4&amp;{<a class=\"__cf_email__\" data-cfemail=\"fed0be\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(<a class=\"__cf_email__\" data-cfemail=\"47320724282a3735223434\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&amp;.|.)\"1)&amp;.|:'</span><br/>\u00a0<br/>move=: conjunction define<br/>  Points=: +/@, <span class=\"kw2\">v</span> Grid<br/>  update newnum^:<span class=\"sy0\">(</span>Grid <a class=\"__cf_email__\" data-cfemail=\"75585b3558\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>: ]<span class=\"sy0\">)</span> <span class=\"kw2\">u</span> Grid<br/><span class=\"sy0\">)</span><br/>\u00a0<br/>noMoves=: <span class=\"sy0\">(</span><span class=\"nu0\">0</span> <a class=\"__cf_email__\" data-cfemail=\"3e13107e5b10\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> ,<span class=\"sy0\">)</span>@<span class=\"sy0\">(</span>mergerow toRight , mergerow toLeft , mergerow toUp ,: mergerow toDown<span class=\"sy0\">)</span><br/>hasWon=: Target e. ,<br/>\u00a0<br/>eval=: verb define<br/>  Score=: Score + Points<br/>  isend=. <span class=\"sy0\">(</span>noMoves , hasWon<span class=\"sy0\">)</span> <span class=\"kw2\">y</span><br/>  msg=. isend # <span class=\"st_h\">'You lost!!'</span>;<span class=\"st_h\">'You Won!!'</span><br/>  <span class=\"kw1\">if.</span> -. isend=. +./ isend <span class=\"kw1\">do.</span><br/>    Points=: <span class=\"nu0\">0</span><br/>    msg=. <span class=\"st_h\">'Score is '</span>,<span class=\"sy0\">(</span>\": Score<span class=\"sy0\">)</span><br/>  <span class=\"kw1\">end.</span><br/>  isend;msg<br/><span class=\"sy0\">)</span><br/>\u00a0<br/>showGrid=: echo<br/>\u00a0<br/><span class=\"co1\">NB. =========================================================</span><br/><span class=\"co1\">NB. Console user interface</span><br/>\u00a0<br/>g2048Con_z_=: conew&amp;<span class=\"st_h\">'g2048con'</span><br/>\u00a0<br/>coclass <span class=\"st_h\">'g2048con'</span><br/>coinsert <span class=\"st_h\">'g2048'</span><br/>\u00a0<br/>create=: verb define<br/>  echo Instructions<br/>  startnew <span class=\"kw2\">y</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/>destroy=: codestroy<br/>quit=: destroy<br/>\u00a0<br/>startnew=: <a class=\"__cf_email__\" data-cfemail=\"d3a6a3b7b2a7b693bdb6a4e1e3e7eb\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>\u00a0<br/>left=: <span class=\"nu0\">3</span>\u00a0:<span class=\"st_h\">'mergerow toLeft move (scorerow toLeft)'</span><br/>right=: <span class=\"nu0\">3</span>\u00a0:<span class=\"st_h\">'mergerow toRight move (scorerow toRight)'</span><br/>up=: <span class=\"nu0\">3</span>\u00a0:<span class=\"st_h\">'mergerow toUp move (scorerow toUp)'</span><br/>down=: <span class=\"nu0\">3</span>\u00a0:<span class=\"st_h\">'mergerow toDown move (scorerow toDown)'</span><br/>\u00a0<br/>update=: verb define<br/>  Grid=: <span class=\"kw2\">y</span>       <span class=\"co1\">NB. update global Grid</span><br/>  <span class=\"st_h\">'isend msg'</span>=. eval <span class=\"kw2\">y</span><br/>  echo msg<br/>  showGrid <span class=\"kw2\">y</span><br/>  <span class=\"kw1\">if.</span> isend <span class=\"kw1\">do.</span> destroy <span class=\"st_h\">''</span> <span class=\"kw1\">end.</span><br/>  empty<span class=\"st_h\">''</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/>Instructions=: noun define<br/>=== <span class=\"nu0\">2048</span> ===<br/>Object:<br/>   Create the number <span class=\"nu0\">2048</span> by merging numbers.<br/>\u00a0<br/>How to play:<br/>  When <span class=\"nu0\">2</span> numbers the same touch, they merge.<br/>  - move numbers using the commands below:<br/>       right__grd <span class=\"st_h\">''</span><br/>       left__grd <span class=\"st_h\">''</span><br/>       up__grd <span class=\"st_h\">''</span><br/>       down__grd <span class=\"st_h\">''</span><br/>  - quit a game:<br/>       quit__grd <span class=\"st_h\">''</span><br/>  - start a new game:<br/>       grd=: g2048Con <span class=\"st_h\">''</span><br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 298, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.awt.*</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.awt.event.*</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Random</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">javax.swing.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Game2048 <span class=\"kw1\">extends</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajpanel+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JPanel</span></a> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">enum</span> State <span class=\"br0\">{</span><br/>        start, won, running, over<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> colorTable <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a><span class=\"br0\">(</span>0x701710<span class=\"br0\">)</span>, <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a><span class=\"br0\">(</span>0xFFE4C3<span class=\"br0\">)</span>, <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a><span class=\"br0\">(</span>0xfff4d3<span class=\"br0\">)</span>,<br/>        <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a><span class=\"br0\">(</span>0xffdac3<span class=\"br0\">)</span>, <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a><span class=\"br0\">(</span>0xe7b08e<span class=\"br0\">)</span>, <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a><span class=\"br0\">(</span>0xe7bf8e<span class=\"br0\">)</span>,<br/>        <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a><span class=\"br0\">(</span>0xffc4c3<span class=\"br0\">)</span>, <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a><span class=\"br0\">(</span>0xE7948e<span class=\"br0\">)</span>, <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a><span class=\"br0\">(</span>0xbe7e56<span class=\"br0\">)</span>,<br/>        <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a><span class=\"br0\">(</span>0xbe5e56<span class=\"br0\">)</span>, <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a><span class=\"br0\">(</span>0x9c3931<span class=\"br0\">)</span>, <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a><span class=\"br0\">(</span>0x701710<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">final</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> target <span class=\"sy0\">=</span> <span class=\"nu0\">2048</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> highest<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> score<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a> gridColor <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a><span class=\"br0\">(</span>0xBBADA0<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a> emptyColor <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a><span class=\"br0\">(</span>0xCDC1B4<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a> startColor <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a><span class=\"br0\">(</span>0xFFEBCD<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arandom+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Random</span></a> rand <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arandom+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Random</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> Tile<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> tiles<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">int</span> side <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> State gamestate <span class=\"sy0\">=</span> State.<span class=\"me1\">start</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">boolean</span> checkingAvailableMoves<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> Game2048<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        setPreferredSize<span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adimension+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Dimension</span></a><span class=\"br0\">(</span><span class=\"nu0\">900</span>, <span class=\"nu0\">700</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        setBackground<span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a><span class=\"br0\">(</span>0xFAF8EF<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        setFont<span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afont+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Font</span></a><span class=\"br0\">(</span><span class=\"st0\">\"SansSerif\"</span>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afont+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Font</span></a>.<span class=\"me1\">BOLD</span>, <span class=\"nu0\">48</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        setFocusable<span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        addMouseListener<span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amouseadapter+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">MouseAdapter</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            @Override<br/>            <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> mousePressed<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amouseevent+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">MouseEvent</span></a> e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                startGame<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                repaint<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        addKeyListener<span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Akeyadapter+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">KeyAdapter</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            @Override<br/>            <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> keyPressed<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Akeyevent+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">KeyEvent</span></a> e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>e.<span class=\"me1\">getKeyCode</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">case</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Akeyevent+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">KeyEvent</span></a>.<span class=\"me1\">VK_UP</span><span class=\"sy0\">:</span><br/>                        moveUp<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">case</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Akeyevent+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">KeyEvent</span></a>.<span class=\"me1\">VK_DOWN</span><span class=\"sy0\">:</span><br/>                        moveDown<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">case</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Akeyevent+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">KeyEvent</span></a>.<span class=\"me1\">VK_LEFT</span><span class=\"sy0\">:</span><br/>                        moveLeft<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">case</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Akeyevent+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">KeyEvent</span></a>.<span class=\"me1\">VK_RIGHT</span><span class=\"sy0\">:</span><br/>                        moveRight<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                repaint<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    @Override<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> paintComponent<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics</span></a> gg<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">super</span>.<span class=\"me1\">paintComponent</span><span class=\"br0\">(</span>gg<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics2d+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics2D</span></a> g <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics2d+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics2D</span></a><span class=\"br0\">)</span> gg<span class=\"sy0\">;</span><br/>        g.<span class=\"me1\">setRenderingHint</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arenderinghints+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">RenderingHints</span></a>.<span class=\"me1\">KEY_ANTIALIASING</span>,<br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arenderinghints+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">RenderingHints</span></a>.<span class=\"me1\">VALUE_ANTIALIAS_ON</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        drawGrid<span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> startGame<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>gamestate <span class=\"sy0\">!=</span> State.<span class=\"me1\">running</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            score <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            highest <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            gamestate <span class=\"sy0\">=</span> State.<span class=\"me1\">running</span><span class=\"sy0\">;</span><br/>            tiles <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Tile<span class=\"br0\">[</span>side<span class=\"br0\">]</span><span class=\"br0\">[</span>side<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            addRandomTile<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            addRandomTile<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> drawGrid<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics2d+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics2D</span></a> g<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span>gridColor<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        g.<span class=\"me1\">fillRoundRect</span><span class=\"br0\">(</span><span class=\"nu0\">200</span>, <span class=\"nu0\">100</span>, <span class=\"nu0\">499</span>, <span class=\"nu0\">499</span>, <span class=\"nu0\">15</span>, <span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>gamestate <span class=\"sy0\">==</span> State.<span class=\"me1\">running</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> r <span class=\"sy0\">&lt;</span> side<span class=\"sy0\">;</span> r<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> c <span class=\"sy0\">&lt;</span> side<span class=\"sy0\">;</span> c<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tiles<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span>emptyColor<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        g.<span class=\"me1\">fillRoundRect</span><span class=\"br0\">(</span><span class=\"nu0\">215</span> <span class=\"sy0\">+</span> c <span class=\"sy0\">*</span> <span class=\"nu0\">121</span>, <span class=\"nu0\">115</span> <span class=\"sy0\">+</span> r <span class=\"sy0\">*</span> <span class=\"nu0\">121</span>, <span class=\"nu0\">106</span>, <span class=\"nu0\">106</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                        drawTile<span class=\"br0\">(</span>g, r, c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span>startColor<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            g.<span class=\"me1\">fillRoundRect</span><span class=\"br0\">(</span><span class=\"nu0\">215</span>, <span class=\"nu0\">115</span>, <span class=\"nu0\">469</span>, <span class=\"nu0\">469</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span>gridColor.<span class=\"me1\">darker</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            g.<span class=\"me1\">setFont</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afont+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Font</span></a><span class=\"br0\">(</span><span class=\"st0\">\"SansSerif\"</span>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afont+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Font</span></a>.<span class=\"me1\">BOLD</span>, <span class=\"nu0\">128</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            g.<span class=\"me1\">drawString</span><span class=\"br0\">(</span><span class=\"st0\">\"2048\"</span>, <span class=\"nu0\">310</span>, <span class=\"nu0\">270</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            g.<span class=\"me1\">setFont</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afont+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Font</span></a><span class=\"br0\">(</span><span class=\"st0\">\"SansSerif\"</span>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afont+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Font</span></a>.<span class=\"me1\">BOLD</span>, <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>gamestate <span class=\"sy0\">==</span> State.<span class=\"me1\">won</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                g.<span class=\"me1\">drawString</span><span class=\"br0\">(</span><span class=\"st0\">\"you made it!\"</span>, <span class=\"nu0\">390</span>, <span class=\"nu0\">350</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>gamestate <span class=\"sy0\">==</span> State.<span class=\"me1\">over</span><span class=\"br0\">)</span><br/>                g.<span class=\"me1\">drawString</span><span class=\"br0\">(</span><span class=\"st0\">\"game over\"</span>, <span class=\"nu0\">400</span>, <span class=\"nu0\">350</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span>gridColor<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            g.<span class=\"me1\">drawString</span><span class=\"br0\">(</span><span class=\"st0\">\"click to start a new game\"</span>, <span class=\"nu0\">330</span>, <span class=\"nu0\">470</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            g.<span class=\"me1\">drawString</span><span class=\"br0\">(</span><span class=\"st0\">\"(use arrow keys to move tiles)\"</span>, <span class=\"nu0\">310</span>, <span class=\"nu0\">530</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> drawTile<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics2d+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics2D</span></a> g, <span class=\"kw4\">int</span> r, <span class=\"kw4\">int</span> c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> value <span class=\"sy0\">=</span> tiles<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span>.<span class=\"me1\">getValue</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span>colorTable<span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">log</span><span class=\"br0\">(</span>value<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        g.<span class=\"me1\">fillRoundRect</span><span class=\"br0\">(</span><span class=\"nu0\">215</span> <span class=\"sy0\">+</span> c <span class=\"sy0\">*</span> <span class=\"nu0\">121</span>, <span class=\"nu0\">115</span> <span class=\"sy0\">+</span> r <span class=\"sy0\">*</span> <span class=\"nu0\">121</span>, <span class=\"nu0\">106</span>, <span class=\"nu0\">106</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> s <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>value<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span>value <span class=\"sy0\">&lt;</span> <span class=\"nu0\">128</span> <span class=\"sy0\">?</span> colorTable<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">:</span> colorTable<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afontmetrics+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">FontMetrics</span></a> fm <span class=\"sy0\">=</span> g.<span class=\"me1\">getFontMetrics</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> asc <span class=\"sy0\">=</span> fm.<span class=\"me1\">getAscent</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> dec <span class=\"sy0\">=</span> fm.<span class=\"me1\">getDescent</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">215</span> <span class=\"sy0\">+</span> c <span class=\"sy0\">*</span> <span class=\"nu0\">121</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"nu0\">106</span> <span class=\"sy0\">-</span> fm.<span class=\"me1\">stringWidth</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">115</span> <span class=\"sy0\">+</span> r <span class=\"sy0\">*</span> <span class=\"nu0\">121</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>asc <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"nu0\">106</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>asc <span class=\"sy0\">+</span> dec<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        g.<span class=\"me1\">drawString</span><span class=\"br0\">(</span>s, x, y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">void</span> addRandomTile<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> pos <span class=\"sy0\">=</span> rand.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span>side <span class=\"sy0\">*</span> side<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> row, col<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>            pos <span class=\"sy0\">=</span> <span class=\"br0\">(</span>pos <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span>side <span class=\"sy0\">*</span> side<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            row <span class=\"sy0\">=</span> pos <span class=\"sy0\">/</span> side<span class=\"sy0\">;</span><br/>            col <span class=\"sy0\">=</span> pos <span class=\"sy0\">%</span> side<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>tiles<span class=\"br0\">[</span>row<span class=\"br0\">]</span><span class=\"br0\">[</span>col<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> val <span class=\"sy0\">=</span> rand.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"nu0\">4</span> <span class=\"sy0\">:</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        tiles<span class=\"br0\">[</span>row<span class=\"br0\">]</span><span class=\"br0\">[</span>col<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Tile<span class=\"br0\">(</span>val<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">boolean</span> move<span class=\"br0\">(</span><span class=\"kw4\">int</span> countDownFrom, <span class=\"kw4\">int</span> yIncr, <span class=\"kw4\">int</span> xIncr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">boolean</span> moved <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> side <span class=\"sy0\">*</span> side<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">abs</span><span class=\"br0\">(</span>countDownFrom <span class=\"sy0\">-</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw4\">int</span> r <span class=\"sy0\">=</span> j <span class=\"sy0\">/</span> side<span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> c <span class=\"sy0\">=</span> j <span class=\"sy0\">%</span> side<span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tiles<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw4\">int</span> nextR <span class=\"sy0\">=</span> r <span class=\"sy0\">+</span> yIncr<span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> nextC <span class=\"sy0\">=</span> c <span class=\"sy0\">+</span> xIncr<span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>nextR <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> nextR <span class=\"sy0\">&lt;</span> side <span class=\"sy0\">&amp;&amp;</span> nextC <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> nextC <span class=\"sy0\">&lt;</span> side<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>                Tile next <span class=\"sy0\">=</span> tiles<span class=\"br0\">[</span>nextR<span class=\"br0\">]</span><span class=\"br0\">[</span>nextC<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                Tile curr <span class=\"sy0\">=</span> tiles<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>next <span class=\"sy0\">==</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>checkingAvailableMoves<span class=\"br0\">)</span><br/>                        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                    tiles<span class=\"br0\">[</span>nextR<span class=\"br0\">]</span><span class=\"br0\">[</span>nextC<span class=\"br0\">]</span> <span class=\"sy0\">=</span> curr<span class=\"sy0\">;</span><br/>                    tiles<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span><br/>                    r <span class=\"sy0\">=</span> nextR<span class=\"sy0\">;</span><br/>                    c <span class=\"sy0\">=</span> nextC<span class=\"sy0\">;</span><br/>                    nextR <span class=\"sy0\">+=</span> yIncr<span class=\"sy0\">;</span><br/>                    nextC <span class=\"sy0\">+=</span> xIncr<span class=\"sy0\">;</span><br/>                    moved <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>next.<span class=\"me1\">canMergeWith</span><span class=\"br0\">(</span>curr<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>checkingAvailableMoves<span class=\"br0\">)</span><br/>                        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                    <span class=\"kw4\">int</span> value <span class=\"sy0\">=</span> next.<span class=\"me1\">mergeWith</span><span class=\"br0\">(</span>curr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>value <span class=\"sy0\">&gt;</span> highest<span class=\"br0\">)</span><br/>                        highest <span class=\"sy0\">=</span> value<span class=\"sy0\">;</span><br/>                    score <span class=\"sy0\">+=</span> value<span class=\"sy0\">;</span><br/>                    tiles<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span><br/>                    moved <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span> <span class=\"kw1\">else</span><br/>                    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>moved<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>highest <span class=\"sy0\">&lt;</span> target<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                clearMerged<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                addRandomTile<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>movesAvailable<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    gamestate <span class=\"sy0\">=</span> State.<span class=\"me1\">over</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>highest <span class=\"sy0\">==</span> target<span class=\"br0\">)</span><br/>                gamestate <span class=\"sy0\">=</span> State.<span class=\"me1\">won</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> moved<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">boolean</span> moveUp<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> move<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">boolean</span> moveDown<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> move<span class=\"br0\">(</span>side <span class=\"sy0\">*</span> side <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">boolean</span> moveLeft<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> move<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">boolean</span> moveRight<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> move<span class=\"br0\">(</span>side <span class=\"sy0\">*</span> side <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> clearMerged<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>Tile<span class=\"br0\">[</span><span class=\"br0\">]</span> row <span class=\"sy0\">:</span> tiles<span class=\"br0\">)</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span>Tile tile <span class=\"sy0\">:</span> row<span class=\"br0\">)</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tile <span class=\"sy0\">!=</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><br/>                    tile.<span class=\"me1\">setMerged</span><span class=\"br0\">(</span><span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">boolean</span> movesAvailable<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        checkingAvailableMoves <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">boolean</span> hasMoves <span class=\"sy0\">=</span> moveUp<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> moveDown<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> moveLeft<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> moveRight<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        checkingAvailableMoves <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> hasMoves<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aswingutilities+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">SwingUtilities</span></a>.<span class=\"me1\">invokeLater</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajframe+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JFrame</span></a> f <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajframe+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JFrame</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setDefaultCloseOperation</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajframe+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JFrame</span></a>.<span class=\"me1\">EXIT_ON_CLOSE</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setTitle</span><span class=\"br0\">(</span><span class=\"st0\">\"2048\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setResizable</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> Game2048<span class=\"br0\">(</span><span class=\"br0\">)</span>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aborderlayout+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BorderLayout</span></a>.<span class=\"me1\">CENTER</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">pack</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setLocationRelativeTo</span><span class=\"br0\">(</span><span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setVisible</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Tile <span class=\"br0\">{</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">boolean</span> merged<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">int</span> value<span class=\"sy0\">;</span><br/>\u00a0<br/>    Tile<span class=\"br0\">(</span><span class=\"kw4\">int</span> val<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        value <span class=\"sy0\">=</span> val<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> getValue<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> value<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> setMerged<span class=\"br0\">(</span><span class=\"kw4\">boolean</span> m<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        merged <span class=\"sy0\">=</span> m<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">boolean</span> canMergeWith<span class=\"br0\">(</span>Tile other<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy0\">!</span>merged <span class=\"sy0\">&amp;&amp;</span> other <span class=\"sy0\">!=</span> <span class=\"kw2\">null</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>other.<span class=\"me1\">merged</span> <span class=\"sy0\">&amp;&amp;</span> value <span class=\"sy0\">==</span> other.<span class=\"me1\">getValue</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> mergeWith<span class=\"br0\">(</span>Tile other<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>canMergeWith<span class=\"br0\">(</span>other<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            value <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>            merged <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> value<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 173, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>using Gtk.ShortNames<br/>\u00a0<br/>@enum Direction2048 Right Left Up Down<br/>\u00a0<br/>\"\"\"<br/>    shifttiles!<br/>The adding and condensing code is for a leftward shift, so if the move is not<br/>leftward, this will rotate matrix to make move leftward, move, then undo rotation.<br/>\"\"\"<br/>function shifttiles!(b, siz, direction)<br/>    if direction == Right<br/>        tmpb = rot180(b); points, winner = leftshift!(tmpb, siz); tmpb = rot180(tmpb)<br/>    elseif direction == Up<br/>        tmpb = rotl90(b); points, winner = leftshift!(tmpb, siz); tmpb = rotr90(tmpb)<br/>    elseif direction == Down<br/>        tmpb = rotr90(b); points, winner = leftshift!(tmpb, siz); tmpb = rotl90(tmpb)<br/>    else # left movement function as coded<br/>        return leftshift!(b, siz)<br/>    end<br/>    for i in 1:siz, j in 1:siz<br/>        b[i,j] = tmpb[i,j]   # copy tmpb contents back to b (modifies b)<br/>    end<br/>    points, winner<br/>end<br/>\u00a0<br/>\u00a0<br/>function compactleft!(b, siz, row)<br/>    tmprow = zeros(Int, siz)<br/>    tmppos = 1<br/>    for j in 1:siz<br/>        if b[row,j]\u00a0!= 0<br/>            tmprow[tmppos] = b[row,j]<br/>            tmppos += 1<br/>        end<br/>    end<br/>    b[row,:] = tmprow<br/>end<br/>\u00a0<br/>\"\"\"<br/>    leftshift!<br/>Work row by row. First, compact tiles to the left if possible. Second, find and<br/>replace paired tiles in the row, then re-compact. Keep score of merges and return<br/>as pointsgained. If a 2048 value tile is created, return a winner true value.<br/>\"\"\"<br/>function leftshift!(b, siz)<br/>    pointsgained = 0<br/>    winner = false<br/>    for i in 1:siz<br/>        compactleft!(b, siz, i)<br/>        tmprow = zeros(Int, siz)<br/>        tmppos = 1<br/>        for j in 1:siz-1<br/>            if b[i,j] == b[i,j+1]<br/>                b[i,j] = 2 * b[i,j]<br/>                b[i,j+1] = 0<br/>                pointsgained += b[i,j]<br/>                if b[i,j] == 2048     # made a 2048 tile, which wins game<br/>                    winner = true<br/>                end<br/>            end<br/>            if b[i,j]\u00a0!= 0<br/>                tmprow[tmppos] = b[i,j]<br/>                tmppos += 1<br/>            end<br/>        end<br/>        tmprow[siz] = b[i,siz]<br/>        b[i,:] = tmprow<br/>        compactleft!(b, siz, i)<br/>    end<br/>    pointsgained, winner<br/>end<br/>\u00a0<br/>\"\"\"<br/>    app2048<br/>Run game app, with boardsize (choose 4 for original game) as an argument.<br/>\"\"\"<br/>function app2048(bsize)<br/>    win = Window(\"2048 Game\", 400, 400) |&gt; (Frame() |&gt; (box = Box(:v)))<br/>    toolbar = Toolbar()<br/>    newgame = ToolButton(\"New Game\")<br/>    setproperty!(newgame,\u00a0:label, \"New Game\")<br/>    setproperty!(newgame,\u00a0:is_important, true)<br/>    undomove = ToolButton(\"Undo Move\")<br/>    setproperty!(undomove,\u00a0:label, \"Undo Move\")<br/>    setproperty!(undomove,\u00a0:is_important, true)<br/>    map(w-&gt;push!(toolbar,w),[newgame,undomove])<br/>    grid = Grid()<br/>    map(w -&gt; push!(box, w),[toolbar, grid])<br/>    buttons = Array{Gtk.GtkButtonLeaf,2}(bsize, bsize)<br/>    for i in 1:bsize, j in 1:bsize<br/>        grid[i,j] = buttons[i,j] = Button()<br/>        setproperty!(buttons[i,j],\u00a0:expand, true)<br/>    end<br/>    board = zeros(Int, (bsize,bsize))<br/>    pastboardstates = []<br/>    score = 0<br/>    gameover = false<br/>    condition = Condition()<br/>    won = \"\"<br/>\u00a0<br/>    function update!()<br/>        for i in 1:bsize, j in 1:bsize<br/>            label = (board[i,j] &gt; 0)\u00a0? board[i,j]: \" \"<br/>            setproperty!(buttons[i,j],\u00a0:label, label)<br/>        end<br/>        setproperty!(win,\u00a0:title, \"$won 2048 Game  (Score: $score)\")<br/>    end<br/>    function newrandomtile!()<br/>        blanks = Array{Tuple{Int,Int},1}()<br/>        for i in 1:bsize, j in 1:bsize<br/>            if board[i,j] == 0<br/>                push!(blanks, (i,j))<br/>            end<br/>        end<br/>        if length(blanks) == 0<br/>            gameover = true<br/>        else<br/>            i,j = rand(blanks)<br/>            board[i,j] = (rand() &gt; 0.8)\u00a0? 4\u00a0: 2<br/>        end<br/>    end<br/>    function initialize!(w)<br/>        won = \"\"<br/>        gameover = false<br/>        for i in 1:bsize, j in 1:bsize<br/>            board[i,j] = 0<br/>            setproperty!(buttons[i,j],\u00a0:label, \" \")<br/>        end<br/>        newrandomtile!()<br/>        update!()<br/>    end<br/>    function undo!(w)<br/>        if gameover == false<br/>            board = pop!(pastboardstates)<br/>            update!()<br/>        end<br/>    end<br/>    function keypress(w, event)<br/>        presses = Dict(37 =&gt; Up,    # code rotated 90 degrees<br/>                       38 =&gt; Left,  # because of Gtk coordinates<br/>                       39 =&gt; Down,  # y is downward positive<br/>                       40 =&gt; Right)<br/>        keycode = event.hardware_keycode<br/>        if haskey(presses, keycode) &amp;&amp; gameover == false<br/>            push!(pastboardstates, copy(board))<br/>            newpoints, havewon = shifttiles!(board, bsize, presses[keycode])<br/>            score += newpoints<br/>            if havewon &amp;&amp; won\u00a0!= \"Winning\"<br/>                won = \"Winning\"<br/>                info_dialog(\"You have won the game.\")<br/>            end<br/>            newrandomtile!()<br/>            update!()<br/>            if gameover<br/>                info_dialog(\"Game over.\\nScore: $score\")<br/>            end<br/>        end<br/>    end<br/>    endit(w) = notify(condition)<br/>    initialize!(win)<br/>    signal_connect(initialize!, newgame,\u00a0:clicked)<br/>    signal_connect(undo!,undomove,\u00a0:clicked)<br/>    signal_connect(endit, win,\u00a0:destroy)<br/>    signal_connect(keypress, win, \"key-press-event\")    <br/>    showall(win)<br/>    wait(condition)<br/>end<br/>\u00a0<br/>\u00a0<br/>const boardsize = 4<br/>app2048(boardsize)<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 170, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"me1\">BufferedReader</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"me1\">InputStreamReader</span><br/>\u00a0<br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> positiveGameOverMessage <span class=\"sy0\">=</span> <span class=\"st0\">\"So sorry, but you won the game.\"</span><br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> negativeGameOverMessage <span class=\"sy0\">=</span> <span class=\"st0\">\"So sorry, but you lost the game.\"</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> grid <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><br/>            arrayOf<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span>,<br/>            arrayOf<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span>,<br/>            arrayOf<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span>,<br/>            arrayOf<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> gameOverMessage <span class=\"sy0\">=</span> run2048<span class=\"br0\">(</span>grid<span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>gameOverMessage<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun run2048<span class=\"br0\">(</span>grid<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>Array<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>isGridSolved<span class=\"br0\">(</span>grid<span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> positiveGameOverMessage<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>isGridFull<span class=\"br0\">(</span>grid<span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> negativeGameOverMessage<br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> populatedGrid <span class=\"sy0\">=</span> spawnNumber<span class=\"br0\">(</span>grid<span class=\"br0\">)</span><br/>    display<span class=\"br0\">(</span>populatedGrid<span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> run2048<span class=\"br0\">(</span>manipulateGrid<span class=\"br0\">(</span>populatedGrid, waitForValidInput<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun isGridSolved<span class=\"br0\">(</span>grid<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>Array<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> grid.<span class=\"me1\">any</span> <span class=\"br0\">{</span> row -<span class=\"sy0\">&gt;</span> row.<span class=\"me1\">contains</span><span class=\"br0\">(</span><span class=\"nu0\">2048</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>fun isGridFull<span class=\"br0\">(</span>grid<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>Array<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> grid.<span class=\"me1\">all</span> <span class=\"br0\">{</span> row -<span class=\"sy0\">&gt;</span> <span class=\"sy0\">!</span>row.<span class=\"me1\">contains</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>fun spawnNumber<span class=\"br0\">(</span>grid<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>Array<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>Array<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> coordinates <span class=\"sy0\">=</span> locateSpawnCoordinates<span class=\"br0\">(</span>grid<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> number <span class=\"sy0\">=</span> generateNumber<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> updateGrid<span class=\"br0\">(</span>grid, coordinates, number<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun locateSpawnCoordinates<span class=\"br0\">(</span>grid<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>Array<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Pair<span class=\"sy0\">&lt;</span>Int, Int<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> emptyCells <span class=\"sy0\">=</span> arrayListOf<span class=\"sy0\">&lt;</span>Pair<span class=\"sy0\">&lt;</span>Int, Int<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    grid.<span class=\"me1\">forEachIndexed</span> <span class=\"br0\">{</span> x, row -<span class=\"sy0\">&gt;</span><br/>        row.<span class=\"me1\">forEachIndexed</span> <span class=\"br0\">{</span> y, cell -<span class=\"sy0\">&gt;</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>cell <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> emptyCells.<span class=\"me1\">add</span><span class=\"br0\">(</span>Pair<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> emptyCells<span class=\"br0\">[</span><span class=\"br0\">(</span>Math.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>emptyCells.<span class=\"me1\">size</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun generateNumber<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>Math.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0.10</span><span class=\"br0\">)</span> <span class=\"nu0\">2</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"nu0\">4</span><br/>\u00a0<br/>fun updateGrid<span class=\"br0\">(</span>grid<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>Array<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;&gt;</span>, at<span class=\"sy0\">:</span> Pair<span class=\"sy0\">&lt;</span>Int, Int<span class=\"sy0\">&gt;</span>, value<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>Array<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> updatedGrid <span class=\"sy0\">=</span> grid.<span class=\"me1\">copyOf</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    updatedGrid<span class=\"br0\">[</span>at.<span class=\"me1\">first</span><span class=\"br0\">]</span><span class=\"br0\">[</span>at.<span class=\"me1\">second</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> value<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> updatedGrid<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun waitForValidInput<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> input <span class=\"sy0\">=</span> waitForInput<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>isValidInput<span class=\"br0\">(</span>input<span class=\"br0\">)</span><span class=\"br0\">)</span> input <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> waitForValidInput<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun isValidInput<span class=\"br0\">(</span>input<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><span class=\"st0\">\"a\"</span>, <span class=\"st0\">\"s\"</span>, <span class=\"st0\">\"d\"</span>, <span class=\"st0\">\"w\"</span><span class=\"br0\">)</span>.<span class=\"me1\">contains</span><span class=\"br0\">(</span>input<span class=\"br0\">)</span><br/>\u00a0<br/>fun waitForInput<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> reader <span class=\"sy0\">=</span> BufferedReader<span class=\"br0\">(</span>InputStreamReader<span class=\"br0\">(</span>System.`in`<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Direction?  \"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> reader.<span class=\"me1\">readLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun manipulateGrid<span class=\"br0\">(</span>grid<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>Array<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;&gt;</span>, input<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>Array<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;&gt;</span> <span class=\"sy0\">=</span> when <span class=\"br0\">(</span>input<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">\"a\"</span> -<span class=\"sy0\">&gt;</span> shiftCellsLeft<span class=\"br0\">(</span>grid<span class=\"br0\">)</span><br/>    <span class=\"st0\">\"s\"</span> -<span class=\"sy0\">&gt;</span> shiftCellsDown<span class=\"br0\">(</span>grid<span class=\"br0\">)</span><br/>    <span class=\"st0\">\"d\"</span> -<span class=\"sy0\">&gt;</span> shiftCellsRight<span class=\"br0\">(</span>grid<span class=\"br0\">)</span><br/>    <span class=\"st0\">\"w\"</span> -<span class=\"sy0\">&gt;</span> shiftCellsUp<span class=\"br0\">(</span>grid<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> IllegalArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"Expected one of [a, s, d, w]\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun shiftCellsLeft<span class=\"br0\">(</span>grid<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>Array<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>Array<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;&gt;</span> <span class=\"sy0\">=</span><br/>        grid.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">::</span>mergeAndOrganizeCells<span class=\"br0\">)</span>.<span class=\"me1\">toTypedArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun shiftCellsRight<span class=\"br0\">(</span>grid<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>Array<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>Array<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;&gt;</span> <span class=\"sy0\">=</span><br/>        grid.<span class=\"me1\">map</span> <span class=\"br0\">{</span> row -<span class=\"sy0\">&gt;</span> mergeAndOrganizeCells<span class=\"br0\">(</span>row.<span class=\"me1\">reversed</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">toTypedArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">reversed</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">toTypedArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>.<span class=\"me1\">toTypedArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun shiftCellsUp<span class=\"br0\">(</span>grid<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>Array<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>Array<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rows<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>Array<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;&gt;</span> <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><br/>            arrayOf<span class=\"br0\">(</span>grid<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, grid<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, grid<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, grid<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>,<br/>            arrayOf<span class=\"br0\">(</span>grid<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, grid<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, grid<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, grid<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>,<br/>            arrayOf<span class=\"br0\">(</span>grid<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>, grid<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>, grid<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>, grid<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span>,<br/>            arrayOf<span class=\"br0\">(</span>grid<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>, grid<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>, grid<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>, grid<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> updatedGrid <span class=\"sy0\">=</span> grid.<span class=\"me1\">copyOf</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    rows.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">::</span>mergeAndOrganizeCells<span class=\"br0\">)</span>.<span class=\"me1\">forEachIndexed</span> <span class=\"br0\">{</span> rowIdx, row -<span class=\"sy0\">&gt;</span><br/>        updatedGrid<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span>rowIdx<span class=\"br0\">]</span> <span class=\"sy0\">=</span> row<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>        updatedGrid<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>rowIdx<span class=\"br0\">]</span> <span class=\"sy0\">=</span> row<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        updatedGrid<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span>rowIdx<span class=\"br0\">]</span> <span class=\"sy0\">=</span> row<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>        updatedGrid<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">[</span>rowIdx<span class=\"br0\">]</span> <span class=\"sy0\">=</span> row<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> updatedGrid<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun shiftCellsDown<span class=\"br0\">(</span>grid<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>Array<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>Array<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rows<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>Array<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;&gt;</span> <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><br/>            arrayOf<span class=\"br0\">(</span>grid<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, grid<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, grid<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, grid<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>,<br/>            arrayOf<span class=\"br0\">(</span>grid<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, grid<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, grid<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, grid<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>,<br/>            arrayOf<span class=\"br0\">(</span>grid<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>, grid<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>, grid<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>, grid<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span>,<br/>            arrayOf<span class=\"br0\">(</span>grid<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>, grid<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>, grid<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>, grid<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> updatedGrid <span class=\"sy0\">=</span> grid.<span class=\"me1\">copyOf</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    rows.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">::</span>mergeAndOrganizeCells<span class=\"br0\">)</span>.<span class=\"me1\">forEachIndexed</span> <span class=\"br0\">{</span> rowIdx, row -<span class=\"sy0\">&gt;</span><br/>        updatedGrid<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">[</span>rowIdx<span class=\"br0\">]</span> <span class=\"sy0\">=</span> row<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>        updatedGrid<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span>rowIdx<span class=\"br0\">]</span> <span class=\"sy0\">=</span> row<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        updatedGrid<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>rowIdx<span class=\"br0\">]</span> <span class=\"sy0\">=</span> row<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>        updatedGrid<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span>rowIdx<span class=\"br0\">]</span> <span class=\"sy0\">=</span> row<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> updatedGrid<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun mergeAndOrganizeCells<span class=\"br0\">(</span>row<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span> <span class=\"sy0\">=</span> organize<span class=\"br0\">(</span>merge<span class=\"br0\">(</span>row.<span class=\"me1\">copyOf</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun merge<span class=\"br0\">(</span>row<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span>, idxToMatch<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, idxToCompare<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>idxToMatch <span class=\"sy0\">&gt;=</span> row.<span class=\"me1\">size</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> row<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>idxToCompare <span class=\"sy0\">&gt;=</span> row.<span class=\"me1\">size</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> merge<span class=\"br0\">(</span>row, idxToMatch + <span class=\"nu0\">1</span>, idxToMatch + <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>row<span class=\"br0\">[</span>idxToMatch<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> merge<span class=\"br0\">(</span>row, idxToMatch + <span class=\"nu0\">1</span>, idxToMatch + <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>row<span class=\"br0\">[</span>idxToMatch<span class=\"br0\">]</span> <span class=\"sy0\">==</span> row<span class=\"br0\">[</span>idxToCompare<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        row<span class=\"br0\">[</span>idxToMatch<span class=\"br0\">]</span> <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span><br/>        row<span class=\"br0\">[</span>idxToCompare<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        merge<span class=\"br0\">(</span>row, idxToMatch + <span class=\"nu0\">1</span>, idxToMatch + <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>row<span class=\"br0\">[</span>idxToCompare<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> merge<span class=\"br0\">(</span>row, idxToMatch + <span class=\"nu0\">1</span>, idxToMatch + <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> merge<span class=\"br0\">(</span>row, idxToMatch, idxToCompare + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun organize<span class=\"br0\">(</span>row<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span>, idxToMatch<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, idxToCompare<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>idxToMatch <span class=\"sy0\">&gt;=</span> row.<span class=\"me1\">size</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> row<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>idxToCompare <span class=\"sy0\">&gt;=</span> row.<span class=\"me1\">size</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> organize<span class=\"br0\">(</span>row, idxToMatch + <span class=\"nu0\">1</span>, idxToMatch + <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>row<span class=\"br0\">[</span>idxToMatch<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> organize<span class=\"br0\">(</span>row, idxToMatch + <span class=\"nu0\">1</span>, idxToMatch + <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>row<span class=\"br0\">[</span>idxToCompare<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        row<span class=\"br0\">[</span>idxToMatch<span class=\"br0\">]</span> <span class=\"sy0\">=</span> row<span class=\"br0\">[</span>idxToCompare<span class=\"br0\">]</span><br/>        row<span class=\"br0\">[</span>idxToCompare<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        organize<span class=\"br0\">(</span>row, idxToMatch + <span class=\"nu0\">1</span>, idxToMatch + <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>        organize<span class=\"br0\">(</span>row, idxToMatch, idxToCompare + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun display<span class=\"br0\">(</span>grid<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>Array<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> prettyPrintableGrid <span class=\"sy0\">=</span> grid.<span class=\"me1\">map</span> <span class=\"br0\">{</span> row -<span class=\"sy0\">&gt;</span><br/>        row.<span class=\"me1\">map</span> <span class=\"br0\">{</span> cell -<span class=\"sy0\">&gt;</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>cell <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"st0\">\"    \"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> java.<span class=\"me1\">lang</span>.<span class=\"me1\">String</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"%4d\"</span>, cell<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"New Grid:\"</span><span class=\"br0\">)</span><br/>    prettyPrintableGrid.<span class=\"me1\">forEach</span> <span class=\"br0\">{</span> row -<span class=\"sy0\">&gt;</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"+----+----+----+----+\"</span><span class=\"br0\">)</span><br/>        row.<span class=\"me1\">forEach</span> <span class=\"br0\">{</span> print<span class=\"br0\">(</span><span class=\"st0\">\"|$it\"</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"+----+----+----+----+\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "M2000 Interpreter", "loc": 125, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module Game2048 {<br/>      \\\\ 10% 4 and 90% 2<br/>      Def GetTlleNumber()=If(Random(10)&lt;2-&gt;4, 2)<br/>      \\\\ tile<br/>      Def Tile$(x)=If$(x=0-&gt;\"[    ]\", format$(\"[{0::-4}]\", x))<br/>      \\\\ empty board<br/>      BoardTileRight=lambda (x, y)-&gt;x+y*4<br/>      BoardTileLeft=lambda (x, y)-&gt;3-x+y*4<br/>      BoardTileUp=lambda (x, y)-&gt;x*4+y<br/>      BoardTileDown=lambda (x, y)-&gt;(3-x)*4+y<br/>      Dim Board(0 to 15)<br/>      Inventory EmptyTiles<br/>      \\\\ Score is a statement but we can use it as a variable too.<br/>      Score=0<br/>      \\\\ Win is also a statement but we can use it as a variable too.<br/>      Win=False<br/>      ExitNow=False<br/>      BoardDirection=BoardtileRight<br/>      Process(BoardDirection)<br/>      \\\\ Split Rem lines to insert start condition to check valid moves<br/>      Rem\u00a0: board(0)=2<br/>      Rem\u00a0: board(1)=2, 2, 2   ' place to (1), (2), (3)<br/>            While len(EmptyTiles) {<br/>            NewTile()<br/>            DrawBoard()<br/>            Action=False<br/>            do {<br/>                  a$=key$<br/>                  if len(a$)=2 then {<br/>                        Action=true            <br/>                        Select case Asc(mid$(a$,2))<br/>                        Case 72<br/>                        BoardDirection=BoardTileUp<br/>                        Case 75<br/>                        BoardDirection=BoardTileRight<br/>                        Case 77<br/>                        BoardDirection=BoardTileLeft<br/>                        Case 80<br/>                        BoardDirection=BoardTileDown<br/>                        Case 79 ' End key<br/>                              ExitNow=True<br/>                        Else<br/>                        Action=false<br/>                        end select     <br/>                  }<br/>            } until Action<br/>            If ExitNow then exit<br/>            Process(BoardDirection)<br/>      }<br/>      If Win then {<br/>            Print \"You Win\"<br/>      } Else {<br/>            Print \"You Loose\"<br/>      }<br/>      End<br/>      Sub Process(Boardtile)<br/>      Inventory EmptyTiles   ' clear inventory<br/>      local where, i, j, k<br/>      For i=0 to 3<br/>            Gravity()<br/>            k=boardtile(0,i)<br/>            For j=1 to 3<br/>                  where=boardtile(j,i)<br/>                  if Board(where)&lt;&gt;0 then {<br/>                        if board(k)=board(where) then {<br/>                               board(k)*=2\u00a0: score+=board(where): board(where)=0<br/>                               if board(k)=2048 Then Win=True\u00a0: ExitNow=true<br/>                        }<br/>                  }<br/>                  k=where <br/>            Next j<br/>            Gravity()<br/>            For j=0 to 3<br/>                  where=boardtile(j,i)<br/>                  if board(where)=0 then Append EmptyTiles, where<br/>            Next j<br/>      Next i<br/>      End Sub<br/>      Sub NewTile()<br/>            local m=EmptyTiles(Random(0, len(EmptyTiles)-1)!)<br/>            Board(m)=GetTlleNumber()<br/>            Delete EmptyTiles, m<br/>      End Sub<br/>      Sub DrawBoard()<br/>            Refresh 2000<br/>            Cls<br/>            Cursor 0, 10<br/>            Local Doc$, line$<br/>            Document Doc$<br/>            Doc$=Format$(\"Game 2048 Score {0}\", score)<br/>            \\\\ Using Report 2 we use rendering as text, with center justify<br/>            Report 2, Doc$<br/>            Doc$={<br/>            }<br/>            Local i, j<br/>            For i=0 to 3<br/>                  line$=\"\"<br/>                  For j=0 to 3<br/>                        line$+=Tile$(Board(BoardTileRight(j, i)))<br/>                  Next j<br/>                  Print Over $(2), Line$<br/>                  Print<br/>                  Doc$=Line$+{<br/>                  }<br/>            Next i<br/>            Report 2, \"Next:Use Arrows | Exit: Press End\"<br/>            Refresh<br/>            ClipBoard Doc$<br/>      End Sub     <br/>      Sub Gravity()<br/>            k=-1<br/>            for j=0 to 3 {<br/>                  where=boardtile(j,i)<br/>                  if k=-1 then if board(where)=0 then k=j\u00a0: continue<br/>                  if board(where)=0  then continue<br/>                  if k=-1 then continue<br/>                  board(boardtile(k,i))=board(where)<br/>                  board(where)=0<br/>                  k++<br/>            }  <br/>      End Sub<br/>}<br/>Game2048<br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 221, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>macro(SP=DocumentTools:-SetProperty, GP=DocumentTools:-GetProperty);<br/>G\u00a0:= module()<br/>\u00a0<br/>\texport reset,f,getname;<br/>\tlocal a:=Matrix(4):<br/>\tlocal buttonpress:=\"False\";<br/>\tlocal score:=0;<br/>\tlocal highscoreM,highscore,hscore,hname,M,j,k,z,e,move,r,c,q,w,checklose,loss,matrixtotextarea;<br/>\u00a0<br/>\tgetname:=proc();\t<br/>\t\thname:=GP(\"Name\",value);<br/>\t\tbuttonpress:=\"True\";<br/>\t\tif score&gt;hscore then<br/>\t\t\tM:=Matrix(1, 2, [[score, hname]]):<br/>\t\t\tExportMatrix(\"this:///Score.csv\",M);<br/>\t\t\treset();<br/>\t\telse<br/>\t\t\treset();<br/>\t\tend if;<br/>\tend proc;<br/>\u00a0<br/>\tmatrixtotextarea:=proc(m)<br/>\t\tlocal m2,colors;<br/>\t\tcolors:=[\"White\",\"Beige\",\"LightGrey\",ColorTools:-Color(\"RGB\", [255/255, 127/255,  80/255]),ColorTools:-Color(\"RGB\", [255/255, 99/255,  71/255]),ColorTools:-Color(\"RGB\", [255/255, 69/255,  0/255]),ColorTools:-Color(\"RGB\", [255/255, 0/255,  0/255]),ColorTools:-Color(\"RGB\", [255/255, 215/255,  0/255]), ColorTools:-Color(\"RGB\", [255/255, 255/255,  0/255]),ColorTools:-Color(\"RGB\", [204/255, 204/255,  0/255]),ColorTools:-Color(\"RGB\", [153/255, 153/255,  0/255]),ColorTools:-Color(\"RGB\", [102/255, 102/255,  0/255]), ColorTools:-Color(\"RGB\", [0/255, 0/255,  0/255])]; <br/>\t\tm2\u00a0:= ArrayTools:-Reshape(m^%T, [16,1]):<br/>\t\tSP(seq([cat(\"TextArea\",i),value,m2[i+1,1]],i=0..15));<br/>\t\tSP(seq([\"Table1\",fillcolor[(`if`(i+1&lt;5,1,`if`(i+1&lt;9 and i+1&gt;4,2,`if`(i+1&lt;13 and i+1&gt;8,3, `if`(i+1&lt;17 and i+1&gt;12,4,1))))),(i mod 4)+1],`if`(m2[i+1,1]=0,colors[1],`if`(m2[i+1,1]=2,colors[2],`if`(m2[i+1,1]=4,colors[3],`if`(m2[i+1,1]=8,colors[4],`if`(m2[i+1,1]=16,colors[5],`if`(m2[i+1,1]=32,colors[6],`if`(m2[i+1,1]=64,colors[7],`if`(m2[i+1,1]=128,colors[8],`if`(m2[i+1,1]=256,colors[9],`if`(m2[i+1,1]=512,colors[10],`if`(m2[i+1,1]=1024,colors[11],`if`(m2[i+1,1]=2048,colors[12],`if`(m2[i+1,1]&gt;2048,colors[13],\"White\")))))))))))))],i=0..15));<br/>\t\tSP(seq([cat(\"TextArea\",i),fillcolor,`if`(m2[i+1,1]=0,colors[1],`if`(m2[i+1,1]=2,colors[2],`if`(m2[i+1,1]=4,colors[3],`if`(m2[i+1,1]=8,colors[4],`if`(m2[i+1,1]=16,colors[5],`if`(m2[i+1,1]=32,colors[6],`if`(m2[i+1,1]=64,colors[7],`if`(m2[i+1,1]=128,colors[8],`if`(m2[i+1,1]=256,colors[9],`if`(m2[i+1,1]=512,colors[10],`if`(m2[i+1,1]=1024,colors[11],`if`(m2[i+1,1]=2048,colors[12],`if`(m2[i+1,1]&gt;2048,colors[13],\"White\")))))))))))))],i=0..15),refresh);<br/>\t\tSP(seq([cat(\"TextArea\",i),fontcolor,`if`(m2[i+1,1]=0,colors[1],`if`(m2[i+1,1]=2,colors[13],`if`(m2[i+1,1]=4,colors[13],\"White\")))],i=0..15),refresh);<br/>\tend proc:<br/>\u00a0<br/>\treset:=proc();<br/>\t\thighscoreM\u00a0:= Import(\"this:///Score.csv\", output = Matrix);<br/>\t\thscore\u00a0:= highscoreM[1,1];<br/>\t\thname\u00a0:= highscoreM[1,2];<br/>\t\thighscore:=sprintf(\"%s\",cat(hscore,\"\\n\",hname));<br/>\t\tbuttonpress:=\"False\";<br/>\t\ta:=Matrix(4, 4, [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]):<br/>\t\tscore:=0;<br/>\t\tmatrixtotextarea(a);<br/>\t\tSP(\"Score/Lose\",visible,true);<br/>\t\tSP(\"Score/Lose\",enabled,true);<br/>\t\tSP(\"Score/Lose\",caption,\"Click an Arrow to begin.\");<br/>\t\tSP(\"Score\",value,score);<br/>\t\tSP(\"Highscore\",value,highscore);<br/>\t\tSP(seq([j, enabled, false], j in [\"Name\",\"Enter\"])); <br/>\t\tSP(seq([j, visible, false], j in [\"Name\",\"Enter\"])); <br/>\t\tSP(seq([j, enabled, true], j in [\"Score\",\"Highscore\", seq(cat(\"Button\",k),k=0..4)]));\t<br/>\t\tSP(seq([j, visible, true], j in [\"Score\",\"Highscore\", seq(cat(\"Button\",k),k=0..4)]));<br/>\tend proc;<br/>\u00a0<br/>\tchecklose:=proc();<br/>\t\tfor q from 2 to 4 do<br/>\t\t\tfor w from 4 to 1 by -1  do<br/>\t\t\t\tif a[q,w]=a[q-1,w] then<br/>\t\t\t\t\tloss:=\"False\";<br/>\t\t\t\t\treturn loss;\t\t\t\t\t\t\t\t\t\t\t\t\t\t<br/>\t\t\t\tend if;<br/>\t\t\tend do;<br/>\t\tend do;<br/>\t\treturn loss;<br/>\tend proc;\t\t<br/>\u00a0<br/>\tf:=proc(keypress);<br/>\t\tSP(\"Score/Lose\",visible,false);<br/>\t\tSP(\"Score/Lose\",enabled,false);<br/>\t\tj\u00a0:= rand(1 .. 4); <br/>\t\tk\u00a0:= rand(1 .. 4); <br/>\t\tz\u00a0:= rand(1 .. 10); <br/>\t\te\u00a0:= 0; <br/>\t\tmove:=proc();\t<br/>\t\t\tfor q from 4 to 2 by -1 do<br/>\t\t\t\tfor w from 4 to 1 by -1  do<br/>\t\t\t\t\tif a[q,w]=a[q-1,w] then<br/>\t\t\t\t\t\ta[q-1,w]:=a[q-1,w]+a[q,w];<br/>\t\t\t\t\t\tscore:=score+a[q-1,w];<br/>\t\t\t\t\t\ta[q,w]:=0;<br/>\t\t\t\t\t\tif q-1&gt;1 and a[q-2,w]=0 then<br/>\t\t\t\t\t\t\ta[q-2,w]:=a[q-1,w];<br/>\t\t\t\t\t\t\ta[q-1,w]:=0;<br/>\t\t\t\t\t\t\tif q-2&gt;1 and a[q-3,w]=0 then<br/>\t\t\t\t\t\t\t\ta[q-3,w]:=a[q-2,w];<br/>\t\t\t\t\t\t\t\ta[q-2,w]:=0;<br/>\t\t\t\t\t\t\tend if;<br/>\t\t\t\t\t\tend if;\t\t\t\t\t<br/>\t\t\t\t\telif q-1&gt;1 and a[q,w]=a[q-2,w] and a[q-1,w]=0 then<br/>\t\t\t\t\t\ta[q-2,w]:=a[q-2,w]+a[q,w];<br/>\t\t\t\t\t\tscore:=score+a[q-2,w];<br/>\t\t\t\t\t\ta[q,w]:=0;<br/>\t\t\t\t\t\tif q-2&gt;1 and a[q-3,w]=0 then<br/>\t\t\t\t\t\t\ta[q-3,w]:=a[q-2,w];<br/>\t\t\t\t\t\t\ta[q-2,w]:=0;<br/>\t\t\t\t\t\tend if;\t\t\t\t\t<br/>\t\t\t\t\telif q-2&gt;1 and a[q,w]=a[q-3,w] and a[q-1,w]=0 and a[q-2,w]=0 then<br/>\t\t\t\t\t\ta[q-3,w]:=a[q-3,w]+a[q,w];<br/>\t\t\t\t\t\tscore:=score+a[q-3,w];<br/>\t\t\t\t\t\ta[q,w]:=0;\t<br/>\t\t\t\t\telif a[q-1,w]=0 then<br/>\t\t\t\t\t\ta[q-1,w]:=a[q-1,w]+a[q,w];<br/>\t\t\t\t\t\ta[q,w]:=0;<br/>\t\t\t\t\t\tif q-1&gt;1 and a[q-2,w]=0 then<br/>\t\t\t\t\t\t\ta[q-2,w]:=a[q-1,w];<br/>\t\t\t\t\t\t\ta[q-1,w]:=0;<br/>\t\t\t\t\t\t\tif q-2&gt;1 and a[q-3,w]=0 then<br/>\t\t\t\t\t\t\t\ta[q-3,w]:=a[q-2,w];<br/>\t\t\t\t\t\t\t\ta[q-2,w]:=0;<br/>\t\t\t\t\t\t\tend if;<br/>\t\t\t\t\t\tend if;\t\t\t\t\t<br/>\t\t\t\t\telif q-1&gt;1 and a[q-2,w]=0 and a[q-1,w]=0 then<br/>\t\t\t\t\t\ta[q-2,w]:=a[q-2,w]+a[q,w];<br/>\t\t\t\t\t\ta[q,w]:=0;<br/>\t\t\t\t\t\tif q-2&gt;1 and a[q-3,w]=0 then<br/>\t\t\t\t\t\t\ta[q-3,w]:=a[q-2,w];<br/>\t\t\t\t\t\t\ta[q-2,w]:=0;<br/>\t\t\t\t\t\tend if;\t\t\t\t\t<br/>\t\t\t\t\telif q-2&gt;1 and a[q-3,w]=0 and a[q-1,w]=0 and a[q-2,w]=0 then<br/>\t\t\t\t\t\ta[q-3,w]:=a[q-3,w]+a[q,w];<br/>\t\t\t\t\t\ta[q,w]:=0;<br/>\t\t\t\t\tend if;<br/>\t\t\t\tend do;<br/>\t\t\tend do;\t\t<br/>\t\tend proc;<br/>\u00a0<br/> \t\tr\u00a0:= j(); <br/>          c\u00a0:= k();  <br/>\t\tif keypress=\"Up\" then<br/>\t\t\tmove();\t\t\t\t\t<br/>\u00a0<br/>\t\telif keypress=\"Left\" then<br/>\t\t\ta:=LinearAlgebra:-Transpose(a);<br/>\t\t\tmove();<br/>\t\t\ta:=LinearAlgebra:-Transpose(a);<br/>\u00a0<br/>\t\telif keypress=\"Right\" then<br/>\t\t\ta\u00a0:= ArrayTools:-FlipDimension(LinearAlgebra:-Transpose(a),1);<br/>\t\t\tmove();<br/>\t\t\ta\u00a0:= LinearAlgebra:-Transpose(ArrayTools:-FlipDimension(a,1));<br/>\u00a0<br/>\t\telif keypress=\"Down\" then<br/>\t\t\ta\u00a0:= ArrayTools:-FlipDimension(a, 1);<br/>\t\t\tmove();<br/>\t\t\ta\u00a0:= ArrayTools:-FlipDimension(a, 1);\t\t<br/>\t\tend if;<br/>\u00a0<br/>\t\tif a[r, c] = 0 then <br/>\t\t\tif z() &gt; 3 then <br/>\t\t\t\ta[r, c]\u00a0:= 2; <br/>\t\t\telse; <br/>\t\t\t\ta[r, c]\u00a0:= 4; <br/>\t\t\tend if; <br/>\t\telse<br/>\t\t\tfor q to 4 do <br/>\t\t\t\tfor w to 4 do <br/>\t\t\t\t\tif a[q, w] &lt;&gt; 0 then;<br/>\t\t\t\t\t\te:=e+1; <br/>\t\t\t\t\tend if; <br/>\t\t\t\tend do; <br/>\t\t\tend do; <br/>\t\t\tif e = 16 then<br/>\t\t\t\tloss:=\"True\";<br/>\t\t\t\tchecklose();\t\t\t\t\t<br/>\t\t\t\ta:=LinearAlgebra:-Transpose(a);<br/>\t\t\t\tchecklose();<br/>\t\t\t\ta:=LinearAlgebra:-Transpose(a);<br/>\t\t\t\ta\u00a0:= ArrayTools:-FlipDimension(LinearAlgebra:-Transpose(a),1);<br/>\t\t\t\tchecklose();<br/>\t\t\t\ta\u00a0:= LinearAlgebra:-Transpose(ArrayTools:-FlipDimension(a,1));\t\t\t<br/>\t\t\t\ta\u00a0:= ArrayTools:-FlipDimension(a, 1);<br/>\t\t\t\tchecklose();<br/>\t\t\t\ta\u00a0:= ArrayTools:-FlipDimension(a, 1);<br/>\t\t\t\tif loss=\"True\" then\t\t <br/>\t\t\t\t\tSP(\"Score/Lose\",visible,\"True\");<br/>\t\t\t\t\tSP(\"Score/Lose\",enabled,\"True\");<br/>\t\t\t\t\tSP(\"Score/Lose\",caption,\"You Lose!\");<br/>\t\t\t\t\tif score&gt;hscore then<br/>\t\t\t\t\t\tSP(\"Score/Lose\",caption,\"Highscore! Enter your name below!\");<br/>\t\t\t\t\t\tSP(\"Enter\",caption,\"Confirm\");<br/>\t\t\t\t\t\tSP(seq([j, enabled, true], j in [\"Name\",\"Enter\",\"Score/Lose\"])); <br/>\t\t\t\t\t\tSP(seq([j, visible, true], j in [\"Name\",\"Enter\",\"Score/Lose\"])); <br/>\t\t\t\t\t\tSP(seq([j, enabled, false], j in [seq(cat(\"Button\",k),k=0..4)]));<br/>\t\t\t\t\t\tSP(seq([j, visible, false], j in [seq(cat(\"Button\",k),k=0..4)]));<br/>\t\t\t\t\t\tif buttonpress=\"True\" then<br/>\t\t\t\t\t\t\tM:=Matrix(1, 2, [[score, hname]]):<br/>\t\t\t\t\t\t\tExportMatrix(\"this:///Score.csv\",M);<br/>\t\t\t\t\t\t\tbuttonpress:=\"False\";<br/>\t\t\t\t\t\t\treset();<br/>\t\t\t\t\t\tend if;<br/>\t\t\t\t\telse<br/>\t\t\t\t\t\tSP(\"Score/Lose\",caption,\"Sorry, please try again.\");<br/>\t\t\t\t\t\tSP(\"Enter\",caption,\"Restart\");<br/>\t\t\t\t\t\tSP(\"Enter\",visible,\"True\");<br/>\t\t\t\t\t\tSP(\"Enter\",enabled,\"True\");<br/>\t\t\t\t\t\tSP(seq([j, enabled, false], j in [seq(cat(\"Button\",k),k=0..4)]));<br/>\t\t\t\t\t\tSP(seq([j, visible, false], j in [seq(cat(\"Button\",k),k=0..4)]));\t\t\t<br/>\t\t\t\t\t\tif buttonpress=\"True\" then<br/>\t\t\t\t\t\t\tbuttonpress:=\"False\";<br/>\t\t\t\t\t\t\treset();<br/>\t\t\t\t\t\tend if;<br/>\t\t\t\t\tend if;<br/>\t\t\t\tend if;\t<br/>\t\t\telse <br/>                  e:=0;<br/>                  while a[r, c] &lt;&gt; 0 do <br/>                      r\u00a0:= j(); <br/>                      c\u00a0:= k(); <br/>                  end do; <br/>                  if z() &gt; 1 then <br/>                      a[r, c]\u00a0:= 2; <br/>                  else <br/>                      a[r, c]\u00a0:= 4; <br/>                  end if; <br/>\t\t\tend if; <br/>\t\tend if;  <br/>\t\tmatrixtotextarea(a); <br/>          SP(\"Score\",value,score,refresh);    <br/>          return a;  <br/>\tend proc;<br/>end module;<br/>G:-reset();SP(\"Score/Lose\",caption,\"Click an Arrow to begin.\");<br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 115, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">use</span> Term<span class=\"sy0\">::</span><span class=\"me2\">termios</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">constant</span> <span class=\"re0\">$saved</span>   <span class=\"sy0\">=</span> Term<span class=\"sy0\">::</span><span class=\"me2\">termios</span><span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span>fd <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">getattr</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">constant</span> <span class=\"re0\">$termios</span> <span class=\"sy0\">=</span> Term<span class=\"sy0\">::</span><span class=\"me2\">termios</span><span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span>fd <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">getattr</span><span class=\"sy0\">;</span><br/><span class=\"co1\"># raw mode interferes with carriage returns, so</span><br/><span class=\"co1\"># set flags needed to emulate it manually</span><br/><span class=\"re0\">$termios</span><span class=\"sy0\">.</span><span class=\"me1\">unset_iflags</span><span class=\"br0\">(</span><span class=\"sy0\">&lt;</span>BRKINT ICRNL ISTRIP IXON<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$termios</span><span class=\"sy0\">.</span><span class=\"me1\">unset_lflags</span><span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> ECHO ICANON IEXTEN ISIG<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$termios</span><span class=\"sy0\">.</span><span class=\"me1\">setattr</span><span class=\"br0\">(</span><span class=\"sy0\">:</span>DRAIN<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># reset terminal to original setting on exit</span><br/><span class=\"kw2\">END</span> <span class=\"br0\">{</span> <span class=\"re0\">$saved</span><span class=\"sy0\">.</span><span class=\"me1\">setattr</span><span class=\"br0\">(</span><span class=\"sy0\">:</span>NOW<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">constant</span> n    <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span> <span class=\"co1\"># board size</span><br/><span class=\"kw1\">constant</span> cell <span class=\"sy0\">=</span> <span class=\"nu0\">6</span><span class=\"sy0\">;</span> <span class=\"co1\"># cell width</span><br/><span class=\"kw1\">constant</span> ansi <span class=\"sy0\">=</span> <span class=\"kw1\">True</span><span class=\"sy0\">;</span> <span class=\"co1\"># color!</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@board</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"st_h\">''</span> <span class=\"kw1\">xx</span> n<span class=\"br0\">]</span> <span class=\"kw1\">xx</span> n <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$save</span>  <span class=\"sy0\">=</span> <span class=\"st_h\">''</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$score</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">constant</span> <span class=\"re0\">$top</span> <span class=\"sy0\">=</span> <span class=\"kw3\">join</span> <span class=\"st_h\">'\u2500'</span> <span class=\"kw1\">x</span> cell<span class=\"sy0\">,</span> <span class=\"st_h\">'\u250c'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'\u252c'</span> <span class=\"kw1\">xx</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st_h\">'\u2510'</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">constant</span> <span class=\"re0\">$mid</span> <span class=\"sy0\">=</span> <span class=\"kw3\">join</span> <span class=\"st_h\">'\u2500'</span> <span class=\"kw1\">x</span> cell<span class=\"sy0\">,</span> <span class=\"st_h\">'\u251c'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'\u253c'</span> <span class=\"kw1\">xx</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st_h\">'\u2524'</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">constant</span> <span class=\"re0\">$bot</span> <span class=\"sy0\">=</span> <span class=\"kw3\">join</span> <span class=\"st_h\">'\u2500'</span> <span class=\"kw1\">x</span> cell<span class=\"sy0\">,</span> <span class=\"st_h\">'\u2514'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'\u2534'</span> <span class=\"kw1\">xx</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st_h\">'\u2518'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">%dir</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><br/>   <span class=\"st0\">\"<span class=\"es0\">\\e</span>[A\"</span> <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'up'</span><span class=\"sy0\">,</span><br/>   <span class=\"st0\">\"<span class=\"es0\">\\e</span>[B\"</span> <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'down'</span><span class=\"sy0\">,</span><br/>   <span class=\"st0\">\"<span class=\"es0\">\\e</span>[C\"</span> <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'right'</span><span class=\"sy0\">,</span><br/>   <span class=\"st0\">\"<span class=\"es0\">\\e</span>[D\"</span> <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'left'</span><span class=\"sy0\">,</span><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@ANSI</span> <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"nu0\">97</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"nu0\">93</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"nu0\">92</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"nu0\">96</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"nu0\">91</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"nu0\">95</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"nu0\">94</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"nu0\">30</span><span class=\"sy0\">;</span><span class=\"nu0\">47</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"nu0\">43</span><br/>    <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"nu0\">42</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"nu0\">46</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"nu0\">41</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"nu0\">45</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"nu0\">44</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"nu0\">33</span><span class=\"sy0\">;</span><span class=\"nu0\">43</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"nu0\">33</span><span class=\"sy0\">;</span><span class=\"nu0\">42</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"nu0\">33</span><span class=\"sy0\">;</span><span class=\"nu0\">41</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"nu0\">33</span><span class=\"sy0\">;</span><span class=\"nu0\">44</span><span class=\"sy0\">&gt;;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> row <span class=\"br0\">(</span><span class=\"re0\">@row</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"st_h\">'\u2502'</span> <span class=\"sy0\">~</span> <span class=\"br0\">(</span><span class=\"kw3\">join</span> <span class=\"st_h\">'\u2502'</span><span class=\"sy0\">,</span> <span class=\"re0\">@row</span>\u00bb<span class=\"sy0\">.</span><span class=\"re0\">&amp;center</span><span class=\"br0\">)</span> <span class=\"sy0\">~</span> <span class=\"st_h\">'\u2502'</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> center <span class=\"br0\">(</span><span class=\"re0\">$s</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$c</span>   <span class=\"sy0\">=</span> cell <span class=\"sy0\">-</span> <span class=\"re0\">$s</span><span class=\"sy0\">.</span><span class=\"kw3\">chars</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$pad</span> <span class=\"sy0\">=</span> <span class=\"st_h\">' '</span> <span class=\"kw1\">x</span> <span class=\"kw3\">ceiling</span><span class=\"br0\">(</span><span class=\"re0\">$c</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$tile</span> <span class=\"sy0\">=</span> <span class=\"kw3\">sprintf</span> <span class=\"st0\">\"%{cell}s\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"$s$pad\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$idx</span> <span class=\"sy0\">=</span> <span class=\"re0\">$s</span> <span class=\"sy0\">??</span> <span class=\"re0\">$s</span><span class=\"sy0\">.</span><span class=\"kw3\">log</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">!!</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    ansi <span class=\"sy0\">??</span> <span class=\"st0\">\"<span class=\"es0\">\\e</span>[{@ANSI[$idx]}m$tile<span class=\"es0\">\\e</span>[0m\"</span> <span class=\"sy0\">!!</span> <span class=\"re0\">$tile</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> draw<span class=\"sy0\">-</span>board <span class=\"br0\">{</span><br/>    run<span class=\"br0\">(</span><span class=\"st_h\">'clear'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">print</span> qq<span class=\"sy0\">:</span>to<span class=\"sy0\">/</span><span class=\"kw2\">END</span><span class=\"sy0\">/;</span><br/>\u00a0<br/>\u00a0<br/>\tPress direction arrows to move<span class=\"sy0\">.</span><br/>\u00a0<br/>\t<span class=\"me1\">Press</span> q to quit<span class=\"sy0\">.</span><br/>\u00a0<br/>\t<span class=\"re0\">$top</span><br/>\t<span class=\"br0\">{</span> <span class=\"kw3\">join</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span><span class=\"es0\">\\t</span>$mid<span class=\"es0\">\\n</span><span class=\"es0\">\\t</span>\"</span><span class=\"sy0\">,</span> <span class=\"kw3\">map</span> <span class=\"br0\">{</span> <span class=\"sy0\">.</span><span class=\"re0\">&amp;row</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"re0\">@board</span> <span class=\"br0\">}</span><br/>\t<span class=\"re0\">$bot</span><br/>\u00a0<br/>\tScore<span class=\"sy0\">:</span> <span class=\"re0\">$score</span><br/>\u00a0<br/><span class=\"kw2\">END</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> squash <span class=\"br0\">(</span><span class=\"re0\">@c</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@t</span> <span class=\"sy0\">=</span> <span class=\"kw3\">grep</span> <span class=\"br0\">{</span> <span class=\"sy0\">.</span><span class=\"kw3\">chars</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"re0\">@c</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">map</span> <span class=\"br0\">{</span> combine<span class=\"br0\">(</span><span class=\"re0\">@t</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">@t</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"re0\">@t</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">@t</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"re0\">@t</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"sy0\">^</span><span class=\"re0\">@t</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">@t</span> <span class=\"sy0\">=</span> <span class=\"kw3\">grep</span> <span class=\"br0\">{</span> <span class=\"sy0\">.</span><span class=\"kw3\">chars</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"re0\">@t</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">@t</span><span class=\"sy0\">.</span><span class=\"kw3\">push</span><span class=\"sy0\">:</span> <span class=\"st_h\">''</span> <span class=\"kw1\">while</span> <span class=\"re0\">@t</span> <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span><br/>    <span class=\"re0\">@t</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> combine <span class=\"br0\">(</span><span class=\"re0\">$v</span> <span class=\"kw1\">is</span> rw<span class=\"sy0\">,</span> <span class=\"re0\">$w</span> <span class=\"kw1\">is</span> rw<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$v</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$w</span><span class=\"sy0\">;</span> <span class=\"re0\">$w</span> <span class=\"sy0\">=</span> <span class=\"st_h\">''</span><span class=\"sy0\">;</span> <span class=\"re0\">$score</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$v</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">proto</span> <span class=\"kw2\">sub</span> move <span class=\"br0\">(</span><span class=\"sy0\">|</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">multi</span> move<span class=\"br0\">(</span><span class=\"st_h\">'up'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">map</span> <span class=\"br0\">{</span> <span class=\"re0\">@board</span><span class=\"br0\">[</span><span class=\"sy0\">*;</span><span class=\"re0\">$_</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> squash <span class=\"re0\">@board</span><span class=\"br0\">[</span><span class=\"sy0\">*;</span><span class=\"re0\">$_</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"sy0\">^</span>n<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">multi</span> move<span class=\"br0\">(</span><span class=\"st_h\">'down'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">map</span> <span class=\"br0\">{</span> <span class=\"re0\">@board</span><span class=\"br0\">[</span><span class=\"sy0\">*;</span><span class=\"re0\">$_</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw3\">reverse</span> squash <span class=\"kw3\">reverse</span> <span class=\"re0\">@board</span><span class=\"br0\">[</span><span class=\"sy0\">*;</span><span class=\"re0\">$_</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"sy0\">^</span>n<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">multi</span> move<span class=\"br0\">(</span><span class=\"st_h\">'left'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">map</span> <span class=\"br0\">{</span> <span class=\"re0\">@board</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> squash <span class=\"re0\">@board</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"sy0\">^</span>n<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">multi</span> move<span class=\"br0\">(</span><span class=\"st_h\">'right'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">map</span> <span class=\"br0\">{</span> <span class=\"re0\">@board</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"sy0\">;*</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw3\">reverse</span> squash <span class=\"kw3\">reverse</span> <span class=\"re0\">@board</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"sy0\">^</span>n<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> another <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@empties</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"re0\">@board</span><span class=\"sy0\">.</span><span class=\"kw3\">kv</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$r</span><span class=\"sy0\">,</span> <span class=\"re0\">@row</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">@empties</span><span class=\"sy0\">.</span><span class=\"kw3\">push</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$r</span><span class=\"sy0\">,</span> <span class=\"re0\">$_</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"re0\">@row</span><span class=\"sy0\">.</span><span class=\"kw3\">grep</span><span class=\"br0\">(</span><span class=\"sy0\">:</span>k<span class=\"sy0\">,</span> <span class=\"st_h\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span> <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">@empties</span><span class=\"sy0\">.</span><span class=\"me1\">roll</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">@board</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"sy0\">;</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>flat <span class=\"nu0\">2</span> <span class=\"kw1\">xx</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">roll</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> save <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">join</span> <span class=\"st_h\">'|'</span><span class=\"sy0\">,</span> flat <span class=\"re0\">@board</span>\u00bb<span class=\"sy0\">.</span><span class=\"me1\">list</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">loop</span> <span class=\"br0\">{</span><br/>    another <span class=\"kw1\">if</span> <span class=\"re0\">$save</span> <span class=\"kw1\">ne</span> save<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    draw<span class=\"sy0\">-</span>board<span class=\"sy0\">;</span><br/>    <span class=\"re0\">$save</span> <span class=\"sy0\">=</span> save<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\"># Read up to 4 bytes from keyboard buffer.</span><br/>    <span class=\"co1\"># Page navigation keys are 3-4 bytes each.</span><br/>    <span class=\"co1\"># Specifically, arrow keys are 3.</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$key</span> <span class=\"sy0\">=</span> <span class=\"re0\">$*IN</span><span class=\"sy0\">.</span><span class=\"me1\">read</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">decode</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    move <span class=\"re0\">%dir</span><span class=\"br0\">{</span><span class=\"re0\">$key</span><span class=\"br0\">}</span> <span class=\"kw1\">if</span> so <span class=\"re0\">%dir</span><span class=\"br0\">{</span><span class=\"re0\">$key</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">last</span> <span class=\"kw1\">if</span> <span class=\"re0\">$key</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">'q'</span><span class=\"sy0\">;</span> <span class=\"co1\"># (q)uit</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 264, "block": "<pre class=\"text highlighted_source\">--<br/>-- demo\\rosetta\\2048.exw<br/>--<br/>include pGUI.e<br/>\u00a0<br/>Ihandle canvas, dialog<br/>cdCanvas cddbuffer, cdcanvas<br/>\u00a0<br/>constant tile_colours = {#CCC0B4,   -- blank<br/>                         #EEE4DA,   -- 2<br/>                         #EDE0C8,   -- 4<br/>                         #F2B179,   -- 8<br/>                         #F59563,   -- 16<br/>                         #F67C5F,   -- 32<br/>                         #F65E3B,   -- 64<br/>                         #EDCF72,   -- 128<br/>                         #EDCC61,   -- 256<br/>                         #EDC850,   -- 512<br/>                         #EDC53F,   -- 1024<br/>                         #EDC22E}   -- 2048<br/>\u00a0<br/>-- the 4x4 board.<br/>--  note that values are [1..12] for [blank,2,4,8,..2048].<br/>--  (merging two eights is not 8+8-&gt;16 but 4+1-&gt;5, internally)<br/>sequence board<br/>\u00a0<br/>integer newgame = 1<br/>\u00a0<br/>procedure add_rand(integer count)<br/>-- (nb infinite loop if board is full)<br/>integer x, y<br/>    while count do<br/>        x = rand(4)<br/>        y = rand(4)<br/>        if board[y][x]=1 then   -- blank<br/>            board[y][x] = 2+(rand(10)=10)<br/>            count -= 1<br/>        end if<br/>    end while   <br/>end procedure<br/>\u00a0<br/>integer valid = 0<br/>integer prev, nxt, bxy<br/>\u00a0<br/>procedure move_x(integer x, integer y, integer d)<br/>    bxy = board[x][y]<br/>    if bxy!=1 then<br/>        if bxy=prev then<br/>            board[x][y] = 1<br/>            bxy += 1<br/>            board[x][nxt] = bxy<br/>            nxt += d<br/>            prev = 13<br/>            valid = 1 <br/>        else<br/>            if prev=1<br/>            or y!=nxt then<br/>                if prev!=1<br/>                and prev!=13 then<br/>                    nxt += d<br/>                end if<br/>                if y!=nxt then<br/>                    board[x][y] = 1<br/>                    board[x][nxt] = bxy<br/>                    valid = 1<br/>                end if<br/>            end if<br/>            prev = bxy<br/>        end if<br/>    end if<br/>end procedure<br/>\u00a0<br/>procedure move_y(integer x, integer y, integer d)<br/>    bxy = board[x][y]<br/>    if bxy!=1 then<br/>        if bxy=prev then<br/>            board[x][y] = 1<br/>            bxy += 1<br/>            board[nxt][y] = bxy<br/>            nxt += d<br/>            prev = 13<br/>            valid = 1 <br/>        else<br/>            if prev=1<br/>            or x!=nxt then<br/>                if prev!=1<br/>                and prev!=13 then<br/>                    nxt += d<br/>                end if<br/>                if x!=nxt then<br/>                    board[x][y] = 1<br/>                    board[nxt][y] = bxy<br/>                    valid = 1<br/>                end if<br/>            end if<br/>            prev = bxy<br/>        end if<br/>    end if<br/>end procedure<br/>\u00a0<br/>function move(integer key)<br/>-- a non-zero result means it changed something.<br/>    valid = 0<br/>    if key=K_LEFT then<br/>        for x=1 to 4 do<br/>            prev = 13<br/>            nxt = 1<br/>            for y=1 to 4 do<br/>                move_x(x,y,+1)<br/>            end for<br/>        end for<br/>    elsif key=K_UP then<br/>        for y=1 to 4 do<br/>            prev = 13<br/>            nxt = 4<br/>            for x=4 to 1 by -1 do<br/>                move_y(x,y,-1)<br/>            end for<br/>        end for<br/>    elsif key=K_RIGHT then<br/>        for x=1 to 4 do<br/>            prev = 13<br/>            nxt = 4<br/>            for y=4 to 1 by -1 do<br/>                move_x(x,y,-1)<br/>            end for<br/>        end for<br/>    elsif key=K_DOWN then<br/>        for y=1 to 4 do<br/>            prev = 13<br/>            nxt = 1<br/>            for x=1 to 4 do<br/>                move_y(x,y,+1)<br/>            end for<br/>        end for<br/>    end if<br/>    return valid<br/>end function<br/>\u00a0<br/>function game_won()<br/>    for i=1 to length(board) do<br/>        if find(12,board[i]) then return 1 end if<br/>    end for<br/>    return 0<br/>end function<br/>\u00a0<br/>constant valid_keys = {K_LEFT,K_DOWN,K_RIGHT,K_UP}<br/>\u00a0<br/>function no_valid_moves()<br/>sequence saved_board = board<br/>    for i=1 to length(valid_keys) do<br/>        if move(valid_keys[i]) then<br/>            board = saved_board<br/>            return 0    -- OK<br/>        end if<br/>    end for<br/>    return 1 -- game over...<br/>end function<br/>\u00a0<br/>function redraw_cb(Ihandle /*ih*/, integer /*posx*/, integer /*posy*/)<br/>integer tx, ty, bxy,<br/>        ox,oy,              -- top right coords<br/>        os,ts,              -- overall and tile size<br/>        ts2                 -- half tile, for number positioning<br/>integer {dw,dh} = IupGetIntInt(canvas, \"DRAWSIZE\")<br/>    if dw&gt;=dh then<br/>        ox = floor((dw-dh)/2)<br/>        oy = 0<br/>        os = dh<br/>    else<br/>        ox = 0<br/>        oy = floor((dh-dw)/2)<br/>        os = dw<br/>    end if<br/>    ts = floor((os-10)/4-7)<br/>    ts2 = floor(ts/2+5)-10<br/>\u00a0<br/>    if newgame then<br/>        board = repeat(repeat(1,4),4)<br/>        add_rand(2)<br/>        newgame = 0<br/>    end if<br/>\u00a0<br/>    cdCanvasActivate(cddbuffer)<br/>    cdCanvasSetBackground(cddbuffer, #FAF8EF)<br/>    cdCanvasClear(cddbuffer)<br/>    cdCanvasSetForeground(cddbuffer, #BBADA0)<br/>    cdCanvasRoundedBox(cddbuffer, ox+5, ox+os-5, oy+5, oy+os-5, 10, 10)<br/>\u00a0<br/>    tx = ox+15<br/>    for y=1 to 4 do<br/>        ty = oy+15<br/>        for x=1 to 4 do<br/>            bxy = board[x][y]<br/>            cdCanvasSetForeground(cddbuffer, tile_colours[bxy])<br/>            cdCanvasRoundedBox(cddbuffer, tx, tx+ts-10, ty, ty+ts-10, 5, 5)<br/>            if bxy&gt;1 then<br/>                cdCanvasSetForeground(cddbuffer, iff(bxy&lt;=3?#776E65:#F9F6F2))<br/>                cdCanvasFont(cddbuffer, \"Calibri\", CD_BOLD, iff(bxy&gt;10?32:40))<br/>                cdCanvasText(cddbuffer, tx+ts2, ty+ts2-25-iff(bxy&lt;11?7:0), sprint(power(2,bxy-1))) <br/>            end if<br/>            ty += ts+5<br/>        end for<br/>        tx += ts+5<br/>    end for<br/>    cdCanvasFlush(cddbuffer)<br/>    return IUP_DEFAULT<br/>end function<br/>\u00a0<br/>function map_cb(Ihandle ih)<br/>    cdcanvas = cdCreateCanvas(CD_IUP, ih)<br/>    cddbuffer = cdCreateCanvas(CD_DBUFFER, cdcanvas)<br/>    {} = cdCanvasTextAlignment(cddbuffer, CD_SOUTH) <br/>    return IUP_DEFAULT<br/>end function<br/>\u00a0<br/>function key_cb(Ihandle /*ih*/, atom c)<br/>    if c=K_ESC then return IUP_CLOSE end if<br/>    if find(c,valid_keys) then<br/>        if move(c) then<br/>            IupUpdate(canvas)<br/>            string mbmsg = \"\"<br/>            if game_won() then<br/>                mbmsg = \"!!!YOU WON!!!\\n\\nAnother Go?\"<br/>            else<br/>                add_rand(1)<br/>--              repaintWindow(main)<br/>                IupUpdate(canvas)<br/>                if no_valid_moves() then<br/>                    mbmsg = \"You Lost.\\n\\nAnother Go?\"<br/>                end if<br/>            end if<br/>            if length(mbmsg) then<br/>                if IupAlarm(\"Game Over\",mbmsg,\"Yes\",\"No\")=1 then<br/>                    newgame=1<br/>                else<br/>                    return IUP_CLOSE<br/>                end if<br/>            end if<br/>        end if<br/>        IupUpdate(canvas)<br/>    end if<br/>    return IUP_CONTINUE<br/>end function<br/>\u00a0<br/>procedure main()<br/>\u00a0<br/>    IupOpen()<br/>\u00a0<br/>    canvas = IupCanvas(\"RASTERSIZE=520x540\")<br/>    IupSetCallback(canvas, \"MAP_CB\", Icallback(\"map_cb\"))<br/>    IupSetCallback(canvas, \"ACTION\", Icallback(\"redraw_cb\"))<br/>\u00a0<br/>    dialog = IupDialog(canvas,\"MINSIZE=440x450\")<br/>    IupSetAttribute(dialog,\"TITLE\",\"2048\");<br/>    IupSetCallback(dialog, \"K_ANY\", Icallback(\"key_cb\"));<br/>\u00a0<br/>    IupShow(dialog)<br/>    IupSetAttribute(canvas, \"RASTERSIZE\", NULL)<br/>\u00a0<br/>    IupMainLoop()<br/>    IupClose()<br/>end procedure<br/>main()</pre>"}, {"lang": "PHP", "loc": 229, "block": "<pre class=\"php highlighted_source\">\u00a0<br/><span class=\"kw2\">&lt;?php</span><br/>\u00a0<br/><span class=\"re0\">$game</span> <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Game<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"kw4\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$game</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">cycle</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">class</span> Game <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">private</span> <span class=\"re0\">$field</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw2\">private</span> <span class=\"re0\">$fieldSize</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw2\">private</span> <span class=\"re0\">$command</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw2\">private</span> <span class=\"re0\">$error</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw2\">private</span> <span class=\"re0\">$lastIndexX</span><span class=\"sy0\">,</span> <span class=\"re0\">$lastIndexY</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw2\">private</span> <span class=\"re0\">$score</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw2\">private</span> <span class=\"re0\">$finishScore</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw2\">function</span> __construct<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">field</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">fieldSize</span> <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">finishScore</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2048</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">score</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">addNumber</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">render</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">function</span> cycle<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">command</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/strtolower\"><span class=\"kw3\">strtolower</span></a><span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">readchar</span><span class=\"br0\">(</span><span class=\"st_h\">'Use WASD, q exits'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">cls</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">processCommand</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">addNumber</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><a href=\"http://www.php.net/count\"><span class=\"kw3\">count</span></a><span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">getFreeList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">error</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'No options left!, You Lose!!'</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">error</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'Invalid move, try again!'</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">render</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">function</span> readchar<span class=\"br0\">(</span><span class=\"re0\">$prompt</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\treadline_callback_handler_install<span class=\"br0\">(</span><span class=\"re0\">$prompt</span><span class=\"sy0\">,</span> <span class=\"kw2\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$char</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/stream_get_contents\"><span class=\"kw3\">stream_get_contents</span></a><span class=\"br0\">(</span>STDIN<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\treadline_callback_handler_remove<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"re0\">$char</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"co4\">/**<br/>\t * Insert a number in an empty spot on the field<br/>\t */</span><br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">function</span> addNumber<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$freeList</span> <span class=\"sy0\">=</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">getFreeList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><a href=\"http://www.php.net/count\"><span class=\"kw3\">count</span></a><span class=\"br0\">(</span><span class=\"re0\">$freeList</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"re0\">$index</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/mt_rand\"><span class=\"kw3\">mt_rand</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/count\"><span class=\"kw3\">count</span></a><span class=\"br0\">(</span><span class=\"re0\">$freeList</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$nr</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://www.php.net/mt_rand\"><span class=\"kw3\">mt_rand</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>? <span class=\"nu0\">4</span> <span class=\"sy0\">:</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">field</span><span class=\"br0\">[</span><span class=\"re0\">$freeList</span><span class=\"br0\">[</span><span class=\"re0\">$index</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"st_h\">'x'</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$freeList</span><span class=\"br0\">[</span><span class=\"re0\">$index</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"st_h\">'y'</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$nr</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"co4\">/**<br/>\t * @return array(array('x' =&gt; &lt;x&gt;, 'y' =&gt; &lt;y&gt;)) with empty positions in the field<br/>\t */</span><br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">function</span> getFreeList<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$freeList</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$y</span> <span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$y</span><span class=\"sy0\">&lt;</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">fieldSize</span><span class=\"sy0\">;</span><span class=\"re0\">$y</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$x</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">fieldSize</span><span class=\"sy0\">;</span> <span class=\"re0\">$x</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://www.php.net/isset\"><span class=\"kw3\">isset</span></a><span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">field</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t\t<span class=\"re0\">$freeList</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"st_h\">'x'</span> <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"st_h\">'y'</span> <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">elseif</span><span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">field</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">finishScore</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t\t<span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">error</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'You Win!!'</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"re0\">$freeList</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"co4\">/**<br/>\t * Process a command:<br/>\t * @return is the command valid (Did it cause a change in the field)<br/>\t */</span><br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">function</span> processCommand<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://www.php.net/in_array\"><span class=\"kw3\">in_array</span></a><span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">command</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"st_h\">'w'</span><span class=\"sy0\">,</span><span class=\"st_h\">'a'</span><span class=\"sy0\">,</span><span class=\"st_h\">'s'</span><span class=\"sy0\">,</span><span class=\"st_h\">'d'</span><span class=\"sy0\">,</span><span class=\"st_h\">'q'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">error</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'Invalid Command'</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"kw4\">false</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">command</span> <span class=\"sy0\">==</span> <span class=\"st_h\">'q'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">echo</span> PHP_EOL<span class=\"sy0\">.</span> <span class=\"st_h\">'Bye!'</span><span class=\"sy0\">.</span> PHP_EOL<span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://www.php.net/exit\"><span class=\"kw3\">exit</span></a><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"co1\">// Determine over which axis and in which direction we move:</span><br/>\t\t<span class=\"re0\">$axis</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'x'</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$sDir</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">switch</span><span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">command</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">case</span> <span class=\"st_h\">'w'</span><span class=\"sy0\">:</span><br/>\t\t\t\t<span class=\"re0\">$axis</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'y'</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"re0\">$sDir</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">case</span> <span class=\"st_h\">'a'</span><span class=\"sy0\">:</span><br/>\t\t\t\t<span class=\"re0\">$sDir</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">case</span> <span class=\"st_h\">'s'</span><span class=\"sy0\">:</span><br/>\t\t\t\t<span class=\"re0\">$axis</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'y'</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">case</span> <span class=\"st_h\">'d'</span><span class=\"sy0\">:</span><br/>\t\t\t<span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"re0\">$done</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"co1\">// shift all numbers in that direction</span><br/>\t\t<span class=\"re0\">$done</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">shift</span><span class=\"br0\">(</span><span class=\"re0\">$axis</span><span class=\"sy0\">,</span> <span class=\"re0\">$sDir</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"co1\">// merge equal numbers in opposite direction</span><br/>\t\t<span class=\"re0\">$done</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">merge</span><span class=\"br0\">(</span><span class=\"re0\">$axis</span><span class=\"sy0\">,</span> <span class=\"re0\">$sDir</span> <span class=\"sy0\">*</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"co1\">// shift merged numbers in that direction</span><br/>\t\t<span class=\"re0\">$done</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">shift</span><span class=\"br0\">(</span><span class=\"re0\">$axis</span><span class=\"sy0\">,</span> <span class=\"re0\">$sDir</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"re0\">$done</span> <span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">function</span> shift<span class=\"br0\">(</span><span class=\"re0\">$axis</span><span class=\"sy0\">,</span> <span class=\"re0\">$dir</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$totalDone</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">fieldSize</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"re0\">$done</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">foreach</span><span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">iterate</span><span class=\"br0\">(</span><span class=\"re0\">$axis</span><span class=\"sy0\">,</span><span class=\"re0\">$dir</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> <span class=\"re0\">$xy</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$xy</span><span class=\"br0\">[</span><span class=\"st_h\">'vDest'</span><span class=\"br0\">]</span> <span class=\"sy0\">===</span> <span class=\"kw4\">NULL</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$xy</span><span class=\"br0\">[</span><span class=\"st_h\">'vSrc'</span><span class=\"br0\">]</span> <span class=\"sy0\">!==</span> <span class=\"kw4\">NULL</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t\t<span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">field</span><span class=\"br0\">[</span><span class=\"re0\">$xy</span><span class=\"br0\">[</span><span class=\"st_h\">'dX'</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$xy</span><span class=\"br0\">[</span><span class=\"st_h\">'dY'</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$xy</span><span class=\"br0\">[</span><span class=\"st_h\">'vSrc'</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">field</span><span class=\"br0\">[</span><span class=\"re0\">$xy</span><span class=\"br0\">[</span><span class=\"st_h\">'sX'</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$xy</span><span class=\"br0\">[</span><span class=\"st_h\">'sY'</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">NULL</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"re0\">$done</span><span class=\"sy0\">++;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"re0\">$totalDone</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$done</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$done</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"co1\">// nothing to shift anymore</span><br/>\t\t\t\t<span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"re0\">$totalDone</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">function</span> merge<span class=\"br0\">(</span><span class=\"re0\">$axis</span><span class=\"sy0\">,</span> <span class=\"re0\">$dir</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$done</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">foreach</span><span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">iterate</span><span class=\"br0\">(</span><span class=\"re0\">$axis</span><span class=\"sy0\">,</span><span class=\"re0\">$dir</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> <span class=\"re0\">$xy</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$xy</span><span class=\"br0\">[</span><span class=\"st_h\">'vDest'</span><span class=\"br0\">]</span> <span class=\"sy0\">!==</span> <span class=\"kw4\">NULL</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$xy</span><span class=\"br0\">[</span><span class=\"st_h\">'vDest'</span><span class=\"br0\">]</span> <span class=\"sy0\">===</span> <span class=\"re0\">$xy</span><span class=\"br0\">[</span><span class=\"st_h\">'vSrc'</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">field</span><span class=\"br0\">[</span><span class=\"re0\">$xy</span><span class=\"br0\">[</span><span class=\"st_h\">'sX'</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$xy</span><span class=\"br0\">[</span><span class=\"st_h\">'sY'</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$xy</span><span class=\"br0\">[</span><span class=\"st_h\">'vDest'</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">field</span><span class=\"br0\">[</span><span class=\"re0\">$xy</span><span class=\"br0\">[</span><span class=\"st_h\">'dX'</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$xy</span><span class=\"br0\">[</span><span class=\"st_h\">'dY'</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">NULL</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">score</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">field</span><span class=\"br0\">[</span><span class=\"re0\">$xy</span><span class=\"br0\">[</span><span class=\"st_h\">'sX'</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$xy</span><span class=\"br0\">[</span><span class=\"st_h\">'sY'</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"re0\">$done</span> <span class=\"sy0\">++;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"re0\">$done</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"co4\">/**<br/>\t * @return array List of src, dest pairs and their values to iterate over.<br/>\t */</span><br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">function</span> iterate<span class=\"br0\">(</span><span class=\"re0\">$axis</span><span class=\"sy0\">,</span> <span class=\"re0\">$dir</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$res</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$y</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$y</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">fieldSize</span><span class=\"sy0\">;</span> <span class=\"re0\">$y</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$x</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">fieldSize</span><span class=\"sy0\">;</span> <span class=\"re0\">$x</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"re0\">$item</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"st_h\">'sX'</span><span class=\"sy0\">=&gt;</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span><span class=\"st_h\">'sY'</span> <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"st_h\">'dX'</span> <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"st_h\">'dY'</span> <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"st_h\">'vDest'</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw4\">NULL</span><span class=\"sy0\">,</span><span class=\"st_h\">'vSrc'</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw4\">NULL</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$axis</span> <span class=\"sy0\">==</span> <span class=\"st_h\">'x'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t\t<span class=\"re0\">$item</span><span class=\"br0\">[</span><span class=\"st_h\">'dX'</span><span class=\"br0\">]</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$dir</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t\t\t\t<span class=\"re0\">$item</span><span class=\"br0\">[</span><span class=\"st_h\">'dY'</span><span class=\"br0\">]</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$dir</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$item</span><span class=\"br0\">[</span><span class=\"st_h\">'dX'</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">fieldSize</span> <span class=\"sy0\">||</span> <span class=\"re0\">$item</span><span class=\"br0\">[</span><span class=\"st_h\">'dY'</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">fieldSize</span> <span class=\"sy0\">||</span> <span class=\"re0\">$item</span><span class=\"br0\">[</span><span class=\"st_h\">'dX'</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> <span class=\"re0\">$item</span><span class=\"br0\">[</span><span class=\"st_h\">'dY'</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t\t<span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t\t\t<span class=\"re0\">$item</span><span class=\"br0\">[</span><span class=\"st_h\">'vDest'</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://www.php.net/isset\"><span class=\"kw3\">isset</span></a><span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">field</span><span class=\"br0\">[</span><span class=\"re0\">$item</span><span class=\"br0\">[</span><span class=\"st_h\">'dX'</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$item</span><span class=\"br0\">[</span><span class=\"st_h\">'dY'</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span>? <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">field</span><span class=\"br0\">[</span><span class=\"re0\">$item</span><span class=\"br0\">[</span><span class=\"st_h\">'dX'</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$item</span><span class=\"br0\">[</span><span class=\"st_h\">'dY'</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">:</span> <span class=\"kw4\">NULL</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"re0\">$item</span><span class=\"br0\">[</span><span class=\"st_h\">'vSrc'</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://www.php.net/isset\"><span class=\"kw3\">isset</span></a><span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">field</span><span class=\"br0\">[</span><span class=\"re0\">$item</span><span class=\"br0\">[</span><span class=\"st_h\">'sX'</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$item</span><span class=\"br0\">[</span><span class=\"st_h\">'sY'</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span>? <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">field</span><span class=\"br0\">[</span><span class=\"re0\">$item</span><span class=\"br0\">[</span><span class=\"st_h\">'sX'</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$item</span><span class=\"br0\">[</span><span class=\"st_h\">'sY'</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">:</span> <span class=\"kw4\">NULL</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"re0\">$res</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$item</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$dir</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"re0\">$res</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array_reverse\"><span class=\"kw3\">array_reverse</span></a><span class=\"br0\">(</span><span class=\"re0\">$res</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"re0\">$res</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"co1\">/// RENDER ///</span><br/>\u00a0<br/>\t<span class=\"co4\">/**<br/>\t * Clear terminal screen<br/>\t */</span><br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">function</span> cls<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">echo</span> <a href=\"http://www.php.net/chr\"><span class=\"kw3\">chr</span></a><span class=\"br0\">(</span><span class=\"nu0\">27</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><a href=\"http://www.php.net/chr\"><span class=\"kw3\">chr</span></a><span class=\"br0\">(</span><span class=\"nu0\">91</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"st_h\">'H'</span><span class=\"sy0\">.</span><a href=\"http://www.php.net/chr\"><span class=\"kw3\">chr</span></a><span class=\"br0\">(</span><span class=\"nu0\">27</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><a href=\"http://www.php.net/chr\"><span class=\"kw3\">chr</span></a><span class=\"br0\">(</span><span class=\"nu0\">91</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"st_h\">'J'</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">function</span> render<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">echo</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">finishScore</span> <span class=\"sy0\">.</span> <span class=\"st_h\">'! Current score: '</span><span class=\"sy0\">.</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">score</span> <span class=\"sy0\">.</span>PHP_EOL<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://www.php.net/empty\"><span class=\"kw3\">empty</span></a><span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">error</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">echo</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">error</span> <span class=\"sy0\">.</span> PHP_EOL<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">error</span> <span class=\"sy0\">=</span> <span class=\"kw4\">NULL</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">renderField</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">function</span> renderField<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$width</span> <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">renderVSeperator</span><span class=\"br0\">(</span><span class=\"re0\">$width</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$y</span> <span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$y</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">fieldSize</span><span class=\"sy0\">;</span> <span class=\"re0\">$y</span> <span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><span class=\"re0\">$x</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">fieldSize</span><span class=\"sy0\">;</span> <span class=\"re0\">$x</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">echo</span> <span class=\"st_h\">'|'</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://www.php.net/isset\"><span class=\"kw3\">isset</span></a><span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">field</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t\t<span class=\"kw1\">echo</span> <a href=\"http://www.php.net/str_repeat\"><span class=\"kw3\">str_repeat</span></a><span class=\"br0\">(</span><span class=\"st_h\">' '</span><span class=\"sy0\">,</span> <span class=\"re0\">$width</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<a href=\"http://www.php.net/printf\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st_h\">'%'</span><span class=\"sy0\">.</span><span class=\"re0\">$width</span><span class=\"sy0\">.</span><span class=\"st_h\">'s'</span><span class=\"sy0\">,</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">field</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">echo</span> <span class=\"st_h\">'|'</span><span class=\"sy0\">.</span> PHP_EOL<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">renderVSeperator</span><span class=\"br0\">(</span><span class=\"re0\">$width</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">function</span> renderVSeperator<span class=\"br0\">(</span><span class=\"re0\">$width</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">echo</span> <a href=\"http://www.php.net/str_repeat\"><span class=\"kw3\">str_repeat</span></a><span class=\"br0\">(</span><span class=\"st_h\">'+'</span><span class=\"sy0\">.</span> <a href=\"http://www.php.net/str_repeat\"><span class=\"kw3\">str_repeat</span></a><span class=\"br0\">(</span><span class=\"st_h\">'-'</span><span class=\"sy0\">,</span> <span class=\"re0\">$width</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">fieldSize</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span><span class=\"st_h\">'+'</span> <span class=\"sy0\">.</span>PHP_EOL<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "PicoLisp", "loc": 133, "block": "<pre class=\"text highlighted_source\">(load \"@lib/simul.l\")<br/>\u00a0<br/>(seed (in \"/dev/urandom\" (rd 8)))<br/>\u00a0<br/>(setq *G (grid 4 4)  *D NIL)<br/>\u00a0<br/>(de cell ()<br/>   (use This<br/>      (while<br/>         (get<br/>            (setq This<br/>               (intern<br/>                  (pack<br/>                     (char (+ 96 (rand 1 4)))<br/>                     (rand 1 4) ) ) )<br/>            'N ) )<br/>      (=: N (if (&gt; 90 (rand 1 100)) 2 4) ) )<br/>   (setq *D (fish '((This) (: N)) *G)) )<br/>\u00a0<br/>(de redraw (G S D)<br/>   # zeroize *G<br/>   (mapc<br/>      '((I)<br/>         (mapc '((This) (=: N NIL)) I) )<br/>      *G )<br/>   # draw again<br/>   (mapc<br/>      '((X This)<br/>         (while (and This X)<br/>            (=: N (pop 'X))<br/>            (setq This (D This)) ) )<br/>      G<br/>      S ) )<br/>\u00a0<br/>(de summ (Lst)<br/>   (mapcar<br/>      '((L)<br/>         (make<br/>            (while L<br/>               (ifn (= (car L) (cadr L))<br/>                  (link (car L))<br/>                  (link (+ (car L) (cadr L)))<br/>                  (pop 'L) )<br/>               (pop 'L) ) ) )<br/>      Lst ) )<br/>\u00a0<br/>(de vertical ()<br/>   (mapcar<br/>      '((X) (extract '((This) (: N)) X))<br/>      *G ) )<br/>\u00a0<br/>(de horizontal ()<br/>   (mapcar<br/>      '((This)<br/>         (make<br/>            (while This<br/>               (when (: N) (link @))<br/>               (setq This (east This)) ) ) )<br/>      (car *G) ) )<br/>\u00a0<br/>(de finish? ()<br/>   (nor<br/>      (fish<br/>         '((This)<br/>            (when (atom This) (= NIL (: N))) )<br/>         *G )<br/>      (find<br/>         '((L)<br/>            (find<br/>               '((This)<br/>                  (when (: N)<br/>                     (find<br/>                        '((D)<br/>                           (= (: N) (get (D This) 'N)) )<br/>                        (quote north south west east) ) ) )<br/>               L ) )<br/>         *G ) ) )<br/>\u00a0<br/>(de board (D)<br/>   (space 3)<br/>   (prin '+)<br/>   (for I G<br/>      (prin (if (D (car I)) \"   +\" \"---+\")) )<br/>   (prinl) )<br/>\u00a0<br/>(de display ()<br/>   (let G (mapcar reverse *G)<br/>      (board north)<br/>      (while (caar G)<br/>         (space 3)<br/>         (prin '|)<br/>         (for I G<br/>            (with (car I)<br/>               (prin<br/>                  (if (: N) (align 3 (: N)) \"   \")<br/>                  (if (east This) \" \" '|) ) ) )<br/>         (prinl)<br/>         (board south)<br/>         (map pop G) )<br/>      (do 2<br/>         (prinl) ) ) )<br/>\u00a0<br/>(do 2<br/>   (cell) )<br/>(display)<br/>(loop<br/>   (case<br/>      (pack<br/>         (make<br/>            (link (key))<br/>            (while (key 100)<br/>               (link @) ) ) )<br/>      (\"^[[D\" #left<br/>         (redraw (summ (horizontal)) '(a1 a2 a3 a4) east) )<br/>      (\"^[[C\" #rigth<br/>         (redraw<br/>            (summ (mapcar reverse (horizontal)))<br/>            '(d1 d2 d3 d4)<br/>            west) )<br/>      (\"^[[B\" #down<br/>         (redraw (summ (vertical)) '(a1 b1 c1 d1) north) )<br/>      (\"^[[A\" #up<br/>         (redraw<br/>            (summ (mapcar reverse (vertical)))<br/>            '(a4 b4 c4 d4)<br/>            south) ) )<br/>   (when (diff *D (fish '((This) (: N)) *G))<br/>      (cell) )<br/>   (display)<br/>   (T (finish?) (println 'Finish))<br/>   (T (fish '((This) (= 512 (: N))) *G)<br/>      (println 'Maximum) ) )<br/>(bye)</pre>"}, {"lang": "Pony", "loc": 268, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>use \"term\"<br/>use \"random\"<br/>use \"time\"<br/>\u00a0<br/>interface EdgeRow<br/>  fun val row()\u00a0: Iterator[U32] ref<br/>  fun val inc()\u00a0: I32<br/>\u00a0<br/>primitive TopRow is EdgeRow<br/>  fun row()\u00a0: Iterator[U32] ref =&gt; let r\u00a0: Array[U32] box = [0,1,2,3]<br/>    r.values()<br/>  fun inc()\u00a0: I32 =&gt; 4<br/>\u00a0<br/>primitive LeftRow is EdgeRow<br/>  fun row()\u00a0: Iterator[U32] ref =&gt; let r\u00a0: Array[U32] box = [0,4,8,12]<br/>    r.values()<br/>  fun inc()\u00a0: I32 =&gt; 1<br/>\u00a0<br/>primitive RightRow is EdgeRow<br/>  fun row()\u00a0: Iterator[U32] ref =&gt; let r\u00a0: Array[U32] box = [3,7,11,15]<br/>    r.values()<br/>  fun inc()\u00a0: I32 =&gt; -1<br/>\u00a0<br/>primitive BottomRow is EdgeRow<br/>  fun row()\u00a0: Iterator[U32] ref =&gt; let r\u00a0: Array[U32] box = [12,13,14,15]<br/>    r.values()<br/>  fun inc()\u00a0: I32 =&gt;  -4<br/>\u00a0<br/>primitive LEFT<br/>primitive RIGHT<br/>primitive UP<br/>primitive DOWN<br/>type Move is (LEFT|RIGHT|UP|DOWN)<br/>\u00a0<br/>class  KeyboardHandler is ANSINotify<br/>   let _game\u00a0: Game tag<br/>   new iso create(game\u00a0: Game tag) =&gt; _game = game<br/>\u00a0<br/>   fun ref apply(term: ANSITerm ref, input: U8 val) =&gt;<br/>     if input == 113 then<br/>       _game.quit()<br/>       term.dispose()<br/>     end<br/>   fun ref left(ctrl: Bool, alt: Bool, shift: Bool)  =&gt; _game.move(LEFT)<br/>   fun ref down(ctrl: Bool, alt: Bool, shift: Bool)  =&gt; _game.move(DOWN)<br/>   fun ref up(ctrl: Bool, alt: Bool, shift: Bool)    =&gt; _game.move(UP)<br/>   fun ref right(ctrl: Bool, alt: Bool, shift: Bool) =&gt; _game.move(RIGHT)<br/>\u00a0<br/>type ROW is (U32,U32,U32,U32)<br/>\u00a0<br/>primitive Merger<br/>  fun tag apply(r\u00a0: ROW)\u00a0: ROW =&gt;<br/>    match r<br/>    | (0,0,0,_)            =&gt; (r._4,0,0,0)<br/>    | (0,0,_,r._3)         =&gt; (r._3&lt;&lt;1,0,0,0)<br/>    | (0,0,_,_)            =&gt; (r._3,r._4,0,0)<br/>    | (0,_,r._2,_)         =&gt; (r._2&lt;&lt;1,r._4,0,0)<br/>    | (0,_,0,r._2)         =&gt; (r._2&lt;&lt;1,0,0,0)<br/>    | (0,_,0,_)            =&gt; (r._2,r._4,0,0)<br/>    | (0,_,_,r._3)         =&gt; (r._2,r._3&lt;&lt;1,0,0)<br/>    | (0,_,_,_)            =&gt; (r._2,r._3,r._4,0)<br/>    | (_, r._1, _, r._3)   =&gt; (r._1&lt;&lt;1, r._3&lt;&lt;1, 0, 0)<br/>    | (_, r._1, 0, _)      =&gt; (r._1&lt;&lt;1, r._4, 0, 0)<br/>    | (_, r._1, _, _)      =&gt; (r._1&lt;&lt;1, r._3, r._4, 0)<br/>    | (_, 0,r._1, _)       =&gt; (r._1&lt;&lt;1,r._4,0,0)<br/>    | (_, 0,0, r._1)       =&gt; (r._1&lt;&lt;1,0,0,0)<br/>    | (_, 0,0, _)          =&gt; (r._1,r._4,0,0)<br/>    | (_, 0,_, r._3)       =&gt; (r._1, r._3&lt;&lt;1,0,0)<br/>    | (_, 0,_, _)          =&gt; (r._1, r._3,r._4,0)<br/>    | (_,_,r._2,_)         =&gt; (r._1, r._2&lt;&lt;1,r._4,0)<br/>    | (_,_,0,r._2)         =&gt; (r._1, r._2&lt;&lt;1,0,0)<br/>    | (_,_,0,_)            =&gt; (r._1, r._2,r._4,0)<br/>    | (_,_,_,r._3)         =&gt; (r._1, r._2,r._3&lt;&lt;1,0)<br/>    else<br/>       r<br/>    end<br/>/**<br/>* Game actor<br/>*/<br/>actor Game<br/>  embed _grid\u00a0: Array[U32] = Array[U32].init(0, 16)<br/>  let _rand\u00a0: Random = MT(Time.millis())<br/>  let _env\u00a0: Env<br/>  let _board\u00a0: String ref = recover String(1024) end<br/>\u00a0<br/>  new create(env: Env)=&gt;<br/>    _env = env<br/>    _add_block()<br/>    _add_block()<br/>    _draw()<br/>\u00a0<br/>  fun _merge(start\u00a0: U32, inc\u00a0: I32)\u00a0: (ROW | None) =&gt;<br/>    var st = start.i32()<br/>    let rval\u00a0: ROW = (_get(st),             _get(st + inc),<br/>                      _get(st + (inc * 2)), _get(st + (inc * 3)))<br/>    let rout = Merger(rval)<br/>    if rout is rval then None else rout end<br/>\u00a0<br/>  fun ref _update(start\u00a0: U32, inc\u00a0: I32)\u00a0: Bool =&gt;<br/>    match _merge(start, inc)<br/>    | let rout\u00a0: ROW =&gt;<br/>        var st = start.i32()<br/>        _set(st,             rout._1)<br/>        _set(st +  inc,      rout._2)<br/>        _set(st + (inc * 2), rout._3)<br/>        _set(st + (inc * 3), rout._4)<br/>        true<br/>    else<br/>      false<br/>    end<br/>\u00a0<br/>  fun ref _shift_to(edge\u00a0: EdgeRow val)\u00a0: Bool =&gt;<br/>    var updated = false<br/>    for r in edge.row() do<br/>      if _update(r, edge.inc()) then<br/>        updated = true<br/>      end<br/>    end<br/>    updated<br/>\u00a0<br/>  fun _fmt(i\u00a0: U32)\u00a0: String =&gt;<br/>    match i<br/>    | 0 =&gt; \" __ \"<br/>    | 2 =&gt; \"\\x1B[31m  2 \\x1B[0m\"<br/>    | 4 =&gt; \"\\x1B[32m  4 \\x1B[0m\"<br/>    | 8 =&gt; \"\\x1B[33m  8 \\x1B[0m\"<br/>    | 16 =&gt; \"\\x1B[34m 16 \\x1B[0m\"<br/>    | 32 =&gt; \"\\x1B[35m 32 \\x1B[0m\"<br/>    | 64 =&gt; \"\\x1B[36m 64 \\x1B[0m\"<br/>    | 128 =&gt; \"\\x1B[37m128 \\x1B[0m\"<br/>    | 256 =&gt; \"\\x1B[41m\\x1B[37m256 \\x1B[0m\"<br/>    | 512 =&gt; \"\\x1B[42m\\x1B[37m512 \\x1B[0m\"<br/>    | 1024 =&gt; \"\\x1B[43m\\x1B[37m1024\\x1B[0m\"<br/>    | 2048 =&gt; \"\\x1B[47m\\x1B[35m\\x1B[1m\\x1B[5m2048\\x1B[0m\"<br/>    else<br/>      i.string()<br/>    end<br/>\u00a0<br/>  fun ref _draw() =&gt;<br/>    let s\u00a0: String ref = _board<br/>    s.truncate(0)<br/>    var i\u00a0: U32 = 0<br/>    repeat<br/>      if (i\u00a0% 4) == 0 then<br/>          s.append(\"---------------------\\n\")<br/>      end<br/>      s.append(_fmt(_get(i)))<br/>      s.append(\" \")<br/>      i = i + 1<br/>      if (i\u00a0% 4) == 0 then<br/>          s.append(\"\\n\")<br/>      end<br/>    until i==16 end<br/>    _env.out.print(s.string())<br/>    _env.out.print(\"Arrow keys to move. Press (q)uit key to quit.\")<br/>\u00a0<br/>   fun ref _set(i:(I32|U32), v\u00a0: U32) =&gt;<br/>     try<br/>       _grid.update(i.usize(),v)<br/>     else<br/>       _env.out.print(\"cant update!\")<br/>     end<br/>\u00a0<br/>  fun _count()\u00a0: U64 =&gt;<br/>     var c\u00a0: U64 = 0<br/>     for v in _grid.values() do<br/>       c = c + if v == 0 then 0 else 1 end<br/>     end<br/>     c<br/>\u00a0<br/>  fun ref _add_block() =&gt;<br/>    let c = _count()<br/>    if c == 16 then return end<br/>\u00a0<br/>    var hit =  _rand.int(16 - c)<br/>    var i\u00a0: U32 = 0<br/>    while i &lt; 16 do<br/>      if (_get(i) == 0) then<br/>        if hit == 0 then<br/>          _set(i, if _rand.int(10) &gt; 0 then 2 else 4 end)<br/>          break<br/>        end<br/>        hit = hit - 1<br/>      end<br/>      i = i + 1<br/>    end<br/>\u00a0<br/>  fun _get(i\u00a0: (I32|U32))\u00a0: U32 =&gt; try  _grid(i.usize()) else 0  end<br/>\u00a0<br/>  fun _win()\u00a0: Bool =&gt;<br/>    for v in _grid.values() do<br/>      if v == 2048 then return true end<br/>    end<br/>    false<br/>\u00a0<br/>  fun _no_moves(edge\u00a0: EdgeRow val)\u00a0: Bool =&gt;<br/>    for r in edge.row() do<br/>      match _merge(r, edge.inc())<br/>      | let rout\u00a0: ROW =&gt;<br/>        if (rout._1 == 0) or (rout._2 == 0) or<br/>            (rout._3 == 0) or (rout._4 == 0) then<br/>              return false<br/>        end<br/>      end<br/>    end<br/>    true<br/>\u00a0<br/>  fun _lose()\u00a0: Bool =&gt;<br/>    (_grid.size() &gt;= 16) and<br/>    _no_moves(LeftRow) and<br/>    _no_moves(RightRow) and<br/>    _no_moves(TopRow) and<br/>    _no_moves(BottomRow)<br/>\u00a0<br/>  be quit()=&gt;<br/>    _env.out.print(\"Exiting.. some terminals may require &lt;ctrl-c&gt;\")<br/>    _env.exitcode(0)<br/>    _env.input.dispose()<br/>\u00a0<br/>  be move(m: Move) =&gt;<br/>    let updated =<br/>      match m<br/>      | LEFT =&gt;  _shift_to(LeftRow)<br/>      | RIGHT =&gt; _shift_to(RightRow)<br/>      | UP =&gt;    _shift_to(TopRow)<br/>      | DOWN =&gt;  _shift_to(BottomRow)<br/>      else<br/>        false<br/>      end<br/>\u00a0<br/>    if _win() then<br/>      _draw()<br/>      _env.out.print(\"You win\u00a0:)\")<br/>      quit()<br/>    else<br/>      if updated then<br/>        _add_block()<br/>        _draw()<br/>      end<br/>      if _lose() then<br/>        _env.out.print(\"You lose\u00a0:(\")<br/>        quit()<br/>      end<br/>    end<br/>\u00a0<br/>actor Main<br/>  new create(env: Env) =&gt;<br/>    // unit test<br/>    ifdef \"test\" then<br/>      TestMain(env)<br/>      return<br/>    end<br/>    // else game<br/>    let input\u00a0: Stdin tag = env.input<br/>    env.out.print(\"Welcome to ponylang-2048...\")<br/>    let game = Game(env)<br/>    let term = ANSITerm(KeyboardHandler(game), input)<br/>\u00a0<br/>    let notify\u00a0: StdinNotify iso = object iso<br/>        let term: ANSITerm = term<br/>        let _in: Stdin tag = input<br/>        fun ref apply(data: Array[U8] iso) =&gt; term(consume data)<br/>        fun ref dispose() =&gt; _in.dispose()<br/>    end<br/>\u00a0<br/>    input(consume notify)<br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 159, "block": "<pre class=\"prolog highlighted_source\"><span class=\"coMULTI\">/* -------------------------------------------------------------<br/>   Entry point, just create a blank grid and enter a 'game loop'<br/>   -------------------------------------------------------------*/</span><br/>play_2048 <span class=\"sy1\">:-</span> <br/>\twelcome_msg<span class=\"sy4\">,</span><br/>\tlength<span class=\"br0\">(</span>Grid<span class=\"sy4\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> maplist<span class=\"br0\">(</span><span class=\"sy6\">=</span><span class=\"br0\">(</span><span class=\"st_h\">' '</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> Grid<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"co1\">% create a blank grid</span><br/>\tplay<span class=\"br0\">(</span>Grid<span class=\"sy4\">,</span> yes<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">.</span> <span class=\"co1\">% don't have to cut here but it makes the exit cleaner</span><br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\">/* -----------------------------------------------<br/>   Messages that will be printed at various points <br/>   -----------------------------------------------*/</span><br/>welcome_msg <span class=\"sy1\">:-</span> \t<br/>\tformat<span class=\"br0\">(</span><span class=\"st_h\">'~nWelcome to the Prolog version of 2048~n~n'</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tformat<span class=\"br0\">(</span><span class=\"st_h\">'To play using w,s,a,d keys for movement, q to quit~n~n'</span><span class=\"br0\">)</span><span class=\"sy4\">.</span>\t<br/>contrats_msg <span class=\"sy1\">:-</span> format<span class=\"br0\">(</span><span class=\"st_h\">'Congratulations, you reached 2048!~n~n'</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>loser_msg <span class=\"sy1\">:-</span> format<span class=\"br0\">(</span><span class=\"st_h\">'Uh Oh, you could not quite make it to 2048...~n~n'</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>quit_msg <span class=\"sy1\">:-</span> format<span class=\"br0\">(</span><span class=\"st_h\">'Bye then!~n~n'</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\">/* -------------------<br/>   End game conditions <br/>   -------------------*/</span><br/>player_not_won_yet<span class=\"br0\">(</span>Grid<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> maplist<span class=\"br0\">(</span>dif<span class=\"br0\">(</span><span class=\"nu0\">2048</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> Grid<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>player_wins<span class=\"br0\">(</span>Grid<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> member<span class=\"br0\">(</span><span class=\"nu0\">2048</span><span class=\"sy4\">,</span> Grid<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>player_loses<span class=\"br0\">(</span>G<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> move<span class=\"br0\">(</span>up<span class=\"sy4\">,</span> G<span class=\"sy4\">,</span> G<span class=\"br0\">)</span><span class=\"sy4\">,</span> move<span class=\"br0\">(</span>down<span class=\"sy4\">,</span> G<span class=\"sy4\">,</span> G<span class=\"br0\">)</span><span class=\"sy4\">,</span> move<span class=\"br0\">(</span>left<span class=\"sy4\">,</span> G<span class=\"sy4\">,</span> G<span class=\"br0\">)</span><span class=\"sy4\">,</span> move<span class=\"br0\">(</span>right<span class=\"sy4\">,</span> G<span class=\"sy4\">,</span> G<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\">/* ---------<br/>   Game loop <br/>   ---------*/</span>\t<br/><span class=\"co1\">% First check if the player has reached the win condition, if not find how many spaces are left</span><br/>play<span class=\"br0\">(</span>Grid<span class=\"sy4\">,</span> _<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> \t<br/>\tplayer_wins<span class=\"br0\">(</span>Grid<span class=\"br0\">)</span><span class=\"sy4\">,</span> <br/>\tdraw_grid<span class=\"br0\">(</span>Grid<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tcontrats_msg<span class=\"sy4\">.</span><br/>play<span class=\"br0\">(</span>Grid<span class=\"sy4\">,</span> CreateNewNum<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <br/>\tplayer_not_won_yet<span class=\"br0\">(</span>Grid<span class=\"br0\">)</span><span class=\"sy4\">,</span> <br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">include</span></a><span class=\"br0\">(</span><span class=\"sy6\">=</span><span class=\"br0\">(</span><span class=\"st_h\">' '</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> Grid<span class=\"sy4\">,</span> Spaces<span class=\"br0\">)</span><span class=\"sy4\">,</span> length<span class=\"br0\">(</span>Spaces<span class=\"sy4\">,</span> NSpaces<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"co1\">% the number of spaces in the grid</span><br/>\tplay<span class=\"br0\">(</span>Grid<span class=\"sy4\">,</span> CreateNewNum<span class=\"sy4\">,</span> NSpaces<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% knowing the number of spaces, determine if there is a space, and if we need a new number, and generate.\t</span><br/>play<span class=\"br0\">(</span>Grid<span class=\"sy4\">,</span> no<span class=\"sy4\">,</span> _<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> play<span class=\"br0\">(</span>Grid<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>play<span class=\"br0\">(</span>Grid<span class=\"sy4\">,</span> yes<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span> play<span class=\"br0\">(</span>Grid<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>play<span class=\"br0\">(</span>Grid<span class=\"sy4\">,</span> yes<span class=\"sy4\">,</span> NSpaces<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <br/>\tdif<span class=\"br0\">(</span>NSpaces<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> <br/>\trandom_space<span class=\"br0\">(</span>NSpaces<span class=\"sy4\">,</span> Grid<span class=\"sy4\">,</span> GridWithRandom<span class=\"br0\">)</span><span class=\"sy4\">,</span> <br/>\tplay<span class=\"br0\">(</span>GridWithRandom<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% with the new number on the grid we can tell if the player has lost the game yet</span><br/><span class=\"co1\">% if not, draw the grid and get the next action by the player </span><br/>play<span class=\"br0\">(</span>Grid<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <br/>\tplayer_loses<span class=\"br0\">(</span>Grid<span class=\"br0\">)</span><span class=\"sy4\">,</span> <br/>\tdraw_grid<span class=\"br0\">(</span>Grid<span class=\"br0\">)</span><span class=\"sy4\">,</span> <br/>\tloser_msg<span class=\"sy4\">.</span>\t\t<br/>play<span class=\"br0\">(</span>Grid<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <br/>\t<span class=\"sy2\">\\+</span> player_loses<span class=\"br0\">(</span>Grid<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tdraw_grid<span class=\"br0\">(</span>Grid<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnext_move_by_player<span class=\"br0\">(</span>Move<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tplayer_made_move<span class=\"br0\">(</span>Grid<span class=\"sy4\">,</span> Move<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% determine the result of player move\t</span><br/>player_made_move<span class=\"br0\">(</span>_<span class=\"sy4\">,</span> quit<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>player_made_move<span class=\"br0\">(</span>Grid<span class=\"sy4\">,</span> Move<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <br/>\tdif<span class=\"br0\">(</span>Move<span class=\"sy4\">,</span> quit<span class=\"br0\">)</span><span class=\"sy4\">,</span> <br/>\tmove<span class=\"br0\">(</span>Move<span class=\"sy4\">,</span> Grid<span class=\"sy4\">,</span> Grid<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"co1\">% The move creating the same grid indicates that no merge was done</span><br/>\tplay<span class=\"br0\">(</span>Grid<span class=\"sy4\">,</span> no<span class=\"br0\">)</span><span class=\"sy4\">.</span> <span class=\"co1\">% don't create a new number</span><br/>player_made_move<span class=\"br0\">(</span>Grid<span class=\"sy4\">,</span> Move<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <br/>\tdif<span class=\"br0\">(</span>Move<span class=\"sy4\">,</span> quit<span class=\"br0\">)</span><span class=\"sy4\">,</span> <br/>\tmove<span class=\"br0\">(</span>Move<span class=\"sy4\">,</span> Grid<span class=\"sy4\">,</span> MovedGrid<span class=\"br0\">)</span><span class=\"sy4\">,</span> <br/>\tdif<span class=\"br0\">(</span>Grid<span class=\"sy4\">,</span> MovedGrid<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tplay<span class=\"br0\">(</span>MovedGrid<span class=\"sy4\">,</span> yes<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\">/* ---------------------------------------<br/>   Get the next move from the player input <br/>   ---------------------------------------*/</span>\t<br/>next_move_by_player<span class=\"br0\">(</span>Move<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">repeat</span></a><span class=\"sy4\">,</span> <br/>\tget_single_char<span class=\"br0\">(</span>Char<span class=\"br0\">)</span><span class=\"sy4\">,</span> <br/>\tkey_move<span class=\"br0\">(</span>Char<span class=\"sy4\">,</span> Move<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% valid keys are: up = 'w', down = 's', left = 'a' right = 'd', quit = 'q'</span><br/>key_move<span class=\"br0\">(</span><span class=\"nu0\">119</span><span class=\"sy4\">,</span> up<span class=\"br0\">)</span><span class=\"sy4\">.</span> key_move<span class=\"br0\">(</span><span class=\"nu0\">115</span><span class=\"sy4\">,</span> down<span class=\"br0\">)</span><span class=\"sy4\">.</span>\tkey_move<span class=\"br0\">(</span><span class=\"nu0\">97</span><span class=\"sy4\">,</span> left<span class=\"br0\">)</span><span class=\"sy4\">.</span> key_move<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"sy4\">,</span> right<span class=\"br0\">)</span><span class=\"sy4\">.</span> key_move<span class=\"br0\">(</span><span class=\"nu0\">113</span><span class=\"sy4\">,</span> quit<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\">/* ------------------<br/>   Draw the Game grid <br/>   ------------------*/</span><br/>draw_grid<span class=\"br0\">(</span><span class=\"br0\">[</span>A1<span class=\"sy4\">,</span>A2<span class=\"sy4\">,</span>A3<span class=\"sy4\">,</span>A4<span class=\"sy4\">,</span>B1<span class=\"sy4\">,</span>B2<span class=\"sy4\">,</span>B3<span class=\"sy4\">,</span>B4<span class=\"sy4\">,</span>C1<span class=\"sy4\">,</span>C2<span class=\"sy4\">,</span>C3<span class=\"sy4\">,</span>C4<span class=\"sy4\">,</span>D1<span class=\"sy4\">,</span>D2<span class=\"sy4\">,</span>D3<span class=\"sy4\">,</span>D4<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tformat<span class=\"br0\">(</span>   <span class=\"st_h\">'+-------------------+~n'</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\trow<span class=\"br0\">(</span><span class=\"br0\">[</span>A1<span class=\"sy4\">,</span>A2<span class=\"sy4\">,</span>A3<span class=\"sy4\">,</span>A4<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> <br/>\trow<span class=\"br0\">(</span><span class=\"br0\">[</span>B1<span class=\"sy4\">,</span>B2<span class=\"sy4\">,</span>B3<span class=\"sy4\">,</span>B4<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> <br/>\trow<span class=\"br0\">(</span><span class=\"br0\">[</span>C1<span class=\"sy4\">,</span>C2<span class=\"sy4\">,</span>C3<span class=\"sy4\">,</span>C4<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> <br/>\tmaplist<span class=\"br0\">(</span>draw<span class=\"sy4\">,</span> <span class=\"br0\">[</span>D1<span class=\"sy4\">,</span>D2<span class=\"sy4\">,</span>D3<span class=\"sy4\">,</span>D4<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tformat<span class=\"br0\">(</span><span class=\"st_h\">'\u00a6~n+-------------------+~n~n~n'</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>row<span class=\"br0\">(</span><span class=\"br0\">[</span>A<span class=\"sy4\">,</span>B<span class=\"sy4\">,</span>C<span class=\"sy4\">,</span>D<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span> maplist<span class=\"br0\">(</span>draw<span class=\"sy4\">,</span> <span class=\"br0\">[</span>A<span class=\"sy4\">,</span>B<span class=\"sy4\">,</span>C<span class=\"sy4\">,</span>D<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> format<span class=\"br0\">(</span><span class=\"st_h\">'\u00a6~n\u00a6----+----+----+----\u00a6~n'</span><span class=\"br0\">)</span><span class=\"sy4\">.</span>\t<br/>\u00a0<br/>draw<span class=\"br0\">(</span><span class=\"st_h\">' '</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span> format<span class=\"br0\">(</span><span class=\"st_h\">'\u00a6    '</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>draw<span class=\"br0\">(</span>X<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> member<span class=\"br0\">(</span>X<span class=\"sy4\">,</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy4\">,</span><span class=\"nu0\">4</span><span class=\"sy4\">,</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> format<span class=\"br0\">(</span><span class=\"st_h\">'\u00a6  ~d '</span><span class=\"sy4\">,</span> X<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>draw<span class=\"br0\">(</span>X<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> member<span class=\"br0\">(</span>X<span class=\"sy4\">,</span><span class=\"br0\">[</span><span class=\"nu0\">16</span><span class=\"sy4\">,</span><span class=\"nu0\">32</span><span class=\"sy4\">,</span><span class=\"nu0\">64</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> format<span class=\"br0\">(</span><span class=\"st_h\">'\u00a6 ~d '</span><span class=\"sy4\">,</span> X<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>draw<span class=\"br0\">(</span>X<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> member<span class=\"br0\">(</span>X<span class=\"sy4\">,</span><span class=\"br0\">[</span><span class=\"nu0\">128</span><span class=\"sy4\">,</span><span class=\"nu0\">256</span><span class=\"sy4\">,</span><span class=\"nu0\">512</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> format<span class=\"br0\">(</span><span class=\"st_h\">'\u00a6 ~d'</span><span class=\"sy4\">,</span> X<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>draw<span class=\"br0\">(</span>X<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> member<span class=\"br0\">(</span>X<span class=\"sy4\">,</span><span class=\"br0\">[</span><span class=\"nu0\">1024</span><span class=\"sy4\">,</span><span class=\"nu0\">2048</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> format<span class=\"br0\">(</span><span class=\"st_h\">'\u00a6~d'</span><span class=\"sy4\">,</span> X<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\">/* ----------------------------------------<br/>   Populate a random space with a new value <br/>   ----------------------------------------*/</span><br/>random_space<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> G<span class=\"sy4\">,</span> G<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>random_space<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> Grid<span class=\"sy4\">,</span> GridWithRandom<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <br/>\tfour_or_two<span class=\"br0\">(</span>V<span class=\"br0\">)</span><span class=\"sy4\">,</span> <br/>\tselect<span class=\"br0\">(</span><span class=\"st_h\">' '</span><span class=\"sy4\">,</span> Grid<span class=\"sy4\">,</span> V<span class=\"sy4\">,</span> GridWithRandom<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>random_space<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> Grid<span class=\"sy4\">,</span> GridWithRandom<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tN <span class=\"sy6\">&gt;</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\tfour_or_two<span class=\"br0\">(</span>V<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\trandom<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> N<span class=\"sy4\">,</span> P<span class=\"br0\">)</span><span class=\"sy4\">,</span>\t<br/>\treplace_space<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> V<span class=\"sy4\">,</span> Grid<span class=\"sy4\">,</span> GridWithRandom<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>replace_space<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> V<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"st_h\">' '</span><span class=\"sy5\">|</span>T<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>V<span class=\"sy5\">|</span>T<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>replace_space<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> V<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"st_h\">' '</span><span class=\"sy5\">|</span>T<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"st_h\">' '</span><span class=\"sy5\">|</span>R<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span>\tsucc<span class=\"br0\">(</span>NextP<span class=\"sy4\">,</span> P<span class=\"br0\">)</span><span class=\"sy4\">,</span>\treplace_space<span class=\"br0\">(</span>NextP<span class=\"sy4\">,</span> V<span class=\"sy4\">,</span> T<span class=\"sy4\">,</span> R<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>replace_space<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> V<span class=\"sy4\">,</span> <span class=\"br0\">[</span>H<span class=\"sy5\">|</span>T<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>H<span class=\"sy5\">|</span>R<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span>\tdif<span class=\"br0\">(</span><span class=\"st_h\">' '</span><span class=\"sy4\">,</span> H<span class=\"br0\">)</span><span class=\"sy4\">,</span> replace_space<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> V<span class=\"sy4\">,</span> T<span class=\"sy4\">,</span> R<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>four_or_two<span class=\"br0\">(</span>V<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> random<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"nu0\">10</span><span class=\"sy4\">,</span> IsFour<span class=\"br0\">)</span><span class=\"sy4\">,</span> IsFour <span class=\"sy6\">=</span> <span class=\"nu0\">1</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> V <span class=\"sy6\">=</span> <span class=\"nu0\">4</span> <span class=\"sy4\">;</span> V <span class=\"sy6\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\">/* ------------------------------------------<br/>   Process a game move based on the direction <br/>   ------------------------------------------*/</span><br/>move<span class=\"br0\">(</span>Direction<span class=\"sy4\">,</span> UnMoved<span class=\"sy4\">,</span> Moved<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tmap_move<span class=\"br0\">(</span>Direction<span class=\"sy4\">,</span> UnMoved<span class=\"sy4\">,</span> UnMovedMapped<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tmaplist<span class=\"br0\">(</span>combine_row<span class=\"sy4\">,</span> UnMovedMapped<span class=\"sy4\">,</span> MovedMapped<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tmap_move<span class=\"br0\">(</span>Direction<span class=\"sy4\">,</span> Moved<span class=\"sy4\">,</span> MovedMapped<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% convert the array to a set of lists that can be moved in the same</span><br/><span class=\"co1\">% direction. This can be reversed after the move is completed.</span><br/>map_move<span class=\"br0\">(</span>up<span class=\"sy4\">,</span> <span class=\"br0\">[</span>A1<span class=\"sy4\">,</span>A2<span class=\"sy4\">,</span>A3<span class=\"sy4\">,</span>A4<span class=\"sy4\">,</span>B1<span class=\"sy4\">,</span>B2<span class=\"sy4\">,</span>B3<span class=\"sy4\">,</span>B4<span class=\"sy4\">,</span>C1<span class=\"sy4\">,</span>C2<span class=\"sy4\">,</span>C3<span class=\"sy4\">,</span>C4<span class=\"sy4\">,</span>D1<span class=\"sy4\">,</span>D2<span class=\"sy4\">,</span>D3<span class=\"sy4\">,</span>D4<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>D1<span class=\"sy4\">,</span>C1<span class=\"sy4\">,</span>B1<span class=\"sy4\">,</span>A1<span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span>D2<span class=\"sy4\">,</span>C2<span class=\"sy4\">,</span>B2<span class=\"sy4\">,</span>A2<span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span>D3<span class=\"sy4\">,</span>C3<span class=\"sy4\">,</span>B3<span class=\"sy4\">,</span>A3<span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span>D4<span class=\"sy4\">,</span>C4<span class=\"sy4\">,</span>B4<span class=\"sy4\">,</span>A4<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>map_move<span class=\"br0\">(</span>down<span class=\"sy4\">,</span> <span class=\"br0\">[</span>A1<span class=\"sy4\">,</span>A2<span class=\"sy4\">,</span>A3<span class=\"sy4\">,</span>A4<span class=\"sy4\">,</span>B1<span class=\"sy4\">,</span>B2<span class=\"sy4\">,</span>B3<span class=\"sy4\">,</span>B4<span class=\"sy4\">,</span>C1<span class=\"sy4\">,</span>C2<span class=\"sy4\">,</span>C3<span class=\"sy4\">,</span>C4<span class=\"sy4\">,</span>D1<span class=\"sy4\">,</span>D2<span class=\"sy4\">,</span>D3<span class=\"sy4\">,</span>D4<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>A1<span class=\"sy4\">,</span>B1<span class=\"sy4\">,</span>C1<span class=\"sy4\">,</span>D1<span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span>A2<span class=\"sy4\">,</span>B2<span class=\"sy4\">,</span>C2<span class=\"sy4\">,</span>D2<span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span>A3<span class=\"sy4\">,</span>B3<span class=\"sy4\">,</span>C3<span class=\"sy4\">,</span>D3<span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span>A4<span class=\"sy4\">,</span>B4<span class=\"sy4\">,</span>C4<span class=\"sy4\">,</span>D4<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>map_move<span class=\"br0\">(</span>left<span class=\"sy4\">,</span> <span class=\"br0\">[</span>A1<span class=\"sy4\">,</span>A2<span class=\"sy4\">,</span>A3<span class=\"sy4\">,</span>A4<span class=\"sy4\">,</span>B1<span class=\"sy4\">,</span>B2<span class=\"sy4\">,</span>B3<span class=\"sy4\">,</span>B4<span class=\"sy4\">,</span>C1<span class=\"sy4\">,</span>C2<span class=\"sy4\">,</span>C3<span class=\"sy4\">,</span>C4<span class=\"sy4\">,</span>D1<span class=\"sy4\">,</span>D2<span class=\"sy4\">,</span>D3<span class=\"sy4\">,</span>D4<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>A4<span class=\"sy4\">,</span>A3<span class=\"sy4\">,</span>A2<span class=\"sy4\">,</span>A1<span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span>B4<span class=\"sy4\">,</span>B3<span class=\"sy4\">,</span>B2<span class=\"sy4\">,</span>B1<span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span>C4<span class=\"sy4\">,</span>C3<span class=\"sy4\">,</span>C2<span class=\"sy4\">,</span>C1<span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span>D4<span class=\"sy4\">,</span>D3<span class=\"sy4\">,</span>D2<span class=\"sy4\">,</span>D1<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>map_move<span class=\"br0\">(</span>right<span class=\"sy4\">,</span> <span class=\"br0\">[</span>A1<span class=\"sy4\">,</span>A2<span class=\"sy4\">,</span>A3<span class=\"sy4\">,</span>A4<span class=\"sy4\">,</span>B1<span class=\"sy4\">,</span>B2<span class=\"sy4\">,</span>B3<span class=\"sy4\">,</span>B4<span class=\"sy4\">,</span>C1<span class=\"sy4\">,</span>C2<span class=\"sy4\">,</span>C3<span class=\"sy4\">,</span>C4<span class=\"sy4\">,</span>D1<span class=\"sy4\">,</span>D2<span class=\"sy4\">,</span>D3<span class=\"sy4\">,</span>D4<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>A1<span class=\"sy4\">,</span>A2<span class=\"sy4\">,</span>A3<span class=\"sy4\">,</span>A4<span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span>B1<span class=\"sy4\">,</span>B2<span class=\"sy4\">,</span>B3<span class=\"sy4\">,</span>B4<span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span>C1<span class=\"sy4\">,</span>C2<span class=\"sy4\">,</span>C3<span class=\"sy4\">,</span>C4<span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span>D1<span class=\"sy4\">,</span>D2<span class=\"sy4\">,</span>D3<span class=\"sy4\">,</span>D4<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% remove all the spaces, then put them at the front of the list</span><br/>combine_row<span class=\"br0\">(</span>UnMoved<span class=\"sy4\">,</span> Moved<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tpartition<span class=\"br0\">(</span><span class=\"sy6\">=</span><span class=\"br0\">(</span><span class=\"st_h\">' '</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> UnMoved<span class=\"sy4\">,</span> Blank<span class=\"sy4\">,</span> Set<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tappend<span class=\"br0\">(</span>Blank<span class=\"sy4\">,</span> Set<span class=\"sy4\">,</span> ReadyToMove<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tcombine<span class=\"br0\">(</span>ReadyToMove<span class=\"sy4\">,</span> Moved<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% combine based on the rules of the game.</span><br/>combine<span class=\"br0\">(</span><span class=\"br0\">[</span>A<span class=\"sy4\">,</span>B<span class=\"sy4\">,</span>C<span class=\"sy4\">,</span>D<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>A<span class=\"sy4\">,</span>B<span class=\"sy4\">,</span>C<span class=\"sy4\">,</span>D<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span> dif<span class=\"br0\">(</span>A<span class=\"sy4\">,</span>B<span class=\"br0\">)</span><span class=\"sy4\">,</span> dif<span class=\"br0\">(</span>B<span class=\"sy4\">,</span>C<span class=\"br0\">)</span><span class=\"sy4\">,</span> dif<span class=\"br0\">(</span>C<span class=\"sy4\">,</span>D<span class=\"br0\">)</span><span class=\"sy4\">.</span>\t<br/>combine<span class=\"br0\">(</span><span class=\"br0\">[</span>A<span class=\"sy4\">,</span>A<span class=\"sy4\">,</span>B<span class=\"sy4\">,</span>B<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"st_h\">' '</span><span class=\"sy4\">,</span><span class=\"st_h\">' '</span><span class=\"sy4\">,</span>Ad<span class=\"sy4\">,</span>Bd<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span> dbl<span class=\"br0\">(</span>A<span class=\"sy4\">,</span>Ad<span class=\"br0\">)</span><span class=\"sy4\">,</span> dbl<span class=\"br0\">(</span>B<span class=\"sy4\">,</span>Bd<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>combine<span class=\"br0\">(</span><span class=\"br0\">[</span>A<span class=\"sy4\">,</span>B<span class=\"sy4\">,</span>C<span class=\"sy4\">,</span>C<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"st_h\">' '</span><span class=\"sy4\">,</span>A<span class=\"sy4\">,</span>B<span class=\"sy4\">,</span>Cd<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span> dif<span class=\"br0\">(</span>A<span class=\"sy4\">,</span>B<span class=\"br0\">)</span><span class=\"sy4\">,</span> dbl<span class=\"br0\">(</span>C<span class=\"sy4\">,</span>Cd<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>combine<span class=\"br0\">(</span><span class=\"br0\">[</span>A<span class=\"sy4\">,</span>B<span class=\"sy4\">,</span>B<span class=\"sy4\">,</span>C<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"st_h\">' '</span><span class=\"sy4\">,</span>A<span class=\"sy4\">,</span>Bd<span class=\"sy4\">,</span>C<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span>\tdif<span class=\"br0\">(</span>B<span class=\"sy4\">,</span>C<span class=\"br0\">)</span><span class=\"sy4\">,</span> dbl<span class=\"br0\">(</span>B<span class=\"sy4\">,</span>Bd<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>combine<span class=\"br0\">(</span><span class=\"br0\">[</span>A<span class=\"sy4\">,</span>A<span class=\"sy4\">,</span>B<span class=\"sy4\">,</span>C<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"st_h\">' '</span><span class=\"sy4\">,</span>Ad<span class=\"sy4\">,</span>B<span class=\"sy4\">,</span>C<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span> dif<span class=\"br0\">(</span>A<span class=\"sy4\">,</span>B<span class=\"br0\">)</span><span class=\"sy4\">,</span> dif<span class=\"br0\">(</span>B<span class=\"sy4\">,</span>C<span class=\"br0\">)</span><span class=\"sy4\">,</span> dbl<span class=\"br0\">(</span>A<span class=\"sy4\">,</span> Ad<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>combine<span class=\"br0\">(</span><span class=\"br0\">[</span>A<span class=\"sy4\">,</span>B<span class=\"sy4\">,</span>C<span class=\"sy4\">,</span>C<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"st_h\">' '</span><span class=\"sy4\">,</span>A<span class=\"sy4\">,</span>B<span class=\"sy4\">,</span>Cd<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span> dif<span class=\"br0\">(</span>A<span class=\"sy4\">,</span>B<span class=\"br0\">)</span><span class=\"sy4\">,</span> dif<span class=\"br0\">(</span>B<span class=\"sy4\">,</span>C<span class=\"br0\">)</span><span class=\"sy4\">,</span> dbl<span class=\"br0\">(</span>C<span class=\"sy4\">,</span>Cd<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% this could be done using maths, but it is more prology this way.</span><br/>dbl<span class=\"br0\">(</span><span class=\"st_h\">' '</span><span class=\"sy4\">,</span> <span class=\"st_h\">' '</span><span class=\"br0\">)</span><span class=\"sy4\">.</span> <br/>dbl<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy4\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy4\">.</span> dbl<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy4\">,</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy4\">.</span> dbl<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"sy4\">,</span><span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy4\">.</span> dbl<span class=\"br0\">(</span><span class=\"nu0\">16</span><span class=\"sy4\">,</span><span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"sy4\">.</span> dbl<span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"sy4\">,</span><span class=\"nu0\">64</span><span class=\"br0\">)</span><span class=\"sy4\">.</span> dbl<span class=\"br0\">(</span><span class=\"nu0\">64</span><span class=\"sy4\">,</span><span class=\"nu0\">128</span><span class=\"br0\">)</span><span class=\"sy4\">.</span> dbl<span class=\"br0\">(</span><span class=\"nu0\">128</span><span class=\"sy4\">,</span><span class=\"nu0\">256</span><span class=\"br0\">)</span><span class=\"sy4\">.</span> dbl<span class=\"br0\">(</span><span class=\"nu0\">256</span><span class=\"sy4\">,</span><span class=\"nu0\">512</span><span class=\"br0\">)</span><span class=\"sy4\">.</span> dbl<span class=\"br0\">(</span><span class=\"nu0\">512</span><span class=\"sy4\">,</span><span class=\"nu0\">1028</span><span class=\"br0\">)</span><span class=\"sy4\">.</span> dbl<span class=\"br0\">(</span><span class=\"nu0\">1028</span><span class=\"sy4\">,</span><span class=\"nu0\">2048</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 203, "block": "<pre class=\"python highlighted_source\">\u00a0<br/><span class=\"co1\">#!/usr/bin/env python3</span><br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"kw3\">curses</span><br/><span class=\"kw1\">from</span> <span class=\"kw3\">random</span> <span class=\"kw1\">import</span> randrange<span class=\"sy0\">,</span> choice <span class=\"co1\"># generate and place new tile</span><br/><span class=\"kw1\">from</span> <span class=\"kw3\">collections</span> <span class=\"kw1\">import</span> defaultdict<br/>\u00a0<br/>letter_codes <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw2\">ord</span><span class=\"br0\">(</span>ch<span class=\"br0\">)</span> <span class=\"kw1\">for</span> ch <span class=\"kw1\">in</span> <span class=\"st0\">'WASDRQwasdrq'</span><span class=\"br0\">]</span><br/>actions <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">'Up'</span><span class=\"sy0\">,</span> <span class=\"st0\">'Left'</span><span class=\"sy0\">,</span> <span class=\"st0\">'Down'</span><span class=\"sy0\">,</span> <span class=\"st0\">'Right'</span><span class=\"sy0\">,</span> <span class=\"st0\">'Restart'</span><span class=\"sy0\">,</span> <span class=\"st0\">'Exit'</span><span class=\"br0\">]</span><br/>actions_dict <span class=\"sy0\">=</span> <span class=\"kw2\">dict</span><span class=\"br0\">(</span><span class=\"kw2\">zip</span><span class=\"br0\">(</span>letter_codes<span class=\"sy0\">,</span> actions * <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> get_user_action<span class=\"br0\">(</span>keyboard<span class=\"br0\">)</span>:    <br/>\tchar <span class=\"sy0\">=</span> <span class=\"st0\">\"N\"</span><br/>\t<span class=\"kw1\">while</span> char <span class=\"kw1\">not</span> <span class=\"kw1\">in</span> actions_dict:    <br/>\t\tchar <span class=\"sy0\">=</span> keyboard.<span class=\"me1\">getch</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">return</span> actions_dict<span class=\"br0\">[</span>char<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">def</span> transpose<span class=\"br0\">(</span>field<span class=\"br0\">)</span>:<br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span><span class=\"br0\">(</span>row<span class=\"br0\">)</span> <span class=\"kw1\">for</span> row <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>*field<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">def</span> invert<span class=\"br0\">(</span>field<span class=\"br0\">)</span>:<br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">[</span>row<span class=\"br0\">[</span>::-<span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> row <span class=\"kw1\">in</span> field<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">class</span> GameField<span class=\"br0\">(</span><span class=\"kw2\">object</span><span class=\"br0\">)</span>:<br/>\t<span class=\"kw1\">def</span> <span class=\"kw4\">__init__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"sy0\">,</span> height<span class=\"sy0\">=</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> width<span class=\"sy0\">=</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> win<span class=\"sy0\">=</span><span class=\"nu0\">2048</span><span class=\"br0\">)</span>:<br/>\t\t<span class=\"kw2\">self</span>.<span class=\"me1\">height</span> <span class=\"sy0\">=</span> height<br/>\t\t<span class=\"kw2\">self</span>.<span class=\"me1\">width</span> <span class=\"sy0\">=</span> width<br/>\t\t<span class=\"kw2\">self</span>.<span class=\"me1\">win_value</span> <span class=\"sy0\">=</span> win<br/>\t\t<span class=\"kw2\">self</span>.<span class=\"me1\">score</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw2\">self</span>.<span class=\"me1\">highscore</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw2\">self</span>.<span class=\"me1\">reset</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t<span class=\"kw1\">def</span> reset<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>\t\t<span class=\"kw1\">if</span> <span class=\"kw2\">self</span>.<span class=\"me1\">score</span> <span class=\"sy0\">&gt;</span> <span class=\"kw2\">self</span>.<span class=\"me1\">highscore</span>:<br/>\t\t\t<span class=\"kw2\">self</span>.<span class=\"me1\">highscore</span> <span class=\"sy0\">=</span> <span class=\"kw2\">self</span>.<span class=\"me1\">score</span><br/>\t\t<span class=\"kw2\">self</span>.<span class=\"me1\">score</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw2\">self</span>.<span class=\"me1\">field</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"kw2\">self</span>.<span class=\"me1\">width</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"kw2\">self</span>.<span class=\"me1\">height</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\t\t<span class=\"kw2\">self</span>.<span class=\"me1\">spawn</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">self</span>.<span class=\"me1\">spawn</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t<span class=\"kw1\">def</span> move<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"sy0\">,</span> direction<span class=\"br0\">)</span>:<br/>\t\t<span class=\"kw1\">def</span> move_row_left<span class=\"br0\">(</span>row<span class=\"br0\">)</span>:<br/>\t\t\t<span class=\"kw1\">def</span> tighten<span class=\"br0\">(</span>row<span class=\"br0\">)</span>: <span class=\"co1\"># squeese non-zero elements together</span><br/>\t\t\t\tnew_row <span class=\"sy0\">=</span> <span class=\"br0\">[</span>i <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> row <span class=\"kw1\">if</span> i <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>\t\t\t\tnew_row +<span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>row<span class=\"br0\">)</span> - <span class=\"kw2\">len</span><span class=\"br0\">(</span>new_row<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\t\t\t\t<span class=\"kw1\">return</span> new_row<br/>\u00a0<br/>\t\t\t<span class=\"kw1\">def</span> merge<span class=\"br0\">(</span>row<span class=\"br0\">)</span>:<br/>\t\t\t\tpair <span class=\"sy0\">=</span> <span class=\"kw2\">False</span><br/>\t\t\t\tnew_row <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\t\t\t\t<span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>row<span class=\"br0\">)</span><span class=\"br0\">)</span>:<br/>\t\t\t\t\t<span class=\"kw1\">if</span> pair:<br/>\t\t\t\t\t\tnew_row.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"nu0\">2</span> * row<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t\t\t\t<span class=\"kw2\">self</span>.<span class=\"me1\">score</span> +<span class=\"sy0\">=</span> <span class=\"nu0\">2</span> * row<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>\t\t\t\t\t\tpair <span class=\"sy0\">=</span> <span class=\"kw2\">False</span><br/>\t\t\t\t\t<span class=\"kw1\">else</span>:<br/>\t\t\t\t\t\t<span class=\"kw1\">if</span> i + <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>row<span class=\"br0\">)</span> <span class=\"kw1\">and</span> row<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> row<span class=\"br0\">[</span>i + <span class=\"nu0\">1</span><span class=\"br0\">]</span>:<br/>\t\t\t\t\t\t\tpair <span class=\"sy0\">=</span> <span class=\"kw2\">True</span><br/>\t\t\t\t\t\t\tnew_row.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t\t\t\t\t<span class=\"kw1\">else</span>:<br/>\t\t\t\t\t\t\tnew_row.<span class=\"me1\">append</span><span class=\"br0\">(</span>row<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">assert</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>new_row<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>row<span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">return</span> new_row<br/>\t\t\t<span class=\"kw1\">return</span> tighten<span class=\"br0\">(</span>merge<span class=\"br0\">(</span>tighten<span class=\"br0\">(</span>row<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t\tmoves <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t\tmoves<span class=\"br0\">[</span><span class=\"st0\">'Left'</span><span class=\"br0\">]</span>  <span class=\"sy0\">=</span> <span class=\"kw1\">lambda</span> field:\t\t\t\t\t\t\t\t\\<br/>\t\t\t\t<span class=\"br0\">[</span>move_row_left<span class=\"br0\">(</span>row<span class=\"br0\">)</span> <span class=\"kw1\">for</span> row <span class=\"kw1\">in</span> field<span class=\"br0\">]</span><br/>\t\tmoves<span class=\"br0\">[</span><span class=\"st0\">'Right'</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">lambda</span> field:\t\t\t\t\t\t\t\t\\<br/>\t\t\t\tinvert<span class=\"br0\">(</span>moves<span class=\"br0\">[</span><span class=\"st0\">'Left'</span><span class=\"br0\">]</span><span class=\"br0\">(</span>invert<span class=\"br0\">(</span>field<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\tmoves<span class=\"br0\">[</span><span class=\"st0\">'Up'</span><span class=\"br0\">]</span>    <span class=\"sy0\">=</span> <span class=\"kw1\">lambda</span> field:\t\t\t\t\t\t\t\t\\<br/>\t\t\t\ttranspose<span class=\"br0\">(</span>moves<span class=\"br0\">[</span><span class=\"st0\">'Left'</span><span class=\"br0\">]</span><span class=\"br0\">(</span>transpose<span class=\"br0\">(</span>field<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\tmoves<span class=\"br0\">[</span><span class=\"st0\">'Down'</span><span class=\"br0\">]</span>  <span class=\"sy0\">=</span> <span class=\"kw1\">lambda</span> field:\t\t\t\t\t\t\t\t\\<br/>\t\t\t\ttranspose<span class=\"br0\">(</span>moves<span class=\"br0\">[</span><span class=\"st0\">'Right'</span><span class=\"br0\">]</span><span class=\"br0\">(</span>transpose<span class=\"br0\">(</span>field<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span> direction <span class=\"kw1\">in</span> moves:<br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"kw2\">self</span>.<span class=\"me1\">move_is_possible</span><span class=\"br0\">(</span>direction<span class=\"br0\">)</span>:<br/>\t\t\t\t<span class=\"kw2\">self</span>.<span class=\"me1\">field</span> <span class=\"sy0\">=</span> moves<span class=\"br0\">[</span>direction<span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"kw2\">self</span>.<span class=\"me1\">field</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw2\">self</span>.<span class=\"me1\">spawn</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">True</span><br/>\t\t\t<span class=\"kw1\">else</span>:<br/>\t\t\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">False</span><br/>\u00a0<br/>\t<span class=\"kw1\">def</span> is_win<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">any</span><span class=\"br0\">(</span><span class=\"kw2\">any</span><span class=\"br0\">(</span>i <span class=\"sy0\">&gt;=</span> <span class=\"kw2\">self</span>.<span class=\"me1\">win_value</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> row<span class=\"br0\">)</span> <span class=\"kw1\">for</span> row <span class=\"kw1\">in</span> <span class=\"kw2\">self</span>.<span class=\"me1\">field</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t<span class=\"kw1\">def</span> is_gameover<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>\t\t<span class=\"kw1\">return</span> <span class=\"kw1\">not</span> <span class=\"kw2\">any</span><span class=\"br0\">(</span><span class=\"kw2\">self</span>.<span class=\"me1\">move_is_possible</span><span class=\"br0\">(</span>move<span class=\"br0\">)</span> <span class=\"kw1\">for</span> move <span class=\"kw1\">in</span> actions<span class=\"br0\">)</span><br/>\u00a0<br/>\t<span class=\"kw1\">def</span> draw<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"sy0\">,</span> screen<span class=\"br0\">)</span>:<br/>\t\thelp_string1 <span class=\"sy0\">=</span> <span class=\"st0\">'(W)Up (S)Down (A)Left (D)Right'</span><br/>\t\thelp_string2 <span class=\"sy0\">=</span> <span class=\"st0\">'     (R)Restart (Q)Exit'</span><br/>\t\tgameover_string <span class=\"sy0\">=</span> <span class=\"st0\">'           GAME OVER'</span><br/>\t\twin_string <span class=\"sy0\">=</span> <span class=\"st0\">'          YOU WIN!'</span><br/>\t\t<span class=\"kw1\">def</span> cast<span class=\"br0\">(</span><span class=\"kw3\">string</span><span class=\"br0\">)</span>:<br/>\t\t\tscreen.<span class=\"me1\">addstr</span><span class=\"br0\">(</span><span class=\"kw3\">string</span> + <span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">def</span> draw_hor_separator<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>\t\t\ttop <span class=\"sy0\">=</span> <span class=\"st0\">'\u250c'</span> + <span class=\"br0\">(</span><span class=\"st0\">'\u252c\u2500\u2500\u2500\u2500\u2500\u2500'</span> * <span class=\"kw2\">self</span>.<span class=\"me1\">width</span> + <span class=\"st0\">'\u2510'</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"br0\">]</span><br/>\t\t\tmid <span class=\"sy0\">=</span> <span class=\"st0\">'\u251c'</span> + <span class=\"br0\">(</span><span class=\"st0\">'\u253c\u2500\u2500\u2500\u2500\u2500\u2500'</span> * <span class=\"kw2\">self</span>.<span class=\"me1\">width</span> + <span class=\"st0\">'\u2524'</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"br0\">]</span><br/>\t\t\tbot <span class=\"sy0\">=</span> <span class=\"st0\">'\u2514'</span> + <span class=\"br0\">(</span><span class=\"st0\">'\u2534\u2500\u2500\u2500\u2500\u2500\u2500'</span> * <span class=\"kw2\">self</span>.<span class=\"me1\">width</span> + <span class=\"st0\">'\u2518'</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"br0\">]</span><br/>\t\t\tseparator <span class=\"sy0\">=</span> defaultdict<span class=\"br0\">(</span><span class=\"kw1\">lambda</span>: mid<span class=\"br0\">)</span><br/>\t\t\tseparator<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> separator<span class=\"br0\">[</span><span class=\"kw2\">self</span>.<span class=\"me1\">height</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> top<span class=\"sy0\">,</span> bot<br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"kw1\">not</span> <span class=\"kw2\">hasattr</span><span class=\"br0\">(</span>draw_hor_separator<span class=\"sy0\">,</span> <span class=\"st0\">\"counter\"</span><span class=\"br0\">)</span>:<br/>\t\t\t\tdraw_hor_separator.<span class=\"me1\">counter</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t\t\tcast<span class=\"br0\">(</span>separator<span class=\"br0\">[</span>draw_hor_separator.<span class=\"me1\">counter</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\tdraw_hor_separator.<span class=\"me1\">counter</span> +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">def</span> draw_row<span class=\"br0\">(</span>row<span class=\"br0\">)</span>:<br/>\t\t\tcast<span class=\"br0\">(</span><span class=\"st0\">''</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'\u2502{: ^5} '</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>num<span class=\"br0\">)</span> <span class=\"kw1\">if</span> num <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">else</span> <span class=\"st0\">'|      '</span> <span class=\"kw1\">for</span> num <span class=\"kw1\">in</span> row<span class=\"br0\">)</span> + <span class=\"st0\">'\u2502'</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t\tscreen.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\tcast<span class=\"br0\">(</span><span class=\"st0\">'SCORE: '</span> + <span class=\"kw2\">str</span><span class=\"br0\">(</span><span class=\"kw2\">self</span>.<span class=\"me1\">score</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"nu0\">0</span> <span class=\"sy0\">!=</span> <span class=\"kw2\">self</span>.<span class=\"me1\">highscore</span>:<br/>\t\t\tcast<span class=\"br0\">(</span><span class=\"st0\">'HGHSCORE: '</span> + <span class=\"kw2\">str</span><span class=\"br0\">(</span><span class=\"kw2\">self</span>.<span class=\"me1\">highscore</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">for</span> row <span class=\"kw1\">in</span> <span class=\"kw2\">self</span>.<span class=\"me1\">field</span>:<br/>\t\t\tdraw_hor_separator<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t\tdraw_row<span class=\"br0\">(</span>row<span class=\"br0\">)</span><br/>\t\tdraw_hor_separator<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"kw2\">self</span>.<span class=\"me1\">is_win</span><span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>\t\t\tcast<span class=\"br0\">(</span>win_string<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">else</span>:<br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"kw2\">self</span>.<span class=\"me1\">is_gameover</span><span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>\t\t\t\tcast<span class=\"br0\">(</span>gameover_string<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">else</span>:<br/>\t\t\t\tcast<span class=\"br0\">(</span>help_string1<span class=\"br0\">)</span><br/>\t\tcast<span class=\"br0\">(</span>help_string2<span class=\"br0\">)</span><br/>\u00a0<br/>\t<span class=\"kw1\">def</span> spawn<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>\t\tnew_element <span class=\"sy0\">=</span> <span class=\"nu0\">4</span> <span class=\"kw1\">if</span> randrange<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">89</span> <span class=\"kw1\">else</span> <span class=\"nu0\">2</span><br/>\t\t<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> choice<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"kw2\">self</span>.<span class=\"me1\">width</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"kw2\">self</span>.<span class=\"me1\">height</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"kw2\">self</span>.<span class=\"me1\">field</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">self</span>.<span class=\"me1\">field</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> new_element<br/>\u00a0<br/>\t<span class=\"kw1\">def</span> move_is_possible<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"sy0\">,</span> direction<span class=\"br0\">)</span>:<br/>\t\t<span class=\"kw1\">def</span> row_is_left_movable<span class=\"br0\">(</span>row<span class=\"br0\">)</span>: <br/>\t\t\t<span class=\"kw1\">def</span> change<span class=\"br0\">(</span>i<span class=\"br0\">)</span>: <span class=\"co1\"># true if there'll be change in i-th tile</span><br/>\t\t\t\t<span class=\"kw1\">if</span> row<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">and</span> row<span class=\"br0\">[</span>i + <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span>: <span class=\"co1\"># Move</span><br/>\t\t\t\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">True</span><br/>\t\t\t\t<span class=\"kw1\">if</span> row<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">and</span> row<span class=\"br0\">[</span>i + <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> row<span class=\"br0\">[</span>i<span class=\"br0\">]</span>: <span class=\"co1\"># Merge</span><br/>\t\t\t\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">True</span><br/>\t\t\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">False</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">any</span><span class=\"br0\">(</span>change<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>row<span class=\"br0\">)</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t\tcheck <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t\tcheck<span class=\"br0\">[</span><span class=\"st0\">'Left'</span><span class=\"br0\">]</span>  <span class=\"sy0\">=</span> <span class=\"kw1\">lambda</span> field:\t\t\t\t\t\t\t\t\\<br/>\t\t\t\t<span class=\"kw2\">any</span><span class=\"br0\">(</span>row_is_left_movable<span class=\"br0\">(</span>row<span class=\"br0\">)</span> <span class=\"kw1\">for</span> row <span class=\"kw1\">in</span> field<span class=\"br0\">)</span><br/>\u00a0<br/>\t\tcheck<span class=\"br0\">[</span><span class=\"st0\">'Right'</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">lambda</span> field:\t\t\t\t\t\t\t\t\\<br/>\t\t\t\t check<span class=\"br0\">[</span><span class=\"st0\">'Left'</span><span class=\"br0\">]</span><span class=\"br0\">(</span>invert<span class=\"br0\">(</span>field<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t\tcheck<span class=\"br0\">[</span><span class=\"st0\">'Up'</span><span class=\"br0\">]</span>    <span class=\"sy0\">=</span> <span class=\"kw1\">lambda</span> field:\t\t\t\t\t\t\t\t\\<br/>\t\t\t\tcheck<span class=\"br0\">[</span><span class=\"st0\">'Left'</span><span class=\"br0\">]</span><span class=\"br0\">(</span>transpose<span class=\"br0\">(</span>field<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t\tcheck<span class=\"br0\">[</span><span class=\"st0\">'Down'</span><span class=\"br0\">]</span>  <span class=\"sy0\">=</span> <span class=\"kw1\">lambda</span> field:\t\t\t\t\t\t\t\t\\<br/>\t\t\t\tcheck<span class=\"br0\">[</span><span class=\"st0\">'Right'</span><span class=\"br0\">]</span><span class=\"br0\">(</span>transpose<span class=\"br0\">(</span>field<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span> direction <span class=\"kw1\">in</span> check:<br/>\t\t\t<span class=\"kw1\">return</span> check<span class=\"br0\">[</span>direction<span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"kw2\">self</span>.<span class=\"me1\">field</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">else</span>:<br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">False</span><br/>\u00a0<br/><span class=\"kw1\">def</span> main<span class=\"br0\">(</span>stdscr<span class=\"br0\">)</span>:<br/>\t<span class=\"kw3\">curses</span>.<span class=\"me1\">use_default_colors</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\tgame_field <span class=\"sy0\">=</span> GameField<span class=\"br0\">(</span>win<span class=\"sy0\">=</span><span class=\"nu0\">32</span><span class=\"br0\">)</span><br/>\tstate_actions <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"co1\"># Init, Game, Win, Gameover, Exit</span><br/>\t<span class=\"kw1\">def</span> init<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>\t\tgame_field.<span class=\"me1\">reset</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"st0\">'Game'</span><br/>\u00a0<br/>\tstate_actions<span class=\"br0\">[</span><span class=\"st0\">'Init'</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> init<br/>\u00a0<br/>\t<span class=\"kw1\">def</span> not_game<span class=\"br0\">(</span>state<span class=\"br0\">)</span>:<br/>\t\tgame_field.<span class=\"me1\">draw</span><span class=\"br0\">(</span>stdscr<span class=\"br0\">)</span><br/>\t\taction <span class=\"sy0\">=</span> get_user_action<span class=\"br0\">(</span>stdscr<span class=\"br0\">)</span><br/>\t\tresponses <span class=\"sy0\">=</span> defaultdict<span class=\"br0\">(</span><span class=\"kw1\">lambda</span>: state<span class=\"br0\">)</span><br/>\t\tresponses<span class=\"br0\">[</span><span class=\"st0\">'Restart'</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> responses<span class=\"br0\">[</span><span class=\"st0\">'Exit'</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'Init'</span><span class=\"sy0\">,</span> <span class=\"st0\">'Exit'</span><br/>\t\t<span class=\"kw1\">return</span> responses<span class=\"br0\">[</span>action<span class=\"br0\">]</span><br/>\u00a0<br/>\tstate_actions<span class=\"br0\">[</span><span class=\"st0\">'Win'</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">lambda</span>: not_game<span class=\"br0\">(</span><span class=\"st0\">'Win'</span><span class=\"br0\">)</span><br/>\tstate_actions<span class=\"br0\">[</span><span class=\"st0\">'Gameover'</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">lambda</span>: not_game<span class=\"br0\">(</span><span class=\"st0\">'Gameover'</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t<span class=\"kw1\">def</span> game<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>\t\tgame_field.<span class=\"me1\">draw</span><span class=\"br0\">(</span>stdscr<span class=\"br0\">)</span><br/>\t\taction <span class=\"sy0\">=</span> get_user_action<span class=\"br0\">(</span>stdscr<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span> action <span class=\"sy0\">==</span> <span class=\"st0\">'Restart'</span>:<br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"st0\">'Init'</span><br/>\t\t<span class=\"kw1\">if</span> action <span class=\"sy0\">==</span> <span class=\"st0\">'Exit'</span>:<br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"st0\">'Exit'</span><br/>\t\t<span class=\"kw1\">if</span> game_field.<span class=\"me1\">move</span><span class=\"br0\">(</span>action<span class=\"br0\">)</span>: <span class=\"co1\"># move successful</span><br/>\t\t\t<span class=\"kw1\">if</span> game_field.<span class=\"me1\">is_win</span><span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>\t\t\t\t<span class=\"kw1\">return</span> <span class=\"st0\">'Win'</span><br/>\t\t\t<span class=\"kw1\">if</span> game_field.<span class=\"me1\">is_gameover</span><span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>\t\t\t\t<span class=\"kw1\">return</span> <span class=\"st0\">'Gameover'</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"st0\">'Game'</span><br/>\u00a0<br/>\tstate_actions<span class=\"br0\">[</span><span class=\"st0\">'Game'</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> game<br/>\u00a0<br/>\tstate <span class=\"sy0\">=</span> <span class=\"st0\">'Init'</span><br/>\t<span class=\"kw1\">while</span> state <span class=\"sy0\">!=</span> <span class=\"st0\">'Exit'</span>:<br/>\t\tstate <span class=\"sy0\">=</span> state_actions<span class=\"br0\">[</span>state<span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">curses</span>.<span class=\"me1\">wrapper</span><span class=\"br0\">(</span>main<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "QB64", "loc": 289, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>_DEFINE A-Z AS _INTEGER64<br/>DIM SHARED Grid(0 TO 5, 0 TO 5) AS INTEGER<br/>CONST Left = 19200<br/>CONST Right = 19712<br/>CONST Down = 20480<br/>CONST Up = 18432<br/>CONST ESC = 27<br/>CONST LCtrl = 100306<br/>CONST RCtrl = 100305<br/>\u00a0<br/>Init<br/>MakeNewGame<br/>DO<br/>    _LIMIT 30<br/>    ShowGrid<br/>    CheckInput flag<br/>    IF flag THEN GetNextNumber<br/>    _DISPLAY<br/>LOOP<br/>\u00a0<br/>SUB CheckInput (flag)<br/>flag = 0<br/>k = _KEYHIT<br/>SELECT CASE k<br/>    CASE ESC: SYSTEM<br/>    CASE 83, 115 'S<br/>        IF _KEYDOWN(LCtrl) OR _KEYDOWN(RCtrl) THEN MakeNewGame<br/>    CASE Left<br/>        MoveLeft<br/>        flag = -1 'we hit a valid move key.  Even if we don't move, get a new number<br/>    CASE Up<br/>        MoveUp<br/>        flag = -1<br/>    CASE Down<br/>        MoveDown<br/>        flag = -1<br/>    CASE Right<br/>        MoveRight<br/>        flag = -1<br/>END SELECT<br/>END SUB<br/>\u00a0<br/>SUB MoveDown<br/>'first move everything left to cover the blank spaces<br/>DO<br/>    moved = 0<br/>    FOR y = 4 TO 1 STEP -1<br/>        FOR x = 1 TO 4<br/>            IF Grid(x, y) = 0 THEN 'every point above this moves down<br/>                FOR j = y TO 1 STEP -1<br/>                    Grid(x, j) = Grid(x, j - 1)<br/>                    IF Grid(x, j) &lt;&gt; 0 THEN moved = -1<br/>                NEXT<br/>            END IF<br/>        NEXT<br/>    NEXT<br/>    IF moved THEN y = y + 1 'recheck the same column<br/>LOOP UNTIL NOT moved<br/>FOR y = 4 TO 1 STEP -1<br/>    FOR x = 1 TO 4<br/>        IF Grid(x, y) &lt;&gt; 0 AND Grid(x, y) = Grid(x, y - 1) THEN 'add them together and every point above this moves<br/>            Grid(x, y) = Grid(x, y) * 2<br/>            FOR j = y - 1 TO 1<br/>                Grid(x, j) = Grid(x, j - 1)<br/>            NEXT<br/>        END IF<br/>    NEXT<br/>NEXT<br/>END SUB<br/>\u00a0<br/>SUB MoveLeft<br/>'first move everything to cover the blank spaces<br/>DO<br/>    moved = 0<br/>    FOR x = 1 TO 4<br/>        FOR y = 1 TO 4<br/>            IF Grid(x, y) = 0 THEN 'every point right of this moves left<br/>                FOR j = x TO 4<br/>                    Grid(j, y) = Grid(j + 1, y)<br/>                    IF Grid(j, y) &lt;&gt; 0 THEN moved = -1<br/>                NEXT<br/>            END IF<br/>        NEXT<br/>    NEXT<br/>    IF moved THEN x = x - 1 'recheck the same row<br/>LOOP UNTIL NOT moved<br/>FOR x = 1 TO 4<br/>    FOR y = 1 TO 4<br/>        IF Grid(x, y) &lt;&gt; 0 AND Grid(x, y) = Grid(x + 1, y) THEN 'add them together and every point right of this moves left<br/>            Grid(x, y) = Grid(x, y) * 2<br/>            FOR j = x + 1 TO 4<br/>                Grid(j, y) = Grid(j + 1, y)<br/>            NEXT<br/>        END IF<br/>    NEXT<br/>NEXT<br/>END SUB<br/>\u00a0<br/>SUB MoveUp<br/>'first move everything to cover the blank spaces<br/>DO<br/>    moved = 0<br/>    FOR y = 1 TO 4<br/>        FOR x = 1 TO 4<br/>            IF Grid(x, y) = 0 THEN 'every point below of this moves up<br/>                FOR j = y TO 4<br/>                    Grid(x, j) = Grid(x, j + 1)<br/>                    IF Grid(x, j) &lt;&gt; 0 THEN moved = -1<br/>                NEXT<br/>            END IF<br/>        NEXT<br/>    NEXT<br/>    IF moved THEN y = y - 1 'recheck the same column<br/>LOOP UNTIL NOT moved<br/>FOR y = 1 TO 4<br/>    FOR x = 1 TO 4<br/>        IF Grid(x, y) &lt;&gt; 0 AND Grid(x, y) = Grid(x, y + 1) THEN 'add them together and every point below this moves<br/>            Grid(x, y) = Grid(x, y) * 2<br/>            FOR j = y + 1 TO 4<br/>                Grid(x, j) = Grid(x, j + 1)<br/>            NEXT<br/>            Grid(x, 4) = 0<br/>        END IF<br/>    NEXT<br/>NEXT<br/>END SUB<br/>\u00a0<br/>SUB MoveRight<br/>'first move everything to cover the blank spaces<br/>DO<br/>    moved = 0<br/>    FOR x = 4 TO 1 STEP -1<br/>        FOR y = 1 TO 4<br/>            IF Grid(x, y) = 0 THEN 'every point right of this moves left<br/>                FOR j = x TO 1 STEP -1<br/>                    Grid(j, y) = Grid(j - 1, y)<br/>                    IF Grid(j, y) &lt;&gt; 0 THEN moved = -1<br/>                NEXT<br/>            END IF<br/>        NEXT<br/>    NEXT<br/>    IF moved THEN x = x - 1 'recheck the same row<br/>LOOP UNTIL NOT moved<br/>\u00a0<br/>FOR x = 4 TO 1 STEP -1<br/>    FOR y = 1 TO 4<br/>        IF Grid(x, y) &lt;&gt; 0 AND Grid(x, y) = Grid(x - 1, y) THEN 'add them together and every point right of this moves left<br/>            Grid(x, y) = Grid(x, y) * 2<br/>            FOR j = x - 1 TO 1 STEP -1<br/>                Grid(j, y) = Grid(j - 1, y)<br/>            NEXT<br/>        END IF<br/>    NEXT<br/>NEXT<br/>END SUB<br/>\u00a0<br/>SUB ShowGrid<br/>'SUB MakeBox (Mode AS INTEGER, x1 AS INTEGER, y1 AS INTEGER, x2 AS INTEGER, y2 AS INTEGER,<br/>'Caption AS STRING, FontColor AS _UNSIGNED LONG, FontBackground AS _UNSIGNED LONG,<br/>'BoxColor AS _UNSIGNED LONG, BoxHighLight AS _UNSIGNED LONG, XOffset AS INTEGER, YOffset AS INTEGER)<br/>w = 120<br/>h = 120<br/>FOR x = 1 TO 4<br/>    FOR y = 1 TO 4<br/>        t$ = LTRIM$(STR$(Grid(x, y)))<br/>        IF t$ = \"0\" THEN t$ = \"\"<br/>        MakeBox 4, (x - 1) * w, (y - 1) * h, w, h, t$, -1, 0, 0, -1, 0, 0<br/>    NEXT<br/>NEXT<br/>END SUB<br/>\u00a0<br/>SUB Init<br/>ws = _NEWIMAGE(480, 480, 32)<br/>SCREEN ws<br/>_DELAY 1<br/>_TITLE \"Double Up\"<br/>_SCREENMOVE _MIDDLE<br/>RANDOMIZE TIMER<br/>f&amp; = _LOADFONT(\"C:\\Windows\\Fonts\\courbd.ttf\", 32, \"MONOSPACE\")<br/>_FONT f&amp;<br/>\u00a0<br/>END SUB<br/>\u00a0<br/>SUB MakeNewGame<br/>FOR x = 1 TO 4<br/>    FOR y = 1 TO 4<br/>        Grid(x, y) = 0<br/>    NEXT<br/>NEXT<br/>GetNextNumber<br/>GetNextNumber<br/>END SUB<br/>\u00a0<br/>SUB GetNextNumber<br/>FOR x = 1 TO 4<br/>    FOR y = 1 TO 4<br/>        IF Grid(x, y) = 0 THEN valid = -1<br/>    NEXT<br/>NEXT<br/>IF valid THEN 'If all the grids are full, we can't add any more numbers<br/>    'This doesn't mean the game is over, as the player may be able to<br/>    DO<br/>        x = _CEIL(RND * 4)<br/>        y = _CEIL(RND * 4)<br/>    LOOP UNTIL Grid(x, y) = 0<br/>    Grid(x, y) = 2<br/>END IF<br/>END SUB<br/>\u00a0<br/>SUB MakeBox (Mode AS INTEGER, x1 AS INTEGER, y1 AS INTEGER, x2 AS INTEGER, y2 AS INTEGER, Caption AS STRING, FontColor AS _UNSIGNED LONG, FontBackground AS _UNSIGNED LONG, BoxColor AS _UNSIGNED LONG, BoxHighLight AS _UNSIGNED LONG, XOffset AS INTEGER, YOffset AS INTEGER)<br/>\u00a0<br/>'This is an upgrade version of my original Button routine.<br/>'It's more versitile (but complex) than the original.<br/>'Mode 0 (or any unsupported number) will tell the box to size itself from X1,Y1 to X2,Y2<br/>'Mode 1 will tell the box to autosize itself according to whatever text is placed within it.<br/>'Mode 2 will tell the box to use X2 and Y2 as relative coordinates and not absolute coordinates.<br/>'Mode 3 will tell the box to autocenter text with X2, Y2 being absolute coordinates.<br/>'Mode 4 will tell the box to autocenter text with X2, Y2 being relative coordinates.<br/>'Mode otherwise is unused, but available for expanded functionality.<br/>'X1 carries the X location of where we want to place our box on the screen.<br/>'Y2 carries the Y location of where we want to place our box on the screen.<br/>'X2 is the X boundry of our box on the screen, depending on our mode.<br/>'Y2 is the Y boundry of our box on the screen, depending on our mode.<br/>\u00a0<br/>'Caption is the text that we want our box to contain.<br/>\u00a0<br/>'FontColor is our font color for our caption<br/>'FontBackground is the font background color for our caption<br/>'NOTE: IF FONTCOLOR OR FONTBACKGROUND IS SET TO ZERO, THEY WILL **NOT** AFFECT THE COLOR BEHIND THEM.<br/>'This can be used to mimic the function of _KEEPBACKGROUND, _FILLBACKGROUND, or _ONLYBACKGROUND<br/>\u00a0<br/>'BoxColor is our box color<br/>'BoxHighlight is our box highligh colors<br/>'NOTE: SAME WITH BOXCOLOR AND BOXHIGHLIGHT.  IF SET TO ZERO, THEY WILL HAVE **NO** COLOR AT ALL TO THEM, AND WILL NOT AFFECT THE BACKGROUND OF ANYTHING BEHIND THEM.<br/>\u00a0<br/>'XOffset is used to offset our text # pixels from the X1 top.<br/>'YOffset is used to offset our text # pixels from the Y1 top.<br/>'These can be used to place our text wherever we want on our box.<br/>'But remember, if Mode = 3 or 4, the box will autocenter the text and ignore these parameters completely.<br/>\u00a0<br/>DIM BoxBlack AS _UNSIGNED LONG<br/>\u00a0<br/>dc&amp; = _DEFAULTCOLOR: bg&amp; = _BACKGROUNDCOLOR<br/>IF Black &lt;&gt; 0 THEN<br/>    'We have black either as a CONST or a SHARED color<br/>    BoxBlack = Black<br/>ELSE<br/>    'We need to define what Black is for our box.<br/>    BoxBlack = _RGB32(0, 0, 0)<br/>END IF<br/>\u00a0<br/>IF _FONTWIDTH &lt;&gt; 0 THEN cw = _FONTWIDTH * LEN(Caption) ELSE cw = _PRINTWIDTH(Caption)<br/>ch = _FONTHEIGHT<br/>\u00a0<br/>tx1 = x1: tx2 = x2: ty1 = y1: ty2 = y2<br/>SELECT CASE Mode<br/>    CASE 0<br/>        'We use the X2, Y2 coordinates provided as absolute coordinates<br/>    CASE 1<br/>        tx2 = tx1 + cw + 8<br/>        ty2 = ty1 + ch + 8<br/>        XOffset = 5: YOffset = 5<br/>    CASE 2<br/>        tx2 = tx1 + x2<br/>        ty2 = ty1 + y2<br/>    CASE 3<br/>        XOffset = (tx2 - tx1 - cw) \\ 2<br/>        YOffset = (ty2 - ty1 - ch) \\ 2<br/>    CASE 4<br/>        tx2 = tx1 + x2<br/>        ty2 = ty1 + y2<br/>        XOffset = (tx2 - tx1) \\ 2 - cw \\ 2<br/>        YOffset = (ty2 - ty1 - ch) \\ 2<br/>END SELECT<br/>LINE (tx1, ty1)-(tx2, ty2), BoxBlack, BF<br/>LINE (tx1 + 1, ty1 + 1)-(tx2 - 1, ty2 - 1), BoxHighLight, B<br/>LINE (tx1 + 2, ty1 + 2)-(tx2 - 2, ty2 - 2), BoxHighLight, B<br/>LINE (tx1 + 3, ty1 + 3)-(tx2 - 3, ty2 - 3), BoxBlack, B<br/>LINE (tx1, ty1)-(tx1 + 3, ty1 + 3), BoxBlack<br/>LINE (tx2, ty1)-(tx2 - 3, ty1 + 3), BoxBlack<br/>LINE (tx1, ty2)-(tx1 + 3, ty2 - 3), BoxBlack<br/>LINE (tx2, ty2)-(tx2 - 3, ty2 - 3), BoxBlack<br/>LINE (tx1 + 3, y1 + 3)-(tx2 - 3, ty2 - 3), BoxColor, BF<br/>COLOR FontColor, FontBackground<br/>_PRINTSTRING (tx1 + XOffset, ty1 + YOffset), Caption$<br/>COLOR dc&amp;, bg&amp;<br/>END SUB<br/>\u00a0</pre>"}, {"lang": "R", "loc": 165, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>GD &lt;- function(vec) {<br/>    c(vec[vec\u00a0!= 0], vec[vec == 0])<br/>}<br/>DG &lt;- function(vec) {<br/>    c(vec[vec == 0], vec[vec\u00a0!= 0])<br/>}<br/>\u00a0<br/>DG_ &lt;- function(vec, v = TRUE) {<br/>    if (v) <br/>        print(vec)<br/>    rev(GD_(rev(vec), v = FALSE))<br/>}<br/>\u00a0<br/>GD_ &lt;- function(vec, v = TRUE) {<br/>    if (v) {<br/>        print(vec)<br/>    }<br/>    vec2 &lt;- GD(vec)<br/>    # on cherche les 2 cote a cote<br/>    pos &lt;- which(vec2 == c(vec2[-1], 9999))<br/>    # put pas y avoir cons\u00e9cutif dans pos<br/>    pos[-1][which(abs(pos - c(pos[-1], 999)) == 1)]<br/>    av &lt;- which(c(0, c(pos[-1], 9) - pos) == 1)<br/>    if (length(av) &gt; 0) {<br/>        pos &lt;- pos[-av]<br/>    }<br/>    vec2[pos] &lt;- vec2[pos] + vec2[pos + 1]<br/>    vec2[pos + 1] &lt;- 0<br/>    GD(vec2)<br/>\u00a0<br/>}<br/>\u00a0<br/>H_ &lt;- function(base) {<br/>    apply(base, MARGIN = 2, FUN = GD_, v = FALSE)<br/>}<br/>B_ &lt;- function(base) {<br/>    apply(base, MARGIN = 2, FUN = DG_, v = FALSE)<br/>}<br/>G_ &lt;- function(base) {<br/>    t(apply(base, MARGIN = 1, FUN = GD_, v = FALSE))<br/>}<br/>D_ &lt;- function(base) {<br/>    t(apply(base, MARGIN = 1, FUN = DG_, v = FALSE))<br/>}<br/>\u00a0<br/>H &lt;- function(base) {<br/>    apply(base, MARGIN = 2, FUN = GD, v = FALSE)<br/>}<br/>B &lt;- function(base) {<br/>    apply(base, MARGIN = 2, FUN = DG, v = FALSE)<br/>}<br/>G &lt;- function(base) {<br/>    t(apply(base, MARGIN = 1, FUN = GD, v = FALSE))<br/>}<br/>D &lt;- function(base) {<br/>    t(apply(base, MARGIN = 1, FUN = DG, v = FALSE))<br/>}<br/>\u00a0<br/>add2or4 &lt;- function(base, p = 0.9) {<br/>    lw &lt;- which(base == 0)<br/>    if (length(lw) &gt; 1) {<br/>        tirage &lt;- sample(lw, 1)<br/>    } else {<br/>        tirage &lt;- lw<br/>    }<br/>    base[tirage] &lt;- sample(c(2, 4), 1, prob = c(p, 1 - p))<br/>    base<br/>}<br/>print.dqh &lt;- function(base) {<br/>    cat(\"\\n\\n\")<br/>    for (i in 1:nrow(base)) {<br/>        cat(paste(\"     \", base[i, ], \" \"))<br/>        cat(\"\\n\")<br/>    }<br/>    cat(\"\\n\")<br/>}<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/># -*- coding: utf-8 -*-<br/>#' @encoding UTF-8<br/>#' @title run_2048<br/>#' @description The 2048 game<br/>#' @param nrow nomber of row<br/>#' @param ncol numver of col<br/>#' @param p probability to obtain a 2 (1-p) is the probability to obtain a 4<br/>#' @examples<br/>#' \\dontrun{<br/>#' run_2048()<br/>#' }<br/>#' @export<br/>\u00a0<br/>\u00a0<br/>run_2048 &lt;- function(nrow, ncol, p = 0.9) {<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>    help &lt;- function() {<br/>        cat(\"   *** KEY BINDING ***  \\n\\n\")<br/>        cat(\"press ECHAP to quit\\n\\n\")<br/>        cat(\"choose moove E (up)\u00a0; D (down)\u00a0; S (left); F (right) \\n\")<br/>        cat(\"choose moove 8 (up)\u00a0; 2 (down)\u00a0; 4 (left); 6 (right) \\n\")<br/>        cat(\"choose moove I (up)\u00a0; K (down)\u00a0; J (left); L (right) \\n\\n\\n\")<br/>\u00a0<br/>    }<br/>\u00a0<br/>\u00a0<br/>    if (missing(nrow) &amp; missing(ncol)) {<br/>        nrow &lt;- ncol &lt;- 4<br/>    }<br/>    if (missing(nrow)) {<br/>        nrow &lt;- ncol<br/>    }<br/>    if (missing(ncol)) {<br/>        ncol &lt;- nrow<br/>    }<br/>\u00a0<br/>    base &lt;- matrix(0, nrow = nrow, ncol = ncol)<br/>\u00a0<br/>    while (length(which(base == 2048)) == 0) {<br/>        base &lt;- add2or4(base, p = p)<br/>        # print(base)<br/>\u00a0<br/>        class(base) &lt;- \"dqh\"<br/>        print(base)<br/>        flag &lt;- sum((base == rbind(base[-1, ], 0)) + (base == rbind(0, <br/>            base[-nrow(base), ])) + (base == cbind(base[, -1], 0)) + (base == <br/>            cbind(0, base[, -nrow(base)])))<br/>        if (flag == 0) {<br/>\u00a0<br/>            break<br/>        }<br/>\u00a0<br/>        y &lt;- character(0)<br/>        while (length(y) == 0) {<br/>            cat(\"\\n\", \"choose moove E (up)\u00a0; D (down)\u00a0; s (left); f (right) OR H for help\", <br/>                \"\\n\")  # prompt<br/>            y &lt;- scan(n = 1, what = \"character\")<br/>        }<br/>\u00a0<br/>\u00a0<br/>        baseSAVE &lt;- base<br/>        base &lt;- switch(EXPR = y, E = H_(base), D = B_(base), S = G_(base), <br/>            F = D_(base), e = H_(base), d = B_(base), s = G_(base), f = D_(base), <br/>            `8` = H_(base), `2` = B_(base), `4` = G_(base), `6` = D_(base), <br/>            H = help(), h = help(), i = H_(base), k = B_(base), j = G_(base), <br/>            l = D_(base), I = H_(base), K = B_(base), J = G_(base), L = D_(base))<br/>        if (is.null(base)) {<br/>            cat(\" wrong KEY \\n\")<br/>            base &lt;- baseSAVE<br/>        }<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>    }<br/>\u00a0<br/>    if (sum(base &gt;= 2048) &gt; 1) {<br/>        cat(\"YOU WIN\u00a0! \\n\")<br/>    } else {<br/>        cat(\"YOU LOOSE \\n\")<br/>    }<br/>}<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 89, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program lets a user play the  2048  game on an  NxN  grid  (default is 4x4 grid).*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> N win seed <span class=\"sy0\">.</span>                           <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">if</span>   N==<span class=\"st0\">''</span> <span class=\"sy0\">|</span>   N==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span>    N=    <span class=\"nu0\">4</span>           <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">if</span> win==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> win==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span>  win=<span class=\"nu0\">2</span><span class=\"sy0\">**</span><span class=\"nu0\">11</span>           <span class=\"coMULTI\">/* \"      \"         \"   \"   \"      \"   */</span><br/><span class=\"kw1\">if</span> <span class=\"kw6\">datatype</span><span class=\"br0\">(</span>seed, <span class=\"st0\">'W'</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> <span class=\"kw6\">random</span> ,,seed   <span class=\"coMULTI\">/*Specified?  Then use seed for RANDOM.*/</span><br/>L=<span class=\"kw6\">length</span><span class=\"br0\">(</span>win<span class=\"br0\">)</span> + <span class=\"nu0\">2</span>                                <span class=\"coMULTI\">/*L:  used for displaying the grid #'s.*/</span><br/>eye=<span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">\"\u2500\"</span>, <span class=\"nu0\">8</span><span class=\"br0\">)</span>;  pad=<span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>, <span class=\"kw6\">length</span><span class=\"br0\">(</span>eye<span class=\"br0\">)</span>+<span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*eye-catchers; and perusable perusing.*/</span><br/>b= <span class=\"st0\">' '</span>                                           <span class=\"coMULTI\">/*comfortable readable name for a blank*/</span><br/>prompt= eye <span class=\"st0\">\"Please enter a direction  (Up, Down, Right, Left)       \u2500\u2500\u2500or\u2500\u2500\u2500    Quit:\"</span><br/>move=<span class=\"nu0\">1</span>;      moves=<span class=\"nu0\">0</span>;      score=<span class=\"nu0\">0</span>;      ok=<span class=\"nu0\">1</span>    <span class=\"coMULTI\">/*simulation that a move was performed.*/</span><br/>@<span class=\"sy0\">.</span>=b                                             <span class=\"coMULTI\">/*define all grid elements to a blank. */</span><br/>     <span class=\"kw1\">do</span>  <span class=\"kw2\">until</span> any<span class=\"br0\">(</span>win<span class=\"br0\">)</span>;  <span class=\"kw1\">if</span> ok  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> put;   ok=<span class=\"nu0\">1</span>;   <span class=\"kw1\">say</span>;   <span class=\"kw1\">call</span> showGrid<br/>     <span class=\"kw1\">say</span>;  <span class=\"kw1\">say</span> prompt;  <span class=\"kw1\">parse</span> <span class=\"kw1\">pull</span> a x <span class=\"sy0\">.</span> <span class=\"nu0\">1</span> d <span class=\"nu0\">2</span> <span class=\"nu0\">1</span> way xx;  <span class=\"kw2\">upper</span> d a x<br/>     <span class=\"kw1\">if</span> a==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;      ok=<span class=\"nu0\">0</span>                <span class=\"coMULTI\">/*the user entered blank(s) or nothing.*/</span><br/>                    <span class=\"kw1\">say</span> <span class=\"kw6\">copies</span><span class=\"br0\">(</span>eye,<span class=\"nu0\">5</span><span class=\"br0\">)</span>    <span class=\"st0\">'moves:'</span>      moves     eye     <span class=\"st0\">\"score:\"</span>    score<br/>                    <span class=\"kw1\">iterate</span>                      <span class=\"coMULTI\">/* [\u2191]  display # of moves &amp; the score.*/</span><br/>                    <span class=\"kw3\">end</span><br/>     <span class=\"kw1\">if</span> x<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span>               <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> err  <span class=\"st0\">\"too many arguments entered: \"</span>   xx<br/>     <span class=\"kw1\">if</span> <span class=\"kw6\">abbrev</span><span class=\"br0\">(</span><span class=\"st0\">'QUIT'</span>,a,<span class=\"nu0\">1</span><span class=\"br0\">)</span>   <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  <span class=\"kw1\">say</span>;  <span class=\"kw1\">say</span> eye  <span class=\"st0\">\"quitting the game\"</span><span class=\"sy0\">.</span>;  <span class=\"kw1\">exit</span> <span class=\"nu0\">1</span>;   <span class=\"kw3\">end</span><br/>     good=<span class=\"kw6\">abbrev</span><span class=\"br0\">(</span><span class=\"st0\">'UP'</span>,a,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw6\">abbrev</span><span class=\"br0\">(</span><span class=\"st0\">'DOWN'</span>,a,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw6\">abbrev</span><span class=\"br0\">(</span><span class=\"st0\">'RIGHT'</span>,a,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw6\">abbrev</span><span class=\"br0\">(</span><span class=\"st0\">'LEFT'</span>,a,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>     <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>good                <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> err  <span class=\"st0\">\"invalid direction: \"</span>       way<br/>     <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>ok  <span class=\"kw3\">then</span>  <span class=\"kw1\">iterate</span>;       moves=moves + <span class=\"nu0\">1</span>;                 <span class=\"kw1\">call</span> mov<br/>     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*until*/</span><br/><span class=\"kw1\">say</span><br/><span class=\"kw1\">say</span> <span class=\"kw6\">translate</span><span class=\"br0\">(</span>eye  <span class=\"st0\">\"Congrats!!  You've won the\"</span>  win  <span class=\"st0\">'game!'</span> eye,<span class=\"st0\">\"\u2550\"</span>,<span class=\"st0\">'\u2500'</span><span class=\"br0\">)</span>  <span class=\"st0\">\"score:\"</span> score<br/><span class=\"kw1\">exit</span> <span class=\"nu0\">0</span>                                           <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>showGrid:     <span class=\"kw1\">do</span>    r=<span class=\"nu0\">0</span>  <span class=\"kw2\">for</span> N+<span class=\"nu0\">2</span>;    _= <span class=\"st0\">'\u2551'</span>;             __= <span class=\"st0\">'\u2560'</span><br/>                 <span class=\"kw1\">do</span> c=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N;      _=_ <span class=\"sy0\">||</span> row<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"st0\">'\u2551'</span>;    __=__ <span class=\"sy0\">||</span> <span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">\"\u2550\"</span>, L<span class=\"br0\">)</span><span class=\"st0\">'\u256c'</span><br/>                 <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*c*/</span><br/>              <span class=\"kw1\">if</span> r==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> _= <span class=\"st0\">'\u2554'</span><span class=\"kw6\">translate</span><span class=\"br0\">(</span><span class=\"kw6\">substr</span><span class=\"br0\">(</span>_, <span class=\"nu0\">2</span>, <span class=\"kw6\">length</span><span class=\"br0\">(</span>_<span class=\"br0\">)</span>-<span class=\"nu0\">2</span><span class=\"br0\">)</span>,  <span class=\"st0\">\"\u2566\"</span>,  <span class=\"st0\">'\u2551'</span><span class=\"br0\">)</span><span class=\"st0\">\"\u2557\"</span><br/>              <span class=\"kw1\">if</span> r <span class=\"sy0\">&gt;</span>N  <span class=\"kw3\">then</span> _= <span class=\"st0\">'\u255a'</span><span class=\"kw6\">translate</span><span class=\"br0\">(</span><span class=\"kw6\">substr</span><span class=\"br0\">(</span>_, <span class=\"nu0\">2</span>, <span class=\"kw6\">length</span><span class=\"br0\">(</span>_<span class=\"br0\">)</span>-<span class=\"nu0\">2</span><span class=\"br0\">)</span>,  <span class=\"st0\">\"\u2569\"</span>,  <span class=\"st0\">'\u2551'</span><span class=\"br0\">)</span><span class=\"st0\">\"\u255d\"</span><br/>                                 <span class=\"kw1\">say</span> pad _<br/>              <span class=\"kw1\">if</span> r<span class=\"sy0\">&lt;</span>N <span class=\"sy0\">&amp;</span> r<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> pad <span class=\"kw6\">substr</span><span class=\"br0\">(</span>__, <span class=\"nu0\">1</span>, <span class=\"kw6\">length</span><span class=\"br0\">(</span>__<span class=\"br0\">)</span> -<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"st0\">\"\u2563\"</span><br/>              <span class=\"kw3\">end</span>      <span class=\"coMULTI\">/*r*/</span>;        <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>@:   <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> @<span class=\"sy0\">.</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> row,col;                <span class=\"kw1\">return</span> @<span class=\"sy0\">.</span>row<span class=\"sy0\">.</span>col<br/>any: <span class=\"kw1\">arg</span>\u00a0?; <span class=\"kw1\">do</span> r=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N; <span class=\"kw1\">do</span> c=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N;  <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c==?  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span>; <span class=\"kw3\">end</span>; <span class=\"kw3\">end</span>;  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>err: <span class=\"kw1\">say</span>;   <span class=\"kw1\">say</span> eye  <span class=\"st0\">'***error*** '</span>   <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;       <span class=\"kw1\">say</span>;                  ok=<span class=\"nu0\">0</span>;   <span class=\"kw1\">return</span><br/>o_c: $=;  <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N; $=$ <span class=\"kw6\">word</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>k<span class=\"sy0\">.</span>c <span class=\"sy0\">.</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span>; <span class=\"kw3\">end</span>; \u00a0!=<span class=\"kw6\">space</span><span class=\"br0\">(</span><span class=\"kw6\">translate</span><span class=\"br0\">(</span>$,,<span class=\"sy0\">.</span><span class=\"br0\">)</span><span class=\"br0\">)</span>==<span class=\"st0\">''</span>; <span class=\"kw1\">return</span> $<br/>o_r: $=;  <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N; $=$ <span class=\"kw6\">word</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>k <span class=\"sy0\">.</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span>; <span class=\"kw3\">end</span>; \u00a0!=<span class=\"kw6\">space</span><span class=\"br0\">(</span><span class=\"kw6\">translate</span><span class=\"br0\">(</span>$,,<span class=\"sy0\">.</span><span class=\"br0\">)</span><span class=\"br0\">)</span>==<span class=\"st0\">''</span>; <span class=\"kw1\">return</span> $<br/>put: <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>any<span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> err ,<span class=\"st0\">\"game over, no more moves.\"</span>; <span class=\"kw1\">if</span> move <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> two; <span class=\"kw1\">return</span><br/>row: <span class=\"kw1\">if</span> r==<span class=\"nu0\">0</span> <span class=\"sy0\">|</span> r<span class=\"sy0\">&gt;</span>N  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">'\u2550'</span>, L<span class=\"br0\">)</span>;                    <span class=\"kw1\">return</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c, L<span class=\"br0\">)</span><br/>ten: <span class=\"kw1\">if</span> <span class=\"kw6\">random</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span>==<span class=\"nu0\">4</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">4</span>;  <span class=\"kw1\">return</span> <span class=\"nu0\">2</span>    <span class=\"coMULTI\">/*10% of the time, put 4 instead of 2.*/</span><br/>two: <span class=\"kw1\">do</span>  <span class=\"kw2\">until</span> @<span class=\"sy0\">.</span>p<span class=\"sy0\">.</span>q==b;  p=<span class=\"kw6\">random</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>,N<span class=\"br0\">)</span>;  q=<span class=\"kw6\">random</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>,N<span class=\"br0\">)</span>; <span class=\"kw3\">end</span>;      @<span class=\"sy0\">.</span>p<span class=\"sy0\">.</span>q=ten<span class=\"br0\">(</span><span class=\"br0\">)</span>;   <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>mov: move=<span class=\"nu0\">0</span>;      <span class=\"kw1\">if</span> d==<span class=\"st0\">'R'</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> moveLR N, <span class=\"nu0\">1</span>, -<span class=\"nu0\">1</span>   <span class=\"coMULTI\">/*move (slide) numbers  right. */</span><br/>                  <span class=\"kw1\">if</span> d==<span class=\"st0\">'L'</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> moveLR <span class=\"nu0\">1</span>, N, +<span class=\"nu0\">1</span>   <span class=\"coMULTI\">/*  \"     \"       \"      left. */</span><br/>                  <span class=\"kw1\">if</span> d==<span class=\"st0\">'U'</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> moveUD <span class=\"nu0\">1</span>, N, +<span class=\"nu0\">1</span>   <span class=\"coMULTI\">/*  \"     \"       \"        up. */</span><br/>                  <span class=\"kw1\">if</span> d==<span class=\"st0\">'D'</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> moveUD N, <span class=\"nu0\">1</span>, -<span class=\"nu0\">1</span>   <span class=\"coMULTI\">/*  \"     \"       \"      down. */</span><br/>     <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>move  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> err <span class=\"st0\">'moving '</span>    way    <span class=\"st0\">\" doesn't change anything.\"</span>;       <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>moveLR: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> start, sTo, #<br/>          <span class=\"kw1\">do</span>   r=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N;    old=o_r<span class=\"br0\">(</span><span class=\"br0\">)</span>;    <span class=\"kw1\">if</span>\u00a0!  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>    <span class=\"coMULTI\">/*is this row blank?  */</span><br/>            <span class=\"kw1\">do</span> N-<span class=\"nu0\">1</span>;           <span class=\"kw1\">call</span> packLR                         <span class=\"coMULTI\">/*pack  left or right.*/</span><br/>            <span class=\"kw3\">end</span>        <span class=\"coMULTI\">/*N-1*/</span>                                    <span class=\"coMULTI\">/* [\u2193]  get new tiles.*/</span><br/>          new=o_r<span class=\"br0\">(</span><span class=\"br0\">)</span>;             move= move <span class=\"sy0\">|</span> <span class=\"br0\">(</span>old<span class=\"sy0\">\\</span>==new<span class=\"br0\">)</span>         <span class=\"coMULTI\">/*indicate tiles moved*/</span><br/>              <span class=\"kw1\">do</span> c=start  <span class=\"kw2\">for</span> N-<span class=\"nu0\">1</span>  <span class=\"kw2\">by</span> #  <span class=\"kw2\">while</span> @<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c<span class=\"sy0\">\\</span>==b          <span class=\"coMULTI\">/*slide left or right.*/</span><br/>              <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c<span class=\"sy0\">\\</span><a class=\"__cf_email__\" data-cfemail=\"3f02027f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"br0\">(</span>r,c+#<span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>                   <span class=\"coMULTI\">/*not a duplicate\u00a0?   */</span><br/>              @<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span><a class=\"__cf_email__\" data-cfemail=\"a2c19fe2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c <span class=\"sy0\">*</span> <span class=\"nu0\">2</span>;  score=score + @<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c               <span class=\"coMULTI\">/*double;  bump score */</span><br/>              c=c + #       \u00a0;  @<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c=b;    move=<span class=\"nu0\">1</span>                <span class=\"coMULTI\">/*bump C; blank dup 2.*/</span><br/>              <span class=\"kw3\">end</span>      <span class=\"coMULTI\">/*c*/</span>                                      <span class=\"coMULTI\">/* [\u2191]  indicate move.*/</span><br/>          <span class=\"kw1\">call</span> packLR                                             <span class=\"coMULTI\">/*pack  left or right.*/</span><br/>          <span class=\"kw3\">end</span>          <span class=\"coMULTI\">/*r*/</span>;                             <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>moveUD: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> start, Sto, #<br/>          <span class=\"kw1\">do</span>   c=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N;    old=o_c<span class=\"br0\">(</span><span class=\"br0\">)</span>;    <span class=\"kw1\">if</span>\u00a0!  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>    <span class=\"coMULTI\">/*is this col blank?  */</span><br/>            <span class=\"kw1\">do</span> N-<span class=\"nu0\">1</span>;           <span class=\"kw1\">call</span> packUD                         <span class=\"coMULTI\">/*pack  up or down.   */</span><br/>            <span class=\"kw3\">end</span>        <span class=\"coMULTI\">/*N-1*/</span>                                    <span class=\"coMULTI\">/* [\u2193]  get new tiles.*/</span><br/>          new=o_c<span class=\"br0\">(</span><span class=\"br0\">)</span>;             move= move <span class=\"sy0\">|</span> <span class=\"br0\">(</span>old<span class=\"sy0\">\\</span>==new<span class=\"br0\">)</span>         <span class=\"coMULTI\">/*indicate tiles moved*/</span><br/>              <span class=\"kw1\">do</span> r=start  <span class=\"kw2\">for</span> N-<span class=\"nu0\">1</span>  <span class=\"kw2\">by</span> #  <span class=\"kw2\">while</span> @<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c<span class=\"sy0\">\\</span>==b          <span class=\"coMULTI\">/*slide up or down.   */</span><br/>              <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c<span class=\"sy0\">\\</span><a class=\"__cf_email__\" data-cfemail=\"bf8282ff\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"br0\">(</span>r+#,c<span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>                   <span class=\"coMULTI\">/*not a duplicate\u00a0?   */</span><br/>              @<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span><a class=\"__cf_email__\" data-cfemail=\"c5a6f885\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c <span class=\"sy0\">*</span> <span class=\"nu0\">2</span>;  score=score + @<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c               <span class=\"coMULTI\">/*double;  bump score */</span><br/>              r=r + #       \u00a0;  @<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c=b;    move=<span class=\"nu0\">1</span>                <span class=\"coMULTI\">/*bump R; blank dup 2.*/</span><br/>              <span class=\"kw3\">end</span>      <span class=\"coMULTI\">/*r*/</span>                                      <span class=\"coMULTI\">/* [\u2191]  indicate move.*/</span><br/>          <span class=\"kw1\">call</span> packUD                                             <span class=\"coMULTI\">/*pack  up or down.   */</span><br/>          <span class=\"kw3\">end</span>          <span class=\"coMULTI\">/*c*/</span>;                             <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>packLR:       <span class=\"kw1\">do</span> c=start  <span class=\"kw2\">for</span> N-<span class=\"nu0\">1</span>  <span class=\"kw2\">by</span> #                           <span class=\"coMULTI\">/*slide left or right.*/</span><br/>              <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c<span class=\"sy0\">\\</span>==b  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>                          <span class=\"coMULTI\">/*Not a blank?  Skip. */</span><br/>                 <span class=\"kw1\">do</span> s=c  <span class=\"kw2\">to</span> sTo  <span class=\"kw2\">by</span> #;      @<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span><a class=\"__cf_email__\" data-cfemail=\"a7d49ae7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"br0\">(</span>r, s+#<span class=\"br0\">)</span>       <span class=\"coMULTI\">/*slide left or right.*/</span><br/>                 <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*s*/</span>;               @<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>sTo=b             <span class=\"coMULTI\">/*handle the last one.*/</span><br/>              <span class=\"kw3\">end</span>      <span class=\"coMULTI\">/*c*/</span>;               <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>packUD:       <span class=\"kw1\">do</span> r=start  <span class=\"kw2\">for</span> N-<span class=\"nu0\">1</span>  <span class=\"kw2\">by</span> #                           <span class=\"coMULTI\">/*slide up or down.   */</span><br/>              <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c<span class=\"sy0\">\\</span>==b  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>                          <span class=\"coMULTI\">/*Not a blank?  Skip. */</span><br/>                 <span class=\"kw1\">do</span> s=r  <span class=\"kw2\">to</span> sTo  <span class=\"kw2\">by</span> #;      @<span class=\"sy0\">.</span>s<span class=\"sy0\">.</span><a class=\"__cf_email__\" data-cfemail=\"ccaff18c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"br0\">(</span>s+#, c<span class=\"br0\">)</span>       <span class=\"coMULTI\">/*slide up or down.   */</span><br/>                 <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*s*/</span>;               @<span class=\"sy0\">.</span>sTo<span class=\"sy0\">.</span>c=b             <span class=\"coMULTI\">/*handle the last one.*/</span><br/>              <span class=\"kw3\">end</span>      <span class=\"coMULTI\">/*r*/</span>;               <span class=\"kw1\">return</span></pre>"}, {"lang": "Ring", "loc": 428, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: 2048 Game<br/>\u00a0<br/>load \"stdlib.ring\"<br/>load \"guilib.ring\"<br/>\u00a0<br/>size = 4<br/>limit = 6<br/>num = 0<br/>flag = 0<br/>x1 = 0<br/>x2 = 0<br/>y1 = 0<br/>y2 = 0<br/>button = newlist(size,size)<br/>moveleft = []<br/>moveright = []<br/>moveup = []<br/>movedown = []<br/>myfilter2 = null<br/>myfilter3 = null<br/>winheight = 0<br/>winwidth = 0<br/>\u00a0<br/>app = new qApp {<br/>          StyleFusion()<br/>          win = new qWidget() {<br/>                  setWindowTitle('2048 Game')<br/>                  setminimumwidth(300)<br/>                  setminimumheight(300)<br/>                  move(490,100) <br/>                  for n = 1 to size<br/>                       for m = 1 to size<br/>                            button[n][m] = new MyButton(win)<br/>                       next<br/>                  next<br/>                  arrow = new qLineedit(win)<br/>                  mup = new qPushButton(win)<br/>                  mdown = new qPushButton(win)<br/>                  mleft = new qPushButton(win)<br/>                  mright = new qPushButton(win)<br/>                  newgame = new qPushButton(win)<br/>                  myfilter = new qallevents(win)<br/>                  myfilter.setResizeEvent(\"pResize()\")<br/>                  installeventfilter(myfilter)<br/>                  myfilter3 = new qAllEvents(win) {<br/>                  setMouseButtonPressEvent(\"pPress()\")<br/>                  setMouseButtonReleaseEvent(\"pRelease()\")}<br/>                  installeventfilter(myfilter3)<br/>                  pResize()<br/>           show()<br/>         }<br/>    exec()<br/>}<br/>\u00a0<br/>func pPress()<br/>        x1 = myfilter3.getglobalx()<br/>        y1 = myfilter3.getglobaly()<br/>\u00a0<br/>func pRelease()<br/>        x2 = myfilter3.getglobalx()<br/>        y2 = myfilter3.getglobaly()<br/>        xx1 = floor(x1/floor(winwidth/4)) - 2<br/>        xx2 = floor(x2/floor(winwidth/4)) - 2<br/>        yy1 = floor(y1/floor(winheight/8)) - 1<br/>        yy2 = floor(y2/floor(winheight/8)) - 1<br/>        bool = (yy1 &lt;= size) and (yy2 &lt;= size)<br/>        if (yy1 = yy2) and (xx2 &lt; xx1) and bool<br/>           pleft()<br/>        ok<br/>        if (yy1 = yy2) and (xx1 &lt; xx2) and bool<br/>           pright()<br/>        ok<br/>        if (xx1 = xx2) and (yy2 &lt; yy1) and bool<br/>           pup()<br/>        ok<br/>        if (xx1 = xx2) and (yy1 &lt; yy2) and bool<br/>           pdown()<br/>        ok<br/>\u00a0<br/>func pResize()<br/>                  winwidth = win.width()<br/>                  winheight = win.height()<br/>                  arrow.close()<br/>                  arrow = new qLineedit(win) {<br/>                              setGeometry(0,7*floor(winheight/8),winwidth,floor(winheight/8))<br/>                              arrow.setfocus(true)<br/>                              myfilter2 = new qAllEvents(win) {<br/>                              setkeypressevent(\"keypress()\")<br/>                  }<br/>                  installeventfilter(myfilter2)<br/>                  }<br/>                  for n = 1 to size<br/>                       for m = 1 to size<br/>                            button[n][m].close()<br/>                            col = (n-1)*floor(winwidth/4)<br/>                            row = (m-1)*floor(winheight/8)<br/>                            fontsize = 10 + (winheight/16)<br/>                            fontsize2 = 10 + (winheight/50)<br/>                            button[n][m] = new MyButton(win) {<br/>                                                   setGeometry(col,row,winwidth/4,winheight/8)<br/>                                                   setFont(new qFont(\"Verdana\",fontsize,100,0))<br/>                                                   setalignment(Qt_AlignHCenter | Qt_AlignVCenter)<br/>                                                   setstylesheet('background-color:orange')<br/>                                                   show()<br/>                                                   }<br/>                           next<br/>                  next<br/>                  newgame.close()<br/>                  newgame = new qPushButton(win) {<br/>                                    setGeometry(0,7*floor(winheight/8),winwidth,floor(winheight/8))<br/>                                    setFont(new qFont(\"Verdana\",fontsize2,100,0))<br/>                                    setstylesheet('background-color:violet')<br/>                                    settext('New Game')<br/>                                    setClickEvent('pbegin()')<br/>                                    show()<br/>                                    }<br/>                  mup.close()<br/>                  mup = new qPushButton(win) {<br/>                             setGeometry(0,5*floor(winheight/8),winwidth/4,floor(winheight/8))<br/>                             setFont(new qFont(\"Verdana\",fontsize2,100,0))<br/>                             settext('up')<br/>                             setClickEvent('pup()')<br/>                             show()<br/>                             }<br/>                  mdown.close()<br/>                  mdown = new qPushButton(win) {<br/>                                 setGeometry(floor(winwidth/4),5*floor(winheight/8),winwidth/4,floor(winheight/8))<br/>                                 setFont(new qFont(\"Verdana\",fontsize2,100,0))<br/>                                 settext('down')<br/>                                 setClickEvent('pdown()')<br/>                                 show()<br/>                                 }<br/>                  mleft.close()<br/>                  mleft = new qPushButton(win) {<br/>                              setGeometry(2*floor(winwidth/4),5*floor(winheight/8),winwidth/4,floor(winheight/8))<br/>                              setFont(new qFont(\"Verdana\",fontsize2,100,0))<br/>                              settext('left')<br/>                              setClickEvent('pleft()')<br/>                              show()<br/>                              }<br/>                  mright.close()<br/>                  mright = new qPushButton(win) {<br/>                                setGeometry(3*floor(winwidth/4),5*floor(winheight/8),winwidth/4,floor(winheight/8))<br/>                                setFont(new qFont(\"Verdana\",fontsize2,100,0))<br/>                                settext('right')<br/>                                setClickEvent('pright()')<br/>                                show()<br/>                                }<br/>                  win.show()<br/>                  pbegin()<br/>\u00a0<br/>func keypress() <br/>        nKey = myfilter2.getkeycode() <br/>        switch nKey<br/>                   on 16777234 pleft()<br/>                   on 16777236 pright()<br/>                   on 16777235 pup()<br/>                   on 16777237 pdown()<br/>        off<br/>\u00a0<br/>func pbegin()<br/>       for n = 1 to size<br/>            for m = 1 to size<br/>                 button[n][m].setStylesheet('background-color: orange')<br/>                 button[n][m].settext('')<br/>            next<br/>        next<br/>        for n = 1 to limit<br/>             rn = random(size - 1) + 1<br/>             rm = random(size - 1) + 1<br/>             button[rn][rm].settext('2')<br/>         next<br/>         arrow.setfocus(true)<br/>\u00a0<br/>func pdown()<br/>        num = gameover()<br/>        if num = size*size<br/>           flag = 1<br/>           msgBox('You lost!')<br/>           pbegin()<br/>        ok<br/>        if flag = 0<br/>           pmovedown()<br/>           newnum()<br/>        ok<br/>\u00a0<br/>func pup()<br/>        num = gameover()<br/>        if num = size*size<br/>           flag = 1<br/>           msgBox('You lost!')<br/>           pbegin()<br/>        ok<br/>        if flag = 0<br/>           pmoveup()<br/>           newnum()<br/>        ok<br/>\u00a0<br/>func pleft()<br/>        num = gameover()<br/>        if num = size*size<br/>           flag = 1<br/>           msgBox('You lost!')<br/>           pbegin()<br/>        ok<br/>        if flag = 0<br/>           pmoveleft()<br/>           newnum()<br/>        ok<br/>\u00a0<br/>func pright()<br/>        num = gameover()<br/>        if num = size*size<br/>           flag = 1<br/>           msgBox('You lost!')<br/>           pbegin()<br/>        ok<br/>        if flag = 0<br/>           pmoveright()<br/>           newnum()<br/>        ok<br/>\u00a0<br/>func pmoveleft()<br/>       for n = 1 to size<br/>            moveleft = []<br/>            for m = 1 to size<br/>                 button[m][n] {temp = text()}<br/>                 if temp\u00a0!= ''<br/>                    add(moveleft,temp)<br/>                 ok<br/>            next<br/>            movetilesleft(n,moveleft)<br/>       next<br/>\u00a0<br/>func movetilesleft(nr,moveleft)<br/>       for p = 1 to len(moveleft) - 1<br/>            temp1 = moveleft[p]<br/>            temp2 = moveleft[p+1]<br/>            temp = string(number(temp1) + number(temp2))<br/>            if (temp1 = temp2) and (temp1\u00a0!= '0') and (temp2\u00a0!= '0') and (temp1\u00a0!= '') and (temp2\u00a0!= '')<br/>               if temp\u00a0!= '0' and temp\u00a0!= ''<br/>                  moveleft[p] = temp<br/>                  del(moveleft,p+1)<br/>               ok<br/>            ok<br/>       next<br/>       for n = 1 to len(moveleft)<br/>            button[n][nr].settext(moveleft[n])<br/>       next<br/>       for n = len(moveleft) + 1 to size <br/>            if n &lt;= size<br/>               button[n][nr].setStylesheet('background-color: orange')<br/>               button[n][nr].settext('')<br/>            ok<br/>       next<br/>       return<br/>\u00a0<br/>func pmoveright()<br/>       for n = 1 to size<br/>            moveright = []<br/>            for m = size to 1 step -1<br/>                 button[m][n] {temp = text()}<br/>                 if temp\u00a0!= ''<br/>                    add(moveright,temp)<br/>                 ok<br/>            next<br/>            movetilesright(n,moveright)<br/>        next<br/>        return<br/>\u00a0<br/>func movetilesright(nr,moveright)<br/>       flag = 0<br/>       for p = len(moveright) to 2 step -1<br/>            temp1 = moveright[p]<br/>            temp2 = moveright[p-1]<br/>             if (temp1 = temp2) and (temp1\u00a0!= '0') and (temp2\u00a0!= '0') and (temp1\u00a0!= '') and (temp2\u00a0!= '')<br/>               temp = string(number(temp1) + number(temp2))<br/>               if temp\u00a0!= '0' and temp\u00a0!= ''<br/>                  flag = 1<br/>                  moveright[p] = temp<br/>                  del(moveright,p-1)<br/>                  if moveright[p-1] = temp<br/>                     p = p - 1<br/>                  ok<br/>               ok<br/>            ok<br/>       next<br/>       for n = 1 to len(moveright)<br/>            button[size-n+1][nr].settext(moveright[n])<br/>       next<br/>       for n = 1 to size - len(moveright)<br/>            if n &lt;= size<br/>               button[n][nr].setStylesheet('background-color: orange')<br/>               button[n][nr].settext('')<br/>            ok<br/>       next<br/>\u00a0<br/>func pmoveup()<br/>       for n = 1 to size<br/>            moveup = []<br/>            for m = 1 to size<br/>                 button[n][m] {temp = text()}<br/>                 if temp\u00a0!= ''<br/>                    add(moveup,temp)<br/>                 ok<br/>            next<br/>            movetilesup(n,moveup)<br/>        next<br/>        return<br/>\u00a0<br/>func movetilesup(nr,moveup)<br/>        flag = 0<br/>        for p = 1 to len(moveup) - 1<br/>             temp1 = moveup[p] <br/>             temp2 = moveup[p+1]<br/>             if (temp1 = temp2) and (temp1\u00a0!= '0') and (temp2\u00a0!= '0') and (temp1\u00a0!= '') and (temp2\u00a0!= '')<br/>               temp = string(number(temp1) + number(temp2))<br/>               if temp\u00a0!= '0' and temp\u00a0!= ''<br/>                  flag = 1<br/>                  moveup[p] = temp<br/>                  del(moveup,p+1)<br/>               ok<br/>            ok<br/>       next<br/>       for n = 1 to len(moveup)<br/>            button[nr][n].settext(moveup[n])<br/>       next<br/>       for n = len(moveup) + 1 to size <br/>            if n &lt;= size<br/>               button[nr][n].setStylesheet('background-color: orange')<br/>               button[nr][n].settext('')<br/>            ok<br/>       next<br/>\u00a0<br/>func pmovedown()<br/>       for n = 1 to size<br/>            movedown = []<br/>            for m = size to 1 step -1<br/>                 button[n][m] {temp = text()}<br/>                 if temp\u00a0!= ''<br/>                    add(movedown,temp)<br/>                 ok<br/>            next<br/>            movetilesdown(n,movedown)<br/>        next<br/>        return<br/>\u00a0<br/>func movetilesdown(nr,movedown)<br/>        flag = 0<br/>        for p = 1 to len(movedown) - 1<br/>             temp1 = movedown[p]<br/>             temp2 = movedown[p+1]<br/>             if (temp1 = temp2) and (temp1\u00a0!= '0') and (temp2\u00a0!= '0') and (temp1\u00a0!= '') and (temp2\u00a0!= '')<br/>               temp = string(number(temp1) + number(temp2))<br/>               if temp\u00a0!= '0' and temp\u00a0!= ''<br/>                  flag = 1<br/>                  movedown[p] = temp<br/>                  del(movedown,p+1)<br/>               ok<br/>            ok<br/>       next<br/>       for n = 1 to len(movedown)<br/>            button[nr][size-n+1].settext(movedown[n])<br/>       next<br/>       for n = size - len(movedown) to 1 step -1 <br/>            if n &lt;= size<br/>               button[nr][n].setStylesheet('background-color: orange')<br/>               button[nr][n].settext('')<br/>            ok<br/>       next<br/>\u00a0<br/>func newnum()<br/>        nums = [2,4]<br/>        while true<br/>                rn = random(size - 1) + 1<br/>                rm = random(size - 1) + 1<br/>                ran = random(len(nums) - 1) + 1<br/>                if button[rn][rm].text() = ''<br/>                   button[rn][rm].settext(string(nums[ran]))<br/>                   exit<br/>                ok<br/>        end<br/>        return<br/>\u00a0<br/>func gameover()<br/>        num = 0<br/>        flag = 0<br/>        for n = 1 to size<br/>             for m = 1 to size <br/>                  if button[n][m].text()\u00a0!= ''<br/>                     num = num + 1<br/>                  ok<br/>              next<br/>        next<br/>        return num<br/>\u00a0<br/>func msgBox(text) {<br/>\tm = new qMessageBox(win) {<br/>\t       setWindowTitle('2048 Game')<br/>\t       setText(text)<br/>\t       show()<br/>\t       }<br/>        }<br/>\u00a0<br/>func showarray(vect)<br/>        see \"[\"<br/>        svect = \"\"<br/>        for n = 1 to len(vect)<br/>              svect = svect + vect[n] + \" \"<br/>        next<br/>        svect = left(svect, len(svect) - 1)<br/>        see svect<br/>        see \"]\" + nl<br/>\u00a0<br/>class MyButton from qLabel<br/>       func setText(cValue)<br/>              Super.setText(cValue)<br/>              switch cValue <br/>                        on '2' setStyleSheet('foreground-color:blue; background-color: yellow')<br/>                        on '4' setStylesheet('foreground-color:white; background-color: violet')<br/>                        on '8' setStylesheet('foreground-color:white; background-color: blue')<br/>                        on '16' setStylesheet('foreground-color:black; background-color: green')<br/>                        on '32' setStylesheet('foreground-color:white; background-color: red')<br/>                        on '64' setStylesheet('foreground-color:white; background-color: gray')<br/>                        on '128' setStylesheet('foreground-color:violet; background-color: white')<br/>              off<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 200, "block": "<pre class=\"ruby highlighted_source\">\u00a0<br/><span class=\"co1\">#!/usr/bin/ruby</span><br/>\u00a0<br/><span class=\"kw3\">require</span> <span class=\"st0\">'io/console'</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Board<br/>  <span class=\"kw1\">def</span> initialize size=<span class=\"nu0\">4</span>, win_limit=<span class=\"nu0\">2048</span>, cell_width = <span class=\"nu0\">6</span><br/>    <span class=\"re1\">@size</span> = size; <span class=\"re1\">@cw</span> = cell_width; <span class=\"re1\">@win_limit</span> = win_limit<br/>    <span class=\"re1\">@board</span> = <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>size<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>size, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>    <span class=\"re1\">@moved</span> = <span class=\"kw2\">true</span>; <span class=\"re1\">@score</span> = <span class=\"nu0\">0</span>; <span class=\"re1\">@no_more_moves</span> = <span class=\"kw2\">false</span><br/>    spawn<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> draw<br/>    <span class=\"kw3\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">if</span> <span class=\"re1\">@r_vert</span><br/>    <span class=\"kw3\">print</span> <span class=\"st0\">'    '</span> <span class=\"kw1\">if</span> <span class=\"re1\">@r_hori</span><br/>    <span class=\"kw3\">print</span> <span class=\"st0\">'\u250c'</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">'\u2500'</span> <span class=\"sy0\">*</span> <span class=\"re1\">@cw</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"re1\">@size</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'\u252c'</span><span class=\"br0\">)</span>  <span class=\"sy0\">+</span> <span class=\"st0\">'\u2510'</span><br/>    <span class=\"re1\">@board</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>row<span class=\"sy0\">|</span><br/>      <span class=\"kw3\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><br/>      formated = row.<span class=\"me1\">map</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>num<span class=\"sy0\">|</span> num == <span class=\"nu0\">0</span>\u00a0? <span class=\"st0\">' '</span> <span class=\"sy0\">*</span> <span class=\"re1\">@cw</span>\u00a0: <span class=\"kw3\">format</span><span class=\"br0\">(</span>num<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>      <span class=\"kw3\">print</span> <span class=\"st0\">'    '</span> <span class=\"kw1\">if</span> <span class=\"re1\">@r_hori</span><br/>      <span class=\"kw3\">puts</span> <span class=\"st0\">'\u2502'</span> <span class=\"sy0\">+</span> formated.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'\u2502'</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">'\u2502'</span><br/>      <span class=\"kw3\">print</span> <span class=\"st0\">'    '</span> <span class=\"kw1\">if</span> <span class=\"re1\">@r_hori</span><br/>      <span class=\"kw3\">print</span> <span class=\"st0\">'\u251c'</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">' '</span>  <span class=\"sy0\">*</span> <span class=\"re1\">@cw</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"re1\">@size</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'\u253c'</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">'\u2524'</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw3\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\r</span>\"</span><br/>    <span class=\"kw3\">print</span> <span class=\"st0\">'    '</span> <span class=\"kw1\">if</span> <span class=\"re1\">@r_hori</span><br/>    <span class=\"kw3\">puts</span> <span class=\"st0\">'\u2514'</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">'\u2500'</span> <span class=\"sy0\">*</span> <span class=\"re1\">@cw</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"re1\">@size</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'\u2534'</span><span class=\"br0\">)</span>  <span class=\"sy0\">+</span> <span class=\"st0\">'\u2518'</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> move direction<br/>    <span class=\"kw1\">case</span> direction<br/>    <span class=\"kw1\">when</span> <span class=\"re3\">:up</span><br/>      <span class=\"re1\">@board</span> = column_map <span class=\"br0\">{</span><span class=\"sy0\">|</span>c<span class=\"sy0\">|</span> logic<span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>      <span class=\"re1\">@r_vert</span> = <span class=\"kw2\">false</span> <span class=\"kw1\">if</span> <span class=\"re0\">$rumble</span><br/>    <span class=\"kw1\">when</span> <span class=\"re3\">:down</span><br/>      <span class=\"re1\">@board</span> = column_map <span class=\"br0\">{</span><span class=\"sy0\">|</span>c<span class=\"sy0\">|</span> logic<span class=\"br0\">(</span>c.<span class=\"me1\">reverse</span><span class=\"br0\">)</span>.<span class=\"me1\">reverse</span><span class=\"br0\">}</span> <br/>      <span class=\"re1\">@r_vert</span> = <span class=\"kw2\">true</span> <span class=\"kw1\">if</span> <span class=\"re0\">$rumble</span><br/>    <span class=\"kw1\">when</span> <span class=\"re3\">:left</span> <br/>      <span class=\"re1\">@board</span> = row_map <span class=\"br0\">{</span><span class=\"sy0\">|</span>r<span class=\"sy0\">|</span> logic<span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>      <span class=\"re1\">@r_hori</span> = <span class=\"kw2\">false</span> <span class=\"kw1\">if</span> <span class=\"re0\">$rumble</span><br/>    <span class=\"kw1\">when</span> <span class=\"re3\">:right</span><br/>      <span class=\"re1\">@board</span> = row_map <span class=\"br0\">{</span><span class=\"sy0\">|</span>r<span class=\"sy0\">|</span> logic<span class=\"br0\">(</span>r.<span class=\"me1\">reverse</span><span class=\"br0\">)</span>.<span class=\"me1\">reverse</span><span class=\"br0\">}</span> <br/>      <span class=\"re1\">@r_hori</span> = <span class=\"kw2\">true</span> <span class=\"kw1\">if</span> <span class=\"re0\">$rumble</span><br/>    <span class=\"kw1\">end</span><br/>    spawn<br/>    <span class=\"re1\">@moved</span> = <span class=\"kw2\">false</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> print_score<br/>    <span class=\"kw3\">puts</span> <span class=\"st0\">\"Your Score is #@score.\"</span><br/>    <span class=\"kw3\">puts</span> <span class=\"st0\">\"Congratulations, you have won!\"</span> <span class=\"kw1\">if</span> to_enum.<span class=\"me1\">any</span>? <span class=\"br0\">{</span><span class=\"sy0\">|</span>e<span class=\"sy0\">|</span> e <span class=\"sy0\">&gt;</span>= <span class=\"re1\">@win_limit</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> no_more_moves?; <span class=\"re1\">@no_more_moves</span>; <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">def</span> won?;  to_enum.<span class=\"me1\">any</span>? <span class=\"br0\">{</span><span class=\"sy0\">|</span>e<span class=\"sy0\">|</span> e <span class=\"sy0\">&gt;</span>= <span class=\"re1\">@win_limit</span><span class=\"br0\">}</span>; <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">def</span> reset!; initialize <span class=\"re1\">@size</span>, <span class=\"re1\">@win_limit</span>, <span class=\"re1\">@cw</span>; <span class=\"kw1\">end</span><br/>\u00a0<br/>  private<br/>\u00a0<br/>  <span class=\"kw1\">def</span> set x, y, val<br/>    <span class=\"re1\">@board</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> = val<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> spawn <br/>    free_pos = to_enum.<span class=\"kw3\">select</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>elem,x,y<span class=\"sy0\">|</span> elem == <span class=\"nu0\">0</span><span class=\"br0\">}</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>_,x,y<span class=\"sy0\">|</span> <span class=\"br0\">[</span>x,y<span class=\"br0\">]</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">unless</span> free_pos.<span class=\"me1\">empty</span>?<br/>      set <span class=\"sy0\">*</span>free_pos.<span class=\"me1\">sample</span>, <span class=\"kw3\">rand</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0.1</span>\u00a0? <span class=\"nu0\">2</span>\u00a0: <span class=\"nu0\">4</span> <span class=\"kw1\">if</span> <span class=\"re1\">@moved</span><br/>    <span class=\"kw1\">else</span><br/>      snap = <span class=\"re1\">@board</span><br/>      <span class=\"kw1\">unless</span> <span class=\"re1\">@stop</span><br/>        <span class=\"re1\">@stop</span> = <span class=\"kw2\">true</span><br/>        <span class=\"sy0\">%</span>i<span class=\"br0\">{</span>up down left right<span class=\"br0\">}</span>.<span class=\"me1\">each</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>s<span class=\"sy0\">|</span> move<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>        <span class=\"re1\">@no_more_moves</span> = <span class=\"kw2\">true</span> <span class=\"kw1\">if</span> snap.<span class=\"me1\">flatten</span> == <span class=\"re1\">@board</span>.<span class=\"me1\">flatten</span><br/>        <span class=\"re1\">@board</span> = snap<br/>        <span class=\"re1\">@stop</span> = <span class=\"kw2\">false</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> logic list<br/>    jump = <span class=\"kw2\">false</span><br/>    result =<br/>    list.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>res, val<span class=\"sy0\">|</span><br/>      <span class=\"kw1\">if</span> res.<span class=\"me1\">last</span> == val <span class=\"sy0\">&amp;&amp;</span>\u00a0!jump<br/>\tres<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span>= val<br/>\t<span class=\"re1\">@score</span> <span class=\"sy0\">+</span>= val<br/>        jump = <span class=\"kw2\">true</span><br/>      <span class=\"kw1\">elsif</span> val\u00a0!= <span class=\"nu0\">0</span><br/>\tres.<span class=\"me1\">push</span> val<br/>        jump = <span class=\"kw2\">false</span><br/>      <span class=\"kw1\">end</span><br/>      res<br/>    <span class=\"kw1\">end</span><br/>    result <span class=\"sy0\">+</span>= <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>@size <span class=\"sy0\">-</span> result.<span class=\"me1\">length</span><span class=\"br0\">)</span><br/>    <span class=\"re1\">@moved</span> <span class=\"sy0\">||</span>= list\u00a0!= result<br/>    result<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> column_map<br/>    xboard = <span class=\"re1\">@board</span>.<span class=\"me1\">transpose</span><br/>    xboard.<span class=\"me1\">map</span>!<span class=\"br0\">{</span><span class=\"sy0\">|</span>c<span class=\"sy0\">|</span> <span class=\"kw1\">yield</span> c <span class=\"br0\">}</span><br/>    xboard.<span class=\"me1\">transpose</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> row_map<br/>    <span class=\"re1\">@board</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>r<span class=\"sy0\">|</span> <span class=\"kw1\">yield</span> r <span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> to_enum<br/>    <span class=\"re1\">@enum</span> <span class=\"sy0\">||</span>= Enumerator.<span class=\"me1\">new</span><span class=\"br0\">(</span>@size <span class=\"sy0\">*</span> <span class=\"re1\">@size</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>yielder<span class=\"sy0\">|</span><br/>      <span class=\"br0\">(</span>@size<span class=\"sy0\">*</span>@size<span class=\"br0\">)</span>.<span class=\"me1\">times</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>\tyielder.<span class=\"kw1\">yield</span> <span class=\"br0\">(</span>@board<span class=\"br0\">[</span>i <span class=\"sy0\">/</span> <span class=\"re1\">@size</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i <span class=\"sy0\">%</span> <span class=\"re1\">@size</span><span class=\"br0\">]</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span>i <span class=\"sy0\">%</span> <span class=\"re1\">@size</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span>i <span class=\"sy0\">/</span> <span class=\"re1\">@size</span> <span class=\"br0\">)</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"re1\">@enum</span>.<span class=\"me1\">rewind</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> <span class=\"kw3\">format</span><span class=\"br0\">(</span>num<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"re0\">$color</span><br/>      cstart = <span class=\"st0\">\"<span class=\"es0\">\\e</span>[\"</span> <span class=\"sy0\">+</span> <span class=\"re0\">$colors</span><span class=\"br0\">[</span><span class=\"kw4\">Math</span>.<span class=\"me1\">log</span><span class=\"br0\">(</span>num, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"m\"</span><br/>      cend = <span class=\"st0\">\"<span class=\"es0\">\\e</span>[0m\"</span><br/>    <span class=\"kw1\">else</span><br/>      cstart = cend = <span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">end</span><br/>    cstart <span class=\"sy0\">+</span> num.<span class=\"me1\">to_s</span>.<span class=\"me1\">center</span><span class=\"br0\">(</span>@cw<span class=\"br0\">)</span> <span class=\"sy0\">+</span> cend<br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"re0\">$color</span> = <span class=\"kw2\">true</span><br/><span class=\"re0\">$colors</span> = <span class=\"sy0\">%</span>W<span class=\"br0\">{</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span>;<span class=\"nu0\">97</span> <span class=\"nu0\">1</span>;<span class=\"nu0\">93</span> <span class=\"nu0\">1</span>;<span class=\"nu0\">92</span> <span class=\"nu0\">1</span>;<span class=\"nu0\">96</span> <span class=\"nu0\">1</span>;<span class=\"nu0\">91</span> <span class=\"nu0\">1</span>;<span class=\"nu0\">95</span> <span class=\"nu0\">1</span>;<span class=\"nu0\">94</span> <span class=\"nu0\">1</span>;<span class=\"nu0\">30</span>;<span class=\"nu0\">47</span> <span class=\"nu0\">1</span>;<span class=\"nu0\">43</span> <span class=\"nu0\">1</span>;<span class=\"nu0\">42</span><br/><span class=\"nu0\">1</span>;<span class=\"nu0\">46</span> <span class=\"nu0\">1</span>;<span class=\"nu0\">41</span> <span class=\"nu0\">1</span>;<span class=\"nu0\">45</span> <span class=\"nu0\">1</span>;<span class=\"nu0\">44</span> <span class=\"nu0\">1</span>;<span class=\"nu0\">33</span>;<span class=\"nu0\">43</span> <span class=\"nu0\">1</span>;<span class=\"nu0\">33</span>;<span class=\"nu0\">42</span> <span class=\"nu0\">1</span>;<span class=\"nu0\">33</span>;<span class=\"nu0\">41</span> <span class=\"nu0\">1</span>;<span class=\"nu0\">33</span>;<span class=\"nu0\">44</span><span class=\"br0\">}</span><br/><span class=\"re0\">$rumble</span> = <span class=\"kw2\">false</span><br/>\u00a0<br/><span class=\"re0\">$check_score</span> = <span class=\"kw2\">true</span><br/><span class=\"kw1\">unless</span> ARGV.<span class=\"me1\">empty</span>?<br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"Usage: #$0 [gridsize] [score-threshold] [padwidth] [--no-color] [--rumble]\"</span>; <span class=\"kw3\">exit</span> <span class=\"kw1\">if</span> <span class=\"sy0\">%</span>W<span class=\"br0\">[</span><span class=\"sy0\">-</span>h <span class=\"sy0\">--</span>help<span class=\"br0\">]</span>.<span class=\"kw1\">include</span>?<span class=\"br0\">(</span>ARGV<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  args = ARGV.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:to_i<span class=\"br0\">)</span>.<span class=\"me1\">reject</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> n == <span class=\"nu0\">0</span><span class=\"br0\">}</span><br/>  b = Board.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>args<span class=\"br0\">)</span> <span class=\"kw1\">unless</span> args.<span class=\"me1\">empty</span>?<br/>  <span class=\"re0\">$rumble</span> = <span class=\"kw2\">true</span> <span class=\"kw1\">if</span> ARGV.<span class=\"me1\">any</span>?<span class=\"br0\">{</span><span class=\"sy0\">|</span>a<span class=\"sy0\">|</span> a =~ <span class=\"sy0\">/</span>rumble<span class=\"sy0\">/</span>i <span class=\"br0\">}</span><br/>  <span class=\"re0\">$color</span> = <span class=\"kw2\">false</span> <span class=\"kw1\">if</span> ARGV.<span class=\"me1\">any</span>?<span class=\"br0\">{</span><span class=\"sy0\">|</span>a<span class=\"sy0\">|</span> a =~ <span class=\"sy0\">/</span>no.?color<span class=\"sy0\">/</span>i<span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>b <span class=\"sy0\">||</span>= Board.<span class=\"me1\">new</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"<span class=\"es0\">\\e</span>[H<span class=\"es0\">\\e</span>[2J\"</span><br/>b.<span class=\"me1\">draw</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"Press h for help, q to quit\"</span><br/><span class=\"kw3\">loop</span> <span class=\"kw1\">do</span><br/>  input = STDIN.<span class=\"me1\">getch</span><br/>  <span class=\"kw1\">if</span> input == <span class=\"st0\">\"<span class=\"es0\">\\e</span>\"</span> <br/>    <span class=\"nu0\">2</span>.<span class=\"me1\">times</span> <span class=\"br0\">{</span>input <span class=\"sy0\">&lt;&lt;</span> STDIN.<span class=\"me1\">getch</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">case</span> input<br/>  <span class=\"kw1\">when</span> <span class=\"st0\">\"<span class=\"es0\">\\e</span>[A\"</span>, <span class=\"st0\">\"w\"</span> <span class=\"kw1\">then</span> b.<span class=\"me1\">move</span><span class=\"br0\">(</span><span class=\"re3\">:up</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">when</span> <span class=\"st0\">\"<span class=\"es0\">\\e</span>[B\"</span>, <span class=\"st0\">\"s\"</span> <span class=\"kw1\">then</span> b.<span class=\"me1\">move</span><span class=\"br0\">(</span><span class=\"re3\">:down</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">when</span> <span class=\"st0\">\"<span class=\"es0\">\\e</span>[C\"</span>, <span class=\"st0\">\"d\"</span> <span class=\"kw1\">then</span> b.<span class=\"me1\">move</span><span class=\"br0\">(</span><span class=\"re3\">:right</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">when</span> <span class=\"st0\">\"<span class=\"es0\">\\e</span>[D\"</span>, <span class=\"st0\">\"a\"</span> <span class=\"kw1\">then</span> b.<span class=\"me1\">move</span><span class=\"br0\">(</span><span class=\"re3\">:left</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">when</span> <span class=\"st0\">\"q\"</span>,<span class=\"st0\">\"<span class=\"es0\">\\u</span>0003\"</span>,<span class=\"st0\">\"<span class=\"es0\">\\u</span>0004\"</span>  <span class=\"kw1\">then</span> b.<span class=\"me1\">print_score</span>; <span class=\"kw3\">exit</span><br/>\u00a0<br/>  <span class=\"kw1\">when</span> <span class=\"st0\">\"h\"</span> <br/>    <span class=\"kw3\">puts</span> <span class=\"sy0\">&lt;&lt;-</span>EOM.<span class=\"kw3\">gsub</span><span class=\"br0\">(</span><span class=\"sy0\">/</span>^\\s<span class=\"sy0\">*/</span>, <span class=\"st0\">''</span><span class=\"br0\">)</span><br/>      \u250c\u2500                                                                                  \u2500\u2510<br/>      \u2502Use the arrow<span class=\"sy0\">-</span>keys <span class=\"kw1\">or</span> WASD on your keyboard to push board <span class=\"kw1\">in</span> the given direction.   <br/>      \u2502Tiles with the same number merge into one.                                          <br/>      \u2502Get a tile with a value of <span class=\"co1\">#{ARGV[1] || 2048} to win.                               </span><br/>      \u2502<span class=\"kw1\">In</span> <span class=\"kw1\">case</span> you cannot move <span class=\"kw1\">or</span> merge any tiles anymore, you loose.                      <br/>      \u2502You can start this game with different settings by providing commandline argument:  <br/>      \u2502<span class=\"kw1\">For</span> instance:                                                                       <br/>      \u2502  <span class=\"sy0\">%&gt;</span> <span class=\"co1\">#$0 6 8192 --rumble                                                            </span><br/>      \u2514\u2500                                                                                  \u2500\u2518<br/>      PRESS q TO QUIT <span class=\"br0\">(</span><span class=\"kw1\">or</span> Ctrl<span class=\"sy0\">-</span>C <span class=\"kw1\">or</span> Ctrl<span class=\"sy0\">-</span>D<span class=\"br0\">)</span><br/>    EOM<br/>    input = STDIN.<span class=\"me1\">getch</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"<span class=\"es0\">\\e</span>[H<span class=\"es0\">\\e</span>[2J\"</span><br/>  b.<span class=\"me1\">draw</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> b.<span class=\"me1\">no_more_moves</span>? <span class=\"kw1\">or</span> <span class=\"re0\">$check_score</span> <span class=\"sy0\">&amp;&amp;</span> b.<span class=\"me1\">won</span>?<br/>    b.<span class=\"me1\">print_score</span><br/>    <span class=\"kw1\">if</span> b.<span class=\"me1\">no_more_moves</span>?<br/>      <span class=\"kw3\">puts</span> <span class=\"st0\">\"No more moves possible\"</span><br/>      <span class=\"kw3\">puts</span> <span class=\"st0\">\"Again? (y/n)\"</span><br/>      <span class=\"kw3\">exit</span> <span class=\"kw1\">if</span> STDIN.<span class=\"kw3\">gets</span>.<span class=\"kw3\">chomp</span>.<span class=\"me1\">downcase</span> == <span class=\"st0\">\"n\"</span><br/>      <span class=\"re0\">$check_score</span> = <span class=\"kw2\">true</span><br/>      b.<span class=\"me1\">reset</span>!<br/>      <span class=\"kw3\">puts</span> <span class=\"st0\">\"<span class=\"es0\">\\e</span>[H<span class=\"es0\">\\e</span>[2J\"</span><br/>      b.<span class=\"me1\">draw</span><br/>    <span class=\"kw1\">else</span><br/>      <span class=\"kw3\">puts</span> <span class=\"st0\">\"Continue? (y/n)\"</span><br/>      <span class=\"kw3\">exit</span> <span class=\"kw1\">if</span> STDIN.<span class=\"kw3\">gets</span>.<span class=\"kw3\">chomp</span>.<span class=\"me1\">downcase</span> == <span class=\"st0\">\"n\"</span><br/>      <span class=\"re0\">$check_score</span> = <span class=\"kw2\">false</span><br/>      <span class=\"kw3\">puts</span> <span class=\"st0\">\"<span class=\"es0\">\\e</span>[H<span class=\"es0\">\\e</span>[2J\"</span><br/>      b.<span class=\"me1\">draw</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Rust", "loc": 186, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>use std::io::{self,BufRead};<br/>extern crate rand;<br/>\u00a0<br/>enum Usermove {<br/>    Up,<br/>    Down,<br/>    Left,<br/>    Right,<br/>}<br/>\u00a0<br/>fn print_game(field\u00a0:&amp; [[u32;4];4] ){<br/>    println!(\"{:?}\",&amp;field[0] );<br/>    println!(\"{:?}\",&amp;field[1] );<br/>    println!(\"{:?}\",&amp;field[2] );<br/>    println!(\"{:?}\",&amp;field[3] );<br/>}<br/>\u00a0<br/>fn get_usermove()-&gt; Usermove {<br/>    let umove: Usermove\u00a0;<br/>    loop{<br/>        let mut input = String::new();<br/>        io::stdin().read_line(&amp;mut input).unwrap();<br/>\u00a0<br/>        match input.chars().nth(0){<br/>            Some('a') =&gt;{umove = Usermove::Left\u00a0;break },<br/>            Some('w') =&gt;{umove = Usermove::Up  \u00a0;break },<br/>            Some('s') =&gt;{umove = Usermove::Down\u00a0;break },<br/>            Some('d') =&gt;{umove = Usermove::Right;break },<br/>            _   =&gt; {println!(\"input was {}: invalid character should be a,s,w or d \",input.chars().nth(0).unwrap());} ,<br/>        }<br/>    }<br/>    umove<br/>}<br/>\u00a0<br/>//this function inplements the user moves.<br/>//for every element it looks if the element is zero<br/>// if the element is zero it looks against the direction of the movement if any<br/>//element is not zero then it will move it to the element its place then it will look for<br/>//a matching element<br/>//  if the element is not zero then it will look for a match if no match is found<br/>// then it will look for the next element<br/>\u00a0<br/>fn do_game_step(step\u00a0: &amp;Usermove, field:&amp;mut [[u32;4];4]){<br/>    match *step {<br/>        Usermove::Left =&gt;{<br/>            for array in field{<br/>                for  col in 0..4 {<br/>                    for testcol in (col+1)..4 {<br/>                        if array[testcol]\u00a0!= 0 {<br/>                            if array[col] == 0 {<br/>                                array[col] += array[testcol];<br/>                                array[testcol] = 0;<br/>                            }<br/>                            else if array[col] == array[testcol] {<br/>                                array[col] += array[testcol];<br/>                                array[testcol] = 0;<br/>                                break;<br/>                            } else {<br/>                                break<br/>                            }<br/>                        }<br/>                    }<br/>                }<br/>            }<br/>        } ,<br/>        Usermove::Right=&gt;{<br/>            for array in field{<br/>                for  col in (0..4).rev() {<br/>                    for testcol in (0..col).rev() {<br/>                        if array[testcol]\u00a0!= 0 {<br/>                            if array[col] == 0 {<br/>                                array[col] += array[testcol];<br/>                                array[testcol] = 0;<br/>                            }<br/>                            else if array[col] == array[testcol] {<br/>                                array[col] += array[testcol];<br/>                                array[testcol] = 0;<br/>                                break;<br/>                            }else {<br/>                                break;<br/>                            }<br/>                        }<br/>                    }<br/>                }<br/>            }<br/>        } ,<br/>        Usermove::Down   =&gt;{<br/>            for col in 0..4 {<br/>                for row in (0..4).rev() {<br/>                    for testrow in (0..row).rev() {<br/>                        if field[testrow][col]\u00a0!= 0 {<br/>                            if field[row][col] == 0 {<br/>                                field[row][col] += field[testrow][col];<br/>                                field[testrow][col] = 0;<br/>                            } else if field[row][col] == field[testrow][col] {<br/>                                field[row][col] += field[testrow][col];<br/>                                field[testrow][col] = 0;<br/>                                break;<br/>                            }else {<br/>                                break;<br/>                            }<br/>\u00a0<br/>                        }<br/>                    }<br/>                }<br/>            }<br/>        } ,<br/>        Usermove::Up =&gt;{<br/>            for col in 0..4 {<br/>                for row in 0..4{<br/>                    for testrow in (row+1)..4 {<br/>                        if field[testrow][col]\u00a0!= 0 {<br/>                            if field[row][col] == 0 {<br/>                                field[row][col] += field[testrow][col];<br/>                                field[testrow][col] = 0;<br/>                            } else if field[row][col] == field[testrow][col] {<br/>                                field[row][col] += field[testrow][col];<br/>                                field[testrow][col] = 0;<br/>                                break;<br/>                            }else {<br/>                                break;<br/>                            }<br/>                        }<br/>                    }<br/>                }<br/>            }<br/>        },<br/>    }<br/>}<br/>\u00a0<br/>fn spawn( field: &amp;mut  [[u32;4];4]){<br/>    loop{<br/>        let x = rand::random::&lt;usize&gt;();<br/>        if field[x\u00a0% 4][(x/4)%4] == 0 {<br/>            if x\u00a0% 10 == 0 {<br/>                field[x\u00a0% 4][(x/4)%4]= 4;<br/>            }else{<br/>                field[x\u00a0% 4][(x/4)%4]= 2;<br/>            }<br/>            break;<br/>        }<br/>    }<br/>}<br/>\u00a0<br/>\u00a0<br/>fn main() {<br/>    let mut field\u00a0: [[u32; 4];4] =  [[0;4];4];<br/>    let mut test\u00a0: [[u32; 4];4]\u00a0;<br/>    'gameloop:loop {<br/>        //check if there is still an open space<br/>        test=field.clone();<br/>        spawn(&amp;mut field);<br/>        //if all possible moves do not yield a change then there is no valid move left<br/>        //and it will be game over<br/>        for i in [Usermove::Up,Usermove::Down,Usermove::Left,Usermove::Right].into_iter(){<br/>            do_game_step(i, &amp;mut test);<br/>            if test\u00a0!= field{<br/>                break;//found a valid move<br/>            }<br/>            match *i{<br/>                Usermove::Right=&gt; {<br/>                    println!(\"No more valid move, you lose\");<br/>                    break 'gameloop;<br/>                },<br/>                _=&gt;{},<br/>            }<br/>        }<br/>        print_game(&amp;field);<br/>        println!(\"move the blocks\");<br/>\u00a0<br/>        test=field.clone();<br/>        while test==field {<br/>            do_game_step(&amp;get_usermove(), &amp;mut field);<br/>        }<br/>\u00a0<br/>        for row in field.iter(){<br/>            if row.iter().any(|x| *x == 2048){<br/>                print_game(&amp;field );<br/>                println!(\"You Won!!\");<br/>                break;<br/>            }<br/>        }<br/>    }<br/>}<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 193, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">event</span>.<span class=\"br0\">{</span>KeyAdapter, KeyEvent, MouseAdapter, MouseEvent<span class=\"br0\">}</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"br0\">{</span>BorderLayout, Color, Dimension, Font, Graphics2D, Graphics, RenderingHints<span class=\"br0\">}</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">Random</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> javax.<span class=\"me1\">swing</span>.<span class=\"br0\">{</span>JFrame, JPanel, SwingUtilities<span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Game2048 <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> target <span class=\"sy0\">=</span> <span class=\"nu0\">2048</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> highest <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    SwingUtilities.<span class=\"me1\">invokeLater</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> f <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> JFrame<br/>      f.<span class=\"me1\">setDefaultCloseOperation</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>      f.<span class=\"me1\">setTitle</span><span class=\"br0\">(</span><span class=\"st0\">\"2048\"</span><span class=\"br0\">)</span><br/>      f.<span class=\"me1\">add</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Game, BorderLayout.<span class=\"me1\">CENTER</span><span class=\"br0\">)</span><br/>      f.<span class=\"me1\">pack</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      f.<span class=\"me1\">setLocationRelativeTo</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span><br/>      f.<span class=\"me1\">setVisible</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Game <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> JPanel <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>rand , side<span class=\"br0\">)</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Random, <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> <span class=\"br0\">(</span>tiles, gamestate<span class=\"br0\">)</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>Array.<span class=\"me1\">ofDim</span><span class=\"br0\">[</span>Tile<span class=\"br0\">]</span><span class=\"br0\">(</span>side, side<span class=\"br0\">)</span>, Game2048.<span class=\"me1\">State</span>.<span class=\"me1\">start</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">final</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> colorTable <span class=\"sy0\">=</span><br/>      Seq<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Color<span class=\"br0\">(</span>0x701710<span class=\"br0\">)</span>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Color<span class=\"br0\">(</span>0xFFE4C3<span class=\"br0\">)</span>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Color<span class=\"br0\">(</span>0xfff4d3<span class=\"br0\">)</span>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Color<span class=\"br0\">(</span>0xffdac3<span class=\"br0\">)</span>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Color<span class=\"br0\">(</span>0xe7b08e<span class=\"br0\">)</span>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Color<span class=\"br0\">(</span>0xe7bf8e<span class=\"br0\">)</span>,<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Color<span class=\"br0\">(</span>0xffc4c3<span class=\"br0\">)</span>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Color<span class=\"br0\">(</span>0xE7948e<span class=\"br0\">)</span>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Color<span class=\"br0\">(</span>0xbe7e56<span class=\"br0\">)</span>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Color<span class=\"br0\">(</span>0xbe5e56<span class=\"br0\">)</span>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Color<span class=\"br0\">(</span>0x9c3931<span class=\"br0\">)</span>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Color<span class=\"br0\">(</span>0x701710<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    setPreferredSize<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Dimension<span class=\"br0\">(</span><span class=\"nu0\">900</span>, <span class=\"nu0\">700</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    setBackground<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Color<span class=\"br0\">(</span>0xFAF8EF<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    setFont<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Font<span class=\"br0\">(</span><span class=\"st0\">\"SansSerif\"</span>, Font.<span class=\"me1\">BOLD</span>, <span class=\"nu0\">48</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    setFocusable<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><br/>    addMouseListener<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> MouseAdapter<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> mousePressed<span class=\"br0\">(</span>e<span class=\"sy0\">:</span> MouseEvent<span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>        startGame<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        repaint<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    addKeyListener<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> KeyAdapter<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> keyPressed<span class=\"br0\">(</span>e<span class=\"sy0\">:</span> KeyEvent<span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>        e.<span class=\"me1\">getKeyCode</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> KeyEvent.<span class=\"me1\">VK_UP</span> <span class=\"sy0\">=&gt;</span> moveUp<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> KeyEvent.<span class=\"me1\">VK_DOWN</span> <span class=\"sy0\">=&gt;</span> moveDown<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> KeyEvent.<span class=\"me1\">VK_LEFT</span> <span class=\"sy0\">=&gt;</span> moveLeft<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> KeyEvent.<span class=\"me1\">VK_RIGHT</span> <span class=\"sy0\">=&gt;</span> moveRight<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"sy0\">_</span> <span class=\"sy0\">=&gt;</span><br/>        <span class=\"br0\">}</span><br/>        repaint<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> paintComponent<span class=\"br0\">(</span>gg<span class=\"sy0\">:</span> Graphics<span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">super</span></a>.<span class=\"me1\">paintComponent</span><span class=\"br0\">(</span>gg<span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> g <span class=\"sy0\">=</span> gg.<span class=\"me1\">asInstanceOf</span><span class=\"br0\">[</span>Graphics2D<span class=\"br0\">]</span><br/>      g.<span class=\"me1\">setRenderingHint</span><span class=\"br0\">(</span>RenderingHints.<span class=\"me1\">KEY_ANTIALIASING</span>, RenderingHints.<span class=\"me1\">VALUE_ANTIALIAS_ON</span><span class=\"br0\">)</span><br/>      drawGrid<span class=\"br0\">(</span>g<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> drawGrid<span class=\"br0\">(</span>g<span class=\"sy0\">:</span> Graphics2D<span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>gridColor, emptyColor, startColor<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Color<span class=\"br0\">(</span>0xBBADA0<span class=\"br0\">)</span>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Color<span class=\"br0\">(</span>0xCDC1B4<span class=\"br0\">)</span>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Color<span class=\"br0\">(</span>0xFFEBCD<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>gamestate <span class=\"sy0\">==</span> State.<span class=\"me1\">running</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span>gridColor<span class=\"br0\">)</span><br/>        g.<span class=\"me1\">fillRoundRect</span><span class=\"br0\">(</span><span class=\"nu0\">200</span>, <span class=\"nu0\">100</span>, <span class=\"nu0\">499</span>, <span class=\"nu0\">499</span>, <span class=\"nu0\">15</span>, <span class=\"nu0\">15</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span><br/>          r <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until side<span class=\"sy0\">;</span><br/>          c <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until side<br/>        <span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>Option<span class=\"br0\">(</span>tiles<span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">isEmpty</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span>emptyColor<span class=\"br0\">)</span><br/>          g.<span class=\"me1\">fillRoundRect</span><span class=\"br0\">(</span><span class=\"nu0\">215</span> + c <span class=\"sy0\">*</span> <span class=\"nu0\">121</span>, <span class=\"nu0\">115</span> + r <span class=\"sy0\">*</span> <span class=\"nu0\">121</span>, <span class=\"nu0\">106</span>, <span class=\"nu0\">106</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> drawTile<span class=\"br0\">(</span>g, r, c<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>        g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span>startColor<span class=\"br0\">)</span><br/>        g.<span class=\"me1\">fillRoundRect</span><span class=\"br0\">(</span><span class=\"nu0\">215</span>, <span class=\"nu0\">115</span>, <span class=\"nu0\">469</span>, <span class=\"nu0\">469</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>        g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span>gridColor.<span class=\"me1\">darker</span><span class=\"br0\">)</span><br/>        g.<span class=\"me1\">setFont</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Font<span class=\"br0\">(</span><span class=\"st0\">\"SansSerif\"</span>, Font.<span class=\"me1\">BOLD</span>, <span class=\"nu0\">128</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        g.<span class=\"me1\">drawString</span><span class=\"br0\">(</span><span class=\"st0\">\"2048\"</span>, <span class=\"nu0\">310</span>, <span class=\"nu0\">270</span><span class=\"br0\">)</span><br/>        g.<span class=\"me1\">setFont</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Font<span class=\"br0\">(</span><span class=\"st0\">\"SansSerif\"</span>, Font.<span class=\"me1\">BOLD</span>, <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>gamestate <span class=\"sy0\">==</span> Game2048.<span class=\"me1\">State</span>.<span class=\"me1\">won</span><span class=\"br0\">)</span> g.<span class=\"me1\">drawString</span><span class=\"br0\">(</span><span class=\"st0\">\"you made it!\"</span>, <span class=\"nu0\">390</span>, <span class=\"nu0\">350</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>gamestate <span class=\"sy0\">==</span> Game2048.<span class=\"me1\">State</span>.<span class=\"me1\">over</span><span class=\"br0\">)</span> g.<span class=\"me1\">drawString</span><span class=\"br0\">(</span><span class=\"st0\">\"game over\"</span>, <span class=\"nu0\">400</span>, <span class=\"nu0\">350</span><span class=\"br0\">)</span><br/>        g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span>gridColor<span class=\"br0\">)</span><br/>        g.<span class=\"me1\">drawString</span><span class=\"br0\">(</span><span class=\"st0\">\"click to start a new game\"</span>, <span class=\"nu0\">330</span>, <span class=\"nu0\">470</span><span class=\"br0\">)</span><br/>        g.<span class=\"me1\">drawString</span><span class=\"br0\">(</span><span class=\"st0\">\"(use arrow keys to move tiles)\"</span>, <span class=\"nu0\">310</span>, <span class=\"nu0\">530</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> drawTile<span class=\"br0\">(</span>g<span class=\"sy0\">:</span> Graphics2D, r<span class=\"sy0\">:</span> Int, c<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> value <span class=\"sy0\">=</span> tiles<span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span>.<span class=\"me1\">value</span><br/>      g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span>colorTable<span class=\"br0\">(</span><span class=\"br0\">(</span>math.<span class=\"me1\">log</span><span class=\"br0\">(</span>value<span class=\"br0\">)</span> / math.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      g.<span class=\"me1\">fillRoundRect</span><span class=\"br0\">(</span><span class=\"nu0\">215</span> + c <span class=\"sy0\">*</span> <span class=\"nu0\">121</span>, <span class=\"nu0\">115</span> + r <span class=\"sy0\">*</span> <span class=\"nu0\">121</span>, <span class=\"nu0\">106</span>, <span class=\"nu0\">106</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>      g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>value <span class=\"sy0\">&lt;</span> <span class=\"nu0\">128</span><span class=\"br0\">)</span> colorTable.<span class=\"me1\">head</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> colorTable<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>s , fm<span class=\"br0\">)</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>value.<span class=\"me1\">toString</span>, g.<span class=\"me1\">getFontMetrics</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> asc <span class=\"sy0\">=</span> fm.<span class=\"me1\">getAscent</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">215</span> + c <span class=\"sy0\">*</span> <span class=\"nu0\">121</span> + <span class=\"br0\">(</span><span class=\"nu0\">106</span> - fm.<span class=\"me1\">stringWidth</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span> / <span class=\"nu0\">2</span>,<span class=\"nu0\">115</span> + r <span class=\"sy0\">*</span> <span class=\"nu0\">121</span> + <span class=\"br0\">(</span>asc + <span class=\"br0\">(</span><span class=\"nu0\">106</span> - <span class=\"br0\">(</span>asc + fm.<span class=\"me1\">getDescent</span><span class=\"br0\">)</span><span class=\"br0\">)</span> / <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      g.<span class=\"me1\">drawString</span><span class=\"br0\">(</span>s, x, y<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> moveUp<span class=\"br0\">(</span>checkingAvailableMoves<span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span> <span class=\"sy0\">=</span> move<span class=\"br0\">(</span><span class=\"nu0\">0</span>, -<span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, checkingAvailableMoves<span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> moveDown<span class=\"br0\">(</span>checkingAvailableMoves<span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span> <span class=\"sy0\">=</span> move<span class=\"br0\">(</span>side <span class=\"sy0\">*</span> side - <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, checkingAvailableMoves<span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> moveLeft<span class=\"br0\">(</span>checkingAvailableMoves<span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span> <span class=\"sy0\">=</span> move<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, -<span class=\"nu0\">1</span>, checkingAvailableMoves<span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> moveRight<span class=\"br0\">(</span>checkingAvailableMoves<span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span> <span class=\"sy0\">=</span> move<span class=\"br0\">(</span>side <span class=\"sy0\">*</span> side - <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, checkingAvailableMoves<span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> clearMerged<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>row <span class=\"sy0\">&lt;</span>- tiles<span class=\"sy0\">;</span> tile <span class=\"sy0\">&lt;</span>- row<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>Option<span class=\"br0\">(</span>tile<span class=\"br0\">)</span>.<span class=\"me1\">isDefined</span><span class=\"br0\">)</span> tile.<span class=\"me1\">setMerged</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> movesAvailable<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> moveUp<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> || moveDown<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> || moveLeft<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> || moveRight<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> move<span class=\"br0\">(</span>countDownFrom<span class=\"sy0\">:</span> Int, yIncr<span class=\"sy0\">:</span> Int, xIncr<span class=\"sy0\">:</span> Int, checkingAvailableMoves<span class=\"sy0\">:</span> Boolean<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> moved <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until side <span class=\"sy0\">*</span> side<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> j <span class=\"sy0\">=</span> math.<span class=\"me1\">abs</span><span class=\"br0\">(</span>countDownFrom - i<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a><span class=\"br0\">(</span> r,c<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>j / side,  j <span class=\"sy0\">%</span> side<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>Option<span class=\"br0\">(</span>tiles<span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">isDefined</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> <span class=\"br0\">(</span>nextR, nextC, breek<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>r + yIncr, c + xIncr, <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>nextR <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> nextR <span class=\"sy0\">&lt;</span> side <span class=\"sy0\">&amp;&amp;</span> nextC <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> nextC <span class=\"sy0\">&lt;</span> side<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>breek<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>next, curr<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>tiles<span class=\"br0\">(</span>nextR<span class=\"br0\">)</span><span class=\"br0\">(</span>nextC<span class=\"br0\">)</span>,tiles<span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>Option<span class=\"br0\">(</span>next<span class=\"br0\">)</span>.<span class=\"me1\">isEmpty</span><span class=\"br0\">)</span><br/>              <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>checkingAvailableMoves<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>              <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>                tiles<span class=\"br0\">(</span>nextR<span class=\"br0\">)</span><span class=\"br0\">(</span>nextC<span class=\"br0\">)</span> <span class=\"sy0\">=</span> curr<br/>                tiles<span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><br/>                r <span class=\"sy0\">=</span> nextR<br/>                c <span class=\"sy0\">=</span> nextC<br/>                nextR +<span class=\"sy0\">=</span> yIncr<br/>                nextC +<span class=\"sy0\">=</span> xIncr<br/>                moved <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>              <span class=\"br0\">}</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>next.<span class=\"me1\">canMergeWith</span><span class=\"br0\">(</span>curr<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>              <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>checkingAvailableMoves<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>              Game2048.<span class=\"me1\">highest</span> <span class=\"sy0\">=</span> math.<span class=\"me1\">max</span><span class=\"br0\">(</span>next.<span class=\"me1\">mergeWith</span><span class=\"br0\">(</span>curr<span class=\"br0\">)</span>, Game2048.<span class=\"me1\">highest</span><span class=\"br0\">)</span><br/>              tiles<span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><br/>              breek <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>              moved <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>            <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> breek <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>          <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>moved<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>Game2048.<span class=\"me1\">highest</span> <span class=\"sy0\">&lt;</span> Game2048.<span class=\"me1\">target</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        clearMerged<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        addRandomTile<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>movesAvailable<span class=\"br0\">)</span> gamestate <span class=\"sy0\">=</span> State.<span class=\"me1\">over</span><br/>      <span class=\"br0\">}</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>Game2048.<span class=\"me1\">highest</span> <span class=\"sy0\">==</span> Game2048.<span class=\"me1\">target</span><span class=\"br0\">)</span> gamestate <span class=\"sy0\">=</span> State.<span class=\"me1\">won</span><br/>      moved<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> startGame<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>gamestate ne Game2048.<span class=\"me1\">State</span>.<span class=\"me1\">running</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        Game2048.<span class=\"me1\">highest</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        gamestate <span class=\"sy0\">=</span> Game2048.<span class=\"me1\">State</span>.<span class=\"me1\">running</span><br/>        tiles <span class=\"sy0\">=</span> Array.<span class=\"me1\">ofDim</span><span class=\"br0\">[</span>Tile<span class=\"br0\">]</span><span class=\"br0\">(</span>side, side<span class=\"br0\">)</span><br/>        addRandomTile<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        addRandomTile<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> addRandomTile<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> pos <span class=\"sy0\">=</span> rand.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span>side <span class=\"sy0\">*</span> side<span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> <span class=\"br0\">(</span>row, col<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">do</span></a> <span class=\"br0\">{</span><br/>        pos <span class=\"sy0\">=</span> <span class=\"br0\">(</span>pos + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span>side <span class=\"sy0\">*</span> side<span class=\"br0\">)</span><br/>        row <span class=\"sy0\">=</span> pos / side<br/>        col <span class=\"sy0\">=</span> pos <span class=\"sy0\">%</span> side<br/>      <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>Option<span class=\"br0\">(</span>tiles<span class=\"br0\">(</span>row<span class=\"br0\">)</span><span class=\"br0\">(</span>col<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">isDefined</span><span class=\"br0\">)</span><br/>      tiles<span class=\"br0\">(</span>row<span class=\"br0\">)</span><span class=\"br0\">(</span>col<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Tile<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>rand.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"nu0\">4</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Tile<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> value<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> merged <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> setMerged<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> merged <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> mergeWith<span class=\"br0\">(</span>other<span class=\"sy0\">:</span> Tile<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>canMergeWith<span class=\"br0\">(</span>other<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        merged <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>        value <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span><br/>        value<br/>      <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> -<span class=\"nu0\">1</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> canMergeWith<span class=\"br0\">(</span>other<span class=\"sy0\">:</span> Tile<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <span class=\"sy0\">!</span>merged <span class=\"sy0\">&amp;&amp;</span> Option<span class=\"br0\">(</span>other<span class=\"br0\">)</span>.<span class=\"me1\">isDefined</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>other.<span class=\"me1\">merged</span> <span class=\"sy0\">&amp;&amp;</span> value <span class=\"sy0\">==</span> other.<span class=\"me1\">value</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> State <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> Enumeration <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">type</span></a> State <span class=\"sy0\">=</span> Value<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> start, won, running, over <span class=\"sy0\">=</span> Value<br/>  <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 278, "block": "<pre class=\"tcl highlighted_source\">\u00a0<br/><span class=\"co1\"># A minimal implementation of the game 2048 in Tcl.</span><br/><span class=\"co1\"># For a maintained version with expanded functionality see</span><br/><span class=\"co1\"># https://tcl.wiki/40557.</span><br/><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/><span class=\"kw2\">package</span> require struct::<span class=\"me1\">matrix</span><br/><span class=\"kw2\">package</span> require struct::<span class=\"kw2\">list</span><br/>\u00a0<br/><span class=\"co1\"># Board size.</span><br/><span class=\"kw1\">set</span> size <span class=\"nu0\">4</span><br/>\u00a0<br/><span class=\"co1\"># Iterate over all cells of the game board and run script for each.</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\"># The game board is a 2D matrix of a fixed size that consists of elements</span><br/><span class=\"co1\"># called \"cells\" that each can contain a game tile (corresponds to numerical</span><br/><span class=\"co1\"># values of 2, 4, 8, ..., 2048) or nothing (zero).</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\"># - cellList is a list of cell indexes (coordinates), which are</span><br/><span class=\"co1\"># themselves lists of two numbers each. They each represent the location</span><br/><span class=\"co1\"># of a given cell on the board.</span><br/><span class=\"co1\"># - varName1 are varName2 are names of the variables the will be assigned</span><br/><span class=\"co1\"># the index values.</span><br/><span class=\"co1\"># - cellVarName is the name of the variable that at each step of iteration</span><br/><span class=\"co1\"># will contain the numerical value of the present cell. Assigning to it will</span><br/><span class=\"co1\"># change the cell's value.</span><br/><span class=\"co1\"># - script is the script to run.</span><br/><span class=\"kw1\">proc</span> forcells <span class=\"br0\">{</span>cellList varName1 varName2 cellVarName script<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">upvar</span> <span class=\"re0\">$varName1</span> i<br/>    <span class=\"kw1\">upvar</span> <span class=\"re0\">$varName2</span> j<br/>    <span class=\"kw1\">upvar</span> <span class=\"re0\">$cellVarName</span> c<br/>    <span class=\"kw1\">foreach</span> cell <span class=\"re0\">$cellList</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> i <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$cell</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">set</span> j <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$cell</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">set</span> c <span class=\"br0\">[</span>cell-get <span class=\"re0\">$cell</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">uplevel</span> <span class=\"re0\">$script</span><br/>        cell-<span class=\"kw1\">set</span> <span class=\"st0\">\"$i $j\"</span> <span class=\"re0\">$c</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Generate a list of cell indexes for all cells on the board, i.e.,</span><br/><span class=\"co1\"># {{0 0} {0 1} ... {0 size-1} {1 0} {1 1} ... {size-1 size-1}}.</span><br/><span class=\"kw1\">proc</span> cell-indexes <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">global</span> size<br/>    <span class=\"kw1\">set</span> <span class=\"kw2\">list</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">foreach</span> i <span class=\"br0\">[</span>::<span class=\"me1\">struct</span>::<span class=\"kw2\">list</span> iota <span class=\"re0\">$size</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span> j <span class=\"br0\">[</span>::<span class=\"me1\">struct</span>::<span class=\"kw2\">list</span> iota <span class=\"re0\">$size</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">lappend</span> <span class=\"kw2\">list</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$i</span> <span class=\"re0\">$j</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$list</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Check if a number is a valid cell index (is 0 to size-1).</span><br/><span class=\"kw1\">proc</span> valid-index <span class=\"br0\">{</span>i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">global</span> size<br/>    <span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$i</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$size</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Return 1 if the predicate pred is true when applied to all items on the list</span><br/><span class=\"co1\"># or 0 otherwise.</span><br/><span class=\"kw1\">proc</span> map-and <span class=\"br0\">{</span><span class=\"kw2\">list</span> pred<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> res <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">foreach</span> item <span class=\"re0\">$list</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> res <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$res</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">[</span><span class=\"re0\">$pred</span> <span class=\"re0\">$item</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span> <span class=\"re0\">$res</span><span class=\"br0\">}</span> <span class=\"kw1\">break</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$res</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Check if list represents valid cell coordinates.</span><br/><span class=\"kw1\">proc</span> valid-cell<span class=\"sy0\">?</span> cell <span class=\"br0\">{</span><br/>    map-and <span class=\"re0\">$cell</span> valid-index<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Get the value of a game board cell.</span><br/><span class=\"kw1\">proc</span> cell-get cell <span class=\"br0\">{</span><br/>    board get cell <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$cell</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Set the value of a game board cell.</span><br/><span class=\"kw1\">proc</span> cell-<span class=\"kw1\">set</span> <span class=\"br0\">{</span>cell value<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    board <span class=\"kw1\">set</span> cell <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$cell</span> <span class=\"re0\">$value</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Filter a list of board cell indexes cellList to only have those indexes</span><br/><span class=\"co1\"># that correspond to empty board cells.</span><br/><span class=\"kw1\">proc</span> empty <span class=\"br0\">{</span>cellList<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>   \u00a0::<span class=\"me1\">struct</span>::<span class=\"kw2\">list</span> filterfor x <span class=\"re0\">$cellList</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>cell-get <span class=\"re0\">$x</span><span class=\"br0\">]</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Pick a random item from the given list.</span><br/><span class=\"kw1\">proc</span> pick <span class=\"kw2\">list</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">lindex</span> <span class=\"re0\">$list</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>int<span class=\"br0\">(</span>rand<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$list</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Put a \"2\" into an empty cell on the board.</span><br/><span class=\"kw1\">proc</span> spawn-new <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> emptyCell <span class=\"br0\">[</span>pick <span class=\"br0\">[</span>empty <span class=\"br0\">[</span>cell-indexes<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$emptyCell</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        forcells <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$emptyCell</span><span class=\"br0\">]</span> i j cell <span class=\"br0\">{</span><br/>            <span class=\"kw1\">set</span> cell <span class=\"nu0\">2</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$emptyCell</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Return vector sum of lists v1 and v2.</span><br/><span class=\"kw1\">proc</span> vector-add <span class=\"br0\">{</span>v1 v2<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> result <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">foreach</span> a <span class=\"re0\">$v1</span> b <span class=\"re0\">$v2</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">lappend</span> result <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$a</span> + <span class=\"re0\">$b</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$result</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># If checkOnly is false try to shift all cells one step in the direction of</span><br/><span class=\"co1\"># directionVect. If checkOnly is true just say if that move is possible.</span><br/><span class=\"kw1\">proc</span> move-all <span class=\"br0\">{</span>directionVect <span class=\"br0\">{</span>checkOnly <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> changedCells <span class=\"nu0\">0</span><br/>\u00a0<br/>    forcells <span class=\"br0\">[</span>cell-indexes<span class=\"br0\">]</span> i j cell <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> newIndex <span class=\"br0\">[</span>vector-add <span class=\"st0\">\"$i $j\"</span> <span class=\"re0\">$directionVect</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">set</span> removedStar <span class=\"nu0\">0</span><br/>\u00a0<br/>        <span class=\"co1\"># For every nonempty source cell and valid destination cell...</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$cell</span> <span class=\"sy0\">!</span>= <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">[</span>valid-cell<span class=\"sy0\">?</span> <span class=\"re0\">$newIndex</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>cell-get <span class=\"re0\">$newIndex</span><span class=\"br0\">]</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>                <span class=\"co1\"># Destination is empty.</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$checkOnly</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>                    <span class=\"co1\"># -level 2 is to return from both forcells and move-all.</span><br/>                    <span class=\"kw1\">return</span> -level <span class=\"nu0\">2</span> true<br/>                <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                    <span class=\"co1\"># Move tile to empty cell.</span><br/>                    cell-<span class=\"kw1\">set</span> <span class=\"re0\">$newIndex</span> <span class=\"re0\">$cell</span><br/>                    <span class=\"kw1\">set</span> cell <span class=\"nu0\">0</span><br/>                    <span class=\"kw2\">incr</span> changedCells<br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"br0\">[</span>cell-get <span class=\"re0\">$newIndex</span><span class=\"br0\">]</span> eq <span class=\"re0\">$cell</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span><br/>                      <span class=\"br0\">[</span><span class=\"kw2\">string</span> first + <span class=\"re0\">$cell</span><span class=\"br0\">]</span> == -<span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>                <span class=\"co1\"># Destination is the same number as source.</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$checkOnly</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">return</span> -level <span class=\"nu0\">2</span> true<br/>                <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                    <span class=\"co1\"># When merging two tiles into one mark the new tile with</span><br/>                    <span class=\"co1\"># the marker of \"+\" to ensure it doesn't get combined</span><br/>                    <span class=\"co1\"># again this turn.</span><br/>                    cell-<span class=\"kw1\">set</span> <span class=\"re0\">$newIndex</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"re0\">$cell</span><span class=\"br0\">}</span><span class=\"br0\">]</span>+<br/>                    <span class=\"kw1\">set</span> cell <span class=\"nu0\">0</span><br/>                    <span class=\"kw2\">incr</span> changedCells<br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$checkOnly</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> false<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># Remove \"changed this turn\" markers at the end of the turn.</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$changedCells</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        forcells <span class=\"br0\">[</span>cell-indexes<span class=\"br0\">]</span> i j cell <span class=\"br0\">{</span><br/>            <span class=\"kw1\">set</span> cell <span class=\"br0\">[</span><span class=\"kw2\">string</span> trim <span class=\"re0\">$cell</span> +<span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$changedCells</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Is it possible to move any tiles in the direction of directionVect?</span><br/><span class=\"kw1\">proc</span> can-move<span class=\"sy0\">?</span> <span class=\"br0\">{</span>directionVect<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    move-all <span class=\"re0\">$directionVect</span> <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Check win condition. The player wins when there's a 2048 tile.</span><br/><span class=\"kw1\">proc</span> check-win <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    forcells <span class=\"br0\">[</span>cell-indexes<span class=\"br0\">]</span> i j cell <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$cell</span> == <span class=\"nu0\">2048</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">puts</span> <span class=\"st0\">\"You win!\"</span><br/>            <span class=\"kw1\">exit</span> <span class=\"nu0\">0</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Check lose condition. The player loses when the win condition isn't met and</span><br/><span class=\"co1\"># there are no possible moves.</span><br/><span class=\"kw1\">proc</span> check-lose <span class=\"br0\">{</span>possibleMoves<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> values <span class=\"br0\">[</span>dict values <span class=\"re0\">$possibleMoves</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>true <span class=\"kw1\">in</span> <span class=\"re0\">$values</span> || <span class=\"nu0\">1</span> <span class=\"kw1\">in</span> <span class=\"re0\">$values</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">puts</span> <span class=\"st0\">\"You lose.\"</span><br/>        <span class=\"kw1\">exit</span> <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Pretty-print the board. Specify an index in highlight to highlight a cell.</span><br/><span class=\"kw1\">proc</span> print-board <span class=\"br0\">{</span><span class=\"br0\">{</span>highlight <span class=\"br0\">{</span>-<span class=\"nu0\">1</span> -<span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    forcells <span class=\"br0\">[</span>cell-indexes<span class=\"br0\">]</span> i j cell <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">puts</span> <span class=\"st0\">\"\"</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw2\">puts</span> -nonewline <span class=\"br0\">[</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$cell</span> <span class=\"sy0\">!</span>= <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>::<span class=\"me1\">struct</span>::<span class=\"kw2\">list</span> equal <span class=\"st0\">\"$i $j\"</span> <span class=\"re0\">$highlight</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw2\">format</span> <span class=\"st0\">\"<span class=\"es0\">\\[</span>%4s<span class=\"es0\">\\]</span>\"</span> <span class=\"re0\">$cell</span><span class=\"sy0\">*</span><br/>                <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw2\">format</span> <span class=\"st0\">\"<span class=\"es0\">\\[</span>%4s<span class=\"es0\">\\]</span>\"</span> <span class=\"re0\">$cell</span><br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                <span class=\"kw2\">lindex</span> <span class=\"st0\">\"......\"</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> main <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">global</span> size<br/>\u00a0<br/>    struct::<span class=\"me1\">matrix</span> board<br/>\u00a0<br/>    <span class=\"co1\"># Generate an empty board of a given size.</span><br/>    board add columns <span class=\"re0\">$size</span><br/>    board add rows <span class=\"re0\">$size</span><br/>    forcells <span class=\"br0\">[</span>cell-indexes<span class=\"br0\">]</span> i j cell <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> cell <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">set</span> controls <span class=\"br0\">{</span><br/>        h <span class=\"br0\">{</span><span class=\"nu0\">0</span> -<span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>        j <span class=\"br0\">{</span><span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><br/>        k <span class=\"br0\">{</span>-<span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><br/>        l <span class=\"br0\">{</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># Game loop.</span><br/>    <span class=\"kw1\">while</span> true <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> playerMove <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">set</span> possibleMoves <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\"># Add new tile to the board and print the board highlighting this tile.</span><br/>        print-board <span class=\"br0\">[</span>spawn-new<span class=\"br0\">]</span><br/>\u00a0<br/>        check-win<br/>\u00a0<br/>        <span class=\"co1\"># Find possible moves.</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>button vector<span class=\"br0\">}</span> <span class=\"re0\">$controls</span> <span class=\"br0\">{</span><br/>            dict <span class=\"kw1\">set</span> possibleMoves <span class=\"re0\">$button</span> <span class=\"br0\">[</span>can-move<span class=\"sy0\">?</span> <span class=\"re0\">$vector</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>        check-lose <span class=\"re0\">$possibleMoves</span><br/>\u00a0<br/>        <span class=\"co1\"># Get valid input from the player.</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"re0\">$playerMove</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"co1\"># Print prompt.</span><br/>            <span class=\"kw2\">puts</span> -nonewline <span class=\"st0\">\"Move (\"</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>button vector<span class=\"br0\">}</span> <span class=\"re0\">$controls</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>dict get <span class=\"re0\">$possibleMoves</span> <span class=\"re0\">$button</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw2\">puts</span> -nonewline <span class=\"re0\">$button</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw2\">puts</span> <span class=\"st0\">\")?\"</span><br/>\u00a0<br/>            <span class=\"kw1\">set</span> playerInput <span class=\"br0\">[</span><span class=\"kw2\">gets</span> stdin<span class=\"br0\">]</span><br/>\u00a0<br/>            <span class=\"co1\"># Validate input.</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>dict exists <span class=\"re0\">$possibleMoves</span> <span class=\"re0\">$playerInput</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span><br/>                <span class=\"br0\">[</span>dict get <span class=\"re0\">$possibleMoves</span> <span class=\"re0\">$playerInput</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">set</span> playerMove <span class=\"br0\">[</span>dict get <span class=\"re0\">$controls</span> <span class=\"re0\">$playerInput</span><span class=\"br0\">]</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\"># Apply current move until no changes occur on the board.</span><br/>        <span class=\"kw1\">while</span> true <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>move-all <span class=\"re0\">$playerMove</span><span class=\"br0\">]</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"kw1\">break</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>main<br/>\u00a0</pre>"}, {"lang": "XPL0", "loc": 61, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;  \\intrinsic 'code' declarations<br/>int     Box(16), Moved;<br/>\u00a0<br/>proc    ShiftTiles(I0, DI);     \\Shift tiles, add adjacents, shift again<br/>int     I0, DI;<br/>int     Done, M, N, I;<br/>[Done:= false;<br/>loop    [for M:= 1 to 3 do      \\shift all tiles in a single row or column<br/>            [I:= I0;<br/>            for N:= 1 to 3 do<br/>                [if Box(I)=0 &amp; Box(I+DI)#0 then<br/>                        [Box(I):= Box(I+DI);  Box(I+DI):= 0;  Moved:= true];<br/>                I:= I+DI;<br/>                ];<br/>            ];<br/>        if Done then return;<br/>        Done:= true;<br/>        I:= I0;                 \\add identical adjacent tiles into a new tile<br/>        for N:= 1 to 3 do<br/>                [if Box(I)=Box(I+DI) &amp; Box(I)#0 then<br/>                        [Box(I):= Box(I)+1;  Box(I+DI):= 0;  Moved:= true];<br/>                I:= I+DI;<br/>                ];<br/>        ];                      \\loop back to close any gaps that were opened<br/>];      \\ShiftTiles<br/>\u00a0<br/>int     I, J, X, Y, C;<br/>[Clear;<br/>for I:= 0 to 15 do Box(I):= 0;                  \\empty the box of tiles<br/>loop    [repeat I:= Ran(16) until Box(I)=0;     \\in a random empty location<br/>        Box(I):= if Ran(10) then 1 else 2;      \\insert a 2^1=2 or 2^2=4<br/>        for I:= 0 to 15 do                      \\show board with its tiles<br/>                [X:= ((I&amp;3)+5)*6;               \\get coordinates of tile<br/>                 Y:= I&gt;&gt;2*3+6;<br/>                 Attrib(((Box(I)+1)&amp;7)&lt;&lt;4 + $F);\\set color based on tile value<br/>                 for J:= 0 to 2 do              \\draw a square (6*8x3*16)<br/>                        [Cursor(X, Y+J);<br/>                        Text(6, \"      \");<br/>                        ];<br/>                 if Box(I)#0 then               \\box contains a tile<br/>                        [J:= 1;                 \\center numbers somewhat<br/>                        if Box(I) &lt;= 9 then J:= 2;<br/>                        if Box(I) &lt;= 3 then J:= 3;<br/>                        Cursor(X+J, Y+1);<br/>                        IntOut(6, 1&lt;&lt;Box(I));<br/>                        ];<br/>                ];<br/>        Moved:= false;                          \\a tile must move to continue<br/>        repeat  repeat C:= ChIn(1) until C#0;   \\get key scan code, or ASCII<br/>                for I:= 3 downto 0 do           \\for all rows or columns<br/>                        [case C of<br/>                          $4B:  ShiftTiles(I*4, 1);     \\left arrow<br/>                          $4D:  ShiftTiles(I*4+3, -1);  \\right arrow<br/>                          $50:  ShiftTiles(I+12, -4);   \\down arrow<br/>                          $48:  ShiftTiles(I, 4);       \\up arrow<br/>                          $1B:  [Clear;  exit]          \\Esc<br/>                        other   [];                     \\ignore all other keys<br/>                        ];<br/>        until   Moved;<br/>        ];<br/>]</pre>"}]}