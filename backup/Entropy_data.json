{"task": "Entropy", "blocks": [{"lang": "Ada", "loc": 28, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>, Ada.<span class=\"me1\">Float_Text_IO</span>, Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Elementary_Functions</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Count_Entropy <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">package</span> TIO <span class=\"kw3\">renames</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/>   Count: <span class=\"kw3\">array</span><span class=\"br0\">(</span>Character<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Natural\u00a0:= <span class=\"br0\">(</span><span class=\"kw3\">others</span> =&gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>   Sum:   Natural\u00a0:= <span class=\"nu0\">0</span>;<br/>   Line: String\u00a0:= <span class=\"st0\">\"1223334444\"</span>;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Line'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span>   <span class=\"co1\">-- count the characters</span><br/>      Count<span class=\"br0\">(</span>Line<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0:= Count<span class=\"br0\">(</span>Line<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>+<span class=\"nu0\">1</span>;<br/>      Sum\u00a0:= Sum + <span class=\"nu0\">1</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>\u00a0<br/>   <span class=\"kw1\">declare</span>   <span class=\"co1\">-- compute the entropy and print it</span><br/>      <span class=\"kw3\">function</span> P<span class=\"br0\">(</span>C: Character<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Float <span class=\"kw1\">is</span> <span class=\"br0\">(</span>Float<span class=\"br0\">(</span>Count<span class=\"br0\">(</span>C<span class=\"br0\">)</span><span class=\"br0\">)</span> / Float<span class=\"br0\">(</span>Sum<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Elementary_Functions</span>, Ada.<span class=\"me1\">Float_Text_IO</span>;<br/>      Result: Float\u00a0:= <span class=\"nu0\">0.0</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> Ch <span class=\"kw3\">in</span> Character <span class=\"kw1\">loop</span><br/>         Result\u00a0:= Result -<br/>          <span class=\"br0\">(</span><span class=\"kw1\">if</span> P<span class=\"br0\">(</span>Ch<span class=\"br0\">)</span>=<span class=\"nu0\">0.0</span> <span class=\"kw1\">then</span> <span class=\"nu0\">0.0</span> <span class=\"kw1\">else</span> P<span class=\"br0\">(</span>Ch<span class=\"br0\">)</span> * Log<span class=\"br0\">(</span>P<span class=\"br0\">(</span>Ch<span class=\"br0\">)</span>, Base =&gt; <span class=\"nu0\">2.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      Put<span class=\"br0\">(</span>Result, Fore =&gt; <span class=\"nu0\">1</span>, Aft =&gt; <span class=\"nu0\">5</span>, Exp =&gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span>;<br/><span class=\"kw1\">end</span> Count_Entropy;</pre>"}, {"lang": "Aime", "loc": 16, "block": "<pre class=\"text highlighted_source\">integer c;<br/>real h, v;<br/>index x;<br/>data s;<br/>\u00a0<br/>for (, c in (s = argv(1))) {<br/>    x[c] += 1r;<br/>}<br/>\u00a0<br/>h = 0;<br/>for (, v in x) {<br/>    v /= ~s;<br/>    h -= v * log2(v);<br/>}<br/>\u00a0<br/>o_form(\"/d6/\\n\", h);</pre>"}, {"lang": "ALGOL 68", "loc": 31, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw2\">BEGIN</span><br/>    <span class=\"coMULTI\"># calculate the shannon entropy of a string                                #</span><br/>    <span class=\"kw4\">PROC</span> shannon entropy <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> s <span class=\"br0\">)</span><span class=\"kw3\">REAL</span><span class=\"sy1\">:</span><br/>    <span class=\"kw2\">BEGIN</span><br/>        <span class=\"kw3\">INT</span> string length <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw8\">UPB</span> s <span class=\"sy1\">-</span> <span class=\"kw8\">LWB</span> s <span class=\"br0\">)</span> <span class=\"sy1\">+</span> 1<span class=\"sy1\">;</span><br/>        <span class=\"coMULTI\"># count the occurences of each character #</span><br/>        <span class=\"br0\">[</span> 0 <span class=\"sy1\">:</span> <span class=\"kw20\">max abs char</span> <span class=\"br0\">]</span><span class=\"kw3\">INT</span> char count<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">FOR</span> char pos <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> char count <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> char count <span class=\"kw2\">DO</span><br/>            char count<span class=\"br0\">[</span> char pos <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> 0<br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        <span class=\"kw2\">FOR</span> char pos <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> s <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> s <span class=\"kw2\">DO</span><br/>            char count<span class=\"br0\">[</span> <span class=\"kw8\">ABS</span> s<span class=\"br0\">[</span> char pos <span class=\"br0\">]</span> <span class=\"br0\">]</span> <span class=\"sy1\">+:=</span> 1<br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        <span class=\"coMULTI\"># calculate the entropy, we use log base 10 and then convert #</span><br/>        <span class=\"coMULTI\"># to log base 2 after calculating the sum                    #</span><br/>        <span class=\"kw3\">REAL</span> entropy <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">FOR</span> char pos <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> char count <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> char count <span class=\"kw2\">DO</span><br/>            <span class=\"kw2\">IF</span> char count<span class=\"br0\">[</span> char pos <span class=\"br0\">]</span> <span class=\"sy1\">/=</span> 0<br/>            <span class=\"kw2\">THEN</span><br/>                <span class=\"coMULTI\"># have a character that occurs in the string #</span><br/>                <span class=\"kw3\">REAL</span> probability <span class=\"sy1\">=</span> char count<span class=\"br0\">[</span> char pos <span class=\"br0\">]</span> <span class=\"sy1\">/</span> string length<span class=\"sy1\">;</span><br/>                entropy <span class=\"sy1\">-:=</span> probability <span class=\"sy1\">*</span> <span class=\"kw24\">log</span><span class=\"br0\">(</span> probability <span class=\"br0\">)</span><br/>            <span class=\"kw2\">FI</span><br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        entropy <span class=\"sy1\">/</span> <span class=\"kw24\">log</span><span class=\"br0\">(</span> 2 <span class=\"br0\">)</span><br/>    <span class=\"kw2\">END</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># shannon entropy #</span><br/>\u00a0<br/>    <span class=\"coMULTI\"># test the shannon entropy routine #</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> shannon entropy<span class=\"br0\">(</span> <span class=\"st0\">\"1223334444\"</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw2\">END</span></pre>"}, {"lang": "ALGOL W", "loc": 54, "block": "<pre class=\"text highlighted_source\">begin<br/>   \u00a0% calculates the shannon entropy of a string                         \u00a0%<br/>   \u00a0% strings are fixed length in algol W and the length is part of the  \u00a0%<br/>   \u00a0% type, so we declare the string parameter to be the longest possible\u00a0%<br/>   \u00a0% string length (256 characters) and have a second parameter to      \u00a0%<br/>   \u00a0% specify how much is actually used                                  \u00a0%<br/>    real procedure shannon_entropy ( string(256) value s<br/>                                  \u00a0; integer     value stringLength<br/>                                   );<br/>    begin<br/>\u00a0<br/>        real    probability, entropy;<br/>\u00a0<br/>       \u00a0% algol W assumes there are 256 possible characters\u00a0%<br/>        integer MAX_CHAR;<br/>                MAX_CHAR\u00a0:= 256;<br/>\u00a0<br/>       \u00a0% declarations must preceed statements, so we start a new        \u00a0%<br/>       \u00a0% block here so we can use MAX_CHAR as an array bound            \u00a0%<br/>        begin<br/>\u00a0<br/>           \u00a0% increment an integer variable                              \u00a0%<br/>            procedure incI ( integer value result a )\u00a0; a\u00a0:= a + 1;<br/>\u00a0<br/>            integer array charCount( 1\u00a0:: MAX_CHAR );<br/>\u00a0<br/>           \u00a0% count the occurances of each character in s                \u00a0%<br/>            for charPos\u00a0:= 1 until MAX_CHAR do charCount( charPos )\u00a0:= 0;<br/>            for sPos\u00a0:= 0 until stringLength - 1 do incI( charCount( decode( s( sPos | 1 ) ) ) );<br/>\u00a0<br/>           \u00a0% calculate the entropy, we use log base 10 and then convert \u00a0%<br/>           \u00a0% to log base 2 after calculating the sum                    \u00a0%<br/>\u00a0<br/>            entropy\u00a0:= 0.0;<br/>            for charPos\u00a0:= 1 until MAX_CHAR do<br/>            begin<br/>                if charCount( charPos ) not = 0<br/>                then begin<br/>                   \u00a0% have a character that occurs in the string         \u00a0%<br/>                    probability\u00a0:= charCount( charPos ) / stringLength;<br/>                    entropy    \u00a0:= entropy - ( probability * log( probability ) )<br/>                end <br/>            end charPos<br/>\u00a0<br/>        end;<br/>\u00a0<br/>        entropy / log( 2 )<br/>    end shannon_entropy\u00a0;<br/>\u00a0<br/>   \u00a0% test the shannon entropy routine                                   \u00a0%<br/>    r_format\u00a0:= \"A\"; r_w\u00a0:= 12; r_d\u00a0:= 6;\u00a0% set output to fixed format   \u00a0%<br/>    write( shannon_entropy( \"1223334444\", 10 ) )<br/>\u00a0<br/>end.</pre>"}, {"lang": "APL", "loc": 26, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>      ENTROPY\u2190{-+/R\u00d72\u235fR\u2190(+\u233f\u2375\u2218.=\u222a\u2375)\u00f7\u2374\u2375}<br/>\u00a0<br/>      \u235d How it works:<br/>      \u2395\u2190UNIQUE\u2190\u222aX\u2190'1223334444'<br/>1234<br/>      \u2395\u2190TABLE_OF_OCCURENCES\u2190X\u2218.=UNIQUE<br/>1 0 0 0<br/>0 1 0 0<br/>0 1 0 0<br/>0 0 1 0<br/>0 0 1 0<br/>0 0 1 0<br/>0 0 0 1<br/>0 0 0 1<br/>0 0 0 1<br/>0 0 0 1<br/>      \u2395\u2190COUNT\u2190+\u233fTABLE_OF_OCCURENCES<br/>1 2 3 4<br/>      \u2395\u2190N\u2190\u2374X<br/>10<br/>      \u2395\u2190RATIO\u2190COUNT\u00f7N<br/>0.1 0.2 0.3 0.4<br/>      -+/RATIO\u00d72\u235fRATIO<br/>1.846439345<br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 18, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>\u00a0% Entropy<span class=\"br0\">(</span><span class=\"nu0\">1223334444</span><span class=\"br0\">)</span><br/>\u00a0<br/>Entropy<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    a <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> len <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">StrLen</span></a><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">,</span> m <span class=\"sy0\">:=</span> n<br/>    <span class=\"kw1\">while</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">StrLen</span></a><span class=\"br0\">(</span>m<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        s <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>m<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        m <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/commands/RegExReplace.htm\"><span class=\"kw3\">RegExReplace</span></a><span class=\"br0\">(</span>m<span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> c<span class=\"br0\">)</span><br/>        a<span class=\"br0\">[</span>s<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> c<br/>    <span class=\"br0\">}</span><br/>    for key<span class=\"sy0\">,</span> val in a<br/>    <span class=\"br0\">{</span><br/>        m <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Log</span></a><span class=\"br0\">(</span>p <span class=\"sy0\">:=</span> val <span class=\"sy0\">/</span> len<span class=\"br0\">)</span><br/>        e <span class=\"sy0\">-=</span> p <span class=\"sy0\">*</span> m <span class=\"sy0\">/</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Log</span></a><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span><span class=\"sy0\">,</span> e<br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 15, "block": "<pre class=\"awk highlighted_source\"><span class=\"co1\">#!/usr/bin/awk -f </span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;=</span> <span class=\"kw4\">length</span><span class=\"br0\">(</span><span class=\"re0\">$0</span><span class=\"br0\">)</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tH<span class=\"br0\">[</span><span class=\"kw4\">substr</span><span class=\"br0\">(</span><span class=\"re0\">$0</span>,i,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy3\">++</span>;<br/>\t\tN<span class=\"sy3\">++</span>;<br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">END</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"kw1\">in</span> H<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tp = H<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy3\">/</span>N;<br/>\t\tE <span class=\"sy3\">-</span>=  p <span class=\"sy3\">*</span> <span class=\"kw4\">log</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span>;<br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw5\">print</span> E<span class=\"sy3\">/</span><span class=\"kw4\">log</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "BASIC", "loc": 23, "block": "<pre class=\"text highlighted_source\">10 DEF FN L(X)=LOG(X)/LOG(2)<br/>20 S$=\"1223334444\"<br/>30 U$=\"\"<br/>40 FOR I=1 TO LEN(S$)<br/>50 K=0<br/>60 FOR J=1 TO LEN(U$)<br/>70 IF MID$(U$,J,1)=MID$(S$,I,1) THEN K=1<br/>80 NEXT J<br/>90 IF K=0 THEN U$=U$+MID$(S$,I,1)<br/>100 NEXT I<br/>110 DIM R(LEN(U$)-1)<br/>120 FOR I=1 TO LEN(U$)<br/>130 C=0<br/>140 FOR J=1 TO LEN(S$)<br/>150 IF MID$(U$,I,1)=MID$(S$,J,1) THEN C=C+1<br/>160 NEXT J<br/>170 R(I-1)=(C/LEN(S$))*FN L(C/LEN(S$))<br/>180 NEXT I<br/>190 E=0<br/>200 FOR I=0 TO LEN(U$)-1<br/>210 E=E-R(I)<br/>220 NEXT I<br/>230 PRINT E</pre>"}, {"lang": "BBC BASIC", "loc": 24, "block": "<pre class=\"text highlighted_source\">REM &gt;entropy<br/>PRINT FNentropy(\"1223334444\")<br/>END<br/>:<br/>DEF FNentropy(x$)<br/>LOCAL unique$, count%, n%, ratio(), u%, i%, j%<br/>unique$ = \"\"<br/>n% = LEN x$<br/>FOR i% = 1 TO n%<br/>  IF INSTR(unique$, MID$(x$, i%, 1)) = 0 THEN unique$ += MID$(x$, i%, 1)<br/>NEXT<br/>u% = LEN unique$<br/>DIM ratio(u% - 1)<br/>FOR i% = 1 TO u%<br/>  count% = 0<br/>  FOR j% = 1 TO n%<br/>    IF MID$(unique$, i%, 1) = MID$(x$, j%, 1) THEN count% += 1<br/>  NEXT<br/>  ratio(i% - 1) = (count% / n%) * FNlogtwo(count% / n%)<br/>NEXT<br/>= -SUM(ratio())<br/>:<br/>DEF FNlogtwo(n)<br/>= LN n / LN 2</pre>"}, {"lang": "Burlesque", "loc": 2, "block": "<pre class=\"text highlighted_source\">blsq ) \"1223334444\"F:u[vv^^{1\\/?/2\\/LG}m[?*++<br/>1.8464393446710157</pre>"}, {"lang": "C", "loc": 46, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;stdbool.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/><span class=\"co2\">#include &lt;math.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define MAXLEN 100 //maximum string length</span><br/>\u00a0<br/><span class=\"kw4\">int</span> makehist<span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>S<span class=\"sy0\">,</span><span class=\"kw4\">int</span> <span class=\"sy0\">*</span>hist<span class=\"sy0\">,</span><span class=\"kw4\">int</span> len<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> wherechar<span class=\"br0\">[</span><span class=\"nu0\">256</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span>histlen<span class=\"sy0\">;</span><br/>\thistlen<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span><span class=\"nu0\">256</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span>wherechar<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>len<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>wherechar<span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>S<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">==-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\twherechar<span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>S<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">=</span>histlen<span class=\"sy0\">;</span><br/>\t\t\thistlen<span class=\"sy0\">++;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\thist<span class=\"br0\">[</span>wherechar<span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>S<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">++;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> histlen<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">double</span> entropy<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy0\">*</span>hist<span class=\"sy0\">,</span><span class=\"kw4\">int</span> histlen<span class=\"sy0\">,</span><span class=\"kw4\">int</span> len<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">double</span> H<span class=\"sy0\">;</span><br/>\tH<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>histlen<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\tH<span class=\"sy0\">-=</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>hist<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">/</span>len<span class=\"sy0\">*</span>log2<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>hist<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">/</span>len<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> H<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">char</span> S<span class=\"br0\">[</span>MAXLEN<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> len<span class=\"sy0\">,*</span>hist<span class=\"sy0\">,</span>histlen<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">double</span> H<span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/scanf.html\"><span class=\"kw3\">scanf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%[^<span class=\"es1\">\\n</span>]\"</span><span class=\"sy0\">,</span>S<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tlen<span class=\"sy0\">=</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>S<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\thist<span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/calloc.html\"><span class=\"kw3\">calloc</span></a><span class=\"br0\">(</span>len<span class=\"sy0\">,</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\thistlen<span class=\"sy0\">=</span>makehist<span class=\"br0\">(</span>S<span class=\"sy0\">,</span>hist<span class=\"sy0\">,</span>len<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"co1\">//hist now has no order (known to the program) but that doesn't matter</span><br/>\tH<span class=\"sy0\">=</span>entropy<span class=\"br0\">(</span>hist<span class=\"sy0\">,</span>histlen<span class=\"sy0\">,</span>len<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%lf<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span>H<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 26, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;map&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;cmath&gt;</span><br/>\u00a0<br/><span class=\"kw4\">double</span> log2<span class=\"br0\">(</span> <span class=\"kw4\">double</span> number <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">return</span> <span class=\"kw3\">log</span><span class=\"br0\">(</span> number <span class=\"br0\">)</span> <span class=\"sy2\">/</span> <span class=\"kw3\">log</span><span class=\"br0\">(</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"kw4\">int</span> argc , <span class=\"kw4\">char</span> <span class=\"sy2\">*</span>argv<span class=\"br0\">[</span> <span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">string</span> teststring<span class=\"br0\">(</span> argv<span class=\"br0\">[</span> <span class=\"nu0\">1</span> <span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">map</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span> , <span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> frequencies <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">char</span> c <span class=\"sy4\">:</span> teststring <span class=\"br0\">)</span><br/>     frequencies<span class=\"br0\">[</span> c <span class=\"br0\">]</span> <span class=\"sy2\">++</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw4\">int</span> numlen <span class=\"sy1\">=</span> teststring.<span class=\"me1\">length</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw4\">double</span> infocontent <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">pair</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span> , <span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> p <span class=\"sy4\">:</span> frequencies <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw4\">double</span> freq <span class=\"sy1\">=</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> p.<span class=\"me1\">second</span> <span class=\"br0\">)</span> <span class=\"sy2\">/</span> numlen <span class=\"sy4\">;</span><br/>      infocontent <span class=\"sy2\">-</span><span class=\"sy1\">=</span> freq <span class=\"sy2\">*</span> log2<span class=\"br0\">(</span> freq <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span><br/>\u00a0<br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"The information content of \"</span> <span class=\"sy1\">&lt;&lt;</span> teststring <br/>      <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" is \"</span> <span class=\"sy1\">&lt;&lt;</span> infocontent <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 7, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> entropy <span class=\"br0\">[</span>s<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>len <span class=\"br0\">(</span><span class=\"kw1\">count</span> s<span class=\"br0\">)</span>, log<span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"br0\">(</span>Math<span class=\"sy0\">/</span>log <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span> <span class=\"br0\">(</span>frequencies s<span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>_ v<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>rf <span class=\"br0\">(</span><span class=\"sy0\">/</span> v len<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>                  <span class=\"br0\">(</span><span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>Math<span class=\"sy0\">/</span>log rf<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> log<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> rf<span class=\"br0\">)</span> Math<span class=\"sy0\">/</span>abs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">reduce</span> <span class=\"sy0\">+</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "C#", "loc": 41, "block": "<pre class=\"csharp highlighted_source\">\u00a0<br/><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">namespace</span> Entropy<br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">class</span> Program<br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> logtwo<span class=\"br0\">(</span><span class=\"kw4\">double</span> num<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">return</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Log</span><span class=\"br0\">(</span>num<span class=\"br0\">)</span><span class=\"sy0\">/</span>Math<span class=\"sy0\">.</span><span class=\"me1\">Log</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\tlabel1<span class=\"sy0\">:</span><br/>\t\t\t<span class=\"kw4\">string</span> input <span class=\"sy0\">=</span> Console<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw4\">double</span> infoC<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\tDictionary<span class=\"sy0\">&lt;</span><span class=\"kw4\">char</span>,<span class=\"kw4\">double</span><span class=\"sy0\">&gt;</span> table <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Dictionary<span class=\"sy0\">&lt;</span><span class=\"kw4\">char</span>, <span class=\"kw4\">double</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>\t\t\t<span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">char</span> c <span class=\"kw1\">in</span> input<span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>table<span class=\"sy0\">.</span><span class=\"me1\">ContainsKey</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t\ttable<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">++;</span><br/>\t\t\t\t    <span class=\"kw1\">else</span><br/>\t\t\t\t    \ttable<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>c,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw4\">double</span> freq<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>KeyValuePair<span class=\"sy0\">&lt;</span><span class=\"kw4\">char</span>,<span class=\"kw4\">double</span><span class=\"sy0\">&gt;</span> letter <span class=\"kw1\">in</span> table<span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\tfreq<span class=\"sy0\">=</span>letter<span class=\"sy0\">.</span><span class=\"kw1\">Value</span><span class=\"sy0\">/</span>input<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">;</span><br/>\t\t\t\tinfoC<span class=\"sy0\">+=</span>freq<span class=\"sy0\">*</span>logtwo<span class=\"br0\">(</span>freq<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\tinfoC<span class=\"sy0\">*=-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"The Entropy of {0} is {1}\"</span>,input,infoC<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">goto</span> label1<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "CoffeeScript", "loc": 13, "block": "<pre class=\"coffeescript highlighted_source\">entropy = <span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    freq = <span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>        result = <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw1\">for</span> ch <span class=\"kw1\">in</span> s.<span class=\"me1\">split</span> <span class=\"st0\">\"\"</span><br/>            result<span class=\"br0\">[</span>ch<span class=\"br0\">]</span> <span class=\"sy0\">?</span>= <span class=\"nu0\">0</span><br/>            result<span class=\"br0\">[</span>ch<span class=\"br0\">]</span><span class=\"sy0\">++</span><br/>        <span class=\"kw1\">return</span> result<br/>\u00a0<br/>    frq = freq s<br/>    n = s.<span class=\"me1\">length</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>frq<span class=\"br0\">[</span>f<span class=\"br0\">]</span><span class=\"sy0\">/</span>n <span class=\"kw1\">for</span> f <span class=\"kw1\">of</span> frq<span class=\"br0\">)</span>.<span class=\"me1\">reduce</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>e<span class=\"sy0\">,</span> p<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> e <span class=\"sy0\">-</span> p <span class=\"sy0\">*</span> Math.<span class=\"me1\">log</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> Math.<span class=\"me1\">LOG2E</span><br/>\u00a0<br/>console.<span class=\"me1\">log</span> <span class=\"st0\">\"The entropy of the string '1223334444' is #{entropy '1223334444'}\"</span></pre>"}, {"lang": "Common Lisp", "loc": 10, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> entropy <span class=\"br0\">(</span>string<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>table <span class=\"br0\">(</span>make-hash-table <span class=\"sy0\">:</span><span class=\"me1\">test</span> '<span class=\"kw1\">equal</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>entropy <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">mapc</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>gethash c table<span class=\"br0\">)</span> <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>gethash c table <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>coerce string '<span class=\"kw1\">list</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>maphash <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>k v<span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>decf entropy <span class=\"br0\">(</span>* <span class=\"br0\">(</span>/ v <span class=\"br0\">(</span><span class=\"kw1\">length</span> input-string<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                <span class=\"br0\">(</span>log <span class=\"br0\">(</span>/ v <span class=\"br0\">(</span><span class=\"kw1\">length</span> input-string<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             table<span class=\"br0\">)</span><br/>    entropy<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 16, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">math</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">double</span> entropy<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span>T<span class=\"br0\">[</span><span class=\"br0\">]</span> s<span class=\"br0\">)</span><br/><span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">__traits</span><span class=\"br0\">(</span>compiles<span class=\"sy0\">,</span> s.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">immutable</span> sLen <span class=\"sy0\">=</span> s.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> s<br/>           .<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>           .<span class=\"me1\">group</span><br/>           .<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>g <span class=\"sy0\">=&gt;</span> g<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">/</span> <span class=\"kw4\">double</span><span class=\"br0\">(</span>sLen<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           .<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>p <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">-</span>p <span class=\"sy0\">*</span> p.<span class=\"me1\">log2</span><span class=\"br0\">)</span><br/>           .<span class=\"me1\">sum</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">\"1223334444\"</span>d.<span class=\"me1\">dup</span>.<span class=\"me1\">entropy</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 20, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>lib 'hash<span class=\"br0\">)</span><br/><span class=\"co1\">;; counter: hash-table[key]++</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>count<span class=\"sy0\">++</span> ht k <span class=\"br0\">)</span><br/><span class=\"br0\">(</span>hash<span class=\"sy0\">-</span>set ht k <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>hash<span class=\"sy0\">-</span>ref<span class=\"sy0\">!</span> ht k <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>hi count n <span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">define</span> pi <span class=\"br0\">(</span><span class=\"sy0\">//</span> count n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> pi <span class=\"br0\">(</span>log2 pi<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; (H [string|list]) \u2192 entropy (bits)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>H info<span class=\"br0\">)</span> <br/>\t<span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"kw1\">S</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw1\">string?</span> info<span class=\"br0\">)</span> <span class=\"br0\">(</span>string<span class=\"sy0\">-&gt;</span><span class=\"kw1\">list</span> info<span class=\"br0\">)</span> info<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">define</span> ht <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>hash<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">define</span> n <span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"kw1\">S</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t<span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">s</span> <span class=\"kw1\">S</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>count<span class=\"sy0\">++</span> ht <span class=\"kw1\">s</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>for<span class=\"sy0\">/</span>sum <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">s</span> <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>set <span class=\"kw1\">S</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"br0\">(</span>hi <span class=\"br0\">(</span>hash<span class=\"sy0\">-</span>ref ht <span class=\"kw1\">s</span><span class=\"br0\">)</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 41, "block": "<pre class=\"text highlighted_source\">import system'math.<br/>import system'collections.<br/>import system'routines.<br/>import extensions.<br/>\u00a0<br/>extension $op<br/>{<br/>    logTwo<br/>        = self ln / 2 ln.<br/>}<br/>\u00a0<br/>symbol program =<br/>[<br/>    var input\u00a0:= console readLine.<br/>    var infoC\u00a0:= 0.0r.<br/>    var table\u00a0:= Dictionary new.<br/>\u00a0<br/>    input forEach(:ch)<br/>    [<br/>        var n\u00a0:= table[ch].<br/>        if ($nil == n)<br/>        [<br/>            table[ch]\u00a0:= 1.<br/>        ];<br/>        [<br/>            table[ch]\u00a0:= n + 1.<br/>        ]<br/>    ].<br/>\u00a0<br/>    var freq\u00a0:= 0.<br/>    table forEach(:letter)<br/>    [<br/>        freq\u00a0:= letter int; realDiv(input length).<br/>\u00a0<br/>        infoC += (freq * freq logTwo).<br/>    ].<br/>\u00a0<br/>    infoC *= -1.<br/>\u00a0<br/>    console printLine(\"The Entropy of \", input, \" is \", infoC).<br/>].</pre>"}, {"lang": "Elixir", "loc": 14, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  def entropy(str) do<br/>    leng = String.length(str)<br/>    String.graphemes(str)<br/>    |&gt; Enum.group_by(&amp;(&amp;1))<br/>    |&gt; Enum.map(fn{_,value} -&gt; length(value) end)<br/>    |&gt; Enum.reduce(0, fn count, entropy -&gt;<br/>         freq = count / leng<br/>         entropy - freq *\u00a0:math.log2(freq)<br/>       end)<br/>  end<br/>end<br/>\u00a0<br/>IO.inspect RC.entropy(\"1223334444\")</pre>"}, {"lang": "Emacs Lisp", "loc": 15, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> shannon-entropy <span class=\"br0\">(</span>input<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>freq-table <span class=\"br0\">(</span>make-hash-table<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>entropy <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"br0\">(</span>+ <span class=\"br0\">(</span><span class=\"kw1\">length</span> input<span class=\"br0\">)</span> <span class=\"nu0\">0.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>\t      <span class=\"br0\">(</span>puthash x<br/>\t\t       <span class=\"br0\">(</span>+ <span class=\"nu0\">1</span> <span class=\"br0\">(</span>gethash x freq-table <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t       freq-table<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t    input<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>maphash <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>k v<span class=\"br0\">)</span><br/>\t       <span class=\"br0\">(</span><span class=\"kw1\">set</span> 'entropy <span class=\"br0\">(</span>+ entropy<br/>\t\t\t     <span class=\"br0\">(</span>* <span class=\"br0\">(</span>/ v <span class=\"kw1\">length</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">(</span>log <span class=\"br0\">(</span>/ v <span class=\"kw1\">length</span><span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t     freq-table<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>- entropy<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Erlang", "loc": 21, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> entropy <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>shannon<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">shannon</span><span class=\"br0\">(</span> <span class=\"re5\">String</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">shannon_information_content</span><span class=\"br0\">(</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foldl</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> count<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">new</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">String</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">String</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">shannon</span><span class=\"br0\">(</span> <span class=\"st0\">\"1223334444\"</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">count</span><span class=\"br0\">(</span> <span class=\"re5\">Character</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">update_counter</span><span class=\"br0\">(</span> <span class=\"re5\">Character</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">shannon_information_content</span><span class=\"br0\">(</span> <span class=\"re5\">Dict</span><span class=\"sy1\">,</span> <span class=\"re5\">String_length</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"br0\">{</span><span class=\"re5\">_String_length</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">fold</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span> shannon_information_content<span class=\"sy3\">/</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">String_length</span><span class=\"sy1\">,</span> <span class=\"nu0\">0.0</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Acc</span> <span class=\"sy3\">/</span> <a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">log</span><span class=\"br0\">(</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">shannon_information_content</span><span class=\"br0\">(</span> <span class=\"re5\">_Character</span><span class=\"sy1\">,</span> <span class=\"re5\">How_many</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">String_length</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"re5\">Frequency</span> <span class=\"sy3\">=</span> <span class=\"re5\">How_many</span> <span class=\"sy3\">/</span> <span class=\"re5\">String_length</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">{</span><span class=\"re5\">String_length</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span> <span class=\"sy3\">-</span> <span class=\"br0\">(</span><span class=\"re5\">Frequency</span> <span class=\"sy3\">*</span> <a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">log</span><span class=\"br0\">(</span><span class=\"re5\">Frequency</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Euler Math Toolbox", "loc": 8, "block": "<pre class=\"text highlighted_source\">&gt;function entropy (s) ...<br/>$  v=strtochar(s);<br/>$  m=getmultiplicities(unique(v),v);<br/>$  m=m/sum(m);<br/>$  return sum(-m*logbase(m,2))<br/>$endfunction<br/>&gt;entropy(\"1223334444\")<br/> 1.84643934467</pre>"}, {"lang": "F#", "loc": 11, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System<br/>\u00a0<br/><span class=\"kw1\">let</span> ld x <span class=\"sy0\">=</span> Math.<span class=\"me1\">Log</span> x <span class=\"sy0\">/</span> Math.<span class=\"me1\">Log</span> <span class=\"nu0\">2</span>.<br/>\u00a0<br/><span class=\"kw1\">let</span> entropy <span class=\"br0\">(</span>s\u00a0: <span class=\"kw4\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> n <span class=\"sy0\">=</span> <span class=\"kw4\">float</span> s.<span class=\"me1\">Length</span><br/>    <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">groupBy</span> id s<br/>    <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>_, vals<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw4\">float</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">length</span> vals<span class=\"br0\">)</span> <span class=\"sy0\">/</span> n<span class=\"br0\">)</span><br/>    <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">fold</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> e p <span class=\"sy0\">-&gt;</span> e <span class=\"sy0\">-</span> p <span class=\"sy0\">*</span> ld p<span class=\"br0\">)</span> <span class=\"nu0\">0</span>. <br/>\u00a0<br/><span class=\"me1\">printfn</span> <span class=\"st0\">\"%f\"</span> <span class=\"br0\">(</span>entropy <span class=\"st0\">\"1223334444\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Factor", "loc": 11, "block": "<pre class=\"text highlighted_source\">USING: assocs kernel math math.functions math.statistics<br/>prettyprint sequences\u00a0;<br/>IN: rosetta-code.entropy<br/>\u00a0<br/>: shannon-entropy ( str -- entropy )<br/>    [ length ] [ histogram &gt;alist [ second ] map ] bi<br/>    [ swap / ] with map<br/>    [ dup log 2 log / * ] map-sum neg\u00a0;<br/>\u00a0<br/>\"1223334444\" shannon-entropy .<br/>\"Factor is my favorite programming language.\" shannon-entropy .</pre>"}, {"lang": "Forth", "loc": 22, "block": "<pre class=\"text highlighted_source\">: flog2 ( f -- f ) fln 2e fln f/\u00a0;<br/>\u00a0<br/>create freq 256 cells allot<br/>\u00a0<br/>: entropy ( str len -- f )<br/>  freq 256 cells erase<br/>  tuck<br/>  bounds do<br/>    i <a class=\"__cf_email__\" data-cfemail=\"d9ba99\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> cells freq +<br/>    1 swap +!<br/>  loop<br/>  0e<br/>  256 0 do<br/>    i cells freq + @\u00a0?dup if<br/>      s&gt;f dup s&gt;f f/<br/>      fdup flog2 f* f-<br/>    then<br/>  loop<br/>  drop\u00a0;<br/>\u00a0<br/>s\" 1223334444\" entropy f.     \\ 1.84643934467102  ok<br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 60, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/><span class=\"co1\">!-*- mode: compilation; default-directory: \"/tmp/\" -*-</span><br/><span class=\"co1\">!Compilation started at Tue May 21 21:43:12</span><br/><span class=\"co1\">!</span><br/><span class=\"co1\">!a=./f &amp;&amp; make $a &amp;&amp; OMP_NUM_THREADS=2 $a 1223334444</span><br/><span class=\"co1\">!gfortran -std=f2008 -Wall -ffree-form -fall-intrinsics f.f08 -o f</span><br/><span class=\"co1\">! Shannon entropy of 1223334444 is    1.84643936    </span><br/><span class=\"co1\">!</span><br/><span class=\"co1\">!Compilation finished at Tue May 21 21:43:12</span><br/>\u00a0<br/><span class=\"kw1\">program</span> shannonEntropy<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">num</span>, L, <span class=\"kw1\">status</span><br/>  <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=</span><span class=\"nu0\">2048</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">s</span><br/>  num <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">call</span> get_command_argument<span class=\"br0\">(</span>num, s, L, <span class=\"kw1\">status</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">/=</span> <span class=\"kw1\">status</span><span class=\"br0\">)</span> <span class=\"kw2\">.<span class=\"me1\">or</span>.</span> <span class=\"br0\">(</span>L <span class=\"kw2\">.<span class=\"me1\">eq</span>.</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    write<span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"st0\">'Expected a command line argument with some length.'</span><br/>  <span class=\"kw1\">else</span><br/>    write<span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"st0\">'Shannon entropy of '</span><span class=\"sy0\">//</span><span class=\"br0\">(</span>s<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>L<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">//</span><span class=\"st0\">' is '</span>, se<span class=\"br0\">(</span>s<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>L<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">endif</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>  <span class=\"co1\">!     algebra</span><br/>  <span class=\"co1\">!</span><br/>  <span class=\"co1\">! 2**x = y</span><br/>  <span class=\"co1\">! x*log(2) = log(y)</span><br/>  <span class=\"co1\">! x = log(y)/log(2)</span><br/>\u00a0<br/>  <span class=\"co1\">!   NB. The j solution</span><br/>  <span class=\"co1\">!   entropy=:  +/@:<a class=\"__cf_email__\" data-cfemail=\"e7caa7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(* 2&amp;^.)@(#/.~\u00a0% #)</span><br/>  <span class=\"co1\">!   entropy '1223334444'</span><br/>  <span class=\"co1\">!1.84644</span><br/>\u00a0<br/>  <span class=\"kw3\">real</span> <span class=\"kw1\">function</span> se<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>    <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=*</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">s</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"nu0\">256</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">tallies</span><br/>    <span class=\"kw3\">real</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"nu0\">256</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">norm</span><br/>    tallies <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">call</span> TallyKey<span class=\"br0\">(</span>s, tallies<span class=\"br0\">)</span><br/>    <span class=\"co1\">! J's #/. works with the set of items in the input.</span><br/>    <span class=\"co1\">! TallyKey is sufficiently close that, with the merge, gets the correct result.</span><br/>    norm <span class=\"sy0\">=</span> tallies <span class=\"sy0\">/</span> <span class=\"kw3\">real</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    se <span class=\"sy0\">=</span> sum<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"br0\">(</span>norm<span class=\"sy0\">*</span><span class=\"kw4\">log</span><span class=\"br0\">(</span><span class=\"kw4\">merge</span><span class=\"br0\">(</span><span class=\"nu0\">1.0</span>, norm, norm <span class=\"kw2\">.<span class=\"me1\">eq</span>.</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"kw4\">log</span><span class=\"br0\">(</span><span class=\"nu0\">2.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> se<br/>\u00a0<br/>  <span class=\"kw1\">subroutine</span> TallyKey<span class=\"br0\">(</span>s, counts<span class=\"br0\">)</span><br/>    <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=*</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">s</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"nu0\">256</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">out</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">counts</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, j<br/>    counts <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,<span class=\"kw4\">len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>      j <span class=\"sy0\">=</span> <span class=\"kw4\">iachar</span><span class=\"br0\">(</span>s<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      counts<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> counts<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> TallyKey<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> shannonEntropy<br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 34, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 25-06-2015</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> calc_entropy<span class=\"br0\">(</span>source <span class=\"kw1\">As</span> <span class=\"kw1\">String</span>, base_ <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> i, sourcelen = <span class=\"kw1\">Len</span><span class=\"br0\">(</span>source<span class=\"br0\">)</span>, totalchar<span class=\"br0\">(</span><span class=\"nu0\">255</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> prop, entropy<br/>\u00a0<br/>    <span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> sourcelen -<span class=\"nu0\">1</span><br/>        totalchar<span class=\"br0\">(</span>source<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> += <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"kw1\">Print</span> <span class=\"st0\">\"Char    count\"</span><br/>    <span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">255</span><br/>        <span class=\"kw1\">If</span> totalchar<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Continue</span> <span class=\"kw1\">For</span><br/>        <span class=\"kw1\">Print</span> <span class=\"st0\">\"   \"</span>; <span class=\"kw1\">Chr</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>; <span class=\"kw1\">Using</span> <span class=\"st0\">\"   ######\"</span>; totalchar<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>        prop = totalchar<span class=\"br0\">(</span>i<span class=\"br0\">)</span> / sourcelen<br/>        entropy = entropy - <span class=\"br0\">(</span>prop * <span class=\"kw1\">Log</span> <span class=\"br0\">(</span>prop<span class=\"br0\">)</span> / <span class=\"kw1\">Log</span><span class=\"br0\">(</span>base_<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"The Entropy of \"</span>; <span class=\"kw1\">Chr</span><span class=\"br0\">(</span><span class=\"nu0\">34</span><span class=\"br0\">)</span>; source; <span class=\"kw1\">Chr</span><span class=\"br0\">(</span><span class=\"nu0\">34</span><span class=\"br0\">)</span>; <span class=\"st0\">\" is\"</span>; entropy<br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/>calc_entropy<span class=\"br0\">(</span><span class=\"st0\">\"1223334444\"</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span><br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">InKey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "friendly interactive shell", "loc": 21, "block": "<pre class=\"text highlighted_source\">function entropy<br/>    for arg in $argv<br/>        set name count_$arg<br/>        if not count $$name &gt; /dev/null<br/>            set $name 0<br/>            set values $values $arg<br/>        end<br/>        set $name (math $$name + 1)<br/>    end<br/>    set entropy 0<br/>    for value in $values<br/>        set name count_$value<br/>        set entropy (echo \"<br/>            scale = 50<br/>            p = \"$$name\" / \"(count $argv)\"<br/>            $entropy - p * l(p)<br/>        \" | bc -l)<br/>    end<br/>    echo \"$entropy / l(2)\" | bc -l<br/>end<br/>entropy (echo 1223334444 | fold -w1)</pre>"}, {"lang": "Go", "loc": 24, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math\"</span><br/>    <span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">(){</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>H<span class=\"sy1\">(</span><span class=\"st0\">\"1223334444\"</span><span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> H<span class=\"sy1\">(</span>data <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>entropy <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> data <span class=\"sy3\">==</span> <span class=\"st0\">\"\"</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"nu0\">256</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        px <span class=\"sy2\">:=</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>strings<span class=\"sy3\">.</span>Count<span class=\"sy1\">(</span>data<span class=\"sy1\">,</span> <span class=\"kw4\">string</span><span class=\"sy1\">(</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">))))</span> <span class=\"sy3\">/</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>data<span class=\"sy1\">))</span><br/>        <span class=\"kw1\">if</span> px &gt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>\t    entropy <span class=\"sy2\">+=</span> <span class=\"sy3\">-</span>px <span class=\"sy3\">*</span> math<span class=\"sy3\">.</span>Log2<span class=\"sy1\">(</span>px<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> entropy<br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 6, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a>.<span class=\"me1\">metaClass</span>.<span class=\"me1\">getShannonEntrophy</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"sy0\">-</span>delegate.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20inject\"><span class=\"kw5\">inject</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span>:<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> map, v <span class=\"sy0\">-&gt;</span> map<span class=\"br0\">[</span>v<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>map<span class=\"br0\">[</span>v<span class=\"br0\">]</span> <span class=\"sy0\">?</span>: <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> map <span class=\"br0\">}</span>.<span class=\"me1\">values</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20inject\"><span class=\"kw5\">inject</span></a><span class=\"br0\">(</span><span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> sum, v <span class=\"sy0\">-&gt;</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> p <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=BigDecimal&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">BigDecimal</span></a><span class=\"br0\">)</span>v / delegate.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        sum <span class=\"sy0\">+</span> p <span class=\"sy0\">*</span> <a href=\"http://www.google.de/search?as_q=Math&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">log</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span> / <a href=\"http://www.google.de/search?as_q=Math&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 8, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List<br/>\u00a0<br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> entropy <span class=\"st0\">\"1223334444\"</span><br/>\u00a0<br/>entropy <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a> a<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Floating\"><span class=\"kw4\">Floating</span></a> c<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> c  <br/>entropy <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> lg <span class=\"sy0\">.</span> fq <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> genericLength <span class=\"sy0\">.</span> group <span class=\"sy0\">.</span> sort <br/>  <span class=\"kw1\">where</span> lg c <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>c <span class=\"sy0\">*</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:logBase\"><span class=\"kw3\">logBase</span></a> <span class=\"nu0\">2</span> c<br/>        fq c <span class=\"sy0\">=</span> <span class=\"kw1\">let</span> sc <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a> c <span class=\"kw1\">in</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span><span class=\"sy0\">/</span> sc<span class=\"br0\">)</span> c</pre>"}, {"lang": "Icon and Unicon", "loc": 11, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>    s <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>a <span class=\"sy0\">|</span> <span class=\"st0\">\"1223334444\"</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span>H<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> H<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    P <span class=\"sy0\">:=</span> <span class=\"kw4\">table</span><span class=\"br0\">(</span><span class=\"nu0\">0.0</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> P<span class=\"br0\">[</span><span class=\"sy0\">!</span>s<span class=\"br0\">]</span> <span class=\"sy0\">+:=</span> <span class=\"nu0\">1.0</span><span class=\"sy0\">/*</span>s<br/>    <span class=\"kw1\">every</span> <span class=\"br0\">(</span>h <span class=\"sy0\">:=</span> <span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <span class=\"sy0\">-:=</span> P<span class=\"br0\">[</span>c <span class=\"sy0\">:=</span> <span class=\"kw4\">key</span><span class=\"br0\">(</span>P<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"kw4\">log</span><span class=\"br0\">(</span>P<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> h<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">   entropy=:  +/@<span class=\"sy0\">(</span><a class=\"__cf_email__\" data-cfemail=\"6b462b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>* <span class=\"nu0\">2</span>&amp;^.<span class=\"sy0\">)</span>@<span class=\"sy0\">(</span>#/.~\u00a0% #<span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 51, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">import</span> <span class=\"co2\">java.lang.Math</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.Map</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.HashMap</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">public</span> <span class=\"kw2\">class</span> REntropy <span class=\"br0\">{</span><br/>\u00a0<br/>  @<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/SuppressWarnings.html\"><span class=\"kw21\">SuppressWarnings</span></a><span class=\"br0\">(</span><span class=\"st0\">\"boxing\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">double</span> getShannonEntropy<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">int</span> n = <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Map.html\"><span class=\"kw46\">Map</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Character.html\"><span class=\"kw21\">Character</span></a>, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span> occ = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/HashMap.html\"><span class=\"kw46\">HashMap</span></a><span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw3\">int</span> c_ = <span class=\"nu0\">0</span><span class=\"sy0\">;</span> c_ <span class=\"sy0\">&lt;</span> s.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> ++c_<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw3\">char</span> cx = s.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>c_<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>occ.<span class=\"me1\">containsKey</span><span class=\"br0\">(</span>cx<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        occ.<span class=\"me1\">put</span><span class=\"br0\">(</span>cx, occ.<span class=\"me1\">get</span><span class=\"br0\">(</span>cx<span class=\"br0\">)</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        occ.<span class=\"me1\">put</span><span class=\"br0\">(</span>cx, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>      ++n<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw3\">double</span> e = <span class=\"nu0\">0.0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Map.Entry.html\"><span class=\"kw46\">Map.<span class=\"me1\">Entry</span></span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Character.html\"><span class=\"kw21\">Character</span></a>, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span> entry\u00a0: occ.<span class=\"me1\">entrySet</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw3\">char</span> cx = entry.<span class=\"me1\">getKey</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw3\">double</span> p = <span class=\"br0\">(</span><span class=\"kw3\">double</span><span class=\"br0\">)</span> entry.<span class=\"me1\">getValue</span><span class=\"br0\">(</span><span class=\"br0\">)</span> / n<span class=\"sy0\">;</span><br/>      e += p <span class=\"sy0\">*</span> log2<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">return</span> -e<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <span class=\"kw3\">double</span> log2<span class=\"br0\">(</span><span class=\"kw3\">double</span> a<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">return</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Math.html\"><span class=\"kw21\">Math</span></a>.<span class=\"me1\">log</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> / <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Math.html\"><span class=\"kw21\">Math</span></a>.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> sstr = <span class=\"br0\">{</span><br/>      <span class=\"st0\">\"1223334444\"</span>,<br/>      <span class=\"st0\">\"1223334444555555555\"</span>, <br/>      <span class=\"st0\">\"122333\"</span>, <br/>      <span class=\"st0\">\"1227774444\"</span>,<br/>      <span class=\"st0\">\"aaBBcccDDDD\"</span>,<br/>      <span class=\"st0\">\"1234567890abcdefghijklmnopqrstuvwxyz\"</span>,<br/>      <span class=\"st0\">\"Rosetta Code\"</span>,<br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> ss\u00a0: sstr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw3\">double</span> entropy = REntropy.<span class=\"me1\">getShannonEntropy</span><span class=\"br0\">(</span>ss<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"Shannon entropy of\u00a0%40s:\u00a0%.12f%n\"</span>, <span class=\"st0\">\"<span class=\"es0\">\\\"</span>\"</span> + ss + <span class=\"st0\">\"<span class=\"es0\">\\\"</span>\"</span>, entropy<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">return</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 31, "block": "<pre class=\"javascript highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>shannon<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"co1\">// Create a dictionary of character frequencies and iterate over it.</span><br/>  <span class=\"kw1\">function</span> process<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> evaluator<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> h <span class=\"sy0\">=</span> <span class=\"kw4\">Object</span>.<span class=\"me1\">create</span><span class=\"br0\">(</span><span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> k<span class=\"sy0\">;</span><br/>    s.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span>.<span class=\"me1\">forEach</span><span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      h<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> h<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">++</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>h<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>evaluator<span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"br0\">(</span>k <span class=\"kw1\">in</span> h<span class=\"br0\">)</span> evaluator<span class=\"br0\">(</span>k<span class=\"sy0\">,</span> h<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> h<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"co1\">// Measure the entropy of a string in bits per symbol.</span><br/>  shannon.<span class=\"me1\">entropy</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span>len <span class=\"sy0\">=</span> s.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>    process<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>k<span class=\"sy0\">,</span> f<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">var</span> p <span class=\"sy0\">=</span> f<span class=\"sy0\">/</span>len<span class=\"sy0\">;</span><br/>      sum <span class=\"sy0\">-=</span> p <span class=\"sy0\">*</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">log</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> sum<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span>window.<span class=\"me1\">shannon</span> <span class=\"sy0\">=</span> window.<span class=\"me1\">shannon</span> <span class=\"sy0\">||</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// Log the Shannon entropy of a string.</span><br/><span class=\"kw1\">function</span> logEntropy<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  console.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"st0\">'Entropy of \"'</span> <span class=\"sy0\">+</span> s <span class=\"sy0\">+</span> <span class=\"st0\">'\" in bits per symbol:'</span><span class=\"sy0\">,</span> shannon.<span class=\"me1\">entropy</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>logEntropy<span class=\"br0\">(</span><span class=\"st0\">'1223334444'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>logEntropy<span class=\"br0\">(</span><span class=\"st0\">'0'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>logEntropy<span class=\"br0\">(</span><span class=\"st0\">'01'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>logEntropy<span class=\"br0\">(</span><span class=\"st0\">'0123'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>logEntropy<span class=\"br0\">(</span><span class=\"st0\">'01234567'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>logEntropy<span class=\"br0\">(</span><span class=\"st0\">'0123456789abcdef'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 10, "block": "<pre class=\"text highlighted_source\"># Input: an array of strings.<br/># Output: an object with the strings as keys, the values of which are the corresponding frequencies.<br/>def counter:<br/>  reduce .[] as $item ( {}; .[$item] += 1 )\u00a0;<br/>\u00a0<br/># entropy in bits of the input string<br/>def entropy:<br/>  (explode | map( [.] | implode ) | counter<br/>    | [ .[] | . * log ] | add) as $sum<br/>  | ((length|log) - ($sum / length)) / (2|log)\u00a0;</pre>"}, {"lang": "Julia", "loc": 3, "block": "<pre class=\"text highlighted_source\">entropy(s) = -sum(x -&gt; x * log(2, x), count(x -&gt; x == c, s) / length(s) for c in unique(s))<br/>@show entropy(\"1223334444\")<br/>@show entropy([1, 2, 3, 1, 2, 1, 2, 3, 1, 2, 3, 4, 5])</pre>"}, {"lang": "Kotlin", "loc": 33, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun log2<span class=\"br0\">(</span>d<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Math.<span class=\"me1\">log</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span> / Math.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"nu0\">2.0</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun shannon<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> Double <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> counters <span class=\"sy0\">=</span> mutableMapOf<span class=\"sy0\">&lt;</span>Char, Int<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>c in s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>counters.<span class=\"me1\">containsKey</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span> counters<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> counters<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">!!</span> + <span class=\"nu0\">1</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> counters.<span class=\"me1\">put</span><span class=\"br0\">(</span>c, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> nn <span class=\"sy0\">=</span> s.<span class=\"me1\">length</span>.<span class=\"me1\">toDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>key in counters.<span class=\"me1\">keys</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>      <br/>       <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> term <span class=\"sy0\">=</span> counters<span class=\"br0\">[</span>key<span class=\"br0\">]</span><span class=\"sy0\">!!</span> / nn<br/>       sum +<span class=\"sy0\">=</span> term <span class=\"sy0\">*</span> log2<span class=\"br0\">(</span>term<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> -sum<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> samples <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><br/>        <span class=\"st0\">\"1223334444\"</span>,<br/>        <span class=\"st0\">\"1223334444555555555\"</span>, <br/>        <span class=\"st0\">\"122333\"</span>, <br/>        <span class=\"st0\">\"1227774444\"</span>,<br/>        <span class=\"st0\">\"aaBBcccDDDD\"</span>,<br/>        <span class=\"st0\">\"1234567890abcdefghijklmnopqrstuvwxyz\"</span>,<br/>        <span class=\"st0\">\"Rosetta Code\"</span><br/>    <span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"            String                             Entropy\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"------------------------------------      ------------------\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>sample in samples<span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"st0\">\"${sample.padEnd(36)}  -&gt;  ${\"</span><span class=\"sy0\">%</span>18.16f<span class=\"st0\">\".format(shannon(sample))}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 34, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/><span class=\"kw1\">dim</span> countOfChar<span class=\"br0\">(</span> <span class=\"nu0\">255</span><span class=\"br0\">)</span> <span class=\"co1\">' all possible one-byte ASCII chars</span><br/>\u00a0<br/>    source$    <span class=\"sy0\">=</span><span class=\"st0\">\"1223334444\"</span><br/>    charCount  <span class=\"sy0\">=</span><span class=\"kw2\">len</span><span class=\"br0\">(</span> source$<span class=\"br0\">)</span><br/>    usedChar$  <span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span> source$<span class=\"br0\">)</span>   <span class=\"co1\">'   count which chars are used in source</span><br/>        ch$             <span class=\"sy0\">=</span><span class=\"kw2\">mid$</span><span class=\"br0\">(</span> source$<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw2\">not</span><span class=\"br0\">(</span> <span class=\"kw2\">instr</span><span class=\"br0\">(</span> usedChar$<span class=\"sy0\">,</span> ch$<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> usedChar$ <span class=\"sy0\">=</span>usedChar$ <span class=\"sy0\">+</span>ch$<br/>        <span class=\"co1\">'currentCh$      =mid$(</span><br/>        j               <span class=\"sy0\">=</span><span class=\"kw2\">instr</span><span class=\"br0\">(</span> usedChar$<span class=\"sy0\">,</span> ch$<span class=\"br0\">)</span><br/>        countOfChar<span class=\"br0\">(</span> j<span class=\"br0\">)</span> <span class=\"sy0\">=</span>countOfChar<span class=\"br0\">(</span> j<span class=\"br0\">)</span> <span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">next</span> i<br/>\u00a0<br/>    l <span class=\"sy0\">=</span><span class=\"kw2\">len</span><span class=\"br0\">(</span> usedChar$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> l<br/>        probability <span class=\"sy0\">=</span>countOfChar<span class=\"br0\">(</span> i<span class=\"br0\">)</span> <span class=\"sy0\">/</span>charCount<br/>        entropy     <span class=\"sy0\">=</span>entropy <span class=\"sy0\">-</span><span class=\"br0\">(</span> probability <span class=\"sy0\">*</span>logBase<span class=\"br0\">(</span> probability<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">next</span> i<br/>\u00a0<br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\" Characters used and the number of occurrences of each \"</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> l<br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\" '\"</span>; <span class=\"kw2\">mid$</span><span class=\"br0\">(</span> usedChar$<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>; <span class=\"st0\">\"'\"</span><span class=\"sy0\">,</span> countOfChar<span class=\"br0\">(</span> i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">next</span> i<br/>\u00a0<br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\" Entropy of '\"</span>; source$; <span class=\"st0\">\"' is  \"</span>; entropy; <span class=\"st0\">\" bits.\"</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\" The result should be around 1.84644 bits.\"</span><br/>\u00a0<br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">function</span> logBase<span class=\"br0\">(</span> x<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"co1\">'   in LB log() is base 'e'.</span><br/>        logBase <span class=\"sy0\">=</span><span class=\"kw2\">log</span><span class=\"br0\">(</span> x<span class=\"br0\">)</span> <span class=\"sy0\">/</span><span class=\"kw2\">log</span><span class=\"br0\">(</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0</pre>"}, {"lang": "Lang5", "loc": 17, "block": "<pre class=\"text highlighted_source\">: -rot rot rot\u00a0; [] '__A set\u00a0: dip swap __A swap 1 compress append '__A<br/>set execute __A -1 extract nip\u00a0;\u00a0: nip swap drop\u00a0;\u00a0: sum '+ reduce\u00a0;<br/>: 2array 2 compress\u00a0;\u00a0: comb \"\" split\u00a0;\u00a0: lensize length nip\u00a0;<br/>: &lt;group&gt; #( a -- 'a )<br/>    grade subscript dup 's dress distinct strip<br/>    length 1 2array reshape swap<br/>    'A set<br/>   \u00a0: `filter(*)  A in A swap select\u00a0;<br/>    '`filter apply<br/>   \u00a0;<br/>\u00a0<br/>: elements(*)  lensize\u00a0;<br/>: entropy #( s -- n )<br/>    length \"&lt;group&gt; 'elements apply\" dip /<br/>    dup neg swap log * 2 log / sum\u00a0;<br/>\u00a0<br/>\"1223334444\" comb entropy . # 1.84643934467102</pre>"}, {"lang": "Lua", "loc": 19, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> log2 <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw3\">math.log</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"kw3\">math.log</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> entropy <span class=\"br0\">(</span>X<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> N<span class=\"sy0\">,</span> count<span class=\"sy0\">,</span> sum<span class=\"sy0\">,</span> i <span class=\"sy0\">=</span> X<span class=\"sy0\">:</span>len<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> char <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> N <span class=\"kw1\">do</span><br/>        i <span class=\"sy0\">=</span> X<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span>char<span class=\"sy0\">,</span> char<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> count<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">then</span><br/>            count<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> count<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">else</span><br/>            count<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">for</span> n_i<span class=\"sy0\">,</span> count_i <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>count<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        sum <span class=\"sy0\">=</span> sum <span class=\"sy0\">+</span> count_i <span class=\"sy0\">/</span> N <span class=\"sy0\">*</span> log2<span class=\"br0\">(</span>count_i <span class=\"sy0\">/</span> N<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> <span class=\"sy0\">-</span>sum<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>entropy<span class=\"br0\">(</span><span class=\"st0\">\"1223334444\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 2, "block": "<pre class=\"text highlighted_source\">shE[s_String]\u00a0:= -Plus @@ ((# Log[2., #]) &amp; /@ ((Length /@ Gather[#])/<br/>         Length[#]) &amp;[Characters[s]])</pre>"}, {"lang": "MATLAB / Octave", "loc": 7, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> E = entropy<span class=\"br0\">(</span>d<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">if</span> ischar<span class=\"br0\">(</span>d<span class=\"br0\">)</span>, d=<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/abs.html\"><span class=\"kw2\">abs</span></a><span class=\"br0\">(</span>d<span class=\"br0\">)</span>; <span class=\"kw1\">end</span>;<br/>        <span class=\"br0\">[</span>Y,<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\">I</span></a>,<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/j.html\"><span class=\"kw2\">J</span></a><span class=\"br0\">]</span> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/unique.html\"><span class=\"kw2\">unique</span></a><span class=\"br0\">(</span>d<span class=\"br0\">)</span>; \t<br/>\tH = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sparse.html\"><span class=\"kw2\">sparse</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/j.html\"><span class=\"kw2\">J</span></a>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>\tp = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/full.html\"><span class=\"kw2\">full</span></a><span class=\"br0\">(</span>H<span class=\"br0\">(</span>H&gt;<span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>/<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>d<span class=\"br0\">)</span>;<br/>\tE = -<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a><span class=\"br0\">(</span>p.*<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/log2.html\"><span class=\"kw2\">log2</span></a><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span>; </pre>"}, {"lang": "NetRexx", "loc": 74, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref savelog symbols<br/>\u00a0<br/>runSample<span class=\"br0\">(</span>Arg<span class=\"br0\">)</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/><span class=\"coMULTI\">/* REXX ***************************************************************<br/> * 28.02.2013 Walter Pachl<br/> **********************************************************************/</span><br/>method getShannonEntropy<span class=\"br0\">(</span>s = <span class=\"st0\">\"1223334444\"</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/><span class=\"co1\">--trace var occ c chars n cn i e p pl</span><br/>  <span class=\"kw1\">Numeric</span> Digits <span class=\"nu0\">30</span><br/>  occ = <span class=\"nu0\">0</span><br/>  chars = <span class=\"st0\">''</span><br/>  n = <span class=\"nu0\">0</span><br/>  cn = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">Loop</span> i = <span class=\"nu0\">1</span> To s.<span class=\"me0\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    c = s.<span class=\"kw6\">substr</span><span class=\"br0\">(</span>i, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> chars.<span class=\"me0\">pos</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>      cn = cn + <span class=\"nu0\">1</span><br/>      chars = chars <span class=\"sy0\">||</span> c<br/>      <span class=\"kw3\">End</span><br/>    occ<span class=\"br0\">[</span>c<span class=\"br0\">]</span> = occ<span class=\"br0\">[</span>c<span class=\"br0\">]</span> + <span class=\"nu0\">1</span><br/>    n = n + <span class=\"nu0\">1</span><br/>    <span class=\"kw3\">End</span> i<br/>  p = <span class=\"st0\">''</span><br/>  <span class=\"kw1\">Loop</span> ci = <span class=\"nu0\">1</span> To cn<br/>    c = chars.<span class=\"kw6\">substr</span><span class=\"br0\">(</span>ci, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    p<span class=\"br0\">[</span>c<span class=\"br0\">]</span> = occ<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">/</span> n<br/>    <span class=\"kw3\">End</span> ci<br/>  e = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">Loop</span> ci = <span class=\"nu0\">1</span> To cn<br/>    c = chars.<span class=\"kw6\">substr</span><span class=\"br0\">(</span>ci, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    pl = log2<span class=\"br0\">(</span>p<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    e = e + p<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">*</span> pl<br/>    <span class=\"kw3\">End</span> ci<br/>  <span class=\"kw1\">Return</span> -e<br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method log2<span class=\"br0\">(</span>a = double<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">binary</span> <span class=\"kw2\">returns</span> double<br/>  <span class=\"kw1\">return</span> Math.<span class=\"me0\">log</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">/</span> Math.<span class=\"me0\">log</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method runSample<span class=\"br0\">(</span>Arg<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>  <span class=\"kw1\">parse</span> Arg sstr<br/>  <span class=\"kw1\">if</span> sstr = <span class=\"st0\">''</span> <span class=\"kw3\">then</span><br/>    sstr = <span class=\"st0\">'1223334444'</span> -<br/>           <span class=\"st0\">'1223334444555555555'</span> -<br/>           <span class=\"st0\">'122333'</span> -<br/>           <span class=\"st0\">'1227774444'</span> -<br/>           <span class=\"st0\">'aaBBcccDDDD'</span> -<br/>           <span class=\"st0\">'1234567890abcdefghijklmnopqrstuvwxyz'</span> -<br/>           <span class=\"st0\">'Rosetta_Code'</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'Calculating Shannon'</span><span class=\"st0\">'s entropy for the following list:'</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'['</span><span class=\"br0\">(</span>sstr.<span class=\"kw6\">space</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"st0\">','</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"kw6\">changestr</span><span class=\"br0\">(</span><span class=\"st0\">','</span>, <span class=\"st0\">', '</span><span class=\"br0\">)</span><span class=\"st0\">']'</span><br/>  <span class=\"kw1\">say</span><br/>  entropies = <span class=\"nu0\">0</span><br/>  ssMax = <span class=\"nu0\">0</span><br/>  <span class=\"co1\">-- This crude sample substitutes a '_' character for a space in the input strings</span><br/>  <span class=\"kw1\">loop</span> w_ = <span class=\"nu0\">1</span> to sstr.<span class=\"kw6\">words</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    ss = sstr.<span class=\"kw6\">word</span><span class=\"br0\">(</span>w_<span class=\"br0\">)</span><br/>    ssMax = ssMax.<span class=\"kw6\">max</span><span class=\"br0\">(</span>ss.<span class=\"me0\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    ss_ = ss.<span class=\"kw6\">changestr</span><span class=\"br0\">(</span><span class=\"st0\">'_'</span>, <span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>    entropy = getShannonEntropy<span class=\"br0\">(</span>ss_<span class=\"br0\">)</span><br/>    entropies<span class=\"br0\">[</span>ss<span class=\"br0\">]</span> = entropy<br/>    <span class=\"kw3\">end</span> w_<br/>  <span class=\"kw1\">loop</span> report = <span class=\"nu0\">1</span> to sstr.<span class=\"kw6\">words</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    ss = sstr.<span class=\"kw6\">word</span><span class=\"br0\">(</span>report<span class=\"br0\">)</span><br/>    ss_ = ss.<span class=\"kw6\">changestr</span><span class=\"br0\">(</span><span class=\"st0\">'_'</span>, <span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Say</span> <span class=\"st0\">'Shannon entropy of'</span> <span class=\"br0\">(</span><span class=\"st0\">'\"'</span>ss_<span class=\"st0\">'\"'</span><span class=\"br0\">)</span>.<span class=\"kw6\">right</span><span class=\"br0\">(</span>ssMax + <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"st0\">':'</span> entropies<span class=\"br0\">[</span>ss<span class=\"br0\">]</span>.<span class=\"me0\">format</span><span class=\"br0\">(</span>null, <span class=\"nu0\">12</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> report<br/>  <span class=\"kw1\">return</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 8, "block": "<pre class=\"text highlighted_source\">import tables, math<br/>\u00a0<br/>proc entropy(s): float =<br/>  var t = initCountTable[char]()<br/>  for c in s: t.inc(c)<br/>  for x in t.values: result -= x/s.len * log2(x/s.len)<br/>\u00a0<br/>echo entropy(\"1223334444\")</pre>"}, {"lang": "Objeck", "loc": 48, "block": "<pre class=\"objeck highlighted_source\"><span class=\"kw1\">use</span> Collection<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Entropy <span class=\"br0\">{</span><br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> <span class=\"kw1\">native</span> <span class=\"sy0\">:</span> GetShannonEntropy<span class=\"br0\">(</span>result <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Float</span> <span class=\"br0\">{</span><br/>    frequencies <span class=\"sy0\">:=</span> IntMap<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">each</span><span class=\"br0\">(</span>i <span class=\"sy0\">:</span> result<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      c <span class=\"sy0\">:=</span> result<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>frequencies<span class=\"sy0\">-&gt;</span><span class=\"me1\">Has</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        count <span class=\"sy0\">:=</span> frequencies<span class=\"sy0\">-&gt;</span><span class=\"me1\">Find</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">As</span><span class=\"br0\">(</span>IntHolder<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        count<span class=\"sy0\">-&gt;</span><span class=\"me1\">Set</span><span class=\"br0\">(</span>count<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        frequencies<span class=\"sy0\">-&gt;</span><span class=\"me1\">Insert</span><span class=\"br0\">(</span>c<span class=\"sy0\">,</span> IntHolder<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    length <span class=\"sy0\">:=</span> result<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    entropy <span class=\"sy0\">:=</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    counts <span class=\"sy0\">:=</span> frequencies<span class=\"sy0\">-&gt;</span><span class=\"me1\">GetValues</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>    <span class=\"kw1\">each</span><span class=\"br0\">(</span>i <span class=\"sy0\">:</span> counts<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      count <span class=\"sy0\">:=</span> counts<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">As</span><span class=\"br0\">(</span>IntHolder<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      freq <span class=\"sy0\">:=</span> count<span class=\"sy0\">-&gt;</span><span class=\"me1\">As</span><span class=\"br0\">(</span><span class=\"kw2\">Float</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> length<span class=\"sy0\">;</span><br/>      entropy <span class=\"sy0\">+=</span> freq <span class=\"sy0\">*</span> <span class=\"br0\">(</span>freq<span class=\"sy0\">-&gt;</span><span class=\"me1\">Log</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2.0</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Log</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">*</span> entropy<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    inputs <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><br/>      <span class=\"st0\">\"1223334444\"</span><span class=\"sy0\">,</span><br/>      <span class=\"st0\">\"1223334444555555555\"</span><span class=\"sy0\">,</span> <br/>      <span class=\"st0\">\"122333\"</span><span class=\"sy0\">,</span> <br/>      <span class=\"st0\">\"1227774444\"</span><span class=\"sy0\">,</span><br/>      <span class=\"st0\">\"aaBBcccDDDD\"</span><span class=\"sy0\">,</span><br/>      <span class=\"st0\">\"1234567890abcdefghijklmnopqrstuvwxyz\"</span><span class=\"sy0\">,</span><br/>      <span class=\"st0\">\"Rosetta Code\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">each</span><span class=\"br0\">(</span>i <span class=\"sy0\">:</span> inputs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      input <span class=\"sy0\">:=</span> inputs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      <span class=\"st0\">\"Shannon entropy of '{$input}': \"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      GetShannonEntropy<span class=\"br0\">(</span>inputs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span>  <br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 31, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"co1\">(* generic OCaml, using a mutable Hashtbl *)</span><br/>\u00a0<br/><span class=\"co1\">(* pre-bake &amp; return an inner-loop function to bin &amp; assemble a character frequency map *)</span><br/><span class=\"kw1\">let</span> get_fproc <span class=\"br0\">(</span>m<span class=\"sy0\">:</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEchar\"><span class=\"kw4\">char</span></a>, <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a><span class=\"br0\">)</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>t<span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEchar\"><span class=\"kw4\">char</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEunit\"><span class=\"kw4\">unit</span></a><span class=\"br0\">)</span>  <span class=\"sy0\">=</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>c<span class=\"sy0\">:</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEchar\"><span class=\"kw4\">char</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">try</span><br/>                     <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>replace m c <span class=\"br0\">(</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>find m c<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <br/>                   <span class=\"kw1\">with</span> Not_found <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>add m c <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">(* pre-bake and return an inner-loop function to do the actual entropy calculation *)</span><br/><span class=\"kw1\">let</span> get_calc <span class=\"br0\">(</span>slen<span class=\"sy0\">:</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a><span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <br/>  <span class=\"kw1\">let</span> slen_float <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat_of_int\"><span class=\"kw3\">float_of_int</span></a> slen <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> log_2 <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALlog\"><span class=\"kw3\">log</span></a> <span class=\"nu0\">2.0</span> <span class=\"kw1\">in</span><br/>\u00a0<br/>  <span class=\"br0\">(</span><span class=\"kw1\">fun</span> v <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">let</span> pt <span class=\"sy0\">=</span> v <span class=\"sy0\">/.</span> slen_float <span class=\"kw1\">in</span><br/>                pt <span class=\"sy0\">*.</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALlog\"><span class=\"kw3\">log</span></a> pt<span class=\"br0\">)</span> <span class=\"sy0\">/.</span> log_2<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">(* main function, given a string argument it:<br/>       builds a (mutable) frequency map (initial alphabet size of 255, but it's auto-expanding), <br/>       extracts the relative probability values into a list, <br/>       folds-in the basic entropy calculation and returns the result. *)</span><br/><span class=\"kw1\">let</span> shannon <span class=\"br0\">(</span>s<span class=\"sy0\">:</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEstring\"><span class=\"kw4\">string</span></a><span class=\"br0\">)</span> <span class=\"sy0\">:</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a>  <span class=\"sy0\">=</span> <br/>  <span class=\"kw1\">let</span> freq_hash <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>create <span class=\"nu0\">255</span> <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>iter <span class=\"br0\">(</span>get_fproc freq_hash<span class=\"br0\">)</span> s<span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">let</span> relative_probs <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>fold <span class=\"br0\">(</span><span class=\"kw1\">fun</span> k v b <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> v<span class=\"br0\">)</span><span class=\"sy0\">::</span>b<span class=\"br0\">)</span> freq_hash <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> calc <span class=\"sy0\">=</span> get_calc <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>length s<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>\u00a0<br/>   <span class=\"sy0\">-</span><span class=\"nu0\">1.0</span> <span class=\"sy0\">*.</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>fold_left <span class=\"br0\">(</span><span class=\"kw1\">fun</span> b x <span class=\"sy0\">-&gt;</span> b <span class=\"sy0\">+.</span> calc x<span class=\"br0\">)</span> <span class=\"nu0\">0.0</span> relative_probs<br/>\u00a0</pre>"}, {"lang": "Oforth", "loc": 8, "block": "<pre class=\"text highlighted_source\">: entropy(s) -- f<br/>| freq sz |<br/>   s size dup ifZero: [ return ] asFloat -&gt;sz<br/>   ListBuffer initValue(255, 0) -&gt;freq<br/>   s apply( #[ dup freq at 1+ freq put ] )<br/>   0.0 freq applyIf( #[ 0 &lt;&gt; ], #[ sz / dup ln * - ] ) Ln2 /\u00a0;<br/>\u00a0<br/>entropy(\"1223334444\") .</pre>"}, {"lang": "Pascal", "loc": 52, "block": "<pre class=\"pascal highlighted_source\">\u00a0<br/><span class=\"kw1\">PROGRAM</span> entropytest<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">USES</span> StrUtils<span class=\"sy1\">,</span> Math<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">TYPE</span> FArray <span class=\"sy3\">=</span> <span class=\"kw4\">ARRAY</span> <span class=\"kw1\">of</span> CARDINAL<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">VAR</span>\t strng<span class=\"sy1\">:</span> <span class=\"kw4\">STRING</span> <span class=\"sy3\">=</span> <span class=\"st0\">'1223334444'</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co1\">// list unique characters in a string</span><br/><span class=\"kw1\">FUNCTION</span> uniquechars<span class=\"br0\">(</span>str<span class=\"sy1\">:</span> <span class=\"kw4\">STRING</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">STRING</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">VAR</span> n<span class=\"sy1\">:</span> CARDINAL<span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\tuniquechars <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">''</span><span class=\"sy1\">;</span><br/>\t\t<span class=\"kw1\">FOR</span> n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> length<span class=\"br0\">(</span>str<span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>\t\t\t<span class=\"kw1\">IF</span> <span class=\"br0\">(</span>PosEx<span class=\"br0\">(</span>str<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy1\">,</span>str<span class=\"sy1\">,</span>n<span class=\"br0\">)</span>&gt;<span class=\"nu0\">0</span><span class=\"br0\">)</span> <br/>\t\t\t\t<span class=\"kw3\">AND</span> <span class=\"br0\">(</span>PosEx<span class=\"br0\">(</span>str<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy1\">,</span>uniquechars<span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <br/>\t\t\t\t\t<span class=\"kw1\">THEN</span> uniquechars <span class=\"sy3\">+=</span> str<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co1\">// obtain a list of character-frequencies for a string</span><br/><span class=\"co1\">//  given a string containing its unique characters</span><br/><span class=\"kw1\">FUNCTION</span> frequencies<span class=\"br0\">(</span>str<span class=\"sy1\">,</span>ustr<span class=\"sy1\">:</span> <span class=\"kw4\">STRING</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> FArray<span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">VAR</span> u<span class=\"sy1\">,</span>s<span class=\"sy1\">,</span>p<span class=\"sy1\">,</span>o<span class=\"sy1\">:</span> CARDINAL<span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\tSetLength<span class=\"br0\">(</span>frequencies<span class=\"sy1\">,</span> Length<span class=\"br0\">(</span>ustr<span class=\"br0\">)</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t\tp <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>\t\t<span class=\"kw1\">FOR</span> u <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> length<span class=\"br0\">(</span>ustr<span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>\t\t\t<span class=\"kw1\">FOR</span> s <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> length<span class=\"br0\">(</span>str<span class=\"br0\">)</span> <span class=\"kw1\">DO</span> <span class=\"kw1\">BEGIN</span><br/>\t\t\t\to <span class=\"sy1\">:</span><span class=\"sy3\">=</span> p<span class=\"sy1\">;</span>\tp <span class=\"sy1\">:</span><span class=\"sy3\">=</span> PosEx<span class=\"br0\">(</span>ustr<span class=\"br0\">[</span>u<span class=\"br0\">]</span><span class=\"sy1\">,</span>str<span class=\"sy1\">,</span>s<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t\t\t\t<span class=\"kw1\">IF</span> <span class=\"br0\">(</span>p&gt;o<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> INC<span class=\"br0\">(</span>frequencies<span class=\"br0\">[</span>u<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t\t\t<span class=\"kw1\">END</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co1\">// Obtain the Shannon entropy of a string</span><br/><span class=\"kw1\">FUNCTION</span> entropy<span class=\"br0\">(</span>s<span class=\"sy1\">:</span> <span class=\"kw4\">STRING</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> EXTENDED<span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">VAR</span> pf <span class=\"sy1\">:</span> FArray<span class=\"sy1\">;</span><br/>\t\tus <span class=\"sy1\">:</span> <span class=\"kw4\">STRING</span><span class=\"sy1\">;</span><br/>\t\ti<span class=\"sy1\">,</span>l<span class=\"sy1\">:</span> CARDINAL<span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\tus <span class=\"sy1\">:</span><span class=\"sy3\">=</span> uniquechars<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t\tpf <span class=\"sy1\">:</span><span class=\"sy3\">=</span> frequencies<span class=\"br0\">(</span>s<span class=\"sy1\">,</span>us<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t\tl  <span class=\"sy1\">:</span><span class=\"sy3\">=</span> length<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t\tentropy <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0.0</span><span class=\"sy1\">;</span><br/>\t\t<span class=\"kw1\">FOR</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> length<span class=\"br0\">(</span>us<span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>\t\t\tentropy <span class=\"sy3\">-=</span> pf<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy3\">/</span>l <span class=\"sy3\">*</span> log2<span class=\"br0\">(</span>pf<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy3\">/</span>l<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>\t<span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Entropy of \"'</span><span class=\"sy1\">,</span>strng<span class=\"sy1\">,</span><span class=\"st0\">'\" is '</span><span class=\"sy1\">,</span>entropy<span class=\"br0\">(</span>strng<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"nu0\">2</span><span class=\"sy1\">:</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"st0\">' bits.'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">END</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\">entropy<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">=</span>s<span class=\"sy0\">=</span><span class=\"kw1\">Vec</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span>my<span class=\"br0\">(</span>v<span class=\"sy0\">=</span><span class=\"kw1\">vecsort</span><span class=\"br0\">(</span>s<span class=\"sy0\">,,</span><span class=\"nu1\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;-</span><span class=\"kw1\">sum</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#v<span class=\"sy0\">,</span><span class=\"br0\">(</span>x<span class=\"sy0\">-&gt;</span>x<span class=\"sy0\">*</span><span class=\"kw1\">log</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">sum</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#s<span class=\"sy0\">,</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">==</span>s<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>#s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"kw1\">log</span><span class=\"br0\">(</span><span class=\"nu1\">2</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 11, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> entropy <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">%count</span><span class=\"sy0\">;</span> <span class=\"re0\">$count</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span><span class=\"sy0\">++</span> <span class=\"kw1\">for</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$entropy</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/values.html\"><span class=\"kw3\">values</span></a> <span class=\"re0\">%count</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$p</span> <span class=\"sy0\">=</span> <span class=\"co5\">$_</span><span class=\"sy0\">/</span><span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$entropy</span> <span class=\"sy0\">-=</span> <span class=\"re0\">$p</span> <span class=\"sy0\">*</span> <a href=\"http://perldoc.perl.org/functions/log.html\"><span class=\"kw3\">log</span></a> <span class=\"re0\">$p</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$entropy</span> <span class=\"sy0\">/</span> <a href=\"http://perldoc.perl.org/functions/log.html\"><span class=\"kw3\">log</span></a> <span class=\"nu0\">2</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> entropy <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a> <span class=\"sy0\">//,</span> <span class=\"st0\">\"1223334444\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 5, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> entropy<span class=\"br0\">(</span><span class=\"re0\">@a</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"kw3\">map</span> <span class=\"sy0\">-&gt;</span> \\p <span class=\"br0\">{</span> p <span class=\"sy0\">*</span> <span class=\"sy0\">-</span><span class=\"kw3\">log</span> p <span class=\"br0\">}</span><span class=\"sy0\">,</span> bag<span class=\"br0\">(</span><span class=\"re0\">@a</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">values</span>\u00a0\u00bb<span class=\"sy0\">/</span>\u00bb <span class=\"sy0\">+</span><span class=\"re0\">@a</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"kw3\">log</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> R<span class=\"sy0\">/</span> entropy <span class=\"st_h\">'1223334444'</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 28, "block": "<pre class=\"text highlighted_source\">function log2(atom v)<br/>    return log(v)/log(2)<br/>end function<br/>\u00a0<br/>function entropy(sequence s)<br/>sequence symbols = {},<br/>         counts = {}<br/>    integer N = length(s)<br/>    for i=1 to N do<br/>        object si = s[i]<br/>        integer k = find(si,symbols)<br/>        if k=0 then<br/>            symbols = append(symbols,si)<br/>            counts = append(counts,1)<br/>        else<br/>            counts[k] += 1<br/>        end if<br/>    end for<br/>    atom H = 0<br/>    integer n = length(counts)<br/>    for i=1 to n do<br/>        atom ci = counts[i]/N<br/>        H -= ci*log2(ci)<br/>    end for<br/>    return H<br/>end function<br/>\u00a0<br/>?entropy(\"1223334444\")</pre>"}, {"lang": "PL/I", "loc": 34, "block": "<pre class=\"pli highlighted_source\"><span class=\"sy0\">*</span>process source xref attributes or<span class=\"br0\">(</span>!<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/*--------------------------------------------------------------------<br/> * 08.08.2014 Walter Pachl  translated from REXX version 1<br/> *-------------------------------------------------------------------*/</span><br/> ent<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span> <span class=\"kw1\">Options</span><span class=\"br0\">(</span><span class=\"kw1\">main</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span><span class=\"kw1\">index</span><span class=\"sy0\">,</span><span class=\"kw1\">length</span><span class=\"sy0\">,</span><span class=\"kw1\">log2</span><span class=\"sy0\">,</span><span class=\"kw1\">substr</span><span class=\"br0\">)</span> <span class=\"kw1\">Builtin</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"kw1\">sysprint</span> <span class=\"kw1\">Print</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> occ<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>n<span class=\"sy0\">,</span>cn<span class=\"sy0\">,</span>ci<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"kw1\">pos</span><span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> chars <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> s <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"st0\">'1223334444'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> c <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>occf<span class=\"sy0\">,</span>p<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">Dec</span> <span class=\"kw1\">Float</span><span class=\"br0\">(</span><span class=\"nu0\">18</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> e <span class=\"kw1\">Dec</span> <span class=\"kw1\">Float</span><span class=\"br0\">(</span><span class=\"nu0\">18</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw1\">length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   c<span class=\"sy0\">=</span><span class=\"kw1\">substr</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">pos</span><span class=\"sy0\">=</span><span class=\"kw1\">index</span><span class=\"br0\">(</span>chars<span class=\"sy0\">,</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">If</span> <span class=\"kw1\">pos</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">pos</span><span class=\"sy0\">=</span><span class=\"kw1\">length</span><span class=\"br0\">(</span>chars<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>     cn<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>     chars<span class=\"sy0\">=</span>chars!!c<span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   occ<span class=\"br0\">(</span><span class=\"kw1\">pos</span><span class=\"br0\">)</span><span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   n<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">do</span> ci<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> cn<span class=\"sy0\">;</span><br/>    occf<span class=\"sy0\">=</span>occ<span class=\"br0\">(</span>ci<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    p<span class=\"br0\">(</span>ci<span class=\"br0\">)</span><span class=\"sy0\">=</span>occf<span class=\"sy0\">/</span>n<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">Do</span> ci<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> cn<span class=\"sy0\">;</span><br/>    e<span class=\"sy0\">=</span>e<span class=\"sy0\">+</span>p<span class=\"br0\">(</span>ci<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"kw1\">log2</span><span class=\"br0\">(</span>p<span class=\"br0\">(</span>ci<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span><span class=\"st0\">'s='</span><span class=\"st0\">''</span>!!s!!<span class=\"st0\">''</span><span class=\"st0\">' Entropy='</span><span class=\"sy0\">,-</span>e<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>a<span class=\"sy0\">,</span>f<span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"sy0\">,</span><span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">End</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PowerShell", "loc": 11, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> entropy <span class=\"br0\">(</span><span class=\"re0\">$string</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"re0\">$string</span>.Length<br/>    <span class=\"re0\">$string</span>.ToCharArray<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw2\">group</span> <span class=\"sy0\">|</span> <span class=\"kw3\">foreach</span><span class=\"br0\">{</span><br/>        <span class=\"re0\">$p</span> <span class=\"sy0\">=</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.Count<span class=\"sy0\">/</span><span class=\"re0\">$n</span><br/>        <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Log<span class=\"br0\">(</span><span class=\"re0\">$p</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <span class=\"sy0\">-</span><span class=\"re0\">$p</span><span class=\"sy0\">*</span><span class=\"re0\">$i</span><br/>    <span class=\"br0\">}</span> <span class=\"sy0\">|</span> measure <span class=\"kw5\">-Sum</span> <span class=\"sy0\">|</span> <span class=\"kw3\">foreach</span> Sum<br/><span class=\"br0\">}</span><br/>entropy <span class=\"st0\">\"1223334444\"</span><br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 132, "block": "<pre class=\"prolog highlighted_source\"><span class=\"sy1\">:-</span>module<span class=\"br0\">(</span>shannon_entropy<span class=\"sy4\">,</span> <span class=\"br0\">[</span>shannon_entropy<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">%!\tshannon_entropy(+String, -Entropy) is det.</span><br/><span class=\"co1\">%</span><br/><span class=\"co1\">%\tCalculate the Shannon Entropy of String.</span><br/><span class=\"co1\">%</span><br/><span class=\"co1\">%\tExample query:</span><br/><span class=\"co1\">%\t==</span><br/><span class=\"co1\">%\t?- shannon_entropy(1223334444, H).</span><br/><span class=\"co1\">%\tH = 1.8464393446710154.</span><br/><span class=\"co1\">%\t==</span><br/><span class=\"co1\">%</span><br/>shannon_entropy<span class=\"br0\">(</span>String<span class=\"sy4\">,</span> Entropy<span class=\"br0\">)</span><span class=\"sy1\">:-</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">atom_chars</span></a><span class=\"br0\">(</span>String<span class=\"sy4\">,</span> Cs<span class=\"br0\">)</span><br/>\t<span class=\"sy4\">,</span>relative_frequencies<span class=\"br0\">(</span>Cs<span class=\"sy4\">,</span> Frequencies<span class=\"br0\">)</span><br/>\t<span class=\"sy4\">,</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">findall</span></a><span class=\"br0\">(</span>CI<br/>\t\t<span class=\"sy4\">,</span><span class=\"br0\">(</span>member<span class=\"br0\">(</span>_C<span class=\"sy3\">-</span>F<span class=\"sy4\">,</span> Frequencies<span class=\"br0\">)</span><br/>\t\t <span class=\"sy4\">,</span>log2<span class=\"br0\">(</span>F<span class=\"sy4\">,</span> L<span class=\"br0\">)</span><br/>\t\t <span class=\"sy4\">,</span>CI <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> F <span class=\"sy3\">*</span> L<br/>\t\t <span class=\"br0\">)</span><br/>\t\t<span class=\"sy4\">,</span>CIs<span class=\"br0\">)</span><br/>\t<span class=\"sy4\">,</span>foldl<span class=\"br0\">(</span>sum<span class=\"sy4\">,</span> CIs<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> E<span class=\"br0\">)</span><br/>\t<span class=\"sy4\">,</span>Entropy <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"sy3\">-</span>E<span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">%!\tfrequencies(+Characters,-Frequencies) is det.</span><br/><span class=\"co1\">%</span><br/><span class=\"co1\">%\tCalculates the relative frequencies of elements in the list of</span><br/><span class=\"co1\">%\tCharacters.</span><br/><span class=\"co1\">%</span><br/><span class=\"co1\">%\tFrequencies is a key-value list with elements of the form:</span><br/><span class=\"co1\">%\tC-F, where C a character in the list and F its relative</span><br/><span class=\"co1\">%\tfrequency in the list.</span><br/><span class=\"co1\">%</span><br/><span class=\"co1\">%\tExample query:</span><br/><span class=\"co1\">%\t==</span><br/><span class=\"co1\">%\t?- relative_frequencies([a,a,a,b,b,b,b,b,b,c,c,c,a,a,f], Fs).</span><br/><span class=\"co1\">%\tFs = [a-0.3333333333333333, b-0.4, c-0.2,f-0.06666666666666667].</span><br/><span class=\"co1\">%\t==</span><br/><span class=\"co1\">%</span><br/>relative_frequencies<span class=\"br0\">(</span>List<span class=\"sy4\">,</span> Frequencies<span class=\"br0\">)</span><span class=\"sy1\">:-</span><br/>\trun_length_encoding<span class=\"br0\">(</span>List<span class=\"sy4\">,</span> Rle<span class=\"br0\">)</span><br/>        <span class=\"co1\">% Sort Run-length encoded list and aggregate lengths by element</span><br/>\t<span class=\"sy4\">,</span>keysort<span class=\"br0\">(</span>Rle<span class=\"sy4\">,</span> Sorted_Rle<span class=\"br0\">)</span><br/>\t<span class=\"sy4\">,</span>group_pairs_by_key<span class=\"br0\">(</span>Sorted_Rle<span class=\"sy4\">,</span> Elements_Run_lengths<span class=\"br0\">)</span><br/>\t<span class=\"sy4\">,</span>length<span class=\"br0\">(</span>List<span class=\"sy4\">,</span> Elements_in_list<span class=\"br0\">)</span><br/>\t<span class=\"sy4\">,</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">findall</span></a><span class=\"br0\">(</span>E<span class=\"sy3\">-</span>Frequency_of_E<br/>\t\t<span class=\"sy4\">,</span><span class=\"br0\">(</span>member<span class=\"br0\">(</span>E<span class=\"sy3\">-</span>RLs<span class=\"sy4\">,</span> Elements_Run_lengths<span class=\"br0\">)</span><br/>                 <span class=\"co1\">% Sum the list of lengths of runs of E</span><br/>\t\t <span class=\"sy4\">,</span>foldl<span class=\"br0\">(</span>plus<span class=\"sy4\">,</span> RLs<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> Occurences_of_E<span class=\"br0\">)</span><br/>\t\t <span class=\"sy4\">,</span>Frequency_of_E <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Occurences_of_E <span class=\"sy3\">/</span> Elements_in_list<br/>\t\t <span class=\"br0\">)</span><br/>\t\t<span class=\"sy4\">,</span>Frequencies<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">%!\trun_length_encoding(+List, -Run_length_encoding) is det.</span><br/><span class=\"co1\">%</span><br/><span class=\"co1\">%\tConverts a list to its run-length encoded form where each \"run\"</span><br/><span class=\"co1\">%\tof contiguous repeats of the same element is replaced by that</span><br/><span class=\"co1\">%\telement and the length of the run.</span><br/><span class=\"co1\">%</span><br/><span class=\"co1\">%\tRun_length_encoding is a key-value list, where each element is a</span><br/><span class=\"co1\">%\tterm:</span><br/><span class=\"co1\">%</span><br/><span class=\"co1\">%\tElement:term-Repetitions:number.</span><br/><span class=\"co1\">%</span><br/><span class=\"co1\">%\tExample query:</span><br/><span class=\"co1\">%\t==</span><br/><span class=\"co1\">%      \u00a0?- run_length_encoding([a,a,a,b,b,b,b,b,b,c,c,c,a,a,f], RLE).</span><br/><span class=\"co1\">%\tRLE = [a-3, b-6, c-3, a-2, f-1].</span><br/><span class=\"co1\">%\t==</span><br/><span class=\"co1\">%</span><br/>run_length_encoding<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy3\">-</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">:-</span><br/>\t<span class=\"sy5\">!</span><span class=\"sy4\">.</span> <span class=\"co1\">% No more results needed.</span><br/>\u00a0<br/>run_length_encoding<span class=\"br0\">(</span><span class=\"br0\">[</span>Head<span class=\"sy5\">|</span>List<span class=\"br0\">]</span><span class=\"sy4\">,</span> Run_length_encoded_list<span class=\"br0\">)</span><span class=\"sy1\">:-</span><br/>\trun_length_encoding<span class=\"br0\">(</span>List<span class=\"sy4\">,</span> <span class=\"br0\">[</span>Head<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> Reversed_list<span class=\"br0\">)</span><br/>\t<span class=\"co1\">% The resulting list is in reverse order due to the head-to-tail processing</span><br/>\t<span class=\"sy4\">,</span>reverse<span class=\"br0\">(</span>Reversed_list<span class=\"sy4\">,</span> Run_length_encoded_list<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">%!\trun_length_encoding(+List,+Initialiser,-Accumulator) is det.</span><br/><span class=\"co1\">%</span><br/><span class=\"co1\">%\tBusiness end of run_length_encoding/3. Calculates the run-length</span><br/><span class=\"co1\">%\tencoded form of a list and binds the result to the Accumulator.</span><br/><span class=\"co1\">%\tInitialiser is a list [H-1] where H is the first element of the</span><br/><span class=\"co1\">%\tinput list.</span><br/><span class=\"co1\">%</span><br/>run_length_encoding<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> Fs<span class=\"sy4\">,</span> Fs<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% Run of F consecutive occurrences of C</span><br/>run_length_encoding<span class=\"br0\">(</span><span class=\"br0\">[</span>C<span class=\"sy5\">|</span>Cs<span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span>C<span class=\"sy3\">-</span>F<span class=\"sy5\">|</span>Fs<span class=\"br0\">]</span><span class=\"sy4\">,</span> Acc<span class=\"br0\">)</span><span class=\"sy1\">:-</span><br/>        <span class=\"co1\">% Backtracking would produce successive counts</span><br/>\t<span class=\"co1\">% of runs of C at different indices in the list.</span><br/>\t<span class=\"sy5\">!</span><br/>\t<span class=\"sy4\">,</span>F_ <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> F <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><br/>\t<span class=\"sy4\">,</span>run_length_encoding<span class=\"br0\">(</span>Cs<span class=\"sy4\">,</span> <span class=\"br0\">[</span>C<span class=\"sy3\">-</span>F_<span class=\"sy5\">|</span> Fs<span class=\"br0\">]</span><span class=\"sy4\">,</span> Acc<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% End of a run of consecutive identical elements.</span><br/>run_length_encoding<span class=\"br0\">(</span><span class=\"br0\">[</span>C<span class=\"sy5\">|</span>Cs<span class=\"br0\">]</span><span class=\"sy4\">,</span> Fs<span class=\"sy4\">,</span> Acc<span class=\"br0\">)</span><span class=\"sy1\">:-</span><br/>\trun_length_encoding<span class=\"br0\">(</span>Cs<span class=\"sy4\">,</span><span class=\"br0\">[</span>C<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy5\">|</span>Fs<span class=\"br0\">]</span><span class=\"sy4\">,</span> Acc<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\">/* Arithmetic helper predicates */</span><br/>\u00a0<br/><span class=\"co1\">%!\tlog2(N, L2_N) is det.</span><br/><span class=\"co1\">%</span><br/><span class=\"co1\">%\tL2_N is the logarithm with base 2 of N.</span><br/><span class=\"co1\">%</span><br/>log2<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> L2_N<span class=\"br0\">)</span><span class=\"sy1\">:-</span><br/>\tL_10 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> log10<span class=\"br0\">(</span>N<span class=\"br0\">)</span><br/>\t<span class=\"sy4\">,</span>L_2 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> log10<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t<span class=\"sy4\">,</span>L2_N <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> L_10 <span class=\"sy3\">/</span> L_2<span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">%!\tsum(+A,+B,?Sum) is det.</span><br/><span class=\"co1\">%</span><br/><span class=\"co1\">%\tTrue when Sum is the sum of numbers A and B.</span><br/><span class=\"co1\">%</span><br/><span class=\"co1\">%\tHelper predicate to allow foldl/4 to do addition. The following</span><br/><span class=\"co1\">%\tcall will raise an error (because there is no predicate +/3):</span><br/><span class=\"co1\">%\t==</span><br/><span class=\"co1\">%\tfoldl(+, [1,2,3], 0, Result).</span><br/><span class=\"co1\">%\t==</span><br/><span class=\"co1\">%</span><br/><span class=\"co1\">%\tThis will not raise an error:</span><br/><span class=\"co1\">%\t==</span><br/><span class=\"co1\">%\tfoldl(sum, [1,2,3], 0, Result).</span><br/><span class=\"co1\">%\t==</span><br/><span class=\"co1\">%</span><br/>sum<span class=\"br0\">(</span>A<span class=\"sy4\">,</span> B<span class=\"sy4\">,</span> Sum<span class=\"br0\">)</span><span class=\"sy1\">:-</span><br/>\tmust_be<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">number</span></a><span class=\"sy4\">,</span> A<span class=\"br0\">)</span><br/>\t<span class=\"sy4\">,</span>must_be<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">number</span></a><span class=\"sy4\">,</span> B<span class=\"br0\">)</span><br/>\t<span class=\"sy4\">,</span>Sum <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> A <span class=\"sy3\">+</span> B<span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 22, "block": "<pre class=\"purebasic highlighted_source\">#TESTSTR<span class=\"sy0\">=</span><span class=\"st0\">\"1223334444\"</span><br/>NewMap uchar.i<span class=\"br0\">(</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Define</span>.d e<br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.d nlog2<span class=\"br0\">(</span>x.d<span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">ProcedureReturn</span> <span class=\"kw2\">Log</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"kw2\">Log</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> countchar<span class=\"br0\">(</span>s$, Map uchar<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span>s$<span class=\"br0\">)</span><br/>    uchar<span class=\"br0\">(</span><span class=\"kw2\">Left</span><span class=\"br0\">(</span>s$,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw2\">CountString</span><span class=\"br0\">(</span>s$,<span class=\"kw2\">Left</span><span class=\"br0\">(</span>s$,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    s$<span class=\"sy0\">=</span><span class=\"kw2\">RemoveString</span><span class=\"br0\">(</span>s$,<span class=\"kw2\">Left</span><span class=\"br0\">(</span>s$,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">ProcedureReturn</span> countchar<span class=\"br0\">(</span>s$, uchar<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndIf</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/>countchar<span class=\"br0\">(</span>#TESTSTR,uchar<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">ForEach</span> uchar<span class=\"br0\">(</span><span class=\"br0\">)</span>  <br/>  e<span class=\"sy0\">-</span>uchar<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"kw2\">Len</span><span class=\"br0\">(</span>#TESTSTR<span class=\"br0\">)</span><span class=\"sy0\">*</span>nlog2<span class=\"br0\">(</span>uchar<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"kw2\">Len</span><span class=\"br0\">(</span>#TESTSTR<span class=\"br0\">)</span><span class=\"br0\">)</span>  <br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"Entropy of [\"</span><span class=\"sy0\">+</span>#TESTSTR<span class=\"sy0\">+</span><span class=\"st0\">\"] = \"</span><span class=\"sy0\">+</span><span class=\"kw2\">StrD</span><span class=\"br0\">(</span>e,<span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Python", "loc": 34, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">__future__</span> <span class=\"kw1\">import</span> division<br/><span class=\"kw1\">import</span> <span class=\"kw3\">math</span><br/>\u00a0<br/><span class=\"kw1\">def</span> hist<span class=\"br0\">(</span>source<span class=\"br0\">)</span>:<br/>    hist <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">;</span> l <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> e <span class=\"kw1\">in</span> source:<br/>        l +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">if</span> e <span class=\"kw1\">not</span> <span class=\"kw1\">in</span> hist:<br/>            hist<span class=\"br0\">[</span>e<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        hist<span class=\"br0\">[</span>e<span class=\"br0\">]</span> +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>l<span class=\"sy0\">,</span>hist<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> entropy<span class=\"br0\">(</span>hist<span class=\"sy0\">,</span>l<span class=\"br0\">)</span>:<br/>    elist <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> v <span class=\"kw1\">in</span> hist.<span class=\"me1\">values</span><span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>        c <span class=\"sy0\">=</span> v / l<br/>        elist.<span class=\"me1\">append</span><span class=\"br0\">(</span>-c * <span class=\"kw3\">math</span>.<span class=\"me1\">log</span><span class=\"br0\">(</span>c <span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span>elist<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> printHist<span class=\"br0\">(</span>h<span class=\"br0\">)</span>:<br/>    flip <span class=\"sy0\">=</span> <span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>k<span class=\"sy0\">,</span>v<span class=\"br0\">)</span>\u00a0: <span class=\"br0\">(</span>v<span class=\"sy0\">,</span>k<span class=\"br0\">)</span><br/>    h <span class=\"sy0\">=</span> <span class=\"kw2\">sorted</span><span class=\"br0\">(</span>h.<span class=\"me1\">iteritems</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> key <span class=\"sy0\">=</span> flip<span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">'Sym<span class=\"es0\">\\t</span>hi<span class=\"es0\">\\t</span>fi<span class=\"es0\">\\t</span>Inf'</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>k<span class=\"sy0\">,</span>v<span class=\"br0\">)</span> <span class=\"kw1\">in</span> h:<br/>        <span class=\"kw1\">print</span> <span class=\"st0\">'%s<span class=\"es0\">\\t</span>%f<span class=\"es0\">\\t</span>%f<span class=\"es0\">\\t</span>%f'</span>%<span class=\"br0\">(</span>k<span class=\"sy0\">,</span>v<span class=\"sy0\">,</span>v/l<span class=\"sy0\">,</span>-<span class=\"kw3\">math</span>.<span class=\"me1\">log</span><span class=\"br0\">(</span>v/l<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>source <span class=\"sy0\">=</span> <span class=\"st0\">\"1223334444\"</span><br/><span class=\"br0\">(</span>l<span class=\"sy0\">,</span>h<span class=\"br0\">)</span> <span class=\"sy0\">=</span> hist<span class=\"br0\">(</span>source<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">'.[Results].'</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">'Length'</span><span class=\"sy0\">,</span>l<br/><span class=\"kw1\">print</span> <span class=\"st0\">'Entropy:'</span><span class=\"sy0\">,</span> entropy<span class=\"br0\">(</span>h<span class=\"sy0\">,</span> l<span class=\"br0\">)</span><br/>printHist<span class=\"br0\">(</span>h<span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 5, "block": "<pre class=\"text highlighted_source\">entropy = function(s)<br/>   {freq = prop.table(table(strsplit(s, '')[1]))<br/>    -sum(freq * log(freq, base = 2))}<br/>\u00a0<br/>print(entropy(\"1223334444\"))   # 1.846439</pre>"}, {"lang": "Racket", "loc": 23, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(require math)<br/>(provide entropy hash-entropy list-entropy digital-entropy)<br/>\u00a0<br/>(define (hash-entropy h)<br/>  (define (log2 x) (/ (log x) (log 2)))<br/>  (define n (for/sum [(c (in-hash-values h))] c))<br/>  (- (for/sum ([c (in-hash-values h)] #:unless (zero? c))<br/>       (* (/ c n) (log2 (/ c n))))))<br/>\u00a0<br/>(define (list-entropy x) (hash-entropy (samples-&gt;hash x)))<br/>\u00a0<br/>(define entropy         (compose list-entropy string-&gt;list))<br/>(define digital-entropy (compose entropy number-&gt;string))<br/>\u00a0<br/>(module+ test<br/>  (require rackunit)<br/>  (check-= (entropy \"1223334444\") 1.8464393446710154 1E-8)<br/>  (check-= (digital-entropy 1223334444) (entropy \"1223334444\") 1E-8)<br/>  (check-= (digital-entropy 1223334444) 1.8464393446710154 1E-8)<br/>  (check-= (entropy \"xggooopppp\") 1.8464393446710154 1E-8))<br/>\u00a0<br/>(module+ main (entropy \"1223334444\"))</pre>"}, {"lang": "REXX", "loc": 100, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/* REXX ***************************************************************<br/>* 28.02.2013 Walter Pachl<br/>* 12.03.2013 Walter Pachl  typo in log corrected. thanx for testing<br/>* 22.05.2013 -\"- extended the logic to accept other strings<br/>* 25.05.2013 -\"- 'my' log routine is apparently incorrect<br/>* 25.05.2013 -\"- problem identified &amp; corrected<br/>**********************************************************************/</span><br/><span class=\"kw1\">Numeric</span> <span class=\"kw2\">Digits</span> <span class=\"nu0\">30</span><br/><span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> s<br/><span class=\"kw1\">If</span> s=<span class=\"st0\">''</span> <span class=\"kw3\">Then</span><br/>  s=<span class=\"st0\">\"1223334444\"</span><br/>occ<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span><br/><span class=\"kw6\">chars</span>=<span class=\"st0\">''</span><br/>n=<span class=\"nu0\">0</span><br/>cn=<span class=\"nu0\">0</span><br/><span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>  c=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>s,i,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw6\">pos</span><span class=\"br0\">(</span>c,<span class=\"kw6\">chars</span><span class=\"br0\">)</span>=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>    cn=cn+<span class=\"nu0\">1</span><br/>    <span class=\"kw6\">chars</span>=<span class=\"kw6\">chars</span><span class=\"sy0\">||</span>c<br/>    <span class=\"kw3\">End</span><br/>  occ<span class=\"sy0\">.</span>c=occ<span class=\"sy0\">.</span>c+<span class=\"nu0\">1</span><br/>  n=n+<span class=\"nu0\">1</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">do</span> ci=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> cn<br/>  c=<span class=\"kw6\">substr</span><span class=\"br0\">(</span><span class=\"kw6\">chars</span>,ci,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  p<span class=\"sy0\">.</span>c=occ<span class=\"sy0\">.</span>c<span class=\"sy0\">/</span>n<br/>  <span class=\"coMULTI\">/* say c p.c */</span><br/>  <span class=\"kw3\">End</span><br/>e=<span class=\"nu0\">0</span><br/><span class=\"kw1\">Do</span> ci=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> cn<br/>  c=<span class=\"kw6\">substr</span><span class=\"br0\">(</span><span class=\"kw6\">chars</span>,ci,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  e=e+p<span class=\"sy0\">.</span>c<span class=\"sy0\">*</span>log<span class=\"br0\">(</span>p<span class=\"sy0\">.</span>c,<span class=\"nu0\">30</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">'Version 1:'</span> s <span class=\"st0\">'Entropy'</span> <span class=\"kw6\">format</span><span class=\"br0\">(</span>-e,,<span class=\"nu0\">12</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Exit</span><br/>\u00a0<br/>log: <span class=\"kw1\">Procedure</span><br/><span class=\"coMULTI\">/***********************************************************************<br/>* Return log(x) -- with specified precision and a specified base<br/>* Three different series are used for the ranges  0 to 0.5<br/>*                                                 0.5 to 1.5<br/>*                                                 1.5 to infinity<br/>* 03.09.1992 Walter Pachl<br/>* 25.05.2013 -\"- 'my' log routine is apparently incorrect<br/>* 25.05.2013 -\"- problem identified &amp; corrected<br/>***********************************************************************/</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> x,prec,b<br/>  <span class=\"kw1\">If</span> prec=<span class=\"st0\">''</span> <span class=\"kw3\">Then</span> prec=<span class=\"nu0\">9</span><br/>  <span class=\"kw1\">Numeric</span> <span class=\"kw2\">Digits</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>prec<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Numeric</span> <span class=\"kw2\">Fuzz</span>   <span class=\"nu0\">3</span><br/>  <span class=\"kw1\">Select</span><br/>    <span class=\"kw3\">When</span> x<span class=\"sy0\">&lt;</span>=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> r=<span class=\"st0\">'*** invalid argument ***'</span><br/>    <span class=\"kw3\">When</span> x<span class=\"sy0\">&lt;</span><span class=\"nu0\">0.5</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>      z=<span class=\"br0\">(</span>x-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>x+<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      o=z<br/>      r=z<br/>      k=<span class=\"nu0\">1</span><br/>      <span class=\"kw1\">Do</span> i=<span class=\"nu0\">3</span> <span class=\"kw2\">By</span> <span class=\"nu0\">2</span><br/>        ra=r<br/>        k=k+<span class=\"nu0\">1</span><br/>        o=o<span class=\"sy0\">*</span>z<span class=\"sy0\">*</span>z<br/>        r=r+o<span class=\"sy0\">/</span>i<br/>        <span class=\"kw1\">If</span> r=ra <span class=\"kw3\">Then</span> <span class=\"kw1\">Leave</span><br/>        <span class=\"kw3\">End</span><br/>      r=<span class=\"nu0\">2</span><span class=\"sy0\">*</span>r<br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw3\">When</span> x<span class=\"sy0\">&lt;</span><span class=\"nu0\">1.5</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>      z=<span class=\"br0\">(</span>x-<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      o=z<br/>      r=z<br/>      k=<span class=\"nu0\">1</span><br/>      <span class=\"kw1\">Do</span> i=<span class=\"nu0\">2</span> <span class=\"kw2\">By</span> <span class=\"nu0\">1</span><br/>        ra=r<br/>        k=k+<span class=\"nu0\">1</span><br/>        o=-o<span class=\"sy0\">*</span>z<br/>        r=r+o<span class=\"sy0\">/</span>i<br/>        <span class=\"kw1\">If</span> r=ra <span class=\"kw3\">Then</span> <span class=\"kw1\">Leave</span><br/>        <span class=\"kw3\">End</span><br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw3\">Otherwise</span> <span class=\"coMULTI\">/* 1.5&lt;=x */</span> <span class=\"kw1\">Do</span><br/>      z=<span class=\"br0\">(</span>x+<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>x-<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      o=<span class=\"nu0\">1</span><span class=\"sy0\">/</span>z<br/>      r=o<br/>      k=<span class=\"nu0\">1</span><br/>      <span class=\"kw1\">Do</span> i=<span class=\"nu0\">3</span> <span class=\"kw2\">By</span> <span class=\"nu0\">2</span><br/>        ra=r<br/>        k=k+<span class=\"nu0\">1</span><br/>        o=o<span class=\"sy0\">/</span><span class=\"br0\">(</span>z<span class=\"sy0\">*</span>z<span class=\"br0\">)</span><br/>        r=r+o<span class=\"sy0\">/</span>i<br/>        <span class=\"kw1\">If</span> r=ra <span class=\"kw3\">Then</span> <span class=\"kw1\">Leave</span><br/>        <span class=\"kw3\">End</span><br/>      r=<span class=\"nu0\">2</span><span class=\"sy0\">*</span>r<br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">If</span> b<span class=\"sy0\">&lt;&gt;</span><span class=\"st0\">''</span> <span class=\"kw3\">Then</span><br/>    r=r<span class=\"sy0\">/</span>log<span class=\"br0\">(</span>b,prec<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Numeric</span> <span class=\"kw2\">Digits</span> <span class=\"br0\">(</span>prec<span class=\"br0\">)</span><br/>  r=r+<span class=\"nu0\">0</span><br/>  <span class=\"kw1\">Return</span> r </pre>"}, {"lang": "Ring", "loc": 34, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>decimals(8)<br/>entropy = 0<br/>countOfChar = list(255) <br/>\u00a0<br/>source=\"1223334444\"<br/>charCount  =len( source)<br/>usedChar  =\"\"<br/>\u00a0<br/>for i =1 to len( source)  <br/>     ch =substr(source, i, 1)<br/>     if not(substr( usedChar, ch)) usedChar =usedChar +ch ok<br/>     j  =substr( usedChar, ch)<br/>    countOfChar[j] =countOfChar[j] +1<br/>next <br/>\u00a0<br/>l =len(usedChar)<br/>for i =1 to l<br/>     probability =countOfChar[i] /charCount<br/>     entropy =entropy - (probability *logBase(probability, 2))<br/>next <br/>\u00a0<br/>see \"Characters used and the number of occurrences of each \" + nl<br/>for i =1 to l<br/>      see \"'\" + substr(usedChar, i, 1) + \"' \" + countOfChar[i] + nl<br/>next <br/>\u00a0<br/>see \" Entropy of \" + source + \" is  \" + entropy + \" bits.\" + nl<br/>see \" The result should be around 1.84644 bits.\" + nl<br/>\u00a0<br/>func logBase (x, b) <br/>        logBase =log( x) /log( 2)<br/>        return logBase<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 12, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> entropy<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>  counts = <span class=\"kw4\">Hash</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"nu0\">0.0</span><span class=\"br0\">)</span><br/>  s.<span class=\"me1\">each_char</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>c<span class=\"sy0\">|</span> counts<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/>  leng = s.<span class=\"me1\">length</span><br/>\u00a0<br/>  counts.<span class=\"me1\">values</span>.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>entropy, count<span class=\"sy0\">|</span><br/>    freq = count <span class=\"sy0\">/</span> leng<br/>    entropy <span class=\"sy0\">-</span> freq <span class=\"sy0\">*</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">log2</span><span class=\"br0\">(</span>freq<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">p</span> entropy<span class=\"br0\">(</span><span class=\"st0\">\"1223334444\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Run BASIC", "loc": 26, "block": "<pre class=\"text highlighted_source\">dim chrCnt( 255) \t\t\t' possible ASCII chars<br/>\u00a0<br/>source$\t\t= \"1223334444\"<br/>numChar\t\t= len(source$)<br/>\u00a0<br/>for i = 1 to len(source$)   \t\t' count which chars are used in source<br/>\tch$\t= mid$(source$,i,1)<br/>\tif not( instr(chrUsed$, ch$)) then chrUsed$ = chrUsed$ + ch$<br/>\tj\t= instr(chrUsed$, ch$)<br/>\tchrCnt(j) =chrCnt(j) +1<br/>next i<br/>\u00a0<br/>lc\t= len(chrUsed$)<br/>for i = 1 to lc<br/>\todds\t= chrCnt(i) /numChar<br/>\tentropy\t= entropy - (odds * (log(odds) / log(2)))<br/>next i<br/>\u00a0<br/>print \" Characters used and times used of each \"<br/>for i = 1 to lc<br/>\tprint \" '\"; mid$(chrUsed$,i,1); \"'\";chr$(9);chrCnt(i)<br/>next i<br/>\u00a0<br/>print \" Entropy of '\"; source$; \"' is  \"; entropy; \" bits.\"<br/>\u00a0<br/>end</pre>"}, {"lang": "Rust", "loc": 20, "block": "<pre class=\"text highlighted_source\">fn entropy(s: &amp;[u8]) -&gt; f32 {<br/>    let mut entropy: f32 = 0.0;<br/>    let mut histogram = [0; 256];<br/>\u00a0<br/>    for i in 0..s.len() {<br/>        histogram.get_mut(s[i] as usize).map(|v| *v += 1);<br/>    }<br/>    for i in 0..256 {<br/>        if histogram[i] &gt; 0 {<br/>            let ratio = (histogram[i] as f32 / s.len() as f32) as f32;<br/>            entropy -= (ratio * ratio.log2()) as f32;<br/>        }<br/>    }<br/>    entropy<br/>}<br/>\u00a0<br/>fn main() {<br/>    let arg = std::env::args().nth(1).expect(\"Need a string.\");<br/>    println!(\"Entropy of {} is {}.\", arg, entropy(&amp;arg.bytes().collect::&lt;Vec&lt;_&gt;&gt;()));<br/>}</pre>"}, {"lang": "Scala", "loc": 12, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">math</span>.<span class=\"sy0\">_</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> entropy<span class=\"br0\">(</span> v<span class=\"sy0\">:</span>String <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> v<br/>  .<span class=\"me1\">groupBy</span> <span class=\"br0\">(</span>a <span class=\"sy0\">=&gt;</span> a<span class=\"br0\">)</span><br/>  .<span class=\"me1\">values</span><br/>  .<span class=\"me1\">map</span><span class=\"br0\">(</span> i <span class=\"sy0\">=&gt;</span> i.<span class=\"me1\">length</span>.<span class=\"me1\">toDouble</span> / v.<span class=\"me1\">length</span> <span class=\"br0\">)</span><br/>  .<span class=\"me1\">map</span><span class=\"br0\">(</span> p <span class=\"sy0\">=&gt;</span> -p <span class=\"sy0\">*</span> log10<span class=\"br0\">(</span>p<span class=\"br0\">)</span> / log10<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  .<span class=\"me1\">sum</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// Confirm that \"1223334444\" has an entropy of about 1.84644</span><br/>assert<span class=\"br0\">(</span> math.<span class=\"me1\">round</span><span class=\"br0\">(</span> entropy<span class=\"br0\">(</span><span class=\"st0\">\"1223334444\"</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">100000</span> <span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">0.00001</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1.84644</span> <span class=\"br0\">)</span></pre>"}, {"lang": "scheme", "loc": 44, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>entropy input<span class=\"br0\">)</span> <br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>close? a b<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>norm x y<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>infinite_norm m n<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>absminus p q<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">null?</span> p<span class=\"br0\">)</span> '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">else</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">abs</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> p<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> q<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>absminus <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> p<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> q<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>mm <span class=\"kw1\">l</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">null?</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cadr</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>mm <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>cddr <span class=\"kw1\">l</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span><span class=\"kw1\">else</span> <span class=\"br0\">(</span>mm <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>mm <span class=\"br0\">(</span>absminus m n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">pair?</span> x<span class=\"br0\">)</span> <span class=\"br0\">(</span>infinite_norm x y<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">abs</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> x y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>epsilon <span class=\"nu0\">0.2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>norm a b<span class=\"br0\">)</span> epsilon<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>freq<span class=\"sy0\">-</span><span class=\"kw1\">list</span> x<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span><span class=\"kw1\">f</span> x<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>count a b<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">null?</span> b<span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">else</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>close? a <span class=\"br0\">(</span><span class=\"kw1\">car</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>count a <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">t</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>tt <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>count <span class=\"kw1\">t</span> tt<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>g x<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>filter a b<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">null?</span> b<span class=\"br0\">)</span> '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span><span class=\"br0\">(</span>close? a <span class=\"br0\">(</span><span class=\"kw1\">car</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>filter a <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">else</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> b<span class=\"br0\">)</span> <span class=\"br0\">(</span>filter a <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">t</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>tt <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>filter <span class=\"kw1\">t</span> tt<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <br/>    <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">null?</span> x<span class=\"br0\">)</span> '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">else</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">f</span> x<span class=\"br0\">)</span> <span class=\"br0\">(</span>freq<span class=\"sy0\">-</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span>g x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>scale x<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>sum x<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">null?</span> x<span class=\"br0\">)</span> <span class=\"nu0\">0.0</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> x<span class=\"br0\">)</span> <span class=\"br0\">(</span>sum <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>z <span class=\"br0\">(</span>sum x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span><span class=\"br0\">(</span>m<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> m z<span class=\"br0\">)</span><span class=\"br0\">)</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>cal x<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">null?</span> x<span class=\"br0\">)</span> <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"kw1\">log</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">log</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>cal <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"br0\">(</span>cal <span class=\"br0\">(</span>scale <span class=\"br0\">(</span>freq<span class=\"sy0\">-</span><span class=\"kw1\">list</span> input<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>entropy <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">3</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">4</span> <span class=\"nu0\">4</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/><span class=\"br0\">(</span>entropy <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">1.1</span> <span class=\"nu0\">1.1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">1.2</span> <span class=\"nu0\">1.2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">1.3</span> <span class=\"nu0\">1.3</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">1.5</span> <span class=\"nu0\">1.5</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">1.6</span> <span class=\"nu0\">1.6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Scilab", "loc": 20, "block": "<pre class=\"text highlighted_source\">function E = entropy(d)<br/>    d=strsplit(d);<br/>    n=unique(string(d));<br/>    N=size(d,'r');<br/>\u00a0<br/>    count=zeros(n);<br/>    n_size = size(n,'r');<br/>    for i = 1:n_size<br/>       count(i) = sum ( d == n(i) );<br/>    end<br/>\u00a0<br/>    E=0;<br/>    for i=1:length(count)<br/>        E = E - count(i)/N * log(count(i)/N) / log(2);<br/>    end<br/>endfunction<br/>\u00a0<br/>word ='1223334444';<br/>E = entropy(word);<br/>disp('The entropy of '+word+' is '+string(E)+'.');</pre>"}, {"lang": "Seed7", "loc": 29, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"float.s7i\";<br/>  include \"math.s7i\";<br/>\u00a0<br/>const func float: entropy (in string: stri) is func<br/>  result<br/>    var float: entropy is 0.0;<br/>  local<br/>    var hash [char] integer: count is (hash [char] integer).value;<br/>    var char: ch is ' ';<br/>    var float: p is 0.0;<br/>  begin<br/>    for ch range stri do<br/>      if ch in count then<br/>        incr(count[ch]);<br/>      else<br/>        count @:= [ch] 1;<br/>      end if;<br/>    end for;<br/>    for key ch range count do<br/>      p\u00a0:= flt(count[ch]) / flt(length(stri));<br/>      entropy -:= p * log(p) / log(2.0);<br/>    end for;<br/>  end func\u00a0;<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    writeln(entropy(\"1223334444\") digits 5);<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 10, "block": "<pre class=\"ruby highlighted_source\">func entropy<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  var counts = <span class=\"kw4\">Hash</span>.<span class=\"me1\">new</span>;<br/>  s.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>c<span class=\"sy0\">|</span> counts<span class=\"br0\">{</span>c<span class=\"br0\">}</span>\u00a0:= <span class=\"nu0\">0</span> <span class=\"sy0\">++</span> <span class=\"br0\">}</span>;<br/>  var len = s.<span class=\"me1\">len</span>;<br/>  <span class=\"br0\">[</span><span class=\"nu0\">0</span>, counts.<span class=\"me1\">values</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>count<span class=\"sy0\">|</span><br/>    var freq = count<span class=\"sy0\">/</span>len; freq <span class=\"sy0\">*</span> freq.<span class=\"me1\">log2</span> <span class=\"br0\">}</span>...<br/>  <span class=\"br0\">]</span>\u00ab<span class=\"sy0\">-</span>\u00bb;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>say entropy<span class=\"br0\">(</span><span class=\"st0\">\"1223334444\"</span><span class=\"br0\">)</span>;</pre>"}, {"lang": "Swift", "loc": 14, "block": "<pre class=\"text highlighted_source\">import Foundation<br/>\u00a0<br/>func entropy(of x: String) -&gt; Double {<br/>  return x<br/>    .reduce(into: [String: Int](), {cur, char in<br/>      cur[String(char), default: 0] += 1<br/>    })<br/>    .values<br/>    .map({i in Double(i) / Double(x.count) } as (Int) -&gt; Double)<br/>    .map({p in -p * log2(p) } as (Double) -&gt; Double)<br/>    .reduce(0.0, +)<br/>}<br/>\u00a0<br/>print(entropy(of: \"1223334444\"))</pre>"}, {"lang": "Tcl", "loc": 10, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> entropy <span class=\"br0\">{</span>str<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> log2 <span class=\"br0\">[</span><span class=\"kw1\">expr</span> log<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">foreach</span> char <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"re0\">$str</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span> <span class=\"br0\">{</span>dict <span class=\"kw2\">incr</span> counts <span class=\"re0\">$char</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> entropy <span class=\"nu0\">0.0</span><br/>    <span class=\"kw1\">foreach</span> count <span class=\"br0\">[</span>dict values <span class=\"re0\">$counts</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> freq <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$count</span> / double<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$str</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">set</span> entropy <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$entropy</span> - <span class=\"re0\">$freq</span> <span class=\"sy0\">*</span> log<span class=\"br0\">(</span><span class=\"re0\">$freq</span><span class=\"br0\">)</span>/<span class=\"re0\">$log2</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$entropy</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "XPL0", "loc": 27, "block": "<pre class=\"text highlighted_source\">code real RlOut=48, Ln=54;      \\intrinsic routines<br/>string 0;                       \\use zero-terminated strings<br/>\u00a0<br/>func StrLen(A);                 \\Return number of characters in an ASCIIZ string<br/>char A;<br/>int  I;<br/>for I:= 0, -1&gt;&gt;1-1 do<br/>    if A(I) = 0 then return I;<br/>\u00a0<br/>func real Entropy(Str);         \\Return Shannon entropy of string<br/>char Str;<br/>int  Len, I, Count(128);<br/>real Sum, Prob;<br/>[Len:= StrLen(Str);<br/>for I:= 0 to 127 do Count(I):= 0;<br/>for I:= 0 to Len-1 do           \\count number of each character in string<br/>    Count(Str(I)):= Count(Str(I)) + 1;<br/>Sum:= 0.0;<br/>for I:= 0 to 127 do<br/>    if Count(I) # 0 then        \\(avoid Ln(0.0) error)<br/>        [Prob:= float(Count(I)) / float(Len);   \\probability of char in string<br/>        Sum:= Sum + Prob*Ln(Prob);<br/>        ];<br/>return -Sum/Ln(2.0);<br/>];<br/>\u00a0<br/>RlOut(0, Entropy(\"1223334444\"))</pre>"}, {"lang": "zkl", "loc": 10, "block": "<pre class=\"text highlighted_source\">fcn entropy(text){<br/>   text.pump(Void,fcn(c,freq){ c=c.toAsc(); freq[c]+=1; freq }<br/>       .fp1( (0).pump(256,List,0.0).copy() )) // array[256] of 0.0<br/>   .filter()\t\t      // remove all zero entries from array<br/>   .apply('/(text.len()))     // (num of char)/len<br/>   .apply(fcn(p){-p*p.log()}) // |p*ln(p)|<br/>   .sum(0.0)/(2.0).log();     // sum * ln(e)/ln(2) to convert to log2<br/>}<br/>\u00a0<br/>entropy(\"1223334444\").println(\" bits\");</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 12, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">LET</span> s$=<span class=\"st0\">\"1223334444\"</span>: <span class=\"kw1\">LET</span> base=<span class=\"nu0\">2</span>: <span class=\"kw1\">LET</span> entropy=<span class=\"nu0\">0</span><br/><span class=\"nu0\">20</span> <span class=\"kw1\">LET</span> sourcelen=<span class=\"kw3\">LEN</span> s$<br/><span class=\"nu0\">30</span> <span class=\"kw1\">DIM</span> t<span class=\"br0\">(</span><span class=\"nu0\">255</span><span class=\"br0\">)</span><br/><span class=\"nu0\">40</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> sourcelen<br/><span class=\"nu0\">50</span> <span class=\"kw1\">LET</span> number= <span class=\"kw3\">CODE</span> s$<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"nu0\">60</span> <span class=\"kw1\">LET</span> t<span class=\"br0\">(</span>number<span class=\"br0\">)</span>=t<span class=\"br0\">(</span>number<span class=\"br0\">)</span>+<span class=\"nu0\">1</span><br/><span class=\"nu0\">70</span> <span class=\"kw1\">NEXT</span> i<br/><span class=\"nu0\">80</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"Char\"</span>;TAB <span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span>;<span class=\"st0\">\"Count\"</span><br/><span class=\"nu0\">90</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">255</span><br/><span class=\"nu0\">100</span> <span class=\"kw1\">IF</span> t<span class=\"br0\">(</span>i<span class=\"br0\">)</span>&lt;&gt;<span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">PRINT</span> <span class=\"kw3\">CHR</span>$ i;TAB <span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span>;t<span class=\"br0\">(</span>i<span class=\"br0\">)</span>: <span class=\"kw1\">LET</span> prop=t<span class=\"br0\">(</span>i<span class=\"br0\">)</span>/sourcelen: <span class=\"kw1\">LET</span> entropy=entropy-<span class=\"br0\">(</span>prop*<span class=\"br0\">(</span><span class=\"kw3\">LN</span> prop<span class=\"br0\">)</span>/<span class=\"br0\">(</span><span class=\"kw3\">LN</span> base<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"nu0\">110</span> <span class=\"kw1\">NEXT</span> i<br/><span class=\"nu0\">120</span> <span class=\"kw1\">PRINT</span> <span class=\"co1\">'\"The Entropy of \"\"\";s$;\"\"\" is \";entropy</span></pre>"}]}