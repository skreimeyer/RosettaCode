{"task": "Magic_squares_of_doubly_even_order", "blocks": [{"lang": "360 Assembly", "loc": 63, "block": "<pre class=\"text highlighted_source\">*        Magic squares of doubly even order  01/03/2017<br/>MAGICSDB CSECT<br/>         USING  MAGICSDB,R13<br/>         B      72(R15)            skip save area<br/>         DC     17F'0'             save area<br/>         STM    R14,R12,12(R13)<br/>         ST     R13,4(R15)<br/>         ST     R15,8(R13)<br/>         LR     R13,R15            end of prolog<br/>         SR     R8,R8              k=0<br/>         LA     R6,0               i=0<br/>       DO WHILE=(C,R6,LE,=A(N-1))  do i=0 to n-1<br/>         MVC    PG,=CL80' '          clear buffer<br/>         LA     R9,PG                pgi=0<br/>         LA     R7,0                 j=0<br/>       DO WHILE=(C,R7,LE,=A(N-1))    do j=0 to n-1<br/>         LR     R4,R7                  j<br/>         SRDA   R4,32                  &gt;&gt;r5<br/>         D      R4,MULT                /mult<br/>         LR     R2,R5                  r2=j/mult<br/>         LR     R4,R6                  i<br/>         SRDA   R4,32                  &gt;&gt;r5<br/>         D      R4,MULT                /mult<br/>         SLA    R5,2                   r5=(i/mult)*4<br/>         AR     R2,R5                  bitpos=j/mult+(i/mult)*4<br/>         STC    R2,XSLL+3              number_of_shift=bitpos<br/>         L      R5,=F'1'               1<br/>         EX     0,XSLL                 r5=1&lt;&lt;bitpos  (SLL R5,bitpos)<br/>         L      R4,BITS                bits<br/>         NR     R4,R5                  bits and (1&lt;&lt;bitpos)<br/>       IF LTR,R4,NZ,R4 THEN            if (bits and (1&lt;&lt;bitpos))&lt;&gt;0<br/>         LA     R10,1(R8)                x=k+1<br/>       ELSE     ,                      else<br/>         L      R10,SIZE                 size<br/>         SR     R10,R8                   x=size-k<br/>       ENDIF    ,                      endif<br/>         XDECO  R10,XDEC               edit x<br/>         MVC    0(4,R9),XDEC+8         output x<br/>         LA     R9,4(R9)               pgi+=4<br/>         LA     R8,1(R8)               k++<br/>         LA     R7,1(R7)               j++<br/>       ENDDO    ,                    enddo j<br/>         XPRNT  PG,L'PG              print buffer<br/>         LA     R6,1(R6)             i++<br/>       ENDDO    ,                  enddo i<br/>         MVC    PG,=CL80'magic constant='<br/>         L      R1,=A((N*N+1)*N/2) magicnum=(n*n+1)*n/2<br/>         XDECO  R1,XDEC            edit magicnum<br/>         MVC    PG+15(4),XDEC+8    output magicnum<br/>         XPRNT  PG,L'PG            print buffer<br/>         L      R13,4(0,R13)       epilog<br/>         LM     R14,R12,12(R13)<br/>         XR     R15,R15            rc=0<br/>         BR     R14                exit<br/>XSLL     SLL    R5,0               shift left logical<br/>N        EQU    8                  &lt;= input value n<br/>SIZE     DC     A(N*N)             size=n*n<br/>MULT     DC     A(N/4)             mult=n/4  (multiple of 4)<br/>BITS     DC     XL2'0000',BL2'1001011001101001'  pattern<br/>PG       DS     CL80               buffer<br/>XDEC     DS     CL12               temp for xdeco<br/>         YREGS<br/>         END    MAGICSDB</pre>"}, {"lang": "AppleScript", "loc": 254, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- MAGIC SQUARE OF DOUBLY EVEN ORDER -----------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- magicSquare\u00a0:: Int -&gt; [[Int]]</span><br/><span class=\"kw3\">on</span> magicSquare<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> n <span class=\"kw2\">mod</span> <span class=\"nu0\">4</span> &gt; <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>        <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> sqr <span class=\"kw3\">to</span> n <span class=\"sy0\">*</span> n<br/>\u00a0<br/>        <span class=\"kw3\">set</span> maybePowerOfTwo <span class=\"kw3\">to</span> asPowerOfTwo<span class=\"br0\">(</span>sqr<span class=\"br0\">)</span><br/>        <span class=\"kw3\">if</span> maybePowerOfTwo <span class=\"kw3\">is</span> <span class=\"kw2\">not</span> <span class=\"kw1\">missing value</span> <span class=\"kw3\">then</span><br/>\u00a0<br/>            <span class=\"co1\">-- For powers of 2, the (append not) 'magic' series directly</span><br/>            <span class=\"co1\">-- yields the truth table that we need</span><br/>            <span class=\"kw3\">set</span> truthSeries <span class=\"kw3\">to</span> magicSeries<span class=\"br0\">(</span>maybePowerOfTwo<span class=\"br0\">)</span><br/>        <span class=\"kw3\">else</span><br/>            <span class=\"co1\">-- where n is not a power of 2, we can replicate a</span><br/>            <span class=\"co1\">-- minimum truth table, horizontally and vertically</span><br/>\u00a0<br/>            <span class=\"kw3\">script</span> scale<br/>                <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>                    replicate<span class=\"br0\">(</span>n <span class=\"sy0\">/</span> <span class=\"nu0\">4</span>, x<span class=\"br0\">)</span><br/>                <span class=\"kw3\">end</span> |\u03bb|<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>            <span class=\"kw3\">set</span> truthSeries <span class=\"kw3\">to</span> \u00ac<br/>                flatten<span class=\"br0\">(</span>scale<span class=\"co2\">'</span>s |\u03bb|<span class=\"br0\">(</span>map<span class=\"br0\">(</span>scale, splitEvery<span class=\"br0\">(</span><span class=\"nu0\">4</span>, magicSeries<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\u00a0<br/>        <span class=\"kw3\">set</span> limit <span class=\"kw3\">to</span> sqr <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw3\">script</span> inOrderOrReversed<br/>            <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x, i<span class=\"br0\">)</span><br/>                cond<span class=\"br0\">(</span>x, i, limit <span class=\"sy0\">-</span> i<span class=\"br0\">)</span><br/>            <span class=\"kw3\">end</span> |\u03bb|<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>        <span class=\"co1\">-- Taken directly from an integer series  [1..sqr] where True</span><br/>        <span class=\"co1\">-- and from the reverse of that series where False</span><br/>        splitEvery<span class=\"br0\">(</span>n, map<span class=\"br0\">(</span>inOrderOrReversed, truthSeries<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> magicSquare<br/>\u00a0<br/><span class=\"co1\">-- magicSeries\u00a0:: Int -&gt; [Bool]</span><br/><span class=\"kw3\">on</span> magicSeries<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> boolToggle<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>            <span class=\"kw2\">not</span> x<br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"kw3\">if</span> n \u2264 <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>        <span class=\"br0\">{</span><span class=\"kw1\">true</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> xs <span class=\"kw3\">to</span> magicSeries<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        xs <span class=\"sy0\">&amp;</span> map<span class=\"br0\">(</span>boolToggle, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> magicSeries<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- TEST ----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>    formattedTable<span class=\"br0\">(</span>magicSquare<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/><span class=\"co1\">-- formattedTable\u00a0:: [[Int]] -&gt; String</span><br/><span class=\"kw3\">on</span> formattedTable<span class=\"br0\">(</span>lstTable<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> n <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> lstTable<br/>    <span class=\"kw3\">set</span> w <span class=\"kw3\">to</span> <span class=\"nu0\">2.5</span> <span class=\"sy0\">*</span> n<br/>    <span class=\"st0\">\"magic(\"</span> <span class=\"sy0\">&amp;</span> n <span class=\"sy0\">&amp;</span> <span class=\"st0\">\")\"</span> <span class=\"sy0\">&amp;</span> linefeed <span class=\"sy0\">&amp;</span> wikiTable<span class=\"br0\">(</span>lstTable, \u00ac<br/>        <span class=\"kw1\">false</span>, <span class=\"st0\">\"text-align:center;width:\"</span> <span class=\"sy0\">&amp;</span> \u00ac<br/>        w <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"em;height:\"</span> <span class=\"sy0\">&amp;</span> w <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"em;table-layout:fixed;\"</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> formattedTable<br/>\u00a0<br/><span class=\"co1\">-- wikiTable\u00a0:: [Text] -&gt; Bool -&gt; Text -&gt; Text</span><br/><span class=\"kw3\">on</span> wikiTable<span class=\"br0\">(</span>lstRows, blnHdr, strStyle<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> fWikiRows<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>lstRow, iRow<span class=\"br0\">)</span><br/>            <span class=\"kw3\">set</span> strDelim <span class=\"kw3\">to</span> cond<span class=\"br0\">(</span>blnHdr <span class=\"kw2\">and</span> <span class=\"br0\">(</span>iRow <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>, <span class=\"st0\">\"!\"</span>, <span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><br/>            <span class=\"kw3\">set</span> strDbl <span class=\"kw3\">to</span> strDelim <span class=\"sy0\">&amp;</span> strDelim<br/>            linefeed <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"|-\"</span> <span class=\"sy0\">&amp;</span> linefeed <span class=\"sy0\">&amp;</span> strDelim <span class=\"sy0\">&amp;</span> <span class=\"kw1\">space</span> <span class=\"sy0\">&amp;</span> \u00ac<br/>                intercalate<span class=\"br0\">(</span><span class=\"kw1\">space</span> <span class=\"sy0\">&amp;</span> strDbl <span class=\"sy0\">&amp;</span> <span class=\"kw1\">space</span>, lstRow<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    linefeed <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"{| class=<span class=\"es0\">\\\"</span>wikitable<span class=\"es0\">\\\"</span> \"</span> <span class=\"sy0\">&amp;</span> \u00ac<br/>        cond<span class=\"br0\">(</span>strStyle \u2260 <span class=\"st0\">\"\"</span>, <span class=\"st0\">\"style=<span class=\"es0\">\\\"</span>\"</span> <span class=\"sy0\">&amp;</span> strStyle <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"<span class=\"es0\">\\\"</span>\"</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> \u00ac<br/>        intercalate<span class=\"br0\">(</span><span class=\"st0\">\"\"</span>, \u00ac<br/>            map<span class=\"br0\">(</span>fWikiRows, lstRows<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> linefeed <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"|}\"</span> <span class=\"sy0\">&amp;</span> linefeed<br/><span class=\"kw3\">end</span> wikiTable<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ---------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- asPowerOfTwo\u00a0:: Int -&gt; maybe Int</span><br/><span class=\"kw3\">on</span> asPowerOfTwo<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> <span class=\"kw2\">not</span> isPowerOf<span class=\"br0\">(</span><span class=\"nu0\">2</span>, n<span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>        <span class=\"kw1\">missing value</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> strCMD <span class=\"kw3\">to</span> <span class=\"br0\">(</span><span class=\"st0\">\"echo 'l(\"</span> <span class=\"sy0\">&amp;</span> n <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\")/l(2)' | bc -l\"</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">do shell script</span> strCMD<span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">integer</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> asPowerOfTwo<br/>\u00a0<br/><span class=\"co1\">-- concatMap\u00a0:: (a -&gt; [b]) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> concatMap<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> append<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>            a <span class=\"sy0\">&amp;</span> b<br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    foldl<span class=\"br0\">(</span>append, <span class=\"br0\">{</span><span class=\"br0\">}</span>, map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> concatMap<br/>\u00a0<br/><span class=\"co1\">-- cond\u00a0:: Bool -&gt; a -&gt; a -&gt; a</span><br/><span class=\"kw3\">on</span> cond<span class=\"br0\">(</span>bool, f, g<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> bool <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        g<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> cond<br/>\u00a0<br/><span class=\"co1\">-- flatten\u00a0:: Tree a -&gt; [a]</span><br/><span class=\"kw3\">on</span> flatten<span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> t <span class=\"kw3\">is</span> <span class=\"kw1\">list</span> <span class=\"kw3\">then</span><br/>        concatMap<span class=\"br0\">(</span><span class=\"kw3\">my</span> flatten, t<span class=\"br0\">)</span><br/>    <span class=\"kw3\">else</span><br/>        t<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> flatten<br/>\u00a0<br/><span class=\"co1\">-- foldl\u00a0:: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/><span class=\"kw3\">on</span> foldl<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>v, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> foldl<br/>\u00a0<br/><span class=\"co1\">-- intercalate\u00a0:: Text -&gt; [Text] -&gt; Text</span><br/><span class=\"kw3\">on</span> intercalate<span class=\"br0\">(</span>strText, lstText<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>dlm, <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span><span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span>, strText<span class=\"br0\">}</span><br/>    <span class=\"kw3\">set</span> strJoined <span class=\"kw3\">to</span> lstText <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/>    <span class=\"kw3\">set</span> <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span> <span class=\"kw3\">to</span> dlm<br/>    <span class=\"kw3\">return</span> strJoined<br/><span class=\"kw3\">end</span> intercalate<br/>\u00a0<br/><span class=\"co1\">-- isPowerOf\u00a0:: Int -&gt; Int -&gt; Bool</span><br/><span class=\"kw3\">on</span> isPowerOf<span class=\"br0\">(</span>k, n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> k<br/>    <span class=\"kw3\">script</span> remLeft<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>            x <span class=\"kw2\">mod</span> v <span class=\"kw3\">is</span> <span class=\"kw2\">not</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"kw3\">script</span> integerDiv<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>            x <span class=\"kw2\">div</span> v<br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    |<span class=\"kw3\">until</span>|<span class=\"br0\">(</span>remLeft, integerDiv, n<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/><span class=\"kw3\">end</span> isPowerOf<br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn<br/>\u00a0<br/><span class=\"co1\">-- Egyptian multiplication - progressively doubling a list, appending</span><br/><span class=\"co1\">-- stages of doubling to an accumulator where needed for binary </span><br/><span class=\"co1\">-- assembly of a target length</span><br/>\u00a0<br/><span class=\"co1\">-- replicate\u00a0:: Int -&gt; a -&gt; [a]</span><br/><span class=\"kw3\">on</span> replicate<span class=\"br0\">(</span>n, a<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> out <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"kw3\">then</span> <span class=\"kw3\">return</span> out<br/>    <span class=\"kw3\">set</span> dbl <span class=\"kw3\">to</span> <span class=\"br0\">{</span>a<span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">while</span> <span class=\"br0\">(</span>n &gt; <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">if</span> <span class=\"br0\">(</span>n <span class=\"kw2\">mod</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw3\">set</span> out <span class=\"kw3\">to</span> out <span class=\"sy0\">&amp;</span> dbl<br/>        <span class=\"kw3\">set</span> n <span class=\"kw3\">to</span> <span class=\"br0\">(</span>n <span class=\"kw2\">div</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> dbl <span class=\"kw3\">to</span> <span class=\"br0\">(</span>dbl <span class=\"sy0\">&amp;</span> dbl<span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> out <span class=\"sy0\">&amp;</span> dbl<br/><span class=\"kw3\">end</span> replicate<br/>\u00a0<br/><span class=\"co1\">-- splitAt\u00a0:: Int -&gt; [a] -&gt; ([a],[a])</span><br/><span class=\"kw3\">on</span> splitAt<span class=\"br0\">(</span>n, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> n &gt; <span class=\"nu0\">0</span> <span class=\"kw2\">and</span> n <span class=\"sy0\">&lt;</span> length <span class=\"kw3\">of</span> xs <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> xs <span class=\"kw3\">is</span> <span class=\"kw1\">text</span> <span class=\"kw3\">then</span><br/>            <span class=\"br0\">{</span><span class=\"kw1\">items</span> <span class=\"nu0\">1</span> <span class=\"kw2\">thru</span> n <span class=\"kw3\">of</span> xs <span class=\"kw2\">as</span> <span class=\"kw1\">text</span>, <span class=\"kw1\">items</span> <span class=\"br0\">(</span>n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">thru</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw3\">of</span> xs <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">else</span><br/>            <span class=\"br0\">{</span><span class=\"kw1\">items</span> <span class=\"nu0\">1</span> <span class=\"kw2\">thru</span> n <span class=\"kw3\">of</span> xs, <span class=\"kw1\">items</span> <span class=\"br0\">(</span>n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">thru</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw3\">of</span> xs<span class=\"br0\">}</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"kw3\">then</span><br/>            <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"br0\">}</span>, xs<span class=\"br0\">}</span><br/>        <span class=\"kw3\">else</span><br/>            <span class=\"br0\">{</span>xs, <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> splitAt<br/>\u00a0<br/><span class=\"co1\">-- splitEvery\u00a0:: Int -&gt; [a] -&gt; [[a]]</span><br/><span class=\"kw3\">on</span> splitEvery<span class=\"br0\">(</span>n, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> length <span class=\"kw3\">of</span> xs \u2264 n <span class=\"kw3\">then</span><br/>        <span class=\"br0\">{</span>xs<span class=\"br0\">}</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> <span class=\"br0\">{</span>gp, t<span class=\"br0\">}</span> <span class=\"kw3\">to</span> splitAt<span class=\"br0\">(</span>n, xs<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span>gp<span class=\"br0\">}</span> <span class=\"sy0\">&amp;</span> splitEvery<span class=\"br0\">(</span>n, t<span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> splitEvery<br/>\u00a0<br/><span class=\"co1\">-- until\u00a0:: (a -&gt; Bool) -&gt; (a -&gt; a) -&gt; a -&gt; a</span><br/><span class=\"kw3\">on</span> |<span class=\"kw3\">until</span>|<span class=\"br0\">(</span>p, f, x<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> mp <span class=\"kw3\">to</span> mReturn<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> x<br/>\u00a0<br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">until</span> mp<span class=\"co2\">'</span>s |\u03bb|<span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/>    <span class=\"kw3\">return</span> v<br/><span class=\"kw3\">end</span> |<span class=\"kw3\">until</span>|</pre>"}, {"lang": "Befunge", "loc": 2, "block": "<pre class=\"text highlighted_source\">8&gt;&gt;&gt;v&gt;10p00g:*1-*\\110g2*-*+1+.:00g%!9+,:#<a class=\"__cf_email__\" data-cfemail=\"22547d62\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>p00:&lt;^:!!-!%3//4g00%g00\\!!%3/*:g00*4:::-1&lt;*:</pre>"}, {"lang": "C", "loc": 64, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include&lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include&lt;ctype.h&gt;</span><br/><span class=\"co2\">#include&lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span><span class=\"sy0\">**</span> doublyEvenMagicSquare<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span> <span class=\"sy0\">||</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">4</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> NULL<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> bits <span class=\"sy0\">=</span> <span class=\"nu0\">38505</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> size <span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> n<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> mult <span class=\"sy0\">=</span> n <span class=\"sy0\">/</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span>i<span class=\"sy0\">,</span>r<span class=\"sy0\">,</span>c<span class=\"sy0\">,</span>bitPos<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span><span class=\"sy0\">**</span> result <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">**</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">*</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>n<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\tresult<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">*</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> r <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> r<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> c <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> c<span class=\"sy0\">++,</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tbitPos <span class=\"sy0\">=</span> c <span class=\"sy0\">/</span> mult <span class=\"sy0\">+</span> <span class=\"br0\">(</span>r <span class=\"sy0\">/</span> mult<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>\t\t\tresult<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>bits <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> bitPos<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> size <span class=\"sy0\">-</span> i<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> numDigits<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>n<span class=\"sy0\">&gt;=</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\tn <span class=\"sy0\">/=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>\t\tcount<span class=\"sy0\">++;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> count<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> printMagicSquare<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">**</span> square<span class=\"sy0\">,</span><span class=\"kw4\">int</span> rows<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span>baseWidth <span class=\"sy0\">=</span> numDigits<span class=\"br0\">(</span>rows<span class=\"sy0\">*</span>rows<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Doubly Magic Square of Order\u00a0:\u00a0%d and Magic Constant\u00a0:\u00a0%d<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span>rows<span class=\"sy0\">,</span><span class=\"br0\">(</span>rows <span class=\"sy0\">*</span> rows <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> rows <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>rows<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>j<span class=\"sy0\">&lt;</span>rows<span class=\"sy0\">;</span>j<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%*s%d\"</span><span class=\"sy0\">,</span>baseWidth <span class=\"sy0\">-</span> numDigits<span class=\"br0\">(</span>square<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\"\"</span><span class=\"sy0\">,</span>square<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argC<span class=\"sy0\">,</span><span class=\"kw4\">char</span><span class=\"sy0\">*</span> argV<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> n<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>argC<span class=\"sy0\">!=</span><span class=\"nu0\">2</span><span class=\"sy0\">||</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/isdigit.html\"><span class=\"kw3\">isdigit</span></a><span class=\"br0\">(</span>argV<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Usage\u00a0:\u00a0%s &lt;integer specifying rows in magic square&gt;\"</span><span class=\"sy0\">,</span>argV<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">else</span><span class=\"br0\">{</span><br/>\t\tn <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/atoi.html\"><span class=\"kw3\">atoi</span></a><span class=\"br0\">(</span>argV<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tprintMagicSquare<span class=\"br0\">(</span>doublyEvenMagicSquare<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">,</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C++", "loc": 53, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;sstream&gt;</span><br/><span class=\"co2\">#include &lt;iomanip&gt;</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> magicSqr<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span> <br/>    magicSqr<span class=\"br0\">(</span> <span class=\"kw4\">int</span> d <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">while</span><span class=\"br0\">(</span> d <span class=\"sy2\">%</span> <span class=\"nu0\">4</span> <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> d<span class=\"sy2\">++</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>        sz <span class=\"sy1\">=</span> d<span class=\"sy4\">;</span><br/>        sqr <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>sz <span class=\"sy2\">*</span> sz<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>        fillSqr<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    ~magicSqr<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">delete</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> sqr<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> display<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Doubly Even Magic Square: \"</span> <span class=\"sy1\">&lt;&lt;</span> sz <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" x \"</span> <span class=\"sy1\">&lt;&lt;</span> sz <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"It's Magic Sum is: \"</span> <span class=\"sy1\">&lt;&lt;</span> magicNumber<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>        ostringstream cvr<span class=\"sy4\">;</span> cvr <span class=\"sy1\">&lt;&lt;</span> sz <span class=\"sy2\">*</span> sz<span class=\"sy4\">;</span><br/>        <span class=\"kw4\">int</span> l <span class=\"sy1\">=</span> cvr.<span class=\"me1\">str</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> y <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> y <span class=\"sy1\">&lt;</span> sz<span class=\"sy4\">;</span> y<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> yy <span class=\"sy1\">=</span> y <span class=\"sy2\">*</span> sz<span class=\"sy4\">;</span><br/>            <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> sz<span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> setw<span class=\"br0\">(</span> l <span class=\"sy2\">+</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> sqr<span class=\"br0\">[</span>yy <span class=\"sy2\">+</span> x<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">void</span> fillSqr<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">static</span> <span class=\"kw4\">const</span> <span class=\"kw4\">bool</span> tempAll<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"br0\">{</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span> <span class=\"br0\">}</span>, <span class=\"br0\">{</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span> <span class=\"br0\">}</span>, <span class=\"br0\">{</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span> <span class=\"br0\">}</span>, <span class=\"br0\">{</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>        <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> curRow <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> curRow <span class=\"sy1\">&lt;</span> sz<span class=\"sy4\">;</span> curRow<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> curCol <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> curCol <span class=\"sy1\">&lt;</span> sz<span class=\"sy4\">;</span> curCol<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                sqr<span class=\"br0\">[</span>curCol <span class=\"sy2\">+</span> sz <span class=\"sy2\">*</span> curRow<span class=\"br0\">]</span> <span class=\"sy1\">=</span> tempAll<span class=\"br0\">[</span>curRow <span class=\"sy2\">%</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">[</span>curCol <span class=\"sy2\">%</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy4\">?</span> i <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"sy4\">:</span> sz <span class=\"sy2\">*</span> sz <span class=\"sy2\">-</span> i<span class=\"sy4\">;</span><br/>                i<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> magicNumber<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> sz <span class=\"sy2\">*</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> sz <span class=\"sy2\">*</span> sz <span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"sy2\">/</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span><span class=\"sy2\">*</span> sqr<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">int</span> sz<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    magicSqr s<span class=\"br0\">(</span> <span class=\"nu0\">8</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    s.<span class=\"me1\">display</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 45, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> MagicSquareDoublyEven<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> result <span class=\"sy0\">=</span> MagicSquareDoublyEven<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> result<span class=\"sy0\">.</span><span class=\"me1\">GetLength</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> result<span class=\"sy0\">.</span><span class=\"me1\">GetLength</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                    Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"{0,2} \"</span>, result<span class=\"br0\">[</span>i, j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>Magic constant: {0} \"</span>, <span class=\"br0\">(</span>n <span class=\"sy0\">*</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> n <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>,<span class=\"br0\">]</span> MagicSquareDoublyEven<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span> <span class=\"sy0\">||</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">4</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"base must be a positive \"</span><br/>                        <span class=\"sy0\">+</span> <span class=\"st0\">\"multiple of 4\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"co1\">// pattern of count-up vs count-down zones</span><br/>            <span class=\"kw4\">int</span> bits <span class=\"sy0\">=</span> 0b1001_0110_0110_1001<span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> size <span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> n<span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> mult <span class=\"sy0\">=</span> n <span class=\"sy0\">/</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span>  <span class=\"co1\">// how many multiples of 4</span><br/>\u00a0<br/>            <span class=\"kw4\">int</span><span class=\"br0\">[</span>,<span class=\"br0\">]</span> result <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">int</span><span class=\"br0\">[</span>n, n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> r <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> r<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> c <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> c<span class=\"sy0\">++</span>, i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    <span class=\"kw4\">int</span> bitPos <span class=\"sy0\">=</span> c <span class=\"sy0\">/</span> mult <span class=\"sy0\">+</span> <span class=\"br0\">(</span>r <span class=\"sy0\">/</span> mult<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>                    result<span class=\"br0\">[</span>r, c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>bits <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> bitPos<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> size <span class=\"sy0\">-</span> i<span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D", "loc": 36, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> n<span class=\"sy0\">=</span><span class=\"nu0\">8</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>row<span class=\"sy0\">;</span> magicSquareDoublyEven<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>col<span class=\"sy0\">;</span> row<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            writef<span class=\"br0\">(</span><span class=\"st0\">\"%2s \"</span><span class=\"sy0\">,</span> col<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        writeln<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Magic constant: \"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>n<span class=\"sy0\">*</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>n<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> magicSquareDoublyEven<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">exception</span><span class=\"sy0\">;</span><br/>    enforce<span class=\"br0\">(</span>n<span class=\"sy0\">&gt;=</span><span class=\"nu0\">4</span> <span class=\"sy0\">&amp;&amp;</span> n<span class=\"sy0\">%</span><span class=\"nu19\">4</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Base must be a positive multiple of 4\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> bits <span class=\"sy0\">=</span> <span class=\"nu6\">0b1001</span>_0110_0110_1001<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> size <span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> n<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> mult <span class=\"sy0\">=</span> n <span class=\"sy0\">/</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span>  <span class=\"co1\">// how many multiples of 4</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> result<span class=\"sy0\">;</span><br/>    result.<span class=\"me1\">length</span> <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>i<span class=\"sy0\">;</span> <span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"me1\">n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        result<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">length</span> <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> r<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> r<span class=\"sy0\">&lt;</span>n<span class=\"sy0\">;</span> r<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> c<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> c<span class=\"sy0\">&lt;</span>n<span class=\"sy0\">;</span> c<span class=\"sy0\">++,</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> bitPos <span class=\"sy0\">=</span> c <span class=\"sy0\">/</span> mult <span class=\"sy0\">+</span> <span class=\"br0\">(</span>r <span class=\"sy0\">/</span> mult<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>            result<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>bits <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> bitPos<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> size <span class=\"sy0\">-</span> i<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elena", "loc": 42, "block": "<pre class=\"text highlighted_source\">import system'routines.<br/>import extensions.<br/>import extensions'routines.<br/>\u00a0<br/>MagicSquareDoublyEven = (:n)&lt;int&gt;<br/>[<br/>    if((n &lt; 4)||(n mod(4)\u00a0!= 0))<br/>        [ InvalidArgumentException new:\"base must be a positive multiple of 4\" ].<br/>\u00a0<br/>    int bits\u00a0:= 09669h.<br/>    int size\u00a0:= n * n.<br/>    int mult\u00a0:= n / 4.<br/>\u00a0<br/>    var result\u00a0:= IntMatrix new(n,n).<br/>    int r\u00a0:= 0.<br/>    int i\u00a0:= 0.<br/>    while (r &lt; n)<br/>    [<br/>        int c\u00a0:= 0.<br/>        while(c &lt; n)<br/>        [<br/>            int bitPos\u00a0:= c / mult + (r / mult) * 4.<br/>\u00a0<br/>            result[r][c]\u00a0:= (bits &amp;&amp; (1 &lt;&lt; bitPos)\u00a0!= 0)iif(i+1,size - i).<br/>\u00a0<br/>            i += 1.<br/>            c += 1.<br/>        ].<br/>        r += 1.<br/>    ].<br/>\u00a0<br/>    ^ result<br/>].<br/>\u00a0<br/>program =<br/>[<br/>    int n\u00a0:= 8.<br/>\u00a0<br/>    MagicSquareDoublyEven(n) forEach(printingLn).<br/>\u00a0<br/>    console printLine; printLine(\"Magic constant: \",(n * n + 1) * n / 2).<br/>].</pre>"}, {"lang": "Elixir", "loc": 27, "block": "<pre class=\"text highlighted_source\">defmodule Magic_square do<br/>  def doubly_even(n) when rem(n,4)!=0, do: raise ArgumentError, \"must be even, but not divisible by 4.\"<br/>  def doubly_even(n) do<br/>    n2 = n * n<br/>    Enum.zip(1..n2, make_pattern(n))<br/>    |&gt; Enum.map(fn {i,p} -&gt; if p, do: i, else: n2 - i + 1 end)<br/>    |&gt; Enum.chunk(n)<br/>    |&gt; to_string(n)<br/>    |&gt; IO.puts<br/>  end<br/>\u00a0<br/>  defp make_pattern(n) do<br/>    pattern = Enum.reduce(1..4, [true], fn _,acc -&gt;<br/>                acc ++ Enum.map(acc, &amp;(!&amp;1))<br/>              end) |&gt; Enum.chunk(4)<br/>    for i &lt;- 0..n-1, j &lt;- 0..n-1, do: Enum.at(pattern, rem(i,4)) |&gt; Enum.at(rem(j,4))<br/>  end<br/>\u00a0<br/>  defp to_string(square, n) do<br/>    format = String.duplicate(\"~#{length(to_char_list(n*n))}w \", n) &lt;&gt; \"\\n\"<br/>    Enum.map_join(square, fn row -&gt;<br/>     \u00a0:io_lib.format(format, row)<br/>    end)<br/>  end<br/>end<br/>\u00a0<br/>Magic_square.doubly_even(8)</pre>"}, {"lang": "FreeBASIC", "loc": 120, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 18-03-2016</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/><span class=\"co1\">' doubly even magic square 4, 8, 12, 16...</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> Err_msg<span class=\"br0\">(</span>msg <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Print</span> msg<br/>    <span class=\"kw1\">Beep</span>\u00a0: <span class=\"kw1\">Sleep</span> <span class=\"nu0\">5000</span>, <span class=\"nu0\">1</span>\u00a0: <span class=\"kw1\">Exit</span> <span class=\"kw1\">Sub</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> de_magicsq<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span>, filename <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> = <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">' filename &lt;&gt; \"\" then save square in a file</span><br/>    <span class=\"co1\">' filename can contain directory name</span><br/>    <span class=\"co1\">' if filename exist it will be overwriten, no error checking</span><br/>\u00a0<br/>    <span class=\"kw1\">If</span> n &lt; <span class=\"nu0\">4</span> <span class=\"kw1\">Then</span><br/>        Err_msg<span class=\"br0\">(</span> <span class=\"st0\">\"Error: n is to small\"</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">Exit</span> <span class=\"kw1\">Sub</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>    <span class=\"kw1\">If</span> <span class=\"br0\">(</span>n <span class=\"kw1\">Mod</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> &lt;&gt; <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>        Err_msg <span class=\"st0\">\"Error: not possible to make doubly\"</span> + _<br/>        <span class=\"st0\">\" even magic square size \"</span> + <span class=\"kw1\">Str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        <span class=\"kw1\">Exit</span> <span class=\"kw1\">Sub</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> sq<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n, <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> magic_sum = n * <span class=\"br0\">(</span>n ^ <span class=\"nu0\">2</span> +<span class=\"nu0\">1</span><span class=\"br0\">)</span> \\ <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> q = n \\ <span class=\"nu0\">4</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> x, y, nr = <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> frmt = <span class=\"kw1\">String</span><span class=\"br0\">(</span><span class=\"kw1\">Len</span><span class=\"br0\">(</span><span class=\"kw1\">Str</span><span class=\"br0\">(</span>n * n<span class=\"br0\">)</span><span class=\"br0\">)</span> +<span class=\"nu0\">1</span>, <span class=\"st0\">\"#\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">' set up the square</span><br/>    <span class=\"kw1\">For</span> y = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>        <span class=\"kw1\">For</span> x = q +<span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n - q<br/>            sq<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> = <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">For</span> x = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>        <span class=\"kw1\">For</span> y = q +<span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n - q<br/>            sq<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> <span class=\"kw1\">Xor</span>= <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"co1\">' fill the square</span><br/>    q = n * n +<span class=\"nu0\">1</span><br/>    <span class=\"kw1\">For</span> y = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>        <span class=\"kw1\">For</span> x = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>            <span class=\"kw1\">If</span> sq<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>                sq<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> = q - nr<br/>            <span class=\"kw1\">Else</span><br/>                sq<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> = nr<br/>            <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>            nr += <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"co1\">' check columms and rows</span><br/>    <span class=\"kw1\">For</span> y = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>        nr = <span class=\"nu0\">0</span>\u00a0: q = <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">For</span> x = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>            nr += sq<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span><br/>            q += sq<span class=\"br0\">(</span>y,x<span class=\"br0\">)</span><br/>        <span class=\"kw1\">Next</span><br/>        <span class=\"kw1\">If</span> nr &lt;&gt; magic_sum <span class=\"kw1\">Or</span> q &lt;&gt; magic_sum <span class=\"kw1\">Then</span><br/>            Err_msg <span class=\"st0\">\"Error: value &lt;&gt; magic_sum\"</span><br/>            <span class=\"kw1\">Exit</span> <span class=\"kw1\">Sub</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"co1\">' check diagonals</span><br/>    nr = <span class=\"nu0\">0</span>\u00a0: q = <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">For</span> x = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>        nr += sq<span class=\"br0\">(</span>x, x<span class=\"br0\">)</span><br/>        q += sq<span class=\"br0\">(</span>n - x +<span class=\"nu0\">1</span>, n - x +<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">If</span> nr &lt;&gt; magic_sum <span class=\"kw1\">Or</span> q &lt;&gt; magic_sum <span class=\"kw1\">Then</span><br/>        Err_msg <span class=\"st0\">\"Error: value &lt;&gt; magic_sum\"</span><br/>        <span class=\"kw1\">Exit</span> <span class=\"kw1\">Sub</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>    <span class=\"co1\">' printing square's on screen bigger when</span><br/>    <span class=\"co1\">' n &gt; 19 results in a wrapping of the line</span><br/>    <span class=\"kw1\">Print</span> <span class=\"st0\">\"Single even magic square size: \"</span>; n; <span class=\"st0\">\"*\"</span>; n<br/>    <span class=\"kw1\">Print</span> <span class=\"st0\">\"The magic sum = \"</span>; magic_sum<br/>    <span class=\"kw1\">Print</span><br/>    <span class=\"kw1\">For</span> y = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>        <span class=\"kw1\">For</span> x = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>            <span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> frmt; sq<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">Next</span><br/>        <span class=\"kw1\">Print</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"co1\">' output magic square to a file with the name provided</span><br/>    <span class=\"kw1\">If</span> filename &lt;&gt; <span class=\"st0\">\"\"</span> <span class=\"kw1\">Then</span><br/>        nr = <span class=\"kw1\">FreeFile</span><br/>        <span class=\"kw1\">Open</span> filename <span class=\"kw1\">For</span> <span class=\"kw1\">Output</span> <span class=\"kw1\">As</span> <span class=\"co2\">#nr</span><br/>        <span class=\"kw1\">Print</span> <span class=\"co2\">#nr, \"Single even magic square size: \"; n; \"*\"; n</span><br/>        <span class=\"kw1\">Print</span> <span class=\"co2\">#nr, \"The magic sum = \"; magic_sum</span><br/>        <span class=\"kw1\">Print</span> <span class=\"co2\">#nr,</span><br/>        <span class=\"kw1\">For</span> y = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>            <span class=\"kw1\">For</span> x = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>                <span class=\"kw1\">Print</span> <span class=\"co2\">#nr, Using frmt; sq(x,y);</span><br/>            <span class=\"kw1\">Next</span><br/>            <span class=\"kw1\">Print</span> <span class=\"co2\">#nr,</span><br/>        <span class=\"kw1\">Next</span><br/>        <span class=\"kw1\">Close</span> <span class=\"co2\">#nr</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/>de_magicsq<span class=\"br0\">(</span><span class=\"nu0\">8</span>, <span class=\"st0\">\"magic8de.txt\"</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Print</span><br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">Inkey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Go", "loc": 52, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>\t<span class=\"st0\">\"fmt\"</span><br/>\t<span class=\"st0\">\"log\"</span><br/>\t<span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">const</span> dimensions <span class=\"kw4\">int</span> <span class=\"sy2\">=</span> <span class=\"nu0\">8</span><br/>\u00a0<br/><span class=\"kw4\">func</span> setupMagicSquareData<span class=\"sy1\">(</span>d <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">([][]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> error<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">var</span> output <span class=\"sy1\">[][]</span><span class=\"kw4\">int</span><br/>\t<span class=\"kw1\">if</span> d &lt; <span class=\"nu0\">4</span> <span class=\"sy3\">||</span> d<span class=\"sy3\">%</span><span class=\"nu0\">4</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"sy1\">[][]</span><span class=\"kw4\">int</span><span class=\"sy1\">{},</span> fmt<span class=\"sy3\">.</span>Errorf<span class=\"sy1\">(</span><span class=\"st0\">\"Square dimension must be a positive number which is divisible by 4\"</span><span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">var</span> bits <span class=\"kw4\">uint</span> <span class=\"sy2\">=</span> <span class=\"nu0\">0x9669</span> <span class=\"co1\">// 0b1001011001101001</span><br/>\tsize <span class=\"sy2\">:=</span> d <span class=\"sy3\">*</span> d<br/>\tmult <span class=\"sy2\">:=</span> d <span class=\"sy3\">/</span> <span class=\"nu0\">4</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> r <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> r &lt; d<span class=\"sy1\">;</span> r<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>\t\toutput <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>output<span class=\"sy1\">,</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">{})</span><br/>\t\t<span class=\"kw1\">for</span> c <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> c &lt; d<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> c <span class=\"sy2\">=</span> <span class=\"nu2\">i</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> c<span class=\"sy3\">+</span><span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>\t\t\tbitPos <span class=\"sy2\">:=</span> c<span class=\"sy3\">/</span>mult <span class=\"sy3\">+</span> <span class=\"sy1\">(</span>r<span class=\"sy3\">/</span>mult<span class=\"sy1\">)</span><span class=\"sy3\">*</span><span class=\"nu0\">4</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"sy1\">(</span>bits &amp; <span class=\"sy1\">(</span><span class=\"nu0\">1</span> &lt;&lt; <span class=\"kw4\">uint</span><span class=\"sy1\">(</span>bitPos<span class=\"sy1\">)))</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>\t\t\t\toutput<span class=\"sy1\">[</span>r<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>output<span class=\"sy1\">[</span>r<span class=\"sy1\">],</span> <span class=\"nu2\">i</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>\t\t\t<span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>\t\t\t\toutput<span class=\"sy1\">[</span>r<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>output<span class=\"sy1\">[</span>r<span class=\"sy1\">],</span> size<span class=\"sy3\">-</span><span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>\t\t\t<span class=\"sy1\">}</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> output<span class=\"sy1\">,</span> <span class=\"kw2\">nil</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> arrayItoa<span class=\"sy1\">(</span>input <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">var</span> output <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> input <span class=\"sy1\">{</span><br/>\t\toutput <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>output<span class=\"sy1\">,</span> fmt<span class=\"sy3\">.</span>Sprintf<span class=\"sy1\">(</span><span class=\"st0\">\"%4d\"</span><span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy1\">))</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> output<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\tdata<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> setupMagicSquareData<span class=\"sy1\">(</span>dimensions<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>\t\tlog<span class=\"sy3\">.</span>Fatal<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\tmagicConstant <span class=\"sy2\">:=</span> <span class=\"sy1\">(</span>dimensions <span class=\"sy3\">*</span> <span class=\"sy1\">(</span>dimensions<span class=\"sy3\">*</span>dimensions <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">))</span> <span class=\"sy3\">/</span> <span class=\"nu0\">2</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> row <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> data <span class=\"sy1\">{</span><br/>\t\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>strings<span class=\"sy3\">.</span>Join<span class=\"sy1\">(</span>arrayItoa<span class=\"sy1\">(</span>row<span class=\"sy1\">),</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">))</span><br/>\t<span class=\"sy1\">}</span><br/>\tfmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Magic Constant:\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> magicConstant<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0</pre>"}, {"lang": "Haskell", "loc": 61, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>transpose<span class=\"sy0\">,</span> unfoldr<span class=\"sy0\">,</span> intercalate<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List<span class=\"sy0\">.</span>Split <span class=\"br0\">(</span>chunksOf<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a> <span class=\"br0\">(</span>forM<span class=\"sy0\">_</span><span class=\"br0\">)</span><br/>\u00a0<br/>magicSquare <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>magicSquare n<br/>  <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:rem\"><span class=\"kw3\">rem</span></a> n <span class=\"nu0\">4</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span><br/>    chunksOf n <span class=\"sy0\">$</span><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a><br/>      <span class=\"br0\">(</span>\\x i <span class=\"sy0\">-&gt;</span><br/>          <span class=\"kw1\">if</span> x<br/>            <span class=\"kw1\">then</span> i<br/>            <span class=\"kw1\">else</span> limit <span class=\"sy0\">-</span> i<span class=\"br0\">)</span><br/>      series<br/>      <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> sqr<span class=\"br0\">]</span><br/>  <span class=\"kw1\">where</span><br/>    sqr <span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> n<br/>    limit <span class=\"sy0\">=</span> sqr <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    series<br/>      <span class=\"sy0\">|</span> isPowerOf <span class=\"nu0\">2</span> n <span class=\"sy0\">=</span> magicSeries <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:floor\"><span class=\"kw3\">floor</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:logBase\"><span class=\"kw3\">logBase</span></a> <span class=\"nu0\">2</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> sqr<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span><br/>        <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concat\"><span class=\"kw3\">concat</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concat\"><span class=\"kw3\">concat</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concat\"><span class=\"kw3\">concat</span></a> <span class=\"sy0\">.</span> scale <span class=\"sy0\">$</span> scale <span class=\"sy0\">&lt;$&gt;</span> chunksOf <span class=\"nu0\">4</span> <span class=\"br0\">(</span>magicSeries <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">where</span><br/>        scale <span class=\"sy0\">=</span> replicate <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:quot\"><span class=\"kw3\">quot</span></a> n <span class=\"nu0\">4</span><br/>\u00a0<br/>magicSeries <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><span class=\"br0\">]</span><br/>magicSeries <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:iterate\"><span class=\"kw3\">iterate</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;*&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:not\"><span class=\"kw3\">not</span></a><span class=\"br0\">)</span> <span class=\"br0\">[</span>True<span class=\"br0\">]</span> <span class=\"sy0\">!!</span><span class=\"br0\">)</span><br/>\u00a0<br/>isPowerOf <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>isPowerOf k n <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:until\"><span class=\"kw3\">until</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">/=</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:flip\"><span class=\"kw3\">flip</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:rem\"><span class=\"kw3\">rem</span></a> k<span class=\"br0\">)</span> <span class=\"br0\">(</span>`<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:quot\"><span class=\"kw3\">quot</span></a>` k<span class=\"br0\">)</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- TEST AND DISPLAY FUNCTIONS --------------------------------------------------</span><br/>\u00a0<br/>checked <span class=\"sy0\">::</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><span class=\"br0\">)</span><br/>checked square <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> diagonals <span class=\"sy0\">=</span><br/>        <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:flip\"><span class=\"kw3\">flip</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!!</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>:<span class=\"br0\">)</span> <span class=\"sy0\">&lt;*&gt;</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reverse\"><span class=\"kw3\">reverse</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      h:t <span class=\"sy0\">=</span><br/>        <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a> <span class=\"sy0\">&lt;$&gt;</span><br/>        square <span class=\"sy0\">++</span> <span class=\"co1\">-- rows</span><br/>        transpose square <span class=\"sy0\">++</span> <span class=\"co1\">-- cols</span><br/>        diagonals square <span class=\"co1\">-- diagonals</span><br/>  <span class=\"kw1\">in</span> <span class=\"br0\">(</span>h<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:all\"><span class=\"kw3\">all</span></a> <span class=\"br0\">(</span>h <span class=\"sy0\">==</span><span class=\"br0\">)</span> t<span class=\"br0\">)</span><br/>\u00a0<br/>table <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span><br/>table delim rows <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> justifyRight c n s <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:drop\"><span class=\"kw3\">drop</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> s<span class=\"br0\">)</span> <span class=\"br0\">(</span>replicate n c <span class=\"sy0\">++</span> s<span class=\"br0\">)</span><br/>  <span class=\"kw1\">in</span> intercalate delim <span class=\"sy0\">&lt;$&gt;</span><br/>     transpose<br/>       <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <span class=\"sy0\">=&lt;&lt;</span> justifyRight <span class=\"st0\">' '</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:maximum\"><span class=\"kw3\">maximum</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a><span class=\"br0\">)</span> <span class=\"sy0\">&lt;$&gt;</span> transpose rows<span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span><br/>  forM<span class=\"sy0\">_</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">]</span> <span class=\"sy0\">$</span><br/>  \\n <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">let</span> test <span class=\"sy0\">=</span> magicSquare n<br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:unlines\"><span class=\"kw3\">unlines</span></a> <span class=\"br0\">(</span>table <span class=\"st0\">\" \"</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"sy0\">&lt;$&gt;</span> test<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> checked test<br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"\"</span></pre>"}, {"lang": "J", "loc": 5, "block": "<pre class=\"j highlighted_source\">\u00a0<br/>mask =: ,#: <span class=\"nu0\">8</span> $ <span class=\"nu0\">153</span> <span class=\"nu0\">102</span> <span class=\"nu0\">102</span> <span class=\"nu0\">153</span><br/>t =: <span class=\"sy0\">(</span>, <span class=\"nu0\">65</span>&amp;-<span class=\"sy0\">)</span> each &gt;:i.<span class=\"nu0\">64</span><br/><span class=\"nu0\">8</span> <span class=\"nu0\">8</span> $ mask{each t<br/>\u00a0</pre>"}, {"lang": "Java", "loc": 33, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> MagicSquareDoublyEven <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> row <span class=\"sy0\">:</span> magicSquareDoublyEven<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> x <span class=\"sy0\">:</span> row<span class=\"br0\">)</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%2s \"</span>, x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>Magic constant:\u00a0%d \"</span>, <span class=\"br0\">(</span>n <span class=\"sy0\">*</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> n <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> magicSquareDoublyEven<span class=\"br0\">(</span><span class=\"kw1\">final</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span> <span class=\"sy0\">||</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">4</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aillegalargumentexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IllegalArgumentException</span></a><span class=\"br0\">(</span><span class=\"st0\">\"base must be a positive \"</span><br/>                    <span class=\"sy0\">+</span> <span class=\"st0\">\"multiple of 4\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// pattern of count-up vs count-down zones</span><br/>        <span class=\"kw4\">int</span> bits <span class=\"sy0\">=</span> 0b1001_0110_0110_1001<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> size <span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> n<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> mult <span class=\"sy0\">=</span> n <span class=\"sy0\">/</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span>  <span class=\"co1\">// how many multiples of 4</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> result <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> r <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> r<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> c <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> c<span class=\"sy0\">++</span>, i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">int</span> bitPos <span class=\"sy0\">=</span> c <span class=\"sy0\">/</span> mult <span class=\"sy0\">+</span> <span class=\"br0\">(</span>r <span class=\"sy0\">/</span> mult<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>                result<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>bits <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> bitPos<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> size <span class=\"sy0\">-</span> i<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 146, "block": "<pre class=\"javascript highlighted_source\"><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">'use strict'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// doubleEvenMagicSquare\u00a0:: Int -&gt; [[Int]]</span><br/>    <span class=\"kw1\">const</span> doubleEvenMagicSquare <span class=\"sy0\">=</span> n <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">4</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">undefined</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// truthSeries\u00a0:: Int -&gt; [Int]</span><br/>        <span class=\"kw1\">const</span> truthSeries <span class=\"sy0\">=</span> n <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">true</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">const</span> xs <span class=\"sy0\">=</span> truthSeries<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> xs.<span class=\"me1\">concat</span><span class=\"br0\">(</span>xs.<span class=\"me1\">map</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">!</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">const</span> sqr <span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> n<span class=\"sy0\">,</span><br/>            scale <span class=\"sy0\">=</span> curry<span class=\"br0\">(</span>replicate<span class=\"br0\">)</span><span class=\"br0\">(</span>n <span class=\"sy0\">/</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>            power <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">log2</span><span class=\"br0\">(</span>sqr<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>            sequence <span class=\"sy0\">=</span> isInt<span class=\"br0\">(</span>power<span class=\"br0\">)</span> <span class=\"sy0\">?</span> truthSeries<span class=\"br0\">(</span>power<span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">(</span><br/>                flatten<span class=\"br0\">(</span><br/>                    scale<span class=\"br0\">(</span><br/>                        splitEvery<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> truthSeries<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                        .<span class=\"me1\">map</span><span class=\"br0\">(</span>scale<span class=\"br0\">)</span><br/>                    <span class=\"br0\">)</span><br/>                <span class=\"br0\">)</span><br/>            <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> splitEvery<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> sequence<br/>            .<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">?</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> sqr <span class=\"sy0\">-</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"co1\">// GENERIC FUNCTIONS ----------------------------------------------------</span><br/>\u00a0<br/>    <span class=\"co1\">// flatten\u00a0:: Tree a -&gt; [a]</span><br/>    <span class=\"kw1\">const</span> flatten <span class=\"sy0\">=</span> t <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>t <span class=\"kw1\">instanceof</span> <span class=\"kw4\">Array</span> <span class=\"sy0\">?</span> concatMap<span class=\"br0\">(</span>flatten<span class=\"sy0\">,</span> t<span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span>t<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// concatMap\u00a0:: (a -&gt; [b]) -&gt; [a] -&gt; [b]</span><br/>    <span class=\"kw1\">const</span> concatMap <span class=\"sy0\">=</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">concat</span>.<span class=\"me1\">apply</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> xs.<span class=\"me1\">map</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// splitEvery\u00a0:: Int -&gt; [a] -&gt; [][a]]</span><br/>    <span class=\"kw1\">const</span> splitEvery <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>xs.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;=</span> n<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"br0\">[</span>xs<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">const</span> <span class=\"br0\">[</span>h<span class=\"sy0\">,</span> t<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>xs.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">,</span> xs.<span class=\"me1\">slice</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">[</span>h<span class=\"br0\">]</span>.<span class=\"me1\">concat</span><span class=\"br0\">(</span>splitEvery<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// curry\u00a0:: ((a, b) -&gt; c) -&gt; a -&gt; b -&gt; c</span><br/>    <span class=\"kw1\">const</span> curry <span class=\"sy0\">=</span> f <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">=&gt;</span> b <span class=\"sy0\">=&gt;</span> f<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// replicate\u00a0:: Int -&gt; a -&gt; [a]</span><br/>    <span class=\"kw1\">const</span> replicate <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> a<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        let v <span class=\"sy0\">=</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>            o <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> o<span class=\"sy0\">;</span><br/>        while <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> o <span class=\"sy0\">=</span> o.<span class=\"me1\">concat</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            n <span class=\"sy0\">&gt;&gt;=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            v <span class=\"sy0\">=</span> v.<span class=\"me1\">concat</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> o.<span class=\"me1\">concat</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// isInt\u00a0:: Int -&gt; Bool</span><br/>    <span class=\"kw1\">const</span> isInt <span class=\"sy0\">=</span> x <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">===</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"co1\">// TEST AND DISPLAY FUNCTIONS -------------------------------------------</span><br/>\u00a0<br/>    <span class=\"co1\">// transpose\u00a0:: [[a]] -&gt; [[a]]</span><br/>    <span class=\"kw1\">const</span> transpose <span class=\"sy0\">=</span> xs <span class=\"sy0\">=&gt;</span><br/>        xs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"br0\">(</span>_<span class=\"sy0\">,</span> iCol<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> xs.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"br0\">(</span>row<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> row<span class=\"br0\">[</span>iCol<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// diagonals\u00a0:: [[a]] -&gt; ([a], [a])</span><br/>    <span class=\"kw1\">const</span> diagonals <span class=\"sy0\">=</span> xs <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">const</span> nRows <span class=\"sy0\">=</span> xs.<span class=\"me1\">length</span><span class=\"sy0\">,</span><br/>            nCols <span class=\"sy0\">=</span> <span class=\"br0\">(</span>nRows <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> xs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">const</span> cell <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> xs<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>nRows <span class=\"sy0\">===</span> nCols<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">const</span> ns <span class=\"sy0\">=</span> range<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> nCols <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> <span class=\"br0\">[</span>zipWith<span class=\"br0\">(</span>cell<span class=\"sy0\">,</span> ns<span class=\"sy0\">,</span> ns<span class=\"br0\">)</span><span class=\"sy0\">,</span> zipWith<span class=\"br0\">(</span>cell<span class=\"sy0\">,</span> ns<span class=\"sy0\">,</span> reverse<span class=\"br0\">(</span>ns<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">return</span> <span class=\"br0\">[</span><br/>            <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>            <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// zipWith\u00a0:: (a -&gt; b -&gt; c) -&gt; [a] -&gt; [b] -&gt; [c]</span><br/>    <span class=\"kw1\">const</span> zipWith <span class=\"sy0\">=</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> xs<span class=\"sy0\">,</span> ys<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">const</span> ny <span class=\"sy0\">=</span> ys.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>xs.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;=</span> ny <span class=\"sy0\">?</span> xs <span class=\"sy0\">:</span> xs.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> ny<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            .<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> f<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> ys<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// reverse\u00a0:: [a] -&gt; [a]</span><br/>    <span class=\"kw1\">const</span> reverse <span class=\"sy0\">=</span> <span class=\"br0\">(</span>xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> xs.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        .<span class=\"me1\">reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// range\u00a0:: Int -&gt; Int -&gt; [Int]</span><br/>    <span class=\"kw1\">const</span> range <span class=\"sy0\">=</span> <span class=\"br0\">(</span>m<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        <span class=\"kw4\">Array</span>.<span class=\"me1\">from</span><span class=\"br0\">(</span><span class=\"br0\">{</span><br/>            length<span class=\"sy0\">:</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span>n <span class=\"sy0\">-</span> m<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>_<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> m <span class=\"sy0\">+</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// all\u00a0:: (a -&gt; Bool) -&gt; [a] -&gt; Bool</span><br/>    <span class=\"kw1\">const</span> all <span class=\"sy0\">=</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> xs.<span class=\"me1\">every</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// show\u00a0:: a -&gt; String</span><br/>    <span class=\"kw1\">const</span> show <span class=\"sy0\">=</span> x <span class=\"sy0\">=&gt;</span> JSON.<span class=\"me1\">stringify</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// justifyRight\u00a0:: Int -&gt; Char -&gt; Text -&gt; Text</span><br/>    <span class=\"kw1\">const</span> justifyRight <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> cFiller<span class=\"sy0\">,</span> strText<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        n <span class=\"sy0\">&gt;</span> strText.<span class=\"me1\">length</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span><br/>            <span class=\"br0\">(</span>cFiller.<span class=\"me1\">repeat</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">+</span> strText<span class=\"br0\">)</span><br/>            .<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"sy0\">-</span>n<span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span> <span class=\"sy0\">:</span> strText<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// TEST -----------------------------------------------------------------</span><br/>\u00a0<br/>    <span class=\"co1\">//return doubleEvenMagicSquare(8)</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">12</span><span class=\"br0\">]</span><br/>        .<span class=\"me1\">map</span><span class=\"br0\">(</span>n <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">const</span> lines <span class=\"sy0\">=</span> doubleEvenMagicSquare<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">const</span> sums <span class=\"sy0\">=</span> lines.<span class=\"me1\">concat</span><span class=\"br0\">(</span><br/>                    transpose<span class=\"br0\">(</span>lines<span class=\"br0\">)</span><br/>                    .<span class=\"me1\">concat</span><span class=\"br0\">(</span>diagonals<span class=\"br0\">(</span>lines<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">)</span><br/>                .<span class=\"me1\">map</span><span class=\"br0\">(</span>xs <span class=\"sy0\">=&gt;</span> xs.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">+</span> b<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">const</span> sum <span class=\"sy0\">=</span> sums<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> <span class=\"br0\">[</span><br/>                <span class=\"st0\">\"Order: \"</span> <span class=\"sy0\">+</span> n.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                <span class=\"st0\">\"Summing to: \"</span> <span class=\"sy0\">+</span> sum.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                <span class=\"st0\">\"Row, column and diagonal sums checked: \"</span> <span class=\"sy0\">+</span><br/>                all<span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">===</span> sum<span class=\"sy0\">,</span> sums<span class=\"br0\">)</span><br/>                .<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"sy0\">,</span><br/>                lines.<span class=\"me1\">map</span><span class=\"br0\">(</span><br/>                    xs <span class=\"sy0\">=&gt;</span> xs.<span class=\"me1\">map</span><span class=\"br0\">(</span><br/>                        x <span class=\"sy0\">=&gt;</span> justifyRight<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"st0\">' '</span><span class=\"sy0\">,</span> x.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    <span class=\"br0\">)</span><br/>                    .<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'  '</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                .<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">]</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>        .<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Julia", "loc": 28, "block": "<pre class=\"text highlighted_source\"># v0.6<br/>\u00a0<br/>function magicsquaredoubleeven(order::Int)<br/>    if order\u00a0% 4\u00a0!= 0; error(\"the order must be divisible by 4\") end<br/>\u00a0<br/>    sqr = Matrix{Int}(order, order)<br/>    mul = div(order, 4)<br/>    ext = vcat(1:mul, order-mul+1:order)<br/>    isext(i::Int, j::Int) = (i in ext) == (j in ext)<br/>    boolsqr = collect(isext(i, j) for i in 1:order, j in 1:order)<br/>    for i in linearindices(sqr)<br/>        if boolsqr[i]; sqr[i] = i end<br/>        if\u00a0!boolsqr[end+1-i]; sqr[end+1-i] = i end<br/>    end<br/>    return sqr<br/>end<br/>\u00a0<br/>for n in (4, 8, 12)<br/>    magicconst = div(n ^ 3 + n, 2)<br/>    sq = magicsquaredoubleeven(n)<br/>\u00a0<br/>    println(\"Order: $n; magic constant: $magicconst.\\nSquare:\")<br/>    for r in 1:n, c in 1:n<br/>        @printf(\"%4i\", sq[r, c])<br/>        if c == n; println() end<br/>    end<br/>    println()<br/>end</pre>"}, {"lang": "Kotlin", "loc": 29, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.0</span><br/>\u00a0<br/>fun magicSquareDoublyEven<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>IntArray<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span> || n <span class=\"sy0\">%</span> <span class=\"nu0\">4</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> IllegalArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"Base must be a positive multiple of 4\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// pattern of count-up vs count-down zones</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> bits <span class=\"sy0\">=</span> 0b1001<span class=\"sy0\">_</span>0110<span class=\"sy0\">_</span>0110<span class=\"sy0\">_</span>1001<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> size <span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> n<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> mult <span class=\"sy0\">=</span> n / <span class=\"nu0\">4</span>  <span class=\"co1\">// how many multiples of 4 </span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> result <span class=\"sy0\">=</span> Array<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> IntArray<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>r in <span class=\"nu0\">0</span> until n<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>c in <span class=\"nu0\">0</span> until n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> bitPos <span class=\"sy0\">=</span> c / mult + r / mult <span class=\"sy0\">*</span> <span class=\"nu0\">4</span><br/>            result<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>bits and <span class=\"br0\">(</span><span class=\"nu0\">1</span> shl bitPos<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> i + <span class=\"nu0\">1</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> size - i<br/>            i++<br/>        <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> result<br/><span class=\"br0\">}</span> <br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> n <span class=\"sy0\">=</span> <span class=\"nu0\">8</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>ia in magicSquareDoublyEven<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in ia<span class=\"br0\">)</span> print<span class=\"br0\">(</span><span class=\"st0\">\"%2d  \"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Magic constant ${(n * n + 1) * n / 2}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 1, "block": "<pre class=\"parigp highlighted_source\">magicsquare<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">matrix</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span>n<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span>k<span class=\"sy0\">=</span>i<span class=\"sy0\">+</span>j<span class=\"sy0\">*</span>n<span class=\"sy0\">-</span>n<span class=\"sy0\">;</span><span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw1\">bitand</span><span class=\"br0\">(</span><span class=\"nu1\">38505</span><span class=\"sy0\">,</span><span class=\"nu1\">2</span><span class=\"sy0\">^</span><span class=\"br0\">(</span><span class=\"br0\">(</span>j<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">%</span><span class=\"nu2\">4</span><span class=\"sy0\">*</span><span class=\"nu1\">4</span><span class=\"sy0\">+</span><span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">%</span><span class=\"nu2\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>k<span class=\"sy0\">,</span>n<span class=\"sy0\">*</span>n<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"sy0\">-</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\">magicsquare<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">matrix</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span>n<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span>k<span class=\"sy0\">=</span>i<span class=\"sy0\">+</span>j<span class=\"sy0\">*</span>n<span class=\"sy0\">-</span>n<span class=\"sy0\">;</span><span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw1\">bitand</span><span class=\"br0\">(</span><span class=\"nu1\">38505</span><span class=\"sy0\">,</span><span class=\"nu1\">2</span><span class=\"sy0\">^</span><span class=\"br0\">(</span><span class=\"br0\">(</span>j<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">%</span><span class=\"nu2\">4</span><span class=\"sy0\">*</span><span class=\"nu1\">4</span><span class=\"sy0\">+</span><span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">%</span><span class=\"nu2\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>k<span class=\"sy0\">,</span>n<span class=\"sy0\">*</span>n<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"sy0\">-</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl 6", "loc": 1, "block": "<pre> 1  2 62 61 60 59  7  8\n 9 10 54 53 52 51 15 16\n48 47 19 20 21 22 42 41\n40 39 27 28 29 30 34 33\n32 31 35 36 37 38 26 25\n24 23 43 44 45 46 18 17\n49 50 14 13 12 11 55 56\n57 58  6  5  4  3 63 64\n\nThe magic number is 260</pre>"}, {"lang": "PureBasic", "loc": 68, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span>.i MagicN<span class=\"br0\">(</span>n.i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">ProcedureReturn</span> n<span class=\"sy0\">*</span><span class=\"br0\">(</span>n<span class=\"sy0\">*</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.i MaxN<span class=\"br0\">(</span>mx.i,n.i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> mx<span class=\"sy0\">&gt;</span>n\u00a0: <span class=\"kw1\">ProcedureReturn</span> mx\u00a0: <span class=\"kw1\">Else</span>\u00a0: <span class=\"kw1\">ProcedureReturn</span> n\u00a0: <span class=\"kw1\">EndIf</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.i MaxL<span class=\"br0\">(</span>mx.i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span>.i i<br/>  <span class=\"kw1\">While</span> mx<br/>    mx<span class=\"sy0\">/</span><span class=\"nu0\">10</span>\u00a0: i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Wend</span><br/>  <span class=\"kw1\">ProcedureReturn</span> i<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.b DblEvenMagicSquare<span class=\"br0\">(</span>n.i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span>.i q<span class=\"sy0\">=</span>n<span class=\"sy0\">/</span><span class=\"nu0\">4</span>, nr<span class=\"sy0\">=</span><span class=\"nu0\">1</span>, x, y, max, spc<br/>  <span class=\"kw1\">Dim</span> sq.i<span class=\"br0\">(</span>n,n<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">For</span> y<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>    <span class=\"kw1\">For</span> x<span class=\"sy0\">=</span>q<span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<span class=\"sy0\">-</span>q<br/>      sq<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/>  <span class=\"kw1\">For</span> x<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>    <span class=\"kw1\">For</span> y<span class=\"sy0\">=</span>q<span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<span class=\"sy0\">-</span>q<br/>      sq<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> <span class=\"sy0\">!</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/>  q<span class=\"sy0\">=</span>n<span class=\"sy0\">*</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>  <span class=\"kw1\">For</span> y<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>    <span class=\"kw1\">For</span> x<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>      <span class=\"kw1\">If</span> sq<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>        sq<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span><span class=\"sy0\">=</span>q<span class=\"sy0\">-</span>nr<br/>      <span class=\"kw1\">Else</span><br/>        sq<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span><span class=\"sy0\">=</span>nr<br/>      <span class=\"kw1\">EndIf</span><br/>      nr<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>      max<span class=\"sy0\">=</span>MaxN<span class=\"br0\">(</span>max,sq<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/>  spc<span class=\"sy0\">=</span>MaxL<span class=\"br0\">(</span>max<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>  <span class=\"kw1\">For</span> y<span class=\"sy0\">=</span>n <span class=\"kw1\">To</span> <span class=\"nu0\">1</span> <span class=\"kw1\">Step</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">For</span> x<span class=\"sy0\">=</span>n <span class=\"kw1\">To</span> <span class=\"nu0\">1</span> <span class=\"kw1\">Step</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>      <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">RSet</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>sq<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span><span class=\"br0\">)</span>,spc,<span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"st0\">\"Magic-Square-Doubly-Even\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Define</span>.i n<br/>\u00a0<br/><span class=\"kw1\">Repeat</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Input [4,8,12..n] (0=Exit)\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">While</span> <span class=\"br0\">(</span>n<span class=\"sy0\">&lt;</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"kw1\">Or</span> <span class=\"br0\">(</span>n<span class=\"sy0\">%</span>4<span class=\"br0\">)</span><br/>    <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"&gt;\"</span><span class=\"br0\">)</span>\u00a0: n<span class=\"sy0\">=</span><span class=\"kw2\">Val</span><span class=\"br0\">(</span><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> n<span class=\"sy0\">=</span><span class=\"nu0\">0</span>\u00a0: <span class=\"kw1\">End</span>\u00a0: <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">Wend</span>  <br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"The magic sum = \"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>MagicN<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  DblEvenMagicSquare<span class=\"br0\">(</span>n<span class=\"br0\">)</span>  <br/>  n<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/><span class=\"kw1\">ForEver</span></pre>"}, {"lang": "Python", "loc": 29, "block": "<pre class=\"python highlighted_source\">\u00a0<br/><span class=\"kw1\">def</span> MagicSquareDoublyEven<span class=\"br0\">(</span>order<span class=\"br0\">)</span>:<br/>    sq <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>+n*order<span class=\"sy0\">,</span>order + <span class=\"br0\">(</span>n*order<span class=\"br0\">)</span>+<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>order<span class=\"br0\">)</span> <span class=\"br0\">]</span><br/>    n1 <span class=\"sy0\">=</span> order/<span class=\"nu0\">4</span><br/>    <span class=\"kw1\">for</span> r <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>n1<span class=\"br0\">)</span>:<br/>        r1 <span class=\"sy0\">=</span> sq<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>n1:-n1<span class=\"br0\">]</span><br/>        r2 <span class=\"sy0\">=</span> sq<span class=\"br0\">[</span>order -r - <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>n1:-n1<span class=\"br0\">]</span><br/>        r1.<span class=\"me1\">reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        r2.<span class=\"me1\">reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        sq<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>n1:-n1<span class=\"br0\">]</span> <span class=\"sy0\">=</span> r2<br/>        sq<span class=\"br0\">[</span>order -r - <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>n1:-n1<span class=\"br0\">]</span> <span class=\"sy0\">=</span> r1<br/>    <span class=\"kw1\">for</span> r <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>n1<span class=\"sy0\">,</span> order-n1<span class=\"br0\">)</span>:<br/>        r1 <span class=\"sy0\">=</span> sq<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>:n1<span class=\"br0\">]</span><br/>        r2 <span class=\"sy0\">=</span> sq<span class=\"br0\">[</span>order -r - <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>order-n1:<span class=\"br0\">]</span><br/>        r1.<span class=\"me1\">reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        r2.<span class=\"me1\">reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        sq<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>:n1<span class=\"br0\">]</span> <span class=\"sy0\">=</span> r2<br/>        sq<span class=\"br0\">[</span>order -r - <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>order-n1:<span class=\"br0\">]</span> <span class=\"sy0\">=</span> r1<br/>    <span class=\"kw1\">return</span> sq<br/>\u00a0<br/><span class=\"kw1\">def</span> printsq<span class=\"br0\">(</span>s<span class=\"br0\">)</span>:<br/>    n <span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    bl <span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>n**<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>+<span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">print</span> <span class=\"st0\">''</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span> <span class=\"br0\">[</span> <span class=\"br0\">(</span><span class=\"st0\">\"%\"</span>+<span class=\"kw2\">str</span><span class=\"br0\">(</span>bl<span class=\"br0\">)</span>+<span class=\"st0\">\"s\"</span><span class=\"br0\">)</span>%<span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>Magic constant =\u00a0%d\"</span>%<span class=\"kw2\">sum</span><span class=\"br0\">(</span>s<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>printsq<span class=\"br0\">(</span>MagicSquareDoublyEven<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 32, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program constructs a  magic square  of doubly even sides (a size divisible by 4).*/</span><br/>n=<span class=\"nu0\">8</span>;     s=n%4;    L=n%2-s+<span class=\"nu0\">1</span>;    w=<span class=\"kw6\">length</span><span class=\"br0\">(</span>n<span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>  <span class=\"coMULTI\">/*size; small sq;  low middle;  # width*/</span><br/>@<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>;              H=n%2+s                       <span class=\"coMULTI\">/*array default;  high middle.         */</span><br/><span class=\"kw1\">call</span> gen                                         <span class=\"coMULTI\">/*generate a grid in numerical order.  */</span><br/><span class=\"kw1\">call</span> diag                                        <span class=\"coMULTI\">/*mark numbers on both diagonals.      */</span><br/><span class=\"kw1\">call</span> corn                                        <span class=\"coMULTI\">/*  \"     \"    in small corner boxen.  */</span><br/><span class=\"kw1\">call</span> midd                                        <span class=\"coMULTI\">/*  \"     \"    in  the middle    \"     */</span><br/><span class=\"kw1\">call</span> swap                                        <span class=\"coMULTI\">/*swap positive numbers with highest #.*/</span><br/><span class=\"kw1\">call</span> show                                        <span class=\"coMULTI\">/*display the doubly even magic square.*/</span><br/><span class=\"kw1\">call</span> sum                                         <span class=\"coMULTI\">/*   \"     \"  magic number for square. */</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>o:    <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span>\u00a0?;             <span class=\"kw1\">return</span> n-?+<span class=\"nu0\">1</span>      <span class=\"coMULTI\">/*calculate the \"other\" (right) column.*/</span><br/>@:    <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x,y;           <span class=\"kw1\">return</span> <span class=\"kw6\">abs</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>x<span class=\"sy0\">.</span>y<span class=\"br0\">)</span><br/>diag:      <span class=\"kw1\">do</span> r=<span class=\"nu0\">1</span> <span class=\"kw2\">for</span> n;  @<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span><a class=\"__cf_email__\" data-cfemail=\"aad89787ea\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"br0\">(</span>r,r<span class=\"br0\">)</span>; o=o<span class=\"br0\">(</span>r<span class=\"br0\">)</span>;  @<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span><a class=\"__cf_email__\" data-cfemail=\"4c2371610c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"br0\">(</span>r,o<span class=\"br0\">)</span>;  <span class=\"kw3\">end</span>;              <span class=\"kw1\">return</span><br/>midd:      <span class=\"kw1\">do</span> r=L  <span class=\"kw2\">to</span> H;  <span class=\"kw1\">do</span> c=L  <span class=\"kw2\">to</span> H;  @<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span><a class=\"__cf_email__\" data-cfemail=\"8fecb2a2cf\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"br0\">(</span>r,c<span class=\"br0\">)</span>;           <span class=\"kw3\">end</span>;  <span class=\"kw3\">end</span>;        <span class=\"kw1\">return</span><br/>gen:  #=<span class=\"nu0\">0</span>; <span class=\"kw1\">do</span> r=<span class=\"nu0\">1</span> <span class=\"kw2\">for</span> n;  <span class=\"kw1\">do</span> c=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> n; #=#+<span class=\"nu0\">1</span>;   @<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c=#;        <span class=\"kw3\">end</span>;  <span class=\"kw3\">end</span>;        <span class=\"kw1\">return</span><br/>show: #=<span class=\"nu0\">0</span>; <span class=\"kw1\">do</span> r=<span class=\"nu0\">1</span> <span class=\"kw2\">for</span> n;  $=; <span class=\"kw1\">do</span> c=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> n; $=$ <span class=\"kw6\">right</span><span class=\"br0\">(</span>@<span class=\"br0\">(</span>r,c<span class=\"br0\">)</span>,w<span class=\"br0\">)</span>; <span class=\"kw3\">end</span>;  <span class=\"kw1\">say</span> $; <span class=\"kw3\">end</span>; <span class=\"kw1\">return</span><br/>sum:  #=<span class=\"nu0\">0</span>; <span class=\"kw1\">do</span> r=<span class=\"nu0\">1</span> <span class=\"kw2\">for</span> n;  #=#<a class=\"__cf_email__\" data-cfemail=\"0a214a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"br0\">(</span>r,<span class=\"nu0\">1</span><span class=\"br0\">)</span>;  <span class=\"kw3\">end</span>;  <span class=\"kw1\">say</span>;  <span class=\"kw1\">say</span> <span class=\"st0\">'The magic number is: '</span>   #; <span class=\"kw1\">return</span><br/><span class=\"kw6\">max</span>#:      <span class=\"kw1\">do</span> a=n <span class=\"kw2\">for</span> n  <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span>;  <span class=\"kw1\">do</span> b=n  <span class=\"kw2\">for</span> n  <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span>;  <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>a<span class=\"sy0\">.</span>b<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span>; <span class=\"kw3\">end</span>;  <span class=\"kw3\">end</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>swap:         <span class=\"kw1\">do</span>   r=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> n<br/>                <span class=\"kw1\">do</span> c=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> n;  <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>;  <span class=\"kw1\">call</span> <span class=\"kw6\">max</span>#  <span class=\"coMULTI\">/*find max number.*/</span><br/>                <span class=\"kw1\">parse</span> <span class=\"kw2\">value</span>  <a class=\"__cf_email__\" data-cfemail=\"694429\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>a<span class=\"sy0\">.</span>b  <span class=\"br0\">(</span><a class=\"__cf_email__\" data-cfemail=\"d2ff92\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c<span class=\"br0\">)</span>    <span class=\"kw2\">with</span>    @<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c  @<span class=\"sy0\">.</span>a<span class=\"sy0\">.</span>b <span class=\"coMULTI\">/*swap two values.*/</span><br/>                <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*c*/</span><br/>              <span class=\"kw3\">end</span>    <span class=\"coMULTI\">/*r*/</span><br/>      <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>corn:         <span class=\"kw1\">do</span>   r=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> n;  <span class=\"kw1\">if</span> r<span class=\"sy0\">&gt;</span>s <span class=\"sy0\">&amp;</span> r<span class=\"sy0\">&lt;</span>=n-s  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>   <span class=\"coMULTI\">/*\"corner boxen\", size\u2261S*/</span><br/>                <span class=\"kw1\">do</span> c=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> n;  <span class=\"kw1\">if</span> c<span class=\"sy0\">&gt;</span>s <span class=\"sy0\">&amp;</span> c<span class=\"sy0\">&lt;</span>=n-s  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>;  @<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span><a class=\"__cf_email__\" data-cfemail=\"0f6c32224f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"br0\">(</span>r,c<span class=\"br0\">)</span>;  <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*c*/</span><br/>              <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*r*/</span><br/>      <span class=\"kw1\">return</span></pre>"}, {"lang": "Ruby", "loc": 18, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> double_even_magic_square<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw3\">raise</span> <span class=\"kw4\">ArgumentError</span>, <span class=\"st0\">\"Need multiple of four\"</span> <span class=\"kw1\">if</span> n<span class=\"sy0\">%</span>4 <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>  block_size, max = n<span class=\"sy0\">/</span><span class=\"nu0\">4</span>, n<span class=\"sy0\">*</span>n<br/>  pre_pat = <span class=\"br0\">[</span><span class=\"kw2\">true</span>, <span class=\"kw2\">false</span>, <span class=\"kw2\">false</span>, <span class=\"kw2\">true</span>,<br/>             <span class=\"kw2\">false</span>, <span class=\"kw2\">true</span>, <span class=\"kw2\">true</span>, <span class=\"kw2\">false</span><span class=\"br0\">]</span><br/>  pre_pat <span class=\"sy0\">+</span>= pre_pat.<span class=\"me1\">reverse</span><br/>  pattern = pre_pat.<span class=\"me1\">flat_map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>b<span class=\"sy0\">|</span> <span class=\"br0\">[</span>b<span class=\"br0\">]</span> <span class=\"sy0\">*</span> block_size<span class=\"br0\">}</span> <span class=\"sy0\">*</span> block_size<br/>  flat_ar = pattern.<span class=\"me1\">each_with_index</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>yes, num<span class=\"sy0\">|</span> yes\u00a0? num<span class=\"sy0\">+</span><span class=\"nu0\">1</span>\u00a0: max<span class=\"sy0\">-</span>num<span class=\"br0\">}</span><br/>  flat_ar.<span class=\"me1\">each_slice</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>.<span class=\"me1\">to_a</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> to_string<span class=\"br0\">(</span>square<span class=\"br0\">)</span><br/>  n = square.<span class=\"me1\">size</span><br/>  fmt = <span class=\"st0\">\"%#{(n*n).to_s.size + 1}d\"</span> <span class=\"sy0\">*</span> n<br/>  square.<span class=\"me1\">inject</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>str,row<span class=\"sy0\">|</span> str <span class=\"sy0\">&lt;&lt;</span> fmt <span class=\"sy0\">%</span> row <span class=\"sy0\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> to_string<span class=\"br0\">(</span>double_even_magic_square<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Scala", "loc": 23, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> MagicSquareDoublyEven <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> n <span class=\"sy0\">=</span> <span class=\"nu0\">8</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> magicSquareDoublyEven<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>Array<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    require<span class=\"br0\">(</span>n <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">4</span> || n <span class=\"sy0\">%</span> <span class=\"nu0\">4</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>, <span class=\"st0\">\"Base must be a positive multiple of 4.\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// pattern of count-up vs count-down zones</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>bits, mult, result, size<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">38505</span>, n / <span class=\"nu0\">4</span>, Array.<span class=\"me1\">ofDim</span><span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">(</span>n, n<span class=\"br0\">)</span>, n <span class=\"sy0\">*</span> n<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>r <span class=\"sy0\">&lt;</span>- result.<span class=\"me1\">indices</span><span class=\"sy0\">;</span> c <span class=\"sy0\">&lt;</span>- result<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>.<span class=\"me1\">indices</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> bitPos <span class=\"sy0\">=</span> c / mult + <span class=\"br0\">(</span>r / mult<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">4</span><br/>\u00a0<br/>      result<span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>bits <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> bitPos<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> i + <span class=\"nu0\">1</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> size - i<br/>      i +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span><br/>    result<br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  magicSquareDoublyEven<span class=\"br0\">(</span>n<span class=\"br0\">)</span>.<span class=\"me1\">foreach</span><span class=\"br0\">(</span>row <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span>row.<span class=\"me1\">map</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> f<span class=\"st0\">\"$x%2s \"</span><span class=\"br0\">)</span>.<span class=\"me1\">mkString</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span>f<span class=\"st0\">\"---%nMagic constant: ${(n * n + 1) * n / 2}%d\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 16, "block": "<pre class=\"ruby highlighted_source\">func double_even_magic_square<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    assert<span class=\"br0\">(</span>n<span class=\"sy0\">%</span>4 == <span class=\"nu0\">0</span>, <span class=\"st0\">\"Need multiple of four\"</span><span class=\"br0\">)</span><br/>    var <span class=\"br0\">(</span>bsize, max<span class=\"br0\">)</span> = <span class=\"br0\">(</span>n<span class=\"sy0\">/</span><span class=\"nu0\">4</span>, n<span class=\"sy0\">*</span>n<span class=\"br0\">)</span><br/>    var pre_pat = <span class=\"br0\">[</span><span class=\"kw2\">true</span>, <span class=\"kw2\">false</span>, <span class=\"kw2\">false</span>, <span class=\"kw2\">true</span>,<br/>                   <span class=\"kw2\">false</span>, <span class=\"kw2\">true</span>, <span class=\"kw2\">true</span>, <span class=\"kw2\">false</span><span class=\"br0\">]</span><br/>    pre_pat <span class=\"sy0\">+</span>= pre_pat.<span class=\"me1\">flip</span><br/>    var pattern = <span class=\"br0\">(</span>pre_pat.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>b<span class=\"sy0\">|</span> bsize.<span class=\"me1\">of</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span>... <span class=\"br0\">}</span> <span class=\"sy0\">*</span> bsize<span class=\"br0\">)</span><br/>    pattern.<span class=\"me1\">map_kv</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>k,v<span class=\"sy0\">|</span> v\u00a0? k<span class=\"sy0\">+</span><span class=\"nu0\">1</span>\u00a0: max<span class=\"sy0\">-</span>k <span class=\"br0\">}</span>.<span class=\"me1\">slices</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func format_matrix<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var fmt = <span class=\"st0\">\"%#{a.len**2 -&gt; len}s\"</span><br/>    a.<span class=\"me1\">map</span> <span class=\"br0\">{</span> .<span class=\"me1\">map</span> <span class=\"br0\">{</span> fmt <span class=\"sy0\">%</span> _ <span class=\"br0\">}</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>say format_matrix<span class=\"br0\">(</span>double_even_magic_square<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "VBScript", "loc": 18, "block": "<pre class=\"vb highlighted_source\"><span class=\"co1\">' Magic squares of doubly even order<br/></span>n=8  <span class=\"co1\">'multiple of 4<br/></span>pattern=<span class=\"st0\">\"1001011001101001\"</span><br/>size=n*n: w=len(size)<br/>mult=n\\4  <span class=\"co1\">'how many multiples of 4 <br/></span>wscript.echo <span class=\"st0\">\"Magic square\u00a0: \"</span> &amp; n &amp; <span class=\"st0\">\" x \"</span> &amp; n<br/>i=0<br/><span class=\"kw3\">For</span> r=0 <span class=\"kw3\">To</span> n-1<br/>\tl=<span class=\"st0\">\"\"</span><br/>\t<span class=\"kw3\">For</span> c=0 <span class=\"kw3\">To</span> n-1<br/>\t\tbit=Mid(pattern, c\\mult+(r\\mult)*4+1, 1)<br/>\t\t<span class=\"kw3\">If</span> bit=<span class=\"st0\">\"1\"</span> <span class=\"kw3\">Then</span> t=i+1 <span class=\"kw3\">Else</span> t=size-i<br/>\t\tl=l &amp; Right(Space(w) &amp; t, w) &amp; <span class=\"st0\">\" \"</span><br/>\t\ti=i+1<br/>\t<span class=\"kw3\">Next</span> <span class=\"co1\">'c<br/></span>\twscript.echo l<br/><span class=\"kw3\">Next</span> <span class=\"co1\">'r<br/></span>wscript.echo <span class=\"st0\">\"Magic constant=\"</span> &amp; (n*n+1)*n/2</pre>"}, {"lang": "zkl", "loc": 25, "block": "<pre class=\"text highlighted_source\">class MagicSquareDoublyEven{<br/>   fcn init(n){ var result=magicSquareDoublyEven(n) }<br/>   fcn toString{<br/>      sink,n:=Sink(String),result.len();  // num collumns<br/>      fmt:=\"%2s \";<br/>      foreach row in (result)<br/>         { sink.write(row.apply('wrap(n){ fmt.fmt(n) }).concat(),\"\\n\") }<br/>      sink.write(\"\\nMagic constant:\u00a0%d\".fmt((n*n + 1)*n/2));<br/>      sink.close();<br/>   }<br/>   fcn magicSquareDoublyEven(n){<br/>      if (n&lt;4 or n%4!=0 or n&gt;16)<br/>\t throw(Exception.ValueError(\"base must be a positive multiple of 4\"));<br/>      bits,size,mult:=0b1001011001101001, n*n, n/4;<br/>      result:=n.pump(List(),n.pump(List(),0).copy);  // array[n,n] of zero<br/>\u00a0<br/>      foreach i in (size){<br/>\t bitsPos:=(i%n)/mult + (i/(n*mult)*4);<br/>\t value:=(bits.bitAnd((2).pow(bitsPos))) and i+1 or size-i;<br/>\t result[i/n][i%n]=value;<br/>      }<br/>      result;<br/>   }<br/>}<br/>MagicSquareDoublyEven(8).println();</pre>"}]}