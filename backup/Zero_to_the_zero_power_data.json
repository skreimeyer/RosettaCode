{"task": "Zero_to_the_zero_power", "blocks": [{"lang": "8th", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>0 0 ^ .<br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 1, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <span class=\"nu0\">0</span> <span class=\"sy0\">**</span> <span class=\"nu0\">0</span></pre>"}, {"lang": "Ada", "loc": 32, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>, Ada.<span class=\"me1\">Integer_Text_IO</span>, Ada.<span class=\"me1\">Long_Integer_Text_IO</span>,<br/>  Ada.<span class=\"me1\">Long_Long_Integer_Text_IO</span>, Ada.<span class=\"me1\">Float_Text_IO</span>, Ada.<span class=\"me1\">Long_Float_Text_IO</span>,<br/>  Ada.<span class=\"me1\">Long_Long_Float_Text_IO</span>;<br/><span class=\"kw3\">use</span>  Ada.<span class=\"me1\">Text_IO</span>, Ada.<span class=\"me1\">Integer_Text_IO</span>, Ada.<span class=\"me1\">Long_Integer_Text_IO</span>,<br/>  Ada.<span class=\"me1\">Long_Long_Integer_Text_IO</span>, Ada.<span class=\"me1\">Float_Text_IO</span>, Ada.<span class=\"me1\">Long_Float_Text_IO</span>,<br/>  Ada.<span class=\"me1\">Long_Long_Float_Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Test5 <span class=\"kw1\">is</span><br/>\u00a0<br/>   I   \u00a0: Integer          \u00a0:= <span class=\"nu0\">0</span>;<br/>   LI  \u00a0: Long_Integer     \u00a0:= <span class=\"nu0\">0</span>;<br/>   LLI \u00a0: Long_Long_Integer\u00a0:= <span class=\"nu0\">0</span>;<br/>   F   \u00a0: Float            \u00a0:= <span class=\"nu0\">0.0</span>;<br/>   LF  \u00a0: Long_Float       \u00a0:= <span class=\"nu0\">0.0</span>;<br/>   LLF \u00a0: Long_Long_Float  \u00a0:= <span class=\"nu0\">0.0</span>;<br/>   Zero\u00a0: Natural          \u00a0:= <span class=\"nu0\">0</span>;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   Put <span class=\"br0\">(</span><span class=\"st0\">\"Integer           0^0 = \"</span><span class=\"br0\">)</span>; <br/>   Put <span class=\"br0\">(</span>I ** Zero, <span class=\"nu0\">2</span><span class=\"br0\">)</span>;   New_Line;<br/>   Put <span class=\"br0\">(</span><span class=\"st0\">\"Long Integer      0^0 = \"</span><span class=\"br0\">)</span>;<br/>   Put <span class=\"br0\">(</span>LI ** Zero, <span class=\"nu0\">2</span><span class=\"br0\">)</span>;  New_Line;<br/>   Put <span class=\"br0\">(</span><span class=\"st0\">\"Long Long Integer 0^0 = \"</span><span class=\"br0\">)</span>;<br/>   Put <span class=\"br0\">(</span>LLI ** Zero, <span class=\"nu0\">2</span><span class=\"br0\">)</span>; New_Line;<br/>   Put <span class=\"br0\">(</span><span class=\"st0\">\"Float           0.0^0 = \"</span><span class=\"br0\">)</span>;           <br/>   Put <span class=\"br0\">(</span>F ** Zero<span class=\"br0\">)</span>;   New_Line;<br/>   Put <span class=\"br0\">(</span><span class=\"st0\">\"Long Float      0.0^0 = \"</span><span class=\"br0\">)</span>;      <br/>   Put <span class=\"br0\">(</span>LF ** Zero<span class=\"br0\">)</span>;  New_Line;<br/>   Put <span class=\"br0\">(</span><span class=\"st0\">\"Long Long Float 0.0^0 = \"</span><span class=\"br0\">)</span>; <br/>   Put <span class=\"br0\">(</span>LLF ** Zero<span class=\"br0\">)</span>; New_Line;<br/><span class=\"kw1\">end</span> Test5;<br/>\u00a0</pre>"}, {"lang": "ALGOL 68", "loc": 2, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> 0 <span class=\"sy1\">^</span> 0<span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "APL", "loc": 2, "block": "<pre class=\"text highlighted_source\">      0*0<br/>1</pre>"}, {"lang": "Applesoft BASIC", "loc": 1, "block": "<pre>]? 0^0\n1</pre>"}, {"lang": "AWK", "loc": 7, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f ZERO_TO_THE_ZERO_POWER.AWK</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    <span class=\"kw5\">print</span><span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy3\">^</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BaCon", "loc": 1, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"kw1\">PRINT</span> POW<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span></pre>"}, {"lang": "Bc", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>0 ^ 0<br/>\u00a0</pre>"}, {"lang": "Befunge", "loc": 1, "block": "<pre class=\"text highlighted_source\">\"PDPF\"4#@(0F0FYP)@</pre>"}, {"lang": "Bracmat", "loc": 1, "block": "<pre class=\"text highlighted_source\">0^0</pre>"}, {"lang": "Burlesque", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>blsq ) 0.0 0.0?^<br/>1.0<br/>blsq ) 0 0?^<br/>1<br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 1, "block": "<pre class=\"text highlighted_source\">      PRINT 0^0</pre>"}, {"lang": "C", "loc": 11, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;math.h&gt;</span><br/><span class=\"co2\">#include &lt;complex.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"0 ^ 0 =\u00a0%f<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/pow.html\"><span class=\"kw3\">pow</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> complex c <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/cpow.html\"><span class=\"kw3\">cpow</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"0+0i ^ 0+0i =\u00a0%f+%fi<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/creal.html\"><span class=\"kw3\">creal</span></a><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/cimag.html\"><span class=\"kw3\">cimag</span></a><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 11, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;cmath&gt;</span><br/><span class=\"co2\">#include &lt;complex&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"0 ^ 0 = \"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"kw3\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"0+0i ^ 0+0i = \"</span> <span class=\"sy1\">&lt;&lt;</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">pow</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">complex</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>,std<span class=\"sy4\">::</span><span class=\"me2\">complex</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 13, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> ZeroToTheZeroeth<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">double</span> k <span class=\"sy0\">=</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Pow</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"0^0 is {0}\"</span>, k<span class=\"br0\">)</span><span class=\"sy0\">;</span>           <br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 1, "block": "<pre>user=&gt; (use 'clojure.math.numeric-tower)\nuser=&gt; (expt 0 0)\n1\n\n; alternative java-interop route:\nuser=&gt; (Math/pow 0 0)\n1.0\n</pre>"}, {"lang": "COBOL", "loc": 9, "block": "<pre class=\"cobol highlighted_source\"><span class=\"kw3\">identification</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">program-id</span><span class=\"sy0\">.</span> zero-power-zero-<span class=\"kw3\">program</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">working-storage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">77</span>  n                         <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">procedure</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">compute</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>**<span class=\"nu0\">0</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">display</span> n <span class=\"kw3\">upon</span> console<span class=\"sy0\">.</span><br/>    <span class=\"kw3\">stop</span> <span class=\"kw3\">run</span><span class=\"sy0\">.</span></pre>"}, {"lang": "ColdFusion", "loc": 4, "block": "<pre class=\"cfm highlighted_source\">\u00a0<br/><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfset</span> zeroPowerTag <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>^<span class=\"nu0\">0</span><span class=\"sy0\">&gt;</span></span><br/><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfoutput</span><span class=\"sy0\">&gt;</span></span>\"<span class=\"sc2\">#zeroPowerTag#</span>\"<span class=\"sc5\"><span class=\"sy0\">&lt;/</span><span class=\"kw1\">cfoutput</span><span class=\"sy0\">&gt;</span></span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 1, "block": "<pre>&gt; (expt 0 0)\n1</pre>"}, {"lang": "D", "loc": 12, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">math</span><span class=\"sy0\">,</span> std.<span class=\"me1\">bigint</span><span class=\"sy0\">,</span> std.<span class=\"me1\">complex</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Int:     \"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"sy0\">^^</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Ulong:   \"</span><span class=\"sy0\">,</span> 0UL <span class=\"sy0\">^^</span> 0UL<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Float:   \"</span><span class=\"sy0\">,</span> <span class=\"nu17\">0.0f</span> <span class=\"sy0\">^^</span> <span class=\"nu17\">0.0f</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Double:  \"</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.0</span> <span class=\"sy0\">^^</span> <span class=\"nu16\">0.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Real:    \"</span><span class=\"sy0\">,</span> 0.0L <span class=\"sy0\">^^</span> 0.0L<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"pow:     \"</span><span class=\"sy0\">,</span> pow<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"BigInt:  \"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span>.<span class=\"me1\">BigInt</span> <span class=\"sy0\">^^</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Complex: \"</span><span class=\"sy0\">,</span> complex<span class=\"br0\">(</span><span class=\"nu16\">0.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.0</span><span class=\"br0\">)</span> <span class=\"sy0\">^^</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Dc", "loc": 2, "block": "<pre class=\"text highlighted_source\">0 0^p<br/>\u00a0</pre>"}, {"lang": "EchoLisp", "loc": 9, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"co1\">;; trying the 16 combinations</span><br/><span class=\"co1\">;; all return the integer 1</span><br/>\u00a0<br/><span class=\"br0\">(</span>lib 'bigint<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> zeroes '<span class=\"br0\">(</span>integer: <span class=\"nu0\">0</span> inexact<span class=\"sy0\">=</span>float: <span class=\"nu0\">0.000</span> complex: <span class=\"nu0\">0</span><span class=\"sy0\">+</span>0i bignum: #<span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>for<span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>z1 zeroes<span class=\"br0\">)</span> <span class=\"br0\">(</span>z2 zeroes<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">write</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> z1 z2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    \u2192  <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <br/>\u00a0</pre>"}, {"lang": "Eiffel", "loc": 1, "block": "<pre class=\"eiffel highlighted_source\">print <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">^</span><span class=\"nu0\">0</span><span class=\"br0\">)</span></pre>"}, {"lang": "Elena", "loc": 6, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>\u00a0<br/>program =<br/>[<br/>    console printLine(\"0^0 is \",0 power:0).<br/>].</pre>"}, {"lang": "Elixir", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>:math.pow(0,0)<br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>.....<br/>PRINT(0^0)<br/>.....<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 1, "block": "<pre>&gt; let z = 0.**0.;;\n\nval z\u00a0: float = 1.0</pre>"}, {"lang": "Factor", "loc": 3, "block": "<pre class=\"text highlighted_source\">USING: math.functions.private\u00a0;\u00a0! ^complex<br/>0 0 ^<br/>C{ 0 0 } C{ 0 0 } ^complex</pre>"}, {"lang": "Falcon", "loc": 10, "block": "<pre class=\"falcon highlighted_source\">\u00a0<br/><span class=\"coMULTI\">/* created by Aykayayciti Earl Lamont Montgomery<br/>April 9th, 2018 */</span><br/>\u00a0<br/>x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>z <span class=\"sy0\">=</span> x<span class=\"sy0\">**</span>y<br/><span class=\"sy0\">&gt;</span> <span class=\"st0\">\"z=\"</span><span class=\"sy0\">,</span> z<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 1, "block": "<pre class=\"text highlighted_source\">0e 0e f** f.</pre>"}, {"lang": "Fortran", "loc": 13, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/><span class=\"kw1\">program</span> zero<br/><span class=\"kw3\">double</span> <span class=\"kw4\">precision</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, j<br/><span class=\"kw3\">double</span> <span class=\"kw3\">complex</span> <span class=\"sy0\">::</span> <span class=\"me2\">z1</span>, z2<br/>i <span class=\"sy0\">=</span> 0.0D0<br/>j <span class=\"sy0\">=</span> 0.0D0<br/>z1 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>0.0D0,0.0D0<span class=\"br0\">)</span><br/>z2 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>0.0D0,0.0D0<span class=\"br0\">)</span><br/>write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">'When integers are used, we have 0^0 = '</span>, <span class=\"nu0\">0</span><span class=\"sy0\">**</span><span class=\"nu0\">0</span><br/>write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">'When double precision numbers are used, we have 0.0^0.0 = '</span>, i<span class=\"sy0\">**</span>j<br/>write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">'When complex numbers are used, we have (0.0+0.0i)^(0.0+0.0i) = '</span>, z1<span class=\"sy0\">**</span>z2<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span><br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 4, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"0 ^ 0 =\"</span>; <span class=\"nu0\">0</span> ^ <span class=\"nu0\">0</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Gambas", "loc": 5, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <span class=\"nu0\">0</span> <span class=\"sy0\">^</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "Go", "loc": 15, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math\"</span><br/>    <span class=\"st0\">\"math/big\"</span><br/>    <span class=\"st0\">\"math/cmplx\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"float64:    \"</span><span class=\"sy1\">,</span> math<span class=\"sy3\">.</span>Pow<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">))</span><br/>    <span class=\"kw1\">var</span> b <a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"big integer:\"</span><span class=\"sy1\">,</span> b<span class=\"sy3\">.</span>Exp<span class=\"sy1\">(</span>&amp;b<span class=\"sy1\">,</span> &amp;b<span class=\"sy1\">,</span> <span class=\"kw2\">nil</span><span class=\"sy1\">))</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"complex:    \"</span><span class=\"sy1\">,</span> <span class=\"kw3\">cmplx</span><span class=\"sy3\">.</span>Pow<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "FutureBasic", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>include \"ConsoleWindow\"<br/>\u00a0<br/>print 0^0<br/>\u00a0</pre>"}, {"lang": "Groovy", "loc": 1, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"nu0\">0</span><span class=\"sy0\">**</span><span class=\"nu0\">0</span></pre>"}, {"lang": "Haskell", "loc": 9, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Complex<br/>\u00a0<br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> <span class=\"nu0\">0</span> <span class=\"sy0\">^</span> <span class=\"nu0\">0</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> <span class=\"nu0\">0.0</span> <span class=\"sy0\">^</span> <span class=\"nu0\">0</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> <span class=\"nu0\">0</span> <span class=\"sy0\">^^</span> <span class=\"nu0\">0</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> <span class=\"nu0\">0</span> <span class=\"sy0\">**</span> <span class=\"nu0\">0</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>\u00a0:<span class=\"sy0\">+</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">^</span> <span class=\"nu0\">0</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>\u00a0:<span class=\"sy0\">+</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">**</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>\u00a0:<span class=\"sy0\">+</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span></pre>"}, {"lang": "HolyC", "loc": 2, "block": "<pre class=\"text highlighted_source\">F64 a = 0 ` 0;<br/>Print(\"0 ` 0 =\u00a0%5.3f\\n\", a);</pre>"}, {"lang": "Icon and Unicon", "loc": 3, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">^</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">   <span class=\"nu0\">0</span> ^ <span class=\"nu0\">0</span><br/><span class=\"nu0\">1</span></pre>"}, {"lang": "Java", "loc": 1, "block": "<pre class=\"java highlighted_source\"><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "JavaScript", "loc": 2, "block": "<pre class=\"javascript highlighted_source\"><span class=\"sy0\">&gt;</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"nu0\">1</span></pre>"}, {"lang": "jq", "loc": 1, "block": "<pre class=\"text highlighted_source\">def power(y): y as $y | if $y == 0 then 1 elif . == 0 then 0 else log * $y | exp end;</pre>"}, {"lang": "Julia", "loc": 7, "block": "<pre class=\"text highlighted_source\">const types = (Complex, Float64, Rational, Int, Bool)<br/>\u00a0<br/>for Tb in types, Te in types<br/>    zb, ze = zero(Tb), zero(Te)<br/>    r = zb ^ ze<br/>    @printf(\"%10s ^\u00a0%-10s =\u00a0%7s ^\u00a0%-7s =\u00a0%-12s (%s)\\n\", Tb, Te, zb, ze, r, typeof(r))<br/>end</pre>"}, {"lang": "Kotlin", "loc": 5, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   println<span class=\"br0\">(</span><span class=\"st0\">\"0 ^ 0 = ${Math.pow(0.0, 0.0)}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 1, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">^</span><span class=\"nu0\">0</span><span class=\"br0\">)</span></pre>"}, {"lang": "M2000 Interpreter", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module Checkit {<br/>      x=0<br/>      y=0<br/>      Print x**y=1, x^y=1    ' True True<br/>}<br/>Checkit<br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 1, "block": "<pre class=\"text highlighted_source\">0^0</pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\">0^0</pre>"}, {"lang": "MATLAB / Octave", "loc": 2, "block": "<pre class=\"matlab highlighted_source\"><span class=\"nu0\">0</span>^<span class=\"nu0\">0</span><br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/complex.html\"><span class=\"kw2\">complex</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span>^<span class=\"nu0\">0</span></pre>"}, {"lang": "Mercury", "loc": 18, "block": "<pre class=\"text highlighted_source\">:- module zero_to_the_zero_power.<br/>:- interface.<br/>\u00a0<br/>:- import_module io.<br/>\u00a0<br/>:- pred main(io::di, io::uo) is det.<br/>\u00a0<br/>:- implementation.<br/>\u00a0<br/>:- import_module float, int, integer, list, string.<br/>\u00a0<br/>main(!IO)\u00a0:-<br/>   io.format(\"    int.pow(0, 0) =\u00a0%d\\n\", [i(pow(0, 0))],\u00a0!IO),<br/>   io.format(\"integer.pow(zero, zero) =\u00a0%s\\n\",<br/>        [s(to_string(pow(zero, zero)))],\u00a0!IO),<br/>   io.format(\"  float.pow(0.0, 0) =\u00a0%.1f\\n\", [f(pow(0.0, 0))],\u00a0!IO).<br/>\u00a0<br/>:- end_module zero_to_the_zero_power.</pre>"}, {"lang": "Microsoft Small Basic", "loc": 1, "block": "<pre class=\"text highlighted_source\">TextWindow.WriteLine(Math.Power(0,0))</pre>"}, {"lang": "\u041c\u041a-61/52", "loc": 1, "block": "<pre class=\"text highlighted_source\">\u0421x\t^\tx^y\t\u0421/\u041f</pre>"}, {"lang": "NetRexx", "loc": 2, "block": "<pre class=\"netrexx highlighted_source\">x=<span class=\"nu0\">0</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">'0**0='</span><span class=\"sy0\">||</span>x<span class=\"sy0\">**</span>x</pre>"}, {"lang": "NewLISP", "loc": 1, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#pow\"><span class=\"kw1\">pow</span></a> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span></pre>"}, {"lang": "Nial", "loc": 8, "block": "<pre class=\"text highlighted_source\">     0 0.0 o outer power 0 0.0 o<br/>+--+--+--+<br/>| 1|1.| 1|<br/>+--+--+--+<br/>|1.|1.|1.|<br/>+--+--+--+<br/>| 1|1.| 1|<br/>+--+--+--+</pre>"}, {"lang": "Nim", "loc": 3, "block": "<pre class=\"text highlighted_source\">import math<br/>\u00a0<br/>echo pow(0, 0)</pre>"}, {"lang": "OCaml", "loc": 1, "block": "<pre># 0.0 ** 0.0;;\n-\u00a0: float = 1.\n# Complex.pow Complex.zero Complex.zero;;\n-\u00a0: Complex.t = {Complex.re = nan; Complex.im = nan}\n# #load \"nums.cma\";;\n# open Num;;\n# Int 0 **/ Int 0;;                 \n-\u00a0: Num.num = Int 1\n</pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">0 0 pow println</pre>"}, {"lang": "ooRexx", "loc": 6, "block": "<pre class=\"oorexx highlighted_source\"><span class=\"coMULTI\">/**********************************************************************<br/>* 21.04.2014 Walter Pachl<br/>**********************************************************************/</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">'rxCalcpower(0,0)  -&gt;'</span> rxCalcpower<span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">'0**0              -&gt;'</span> <span class=\"nu0\">0</span><span class=\"sy0\">**</span><span class=\"nu0\">0</span><br/>::requires rxmath library</pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\"><span class=\"nu1\">0</span><span class=\"sy0\">^</span><span class=\"nu1\">0</span></pre>"}, {"lang": "Pascal", "loc": 7, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> ZToZ<span class=\"sy1\">;</span><br/><span class=\"kw1\">uses</span><br/>  math<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">write</span><span class=\"br0\">(</span><span class=\"st0\">'0.0 ^ 0\u00a0:'</span><span class=\"sy1\">,</span>IntPower<span class=\"br0\">(</span><span class=\"nu0\">0.0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"nu0\">4</span><span class=\"sy1\">:</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'   0.0 ^ 0.0\u00a0:'</span><span class=\"sy1\">,</span>Power<span class=\"br0\">(</span><span class=\"nu0\">0.0</span><span class=\"sy1\">,</span><span class=\"nu0\">0.0</span><span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"nu0\">4</span><span class=\"sy1\">:</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 5, "block": "<pre class=\"perl highlighted_source\"><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"nu0\">0</span> <span class=\"sy0\">**</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">use</span> Math<span class=\"sy0\">::</span><span class=\"me2\">Complex</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> cplx<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">**</span> cplx<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 6, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw3\">say</span> <span class=\"st_h\">'    type         n      n**n  exp(n,n)'</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st_h\">'--------  --------  --------  --------'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">,</span> FatRat<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> 0e0<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">+</span>0i <span class=\"br0\">{</span><br/>    <span class=\"kw3\">printf</span> <span class=\"st0\">\"%8s \u00a0%8s \u00a0%8s \u00a0%8s<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">.^</span>name<span class=\"sy0\">,</span> <span class=\"re0\">$_</span><span class=\"sy0\">,</span> <span class=\"re0\">$_</span><span class=\"sy0\">**</span><span class=\"re0\">$_</span><span class=\"sy0\">,</span> <span class=\"kw3\">exp</span><span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"sy0\">,</span><span class=\"re0\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 1, "block": "<pre class=\"text highlighted_source\">?power(0,0)</pre>"}, {"lang": "PHP", "loc": 4, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"kw1\">echo</span> <a href=\"http://www.php.net/pow\"><span class=\"kw3\">pow</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">echo</span> <span class=\"nu0\">0</span> <span class=\"sy0\">**</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"co1\">// PHP 5.6+ only</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(** 0 0)<br/>\u00a0</pre>"}, {"lang": "PL/I", "loc": 7, "block": "<pre class=\"pli highlighted_source\"> zhz<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span> <span class=\"kw1\">Options</span><span class=\"br0\">(</span><span class=\"kw1\">Main</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> a <span class=\"kw1\">dec</span> <span class=\"kw1\">float</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> b <span class=\"kw1\">dec</span> <span class=\"kw1\">float</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">list</span><span class=\"br0\">(</span><span class=\"st0\">'1**0='</span><span class=\"sy0\">,</span>a<span class=\"sy0\">**</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">list</span><span class=\"br0\">(</span><span class=\"st0\">'0**1='</span><span class=\"sy0\">,</span>b<span class=\"sy0\">**</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">list</span><span class=\"br0\">(</span><span class=\"st0\">'0**0='</span><span class=\"sy0\">,</span>b<span class=\"sy0\">**</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PowerShell", "loc": 1, "block": "<pre class=\"powershell highlighted_source\"><span class=\"br0\">[</span>math<span class=\"br0\">]</span>::pow<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span></pre>"}, {"lang": "PureBasic", "loc": 9, "block": "<pre class=\"purebasic highlighted_source\">\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Zero to the zero power is \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Pow</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Press any key to close the console\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Repeat</span>: <span class=\"kw2\">Delay</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Until</span> <span class=\"kw2\">Inkey</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"st0\">\"\"</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 11, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">decimal</span> <span class=\"kw1\">import</span> Decimal<br/><span class=\"kw1\">from</span> fractions <span class=\"kw1\">import</span> Fraction<br/><span class=\"kw1\">from</span> <span class=\"kw3\">itertools</span> <span class=\"kw1\">import</span> product<br/>\u00a0<br/>zeroes <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">,</span> 0j<span class=\"sy0\">,</span> Decimal<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> Fraction<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> -<span class=\"nu0\">0.0</span><span class=\"sy0\">,</span> -0.0j<span class=\"sy0\">,</span> Decimal<span class=\"br0\">(</span>-<span class=\"nu0\">0.0</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"kw1\">for</span> i<span class=\"sy0\">,</span> j <span class=\"kw1\">in</span> product<span class=\"br0\">(</span>zeroes<span class=\"sy0\">,</span> repeat<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">try</span>:<br/>        ans <span class=\"sy0\">=</span> i**j<br/>    <span class=\"kw1\">except</span>:<br/>        ans <span class=\"sy0\">=</span> <span class=\"st0\">'&lt;Exception raised&gt;'</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span>f<span class=\"st0\">'{i!r:&gt;15} ** {j!r:&lt;15} = {ans!r}'</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 1, "block": "<pre class=\"rsplus highlighted_source\"><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/print.html\"><span class=\"kw2\">print</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">^</span><span class=\"nu0\">0</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 14, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>;; as many zeros as I can think of...<br/>(define zeros (list<br/>               0 \u00a0; unspecified number type<br/>               0.\u00a0; hinted as float<br/>               #e0\u00a0; explicitly exact<br/>               #i0\u00a0; explicitly inexact<br/>               0+0i\u00a0; exact complex<br/>               0.+0.i\u00a0; float inexact<br/>               ))<br/>(for*((z zeros) (p zeros))<br/>  (printf \"(~a)^(~a) = ~s~%\" z p<br/>  (with-handlers [(exn:fail:contract:divide-by-zero? exn-message)]<br/>    (expt z p))))</pre>"}, {"lang": "REXX", "loc": 2, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program shows the results of  raising zero  to the  zeroth power.*/</span><br/><span class=\"kw1\">say</span>  <span class=\"st0\">'0 ** 0  (zero to the zeroth power) \u2500\u2500\u2500\u25ba '</span>    <span class=\"nu0\">0</span><span class=\"sy0\">**</span><span class=\"nu0\">0</span></pre>"}, {"lang": "Ring", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>x = 0<br/>y = 0<br/>z = pow(x,y)<br/>see \"z=\" + z + nl   # z=1<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 5, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'bigdecimal'</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0.0</span>, <span class=\"kw4\">Complex</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, <span class=\"kw4\">Rational</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, BigDecimal.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>n<span class=\"sy0\">|</span><br/>  <span class=\"kw3\">printf</span> <span class=\"st0\">\"%10s: ** -&gt;\u00a0%s<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">%</span> <span class=\"br0\">[</span>n.<span class=\"kw1\">class</span>, n<span class=\"sy0\">**</span>n<span class=\"br0\">]</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Rust", "loc": 3, "block": "<pre class=\"text highlighted_source\">fn main() {<br/>    println!(\"{}\",0u32.pow(0));<br/>}</pre>"}, {"lang": "S-lang", "loc": 1, "block": "<pre class=\"text highlighted_source\">print(0^0);</pre>"}, {"lang": "Scala", "loc": 1, "block": "<pre class=\"scala highlighted_source\">  assert<span class=\"br0\">(</span>math.<span class=\"me1\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>, <span class=\"st0\">\"Scala blunder, should go back to school\u00a0!\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Scheme", "loc": 3, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">0.0</span> <span class=\"nu0\">0.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">0</span><span class=\"sy0\">+</span>0i <span class=\"nu0\">0</span><span class=\"sy0\">+</span>0i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 12, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"float.s7i\";<br/>  include \"complex.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    writeln(\"0      ** 0   = \" &lt;&amp; 0 ** 0);<br/>    writeln(\"0.0    ** 0   = \" &lt;&amp; 0.0 ** 0);<br/>    writeln(\"0.0    ** 0.0 = \" &lt;&amp; 0.0 ** 0.0);<br/>    writeln(\"0.0+0i ** 0   = \" &lt;&amp; complex(0.0) ** 0);<br/>  end func;<br/>\u00a0</pre>"}, {"lang": "Sidef", "loc": 3, "block": "<pre class=\"ruby highlighted_source\"><span class=\"br0\">[</span><span class=\"nu0\">0</span>, <span class=\"kw4\">Complex</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">]</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>n<span class=\"sy0\">|</span><br/>    say n<span class=\"sy0\">**</span>n<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sinclair ZX81 BASIC", "loc": 1, "block": "<pre class=\"text highlighted_source\">PRINT 0**0</pre>"}, {"lang": "Smalltalk", "loc": 4, "block": "<pre class=\"smalltalk highlighted_source\">\u00a0<br/><span class=\"nu0\">0</span> raisedTo: <span class=\"re5\">0</span> <br/><span class=\"nu0\">0</span>.<span class=\"re5\">0</span> raisedTo: <span class=\"re5\">0</span>.<span class=\"re5\">0</span> <br/>\u00a0</pre>"}, {"lang": "smart BASIC", "loc": 1, "block": "<pre class=\"qbasic highlighted_source\"><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"nu0\">0</span><span class=\"sy0\">^</span><span class=\"nu0\">0</span></pre>"}, {"lang": "SQL", "loc": 3, "block": "<pre class=\"sql highlighted_source\">\u00a0<br/>SQL<span class=\"sy0\">&gt;</span> <span class=\"kw1\">SELECT</span> <span class=\"kw1\">POWER</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">FROM</span> dual;<br/>\u00a0</pre>"}, {"lang": "Standard ML", "loc": 1, "block": "<pre>- Math.pow (0.0, 0.0);\nval it = 1.0\u00a0: real\n</pre>"}, {"lang": "Stata", "loc": 2, "block": "<pre class=\"text highlighted_source\">. display 0^0<br/>1</pre>"}, {"lang": "Swift", "loc": 2, "block": "<pre class=\"text highlighted_source\">import Darwin<br/>print(pow(0.0,0.0))</pre>"}, {"lang": "Tcl", "loc": 4, "block": "<pre class=\"tcl highlighted_source\"><span class=\"sy0\">%</span> <span class=\"kw1\">expr</span> <span class=\"nu0\">0</span><span class=\"sy0\">**</span><span class=\"nu0\">0</span><br/><span class=\"nu0\">1</span><br/><span class=\"sy0\">%</span> <span class=\"kw1\">expr</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">**</span><span class=\"nu0\">0.0</span><br/><span class=\"nu0\">1.0</span></pre>"}, {"lang": "TI-83_BASIC", "loc": 1, "block": "<pre class=\"text highlighted_source\">0^0</pre>"}, {"lang": "uBasic/4tH", "loc": 1, "block": "<pre class=\"text highlighted_source\">Print 0^0</pre>"}, {"lang": "Ursa", "loc": 2, "block": "<pre class=\"text highlighted_source\">&gt; out (pow 0 0) endl console<br/>1.0</pre>"}, {"lang": "VBScript", "loc": 1, "block": "<pre class=\"vb highlighted_source\">WScript.Echo 0 ^ 0</pre>"}, {"lang": "XLISP", "loc": 5, "block": "<pre class=\"scheme highlighted_source\">XLISP <span class=\"nu0\">3.3</span>, September <span class=\"nu0\">6</span>, <span class=\"nu0\">2002</span> Copyright <span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"nu0\">1984</span><span class=\"sy0\">-</span><span class=\"nu0\">2002</span>, by David Betz<br/><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"nu0\">1</span><br/><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> </pre>"}, {"lang": "zkl", "loc": 3, "block": "<pre class=\"text highlighted_source\">(0.0).pow(0)  //--&gt; 1.0<br/>var BN=Import(\"zklBigNum\"); // big ints<br/>BN(0).pow(0) //--&gt; 1</pre>"}]}