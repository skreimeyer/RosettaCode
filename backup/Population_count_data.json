{"task": "Population_count", "blocks": [{"lang": "Ada", "loc": 6, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Interfaces;<br/>\u00a0<br/><span class=\"kw3\">package</span> Population_Count <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">subtype</span> Num <span class=\"kw1\">is</span> Interfaces.<span class=\"me1\">Unsigned_64</span>;<br/>   <span class=\"kw3\">function</span> Pop_Count<span class=\"br0\">(</span>N: Num<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Natural;<br/><span class=\"kw1\">end</span> Population_Count;</pre>"}, {"lang": "ALGOL 68", "loc": 42, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># returns the population count (number of bits on) of the non-negative       #</span><br/><span class=\"coMULTI\"># integer n                                                                  #</span><br/><span class=\"kw4\">PROC</span> population count <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> n <span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/>     <span class=\"kw2\">BEGIN</span><br/>        <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> number <span class=\"sy1\">:=</span> n<span class=\"sy1\">;</span><br/>        <span class=\"kw3\">INT</span>      result <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">WHILE</span> number <span class=\"sy1\">&gt;</span> 0 <span class=\"kw2\">DO</span><br/>            <span class=\"kw2\">IF</span> <span class=\"kw8\">ODD</span> number <span class=\"kw2\">THEN</span> result <span class=\"sy1\">+:=</span> 1 <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>            number <span class=\"kw17\">OVERAB</span> 2<br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        result<br/>     <span class=\"kw2\">END</span> <span class=\"coMULTI\"># population #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># population count of 3^0, 3^1, 3*2, ..., 3^29                               #</span><br/><span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span>  power of three <span class=\"sy1\">:=</span> 1<span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"3^x pop counts:\"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw2\">FOR</span> power <span class=\"kw2\">FROM</span> 0 <span class=\"kw2\">TO</span> 29 <span class=\"kw2\">DO</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> population count<span class=\"br0\">(</span> power of three <span class=\"br0\">)</span><span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    power of three <span class=\"sy1\">*:=</span> 3<br/><span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># print the first thirty evil numbers (even population count)                #</span><br/><span class=\"kw3\">INT</span> evil count <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"evil numbers \u00a0:\"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw2\">FOR</span> n <span class=\"kw2\">FROM</span> 0 <span class=\"kw2\">WHILE</span> evil count <span class=\"sy1\">&lt;</span> 30 <span class=\"kw2\">DO</span><br/>    <span class=\"kw2\">IF</span> <span class=\"kw8\">NOT</span> <span class=\"kw8\">ODD</span> population count<span class=\"br0\">(</span> n <span class=\"br0\">)</span> <span class=\"kw2\">THEN</span><br/>        <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> n<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        evil count <span class=\"sy1\">+:=</span> 1<br/>    <span class=\"kw2\">FI</span><br/><span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># print the first thirty odious numbers (odd population count)               #</span><br/><span class=\"kw3\">INT</span> odious count <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"odious numbers:\"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw2\">FOR</span> n <span class=\"kw2\">WHILE</span> odious count <span class=\"sy1\">&lt;</span> 30 <span class=\"kw2\">DO</span><br/>    <span class=\"kw2\">IF</span> <span class=\"kw8\">ODD</span> population count<span class=\"br0\">(</span> n <span class=\"br0\">)</span> <span class=\"kw2\">THEN</span><br/>        <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> n<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        odious count <span class=\"sy1\">+:=</span> 1<br/>    <span class=\"kw2\">FI</span><br/><span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "ALGOL W", "loc": 69, "block": "<pre class=\"text highlighted_source\">begin<br/>   \u00a0% returns the population count (number of bits on) of the non-negative integer n\u00a0%<br/>    integer procedure populationCount( integer value n )\u00a0;<br/>            begin<br/>                integer v, count;<br/>                v    \u00a0:= n;<br/>                count\u00a0:= 0;<br/>                while v &gt; 0 do begin<br/>                    if odd( v ) then count\u00a0:= count + 1;<br/>                    v    \u00a0:= v div 2<br/>                end while_v_gt_0\u00a0;<br/>                count<br/>            end populationCount\u00a0;<br/>   \u00a0% returns the sum of population counts of the elements of the array n           \u00a0%<br/>   \u00a0%         the bounds of n must be 1\u00a0:: length                                   \u00a0%<br/>    integer procedure arrayPopulationCount( integer array n ( * ); integer value length )\u00a0;<br/>            begin<br/>                integer count;<br/>                count\u00a0:= 0;<br/>                for i\u00a0:= 1 until length do count\u00a0:= count + populationCount( n( i ) );<br/>                count<br/>            end arrayPopulationCount\u00a0;<br/>    begin\u00a0%task requirements\u00a0%<br/>        integer array power( 1\u00a0:: 8 );<br/>        integer n, count, carry;<br/>       \u00a0% population counts of the first 30 powers of three\u00a0%<br/>       \u00a0% Algol W integers are 32-bit, so we simulate 64-bit with an array of integers\u00a0%<br/>       \u00a0% the only operation we need is multiplication by 3                           \u00a0%<br/>       \u00a0% we use 8 bits of each number                                                \u00a0%<br/>       \u00a0% start with 3^0, which is 1\u00a0%<br/>        for i\u00a0:= 1 until 8 do power( i )\u00a0:= 0;<br/>        power( 1 )\u00a0:= 1;<br/>        write( i_w\u00a0:= 1, s_w\u00a0:= 0, \"3^x  population: \", arrayPopulationCount( power, 8 ) );<br/>        for p\u00a0:= 1 until 29 do begin<br/>            carry\u00a0:= 0;<br/>            for b\u00a0:= 1 until 8 do begin<br/>                integer bValue;<br/>                bValue    \u00a0:= ( power( b ) * 3 ) + carry;<br/>                carry     \u00a0:= bValue div 256;<br/>                power( b )\u00a0:= bValue rem 256<br/>            end for_b\u00a0;<br/>            writeon( i_w\u00a0:= 1, s_w\u00a0:= 0, \" \", arrayPopulationCount( power, 8 ) )<br/>        end for_p\u00a0;<br/>\u00a0<br/>       \u00a0% evil numbers (even population count)\u00a0%<br/>        write( \"evil    numbers:\" );<br/>        n    \u00a0:= 0;<br/>        count\u00a0:= 0;<br/>        while count &lt; 30 do begin<br/>            if not odd( populationCount( n ) ) then begin<br/>                writeon( i_w\u00a0:= 1, s_w\u00a0:= 0, \" \", n );<br/>                count\u00a0:= count + 1<br/>            end if_not_odd_populationCount\u00a0;<br/>            n\u00a0:= n + 1<br/>        end evil_numbers_loop\u00a0;<br/>\u00a0<br/>       \u00a0% odious numbers (odd population count\u00a0%<br/>        write( \"odious  numbers:\" );<br/>        n    \u00a0:= 0;<br/>        count\u00a0:= 0;<br/>        while count &lt; 30 do begin<br/>            if odd( populationCount( n ) ) then begin<br/>                writeon( i_w\u00a0:= 1, s_w\u00a0:= 0, \" \", n );<br/>                count\u00a0:= count + 1<br/>            end if_odd_populationCount\u00a0;<br/>            n\u00a0:= n + 1<br/>        end odious_numbers_loop<br/>   end<br/>end.</pre>"}, {"lang": "AppleScript", "loc": 123, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- popCount\u00a0:: Int -&gt; Int</span><br/><span class=\"kw3\">on</span> popCount<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> bitSum<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, x<span class=\"br0\">)</span><br/>            a <span class=\"sy0\">+</span> <span class=\"br0\">(</span>x <span class=\"kw2\">as</span> <span class=\"kw1\">integer</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    foldl<span class=\"br0\">(</span>bitSum, <span class=\"nu0\">0</span>, characters <span class=\"kw3\">of</span> showIntAtBase<span class=\"br0\">(</span>n, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> popCount<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- TEST -----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>    <span class=\"kw3\">script</span> powerOfThreePopCount<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>            popCount<span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"sy0\">^</span> x<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"kw3\">script</span> popCountisEven<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>            popCount<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw2\">mod</span> <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"br0\">{</span>popCounts:\u00ac<br/>        map<span class=\"br0\">(</span>powerOfThreePopCount, enumFromTo<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">30</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, evenThenOdd:\u00ac<br/>        partition<span class=\"br0\">(</span>popCountisEven, enumFromTo<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">59</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ----------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- enumFromTo\u00a0:: Int -&gt; Int -&gt; [Int]</span><br/><span class=\"kw3\">on</span> enumFromTo<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> m &gt; n <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> m <span class=\"kw3\">to</span> n <span class=\"kw1\">by</span> d<br/>        <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> i<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> lst<br/><span class=\"kw3\">end</span> enumFromTo<br/>\u00a0<br/><span class=\"co1\">-- foldl\u00a0:: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/><span class=\"kw3\">on</span> foldl<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>v, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> foldl<br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper</span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn<br/>\u00a0<br/><span class=\"co1\">-- partition\u00a0:: predicate -&gt; List -&gt; (Matches, nonMatches)</span><br/><span class=\"co1\">-- partition\u00a0:: (a -&gt; Bool) -&gt; [a] -&gt; ([a], [a])</span><br/><span class=\"kw3\">on</span> partition<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> x <span class=\"kw3\">in</span> xs<br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> <span class=\"kw1\">contents</span> <span class=\"kw3\">of</span> x<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> <span class=\"kw1\">item</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>|\u03bb|<span class=\"br0\">(</span>v<span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">integer</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> v<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/>    <span class=\"br0\">{</span><span class=\"kw1\">item</span> <span class=\"nu0\">2</span> <span class=\"kw3\">of</span> lst, <span class=\"kw1\">item</span> <span class=\"nu0\">1</span> <span class=\"kw3\">of</span> lst<span class=\"br0\">}</span><br/><span class=\"kw3\">end</span> partition<br/>\u00a0<br/><span class=\"co1\">-- showIntAtBase\u00a0:: Int -&gt; Int -&gt; String</span><br/><span class=\"kw3\">on</span> showIntAtBase<span class=\"br0\">(</span>n, base<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> base &gt; <span class=\"nu0\">1</span> <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">if</span> n &gt; <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>            <span class=\"kw3\">set</span> m <span class=\"kw3\">to</span> n <span class=\"kw2\">mod</span> base<br/>            <span class=\"kw3\">set</span> r <span class=\"kw3\">to</span> n <span class=\"sy0\">-</span> m<br/>            <span class=\"kw3\">if</span> r &gt; <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>                <span class=\"kw3\">set</span> prefix <span class=\"kw3\">to</span> showIntAtBase<span class=\"br0\">(</span>r <span class=\"kw2\">div</span> base, base<span class=\"br0\">)</span><br/>            <span class=\"kw3\">else</span><br/>                <span class=\"kw3\">set</span> prefix <span class=\"kw3\">to</span> <span class=\"st0\">\"\"</span><br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\u00a0<br/>            <span class=\"kw3\">if</span> m <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span> <span class=\"kw3\">then</span><br/>                <span class=\"kw3\">set</span> baseCode <span class=\"kw3\">to</span> <span class=\"nu0\">48</span> <span class=\"co1\">-- \"0\"</span><br/>            <span class=\"kw3\">else</span><br/>                <span class=\"kw3\">set</span> baseCode <span class=\"kw3\">to</span> <span class=\"nu0\">55</span> <span class=\"co1\">-- \"A\" - 10</span><br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\u00a0<br/>            prefix <span class=\"sy0\">&amp;</span> character <span class=\"kw1\">id</span> <span class=\"br0\">(</span>baseCode <span class=\"sy0\">+</span> m<span class=\"br0\">)</span><br/>        <span class=\"kw3\">else</span><br/>            <span class=\"st0\">\"0\"</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw1\">missing value</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> showIntAtBase</pre>"}, {"lang": "AutoHotkey", "loc": 13, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">30</span><br/>\tOut1 <span class=\"sy0\">.=</span> PopCount<span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"sy0\">**</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">\" \"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">60</span><br/>\ti <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\t<span class=\"sy0\">,</span> PopCount<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> 0x1\u00a0? Out3 <span class=\"sy0\">.=</span> i <span class=\"st0\">\" \"</span>\u00a0: Out2 <span class=\"sy0\">.=</span> i <span class=\"st0\">\" \"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\"3^x:`t\"</span> Out1 <span class=\"st0\">\"`nEvil:`t\"</span> Out2 <span class=\"st0\">\"`nOdious:`t\"</span> Out3<br/>\u00a0<br/>PopCount<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span>\t<span class=\"co1\">;https://en.wikipedia.org/wiki/Hamming_weight#Efficient_implementation</span><br/>\tx <span class=\"sy0\">-=</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> 0x5555555555555555<br/>\t<span class=\"sy0\">,</span> x <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&amp;</span> 0x3333333333333333<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> 0x3333333333333333<span class=\"br0\">)</span><br/>\t<span class=\"sy0\">,</span> x <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>x <span class=\"sy0\">+</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> 0x0f0f0f0f0f0f0f0f<br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">(</span>x <span class=\"sy0\">*</span> 0x0101010101010101<span class=\"br0\">)</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">56</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C", "loc": 39, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> <span class=\"kw4\">long</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">30</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"co1\">// __builtin_popcount() for unsigned int</span><br/>      <span class=\"co1\">// __builtin_popcountl() for unsigned long</span><br/>      <span class=\"co1\">// __builtin_popcountll() for unsigned long long</span><br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d \"</span><span class=\"sy0\">,</span> __builtin_popcountll<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      n <span class=\"sy0\">*=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw4\">int</span> od<span class=\"br0\">[</span><span class=\"nu0\">30</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">int</span> ne <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> no <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"evil \u00a0: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> ne<span class=\"sy0\">+</span>no <span class=\"sy0\">&lt;</span> <span class=\"nu0\">60</span><span class=\"sy0\">;</span> n<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>__builtin_popcount<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ne <span class=\"sy0\">&lt;</span> <span class=\"nu0\">30</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d \"</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tne<span class=\"sy0\">++;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>no <span class=\"sy0\">&lt;</span> <span class=\"nu0\">30</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tod<span class=\"br0\">[</span>no<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"odious: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">30</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d \"</span><span class=\"sy0\">,</span> od<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 42, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;bitset&gt;</span><br/><span class=\"co2\">#include &lt;climits&gt;</span><br/>\u00a0<br/><span class=\"kw4\">size_t</span> popcount<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> <span class=\"kw4\">long</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> std<span class=\"sy4\">::</span><span class=\"me2\">bitset</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">CHAR_BIT</span> <span class=\"sy2\">*</span> <span class=\"kw3\">sizeof</span> n<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>.<span class=\"me1\">count</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> <span class=\"kw4\">long</span> n <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">30</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> popcount<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span><br/>      n <span class=\"sy2\">*</span><span class=\"sy1\">=</span> <span class=\"nu0\">3</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw4\">int</span> od<span class=\"br0\">[</span><span class=\"nu0\">30</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>  <span class=\"kw4\">int</span> ne <span class=\"sy1\">=</span> <span class=\"nu0\">0</span>, no <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"evil \u00a0: \"</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> ne<span class=\"sy2\">+</span>no <span class=\"sy1\">&lt;</span> <span class=\"nu0\">60</span><span class=\"sy4\">;</span> n<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>popcount<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy3\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ne <span class=\"sy1\">&lt;</span> <span class=\"nu0\">30</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> n <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span><br/>\tne<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>no <span class=\"sy1\">&lt;</span> <span class=\"nu0\">30</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tod<span class=\"br0\">[</span>no<span class=\"sy2\">++</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> n<span class=\"sy4\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"odious: \"</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">30</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> od<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 72, "block": "<pre class=\"csharp highlighted_source\">\u00a0<br/><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> PopulationCount<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> PopulationCount<span class=\"br0\">(</span><span class=\"kw4\">long</span> n<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">string</span> binaryn <span class=\"sy0\">=</span> Convert<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span>n, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> binaryn<span class=\"sy0\">.</span><span class=\"me1\">ToCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Where</span><span class=\"br0\">(</span>t <span class=\"sy0\">=&gt;</span> t <span class=\"sy0\">==</span> <span class=\"st0\">'1'</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Population Counts:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"3^n\u00a0:   \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw4\">int</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>count <span class=\"sy0\">&lt;</span> <span class=\"nu0\">30</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw4\">double</span> n <span class=\"sy0\">=</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Pow</span><span class=\"br0\">(</span>3f, <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>count<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw4\">int</span> popCount <span class=\"sy0\">=</span> PopulationCount<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">long</span><span class=\"br0\">)</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"me1\">Format</span><span class=\"br0\">(</span><span class=\"st0\">\"{0} \"</span>, popCount<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                count<span class=\"sy0\">++;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"Evil:   \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>count <span class=\"sy0\">&lt;</span> <span class=\"nu0\">30</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw4\">int</span> popCount <span class=\"sy0\">=</span> PopulationCount<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>popCount <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    count<span class=\"sy0\">++;</span><br/>                    Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"me1\">Format</span><span class=\"br0\">(</span><span class=\"st0\">\"{0} \"</span>, i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>                i<span class=\"sy0\">++;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"Odious: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>count <span class=\"sy0\">&lt;</span> <span class=\"nu0\">30</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw4\">int</span> popCount <span class=\"sy0\">=</span> PopulationCount<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>popCount <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    count<span class=\"sy0\">++;</span><br/>                    Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"me1\">Format</span><span class=\"br0\">(</span><span class=\"st0\">\"{0} \"</span>, i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>                i<span class=\"sy0\">++;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">ReadKey</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 12, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>format T <span class=\"st0\">\"3^x: ~{~a ~}~%\"</span> <br/>        <span class=\"br0\">(</span>loop for i below <span class=\"nu0\">30</span> <br/>              collect <span class=\"br0\">(</span><span class=\"kw1\">logcount</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">3</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>multiple-value-bind <br/>  <span class=\"br0\">(</span>evil odious<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop for i below <span class=\"nu0\">60</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">evenp</span> <span class=\"br0\">(</span><span class=\"kw1\">logcount</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span> collect i into evil<br/>        else collect i into odious<br/>        finally <span class=\"br0\">(</span><span class=\"kw1\">return</span> <span class=\"br0\">(</span>values evil odious<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>format T <span class=\"st0\">\"evil: ~{~a ~}~%\"</span> evil<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>format T <span class=\"st0\">\"odious: ~{~a ~}~%\"</span> odious<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 9, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> core.<span class=\"me1\">bitop</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">enum</span> pCount <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">ulong</span> n<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> popcnt<span class=\"br0\">(</span>n <span class=\"sy0\">&amp;</span> <span class=\"kw4\">uint</span>.<span class=\"me1\">max</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> popcnt<span class=\"br0\">(</span>n <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"%s<span class=\"es1\">\\n</span>Evil:\u00a0%s<span class=\"es1\">\\n</span>Odious:\u00a0%s\"</span><span class=\"sy0\">,</span><br/>             <span class=\"kw4\">uint</span>.<span class=\"me1\">max</span>.<span class=\"me1\">iota</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> pCount<span class=\"br0\">(</span><span class=\"nu0\">3L</span> <span class=\"sy0\">^^</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">take</span><span class=\"br0\">(</span><span class=\"nu0\">30</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>             <span class=\"kw4\">uint</span>.<span class=\"me1\">max</span>.<span class=\"me1\">iota</span>.<span class=\"me1\">filter</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> pCount<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>.<span class=\"me1\">take</span><span class=\"br0\">(</span><span class=\"nu0\">30</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>             <span class=\"kw4\">uint</span>.<span class=\"me1\">max</span>.<span class=\"me1\">iota</span>.<span class=\"me1\">filter</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> pCount<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">take</span><span class=\"br0\">(</span><span class=\"nu0\">30</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 20, "block": "<pre class=\"text highlighted_source\">defmodule Population do<br/>\u00a0<br/>  def count(n), do: count(&lt;&lt;n\u00a0:: integer&gt;&gt;, 0)<br/>\u00a0<br/>  defp count(&lt;&lt;&gt;&gt;, acc), do: acc<br/>\u00a0<br/>  defp count(&lt;&lt;bit\u00a0:: integer-1, rest\u00a0:: bitstring&gt;&gt;, sum), do: count(rest, sum + bit)<br/>\u00a0<br/>  def evil?(n), do: n &gt;= 0 and rem(count(n),2) == 0<br/>\u00a0<br/>  def odious?(n), do: n &gt;= 0 and rem(count(n),2) == 1<br/>\u00a0<br/>end<br/>\u00a0<br/>IO.puts \"Population count of the first thirty powers of 3:\"<br/>IO.inspect Stream.iterate(1, &amp;(&amp;1*3)) |&gt; Enum.take(30) |&gt; Enum.map(&amp;Population.count(&amp;1))<br/>IO.puts \"first thirty evil numbers:\"<br/>IO.inspect Stream.iterate(0, &amp;(&amp;1+1)) |&gt; Stream.filter(&amp;Population.evil?(&amp;1)) |&gt; Enum.take(30)<br/>IO.puts \"first thirty odious numbers:\"<br/>IO.inspect Stream.iterate(0, &amp;(&amp;1+1)) |&gt; Stream.filter(&amp;Population.odious?(&amp;1)) |&gt; Enum.take(30)</pre>"}, {"lang": "Erlang", "loc": 50, "block": "<pre class=\"erlang highlighted_source\"><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>population_count<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>popcount<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">popcount</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">popcount</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">popcount</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Acc</span><span class=\"sy1\">;</span><br/><span class=\"re3\">popcount</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">popcount</span><span class=\"br0\">(</span><span class=\"re5\">N</span> <span class=\"kw2\">div</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span> <span class=\"sy3\">+</span> <span class=\"re5\">N</span> <span class=\"kw2\">rem</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">threes</span><span class=\"br0\">(</span><span class=\"re5\">_</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">threes</span><span class=\"br0\">(</span><span class=\"re5\">Threes</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">threes</span><span class=\"br0\">(</span><span class=\"re5\">Threes</span> <span class=\"sy3\">*</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re3\">popcount</span><span class=\"br0\">(</span><span class=\"re5\">Threes</span><span class=\"br0\">)</span>|Acc<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">threes</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">threes</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">evil</span><span class=\"br0\">(</span><span class=\"re5\">_</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">evil</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">Count</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"kw1\">case</span> <span class=\"re3\">popcount</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"kw2\">rem</span> <span class=\"nu0\">2</span> <span class=\"kw1\">of</span><br/>        <span class=\"nu0\">0</span> <span class=\"sy1\">-&gt;</span><br/>            <span class=\"re3\">evil</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">Count</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">N</span>|Acc<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"nu0\">1</span> <span class=\"sy1\">-&gt;</span><br/>            <span class=\"re3\">evil</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">Count</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/><span class=\"re3\">evil</span><span class=\"br0\">(</span><span class=\"re5\">Count</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">evil</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"re5\">Count</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">odious</span><span class=\"br0\">(</span><span class=\"re5\">_</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">odious</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">Count</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"kw1\">case</span> <span class=\"re3\">popcount</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"kw2\">rem</span> <span class=\"nu0\">2</span> <span class=\"kw1\">of</span><br/>        <span class=\"nu0\">1</span> <span class=\"sy1\">-&gt;</span><br/>            <span class=\"re3\">odious</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">Count</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">N</span>|Acc<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"nu0\">0</span> <span class=\"sy1\">-&gt;</span><br/>            <span class=\"re3\">odious</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">Count</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/><span class=\"re3\">odious</span><span class=\"br0\">(</span><span class=\"re5\">Count</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">odious</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">Count</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"Powers of 3: ~p~n\"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re3\">threes</span><span class=\"br0\">(</span><span class=\"nu0\">30</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"Evil:~p~n\"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re3\">evil</span><span class=\"br0\">(</span><span class=\"nu0\">30</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"Odious:~p~n\"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re3\">odious</span><span class=\"br0\">(</span><span class=\"nu0\">30</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Factor", "loc": 19, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>USING: io kernel lists lists.lazy math math.bits math.functions<br/>prettyprint sequences\u00a0;<br/>IN: rosetta-code.pop-count<br/>\u00a0<br/>: popc   ( n -- m ) make-bits [ t = ] count\u00a0;<br/>: pow3   ( -- seq ) 30 iota [ 3 swap ^ ] map\u00a0;<br/>: pops   ( -- seq ) pow3 [ popc ] map\u00a0;<br/>: pfiltr ( q -- s ) [ popc ] swap compose 0 lfrom swap lfilter\u00a0;<br/>: take30 ( l -- s ) 30 swap ltake list&gt;array\u00a0;<br/>: out    ( seq -- ) [ pprint bl ] each nl\u00a0;<br/>: popseq ( q -- )   pfiltr take30 out\u00a0;<br/>: 3^n    ( -- )     \"3^n:    \" write pops out\u00a0;<br/>: evil   ( -- )     \"Evil:   \" write [ even? ] popseq\u00a0;<br/>: odious ( -- )     \"Odious: \" write [ odd? ] popseq\u00a0;<br/>: main   ( -- )     3^n evil odious\u00a0;<br/>\u00a0<br/>MAIN: main<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 20, "block": "<pre class=\"text highlighted_source\">: popcnt ( n -- u)  0 swap<br/>   BEGIN dup WHILE tuck 1 AND +  swap 1 rshift REPEAT<br/>   DROP\u00a0;<br/>: odious? ( n -- t|f)  popcnt 1 AND\u00a0;<br/>: evil? ( n -- t|f)  odious? 0=\u00a0;    <br/>\u00a0<br/>CREATE A 30 ,<br/>: task1   1 0  .\" 3**i popcnt: \"<br/>   BEGIN dup A @ &lt; WHILE<br/>     over popcnt .  1+ swap 3 * swap<br/>   REPEAT  DROP DROP CR\u00a0;<br/>: task2   0 0  .\" evil      \u00a0: \"<br/>   BEGIN dup A @ &lt; WHILE<br/>     over evil? IF over . 1+ THEN swap 1+ swap<br/>   REPEAT  DROP DROP CR\u00a0;<br/>: task3   0 0  .\" odious    \u00a0: \"<br/>   BEGIN dup A @ &lt; WHILE<br/>     over odious? IF over . 1+ THEN swap 1+ swap<br/>   REPEAT  DROP DROP CR\u00a0;<br/>task1 task2 task3 BYE</pre>"}, {"lang": "Fortran", "loc": 51, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> population_count<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">i64</span> <span class=\"sy0\">=</span> <span class=\"kw4\">selected_int_kind</span><span class=\"br0\">(</span><span class=\"nu0\">18</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span><span class=\"br0\">(</span>i64<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">x</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, n<br/>\u00a0<br/>  x <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(a8)\"</span>, <span class=\"kw1\">advance</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"no\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"3**i\u00a0:\"</span><br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">30</span><br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(i3)\"</span>, <span class=\"kw1\">advance</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"no\"</span><span class=\"br0\">)</span> popcnt<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    x <span class=\"sy0\">=</span> x <span class=\"sy0\">*</span> <span class=\"nu0\">3</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(a8)\"</span>, <span class=\"kw1\">advance</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"no\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"Evil\u00a0:\"</span><br/>  n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>  x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <br/>  <span class=\"kw1\">do</span> <span class=\"kw1\">while</span><span class=\"br0\">(</span>n &lt; <span class=\"nu0\">30</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw4\">mod</span><span class=\"br0\">(</span>popcnt<span class=\"br0\">(</span>x<span class=\"br0\">)</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      n <span class=\"sy0\">=</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>      write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(i3)\"</span>, <span class=\"kw1\">advance</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"no\"</span><span class=\"br0\">)</span> x<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    x <span class=\"sy0\">=</span> x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(a8)\"</span>, <span class=\"kw1\">advance</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"no\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"Odious\u00a0:\"</span><br/>  n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>  x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <br/>  <span class=\"kw1\">do</span> <span class=\"kw1\">while</span><span class=\"br0\">(</span>n &lt; <span class=\"nu0\">30</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw4\">mod</span><span class=\"br0\">(</span>popcnt<span class=\"br0\">(</span>x<span class=\"br0\">)</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">/=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      n <span class=\"sy0\">=</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>      write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(i3)\"</span>, <span class=\"kw1\">advance</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"no\"</span><span class=\"br0\">)</span> x<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    x <span class=\"sy0\">=</span> x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/><span class=\"kw3\">integer</span> <span class=\"kw1\">function</span> popcnt<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span><span class=\"br0\">(</span>i64<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">x</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>\u00a0<br/>  popcnt <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">63</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw4\">btest</span><span class=\"br0\">(</span>x, i<span class=\"br0\">)</span><span class=\"br0\">)</span> popcnt <span class=\"sy0\">=</span> popcnt <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span></pre>"}, {"lang": "Gambas", "loc": 28, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sEvil, sOdious <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a>                         <span class=\"co1\">'To store the output for printing Evil and Odious </span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> iCount, iEvil, iOdious <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/integer\"><span class=\"kw4\">Integer</span></a>                <span class=\"co1\">'Counters</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <span class=\"st0\">\"First 30 numbers ^3<span class=\"es0\">\\t</span>\"</span>;                       <span class=\"co1\">'Print title</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> iCount <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <a href=\"http://gambasdoc.org/help/lang/to\"><span class=\"kw1\">To</span></a> <span class=\"nu0\">29</span>                                 <span class=\"co1\">'Count 30 times</span><br/>  <a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <a href=\"http://gambasdoc.org/help/lang/len\"><span class=\"kw2\">Len</span></a><span class=\"br0\">(</span><a href=\"http://gambasdoc.org/help/lang/replace\"><span class=\"kw2\">Replace</span></a><span class=\"br0\">(</span><a href=\"http://gambasdoc.org/help/lang/bin\"><span class=\"kw2\">Bin</span></a><span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"sy0\">^</span> iCount<span class=\"br0\">)</span>, <span class=\"st0\">\"0\"</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;;     <span class=\"co1\">'Get the Bin of the number, take out the '0's and the remaining</span><br/><a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a>                                                 <span class=\"co1\">'length is the Population count e.g. 3^2=9, Bin=1001, remove '0's='11', length=2</span><br/>\u00a0<br/>iCount <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>                                           <span class=\"co1\">'Reset iCount</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/repeat\"><span class=\"kw1\">Repeat</span></a>                                               <span class=\"co1\">'Repeat/Until loop</span><br/>  <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> Even<span class=\"br0\">(</span><a href=\"http://gambasdoc.org/help/lang/len\"><span class=\"kw2\">Len</span></a><span class=\"br0\">(</span><a href=\"http://gambasdoc.org/help/lang/replace\"><span class=\"kw2\">Replace</span></a><span class=\"br0\">(</span><a href=\"http://gambasdoc.org/help/lang/bin\"><span class=\"kw2\">Bin</span></a><span class=\"br0\">(</span>iCount<span class=\"br0\">)</span>, <span class=\"st0\">\"0\"</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a>   <span class=\"co1\">'If (as above) the result is Even then</span><br/>    sEvil <span class=\"sy0\">&amp;=</span> <a href=\"http://gambasdoc.org/help/lang/str\"><span class=\"kw2\">Str</span></a><span class=\"br0\">(</span>icount<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" \"</span>                       <span class=\"co1\">'Add it to sEvil</span><br/>    <a href=\"http://gambasdoc.org/help/lang/inc\"><span class=\"kw1\">Inc</span></a> iEvil                                        <span class=\"co1\">'Increase iEvil</span><br/>  <a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a> <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a><br/>  <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> Odd<span class=\"br0\">(</span><a href=\"http://gambasdoc.org/help/lang/len\"><span class=\"kw2\">Len</span></a><span class=\"br0\">(</span><a href=\"http://gambasdoc.org/help/lang/replace\"><span class=\"kw2\">Replace</span></a><span class=\"br0\">(</span><a href=\"http://gambasdoc.org/help/lang/bin\"><span class=\"kw2\">Bin</span></a><span class=\"br0\">(</span>iCount<span class=\"br0\">)</span>, <span class=\"st0\">\"0\"</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a>    <span class=\"co1\">'If (as above) the result is Odd then</span><br/>    sOdious <span class=\"sy0\">&amp;=</span> <a href=\"http://gambasdoc.org/help/lang/str\"><span class=\"kw2\">Str</span></a><span class=\"br0\">(</span>icount<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" \"</span>                     <span class=\"co1\">'Add it to sOdious</span><br/>    <a href=\"http://gambasdoc.org/help/lang/inc\"><span class=\"kw1\">Inc</span></a> iOdious                                      <span class=\"co1\">'Increase iOdious</span><br/>  <a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a> <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a><br/>  <a href=\"http://gambasdoc.org/help/lang/inc\"><span class=\"kw1\">Inc</span></a> iCount                                         <span class=\"co1\">'Increase iCount</span><br/><a href=\"http://gambasdoc.org/help/lang/until\"><span class=\"kw1\">Until</span></a> iEvil <span class=\"sy0\">=</span> <span class=\"nu0\">30</span> <a href=\"http://gambasdoc.org/help/lang/and\"><span class=\"kw5\">And</span></a> iOdious <span class=\"sy0\">=</span> <span class=\"nu0\">30</span>                    <span class=\"co1\">'Until both iEvil and iOdious = 30 then exit the loop</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>1st 30 Evil numbers =<span class=\"es0\">\\t</span>\"</span> <span class=\"sy0\">&amp;</span> sEvil            <span class=\"co1\">'Print Evil</span><br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <span class=\"st0\">\"1st 30 Odious numbers =<span class=\"es0\">\\t</span>\"</span> <span class=\"sy0\">&amp;</span> sOdious          <span class=\"co1\">'Print Odious</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "Go", "loc": 38, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math/bits\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Pop counts, powers of 3:\"</span><span class=\"sy1\">)</span><br/>    n <span class=\"sy2\">:=</span> <span class=\"kw4\">uint64</span><span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span> <span class=\"co1\">// 3^0</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"nu0\">30</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%d \"</span><span class=\"sy1\">,</span> bits<span class=\"sy3\">.</span>OnesCount64<span class=\"sy1\">(</span>n<span class=\"sy1\">))</span><br/>        n <span class=\"sy2\">*=</span> <span class=\"nu0\">3</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">()</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Evil numbers:\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">var</span> od <span class=\"sy1\">[</span><span class=\"nu0\">30</span><span class=\"sy1\">]</span><span class=\"kw4\">uint64</span><br/>    <span class=\"kw1\">var</span> ne<span class=\"sy1\">,</span> no <span class=\"kw4\">int</span><br/>    <span class=\"kw1\">for</span> n <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> ne<span class=\"sy3\">+</span>no &lt; <span class=\"nu0\">60</span><span class=\"sy1\">;</span> n<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> bits<span class=\"sy3\">.</span>OnesCount64<span class=\"sy1\">(</span>n<span class=\"sy1\">)</span>&amp;<span class=\"nu0\">1</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> ne &lt; <span class=\"nu0\">30</span> <span class=\"sy1\">{</span><br/>                fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%d \"</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>                ne<span class=\"sy2\">++</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> no &lt; <span class=\"nu0\">30</span> <span class=\"sy1\">{</span><br/>                od<span class=\"sy1\">[</span>no<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> n<br/>                no<span class=\"sy2\">++</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">()</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Odious numbers:\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> n <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> od <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%d \"</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">()</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 10, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Bits <span class=\"br0\">(</span>popCount<span class=\"br0\">)</span><br/>\u00a0<br/>printPops <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a> a<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integral\"><span class=\"kw4\">Integral</span></a> a<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>printPops title counts <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> title <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">30</span> counts<span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  printPops <span class=\"st0\">\"popcount \"</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> popCount <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:iterate\"><span class=\"kw3\">iterate</span></a> <span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">)</span><br/>  printPops <span class=\"st0\">\"evil     \"</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:even\"><span class=\"kw3\">even</span></a> <span class=\"sy0\">.</span> popCount<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"br0\">]</span> <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  printPops <span class=\"st0\">\"odious   \"</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:odd\"><span class=\"kw3\">odd</span></a> <span class=\"sy0\">.</span> popCount<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"br0\">]</span> <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "J", "loc": 3, "block": "<pre class=\"j highlighted_source\">countPopln=: +/\"<span class=\"nu0\">1</span>@#:<br/>isOdd=: <span class=\"nu0\">1</span> = <span class=\"nu0\">2</span>&amp;|<br/>isEven=: <span class=\"nu0\">0</span> = <span class=\"nu0\">2</span>&amp;|</pre>"}, {"lang": "Java", "loc": 56, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.math.BigInteger</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> PopCount <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"br0\">{</span> <span class=\"co1\">// with int</span><br/>\t    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"32-bit integer: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    <span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">20</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d \"</span>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">bitCount</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tn <span class=\"sy0\">*=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">{</span> <span class=\"co1\">// with long</span><br/>\t    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"64-bit integer: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    <span class=\"kw4\">long</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">30</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d \"</span>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Along+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Long</span></a>.<span class=\"me1\">bitCount</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tn <span class=\"sy0\">*=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">{</span> <span class=\"co1\">// with BigInteger</span><br/>\t    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"big integer  \u00a0: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> n <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ONE</span><span class=\"sy0\">;</span><br/>\t    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> three <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">30</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d \"</span>, n.<span class=\"me1\">bitCount</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tn <span class=\"sy0\">=</span> n.<span class=\"me1\">multiply</span><span class=\"br0\">(</span>three<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> od <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"nu0\">30</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> ne <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, no <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"evil  \u00a0: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> ne<span class=\"sy0\">+</span>no <span class=\"sy0\">&lt;</span> <span class=\"nu0\">60</span><span class=\"sy0\">;</span> n<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">bitCount</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>ne <span class=\"sy0\">&lt;</span> <span class=\"nu0\">30</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d \"</span>, n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t    ne<span class=\"sy0\">++;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>no <span class=\"sy0\">&lt;</span> <span class=\"nu0\">30</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t    od<span class=\"br0\">[</span>no<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"odious\u00a0: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n <span class=\"sy0\">:</span> od<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d \"</span>, n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 69, "block": "<pre class=\"javascript highlighted_source\"><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"co1\">// popCount\u00a0:: Int -&gt; Int</span><br/>    <span class=\"kw1\">const</span> popCount <span class=\"sy0\">=</span> n <span class=\"sy0\">=&gt;</span><br/>        foldl<span class=\"br0\">(</span><br/>            <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">+</span> <span class=\"br0\">(</span>x <span class=\"sy0\">===</span> <span class=\"st0\">'1'</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>            <span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>            splitOn<span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"sy0\">,</span> showIntAsBinary<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// GENERIC FUNCTIONS ------------------------------------------------------</span><br/>\u00a0<br/>    <span class=\"co1\">// (++)\u00a0:: [a] -&gt; [a] -&gt; [a]</span><br/>    <span class=\"kw1\">const</span> append <span class=\"sy0\">=</span> <span class=\"br0\">(</span>xs<span class=\"sy0\">,</span> ys<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> xs.<span class=\"me1\">concat</span><span class=\"br0\">(</span>ys<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// enumFromTo\u00a0:: Int -&gt; Int -&gt; [Int]</span><br/>    <span class=\"kw1\">const</span> enumFromTo <span class=\"sy0\">=</span> <span class=\"br0\">(</span>m<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        <span class=\"kw4\">Array</span>.<span class=\"me1\">from</span><span class=\"br0\">(</span><span class=\"br0\">{</span><br/>            length<span class=\"sy0\">:</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span>n <span class=\"sy0\">-</span> m<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>_<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> m <span class=\"sy0\">+</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// foldl\u00a0:: (b -&gt; a -&gt; b) -&gt; b -&gt; [a] -&gt; b</span><br/>    <span class=\"kw1\">const</span> foldl <span class=\"sy0\">=</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> xs.<span class=\"me1\">reduce</span><span class=\"br0\">(</span>f<span class=\"sy0\">,</span> a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// length\u00a0:: [a] -&gt; Int</span><br/>    <span class=\"kw1\">const</span> length <span class=\"sy0\">=</span> xs <span class=\"sy0\">=&gt;</span> xs.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/>    <span class=\"kw1\">const</span> map <span class=\"sy0\">=</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> xs.<span class=\"me1\">map</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// raise\u00a0:: Num -&gt; Int -&gt; Num</span><br/>    <span class=\"kw1\">const</span> raise <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">pow</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// showIntAsBinary\u00a0:: Int -&gt; String</span><br/>    <span class=\"kw1\">const</span> showIntAsBinary <span class=\"sy0\">=</span> n <span class=\"sy0\">=&gt;</span> n.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// splitOn\u00a0:: String -&gt; String -&gt; [String]</span><br/>    <span class=\"kw1\">const</span> splitOn <span class=\"sy0\">=</span> <span class=\"br0\">(</span>cs<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> xs.<span class=\"me1\">split</span><span class=\"br0\">(</span>cs<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// until\u00a0:: (a -&gt; Bool) -&gt; (a -&gt; a) -&gt; a -&gt; a</span><br/>    <span class=\"kw1\">const</span> until <span class=\"sy0\">=</span> <span class=\"br0\">(</span>p<span class=\"sy0\">,</span> f<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        let v <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span><br/>        while <span class=\"br0\">(</span><span class=\"sy0\">!</span>p<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"br0\">)</span> v <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> v<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// TEST -------------------------------------------------------------------</span><br/>\u00a0<br/>    <span class=\"co1\">// { popCounts\u00a0: [Int], evenThenOdd\u00a0: ([Int], [Int]) }</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">{</span><br/>        popCounts<span class=\"sy0\">:</span> map<span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> popCount<span class=\"br0\">(</span>raise<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> enumFromTo<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">30</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        evenThenOdd<span class=\"sy0\">:</span> until<span class=\"br0\">(</span><br/>                m <span class=\"sy0\">=&gt;</span> length<span class=\"br0\">(</span>m.<span class=\"me1\">evenOdd</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">30</span> <span class=\"sy0\">&amp;&amp;</span> length<span class=\"br0\">(</span>m.<span class=\"me1\">evenOdd</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">30</span><span class=\"sy0\">,</span><br/>                m <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">{</span><br/>                    x<span class=\"sy0\">:</span> m.<span class=\"me1\">x</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>                    evenOdd<span class=\"sy0\">:</span> popCount<span class=\"br0\">(</span>m.<span class=\"me1\">x</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">===</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span><br/>                        <span class=\"br0\">[</span>append<span class=\"br0\">(</span>m.<span class=\"me1\">evenOdd</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> m.<span class=\"me1\">x</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> m.<span class=\"me1\">evenOdd</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>                    <span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span>m.<span class=\"me1\">evenOdd</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> append<span class=\"br0\">(</span>m.<span class=\"me1\">evenOdd</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> m.<span class=\"me1\">x</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>                <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><br/>                    x<span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>                    evenOdd<span class=\"sy0\">:</span> <span class=\"br0\">[</span><br/>                        <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                        <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>                    <span class=\"br0\">]</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">)</span><br/>            .<span class=\"me1\">evenOdd</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 26, "block": "<pre class=\"text highlighted_source\">def popcount: <br/>  def bin: recurse( if . == 0 then empty else ./2 | floor end )\u00a0% 2;<br/>  [bin] | add;<br/>\u00a0<br/>def firstN(count; condition):<br/>  if count &gt; 0 then<br/>    if condition then ., (1+.| firstN(count-1; condition))<br/>    else (1+.) | firstN(count; condition) <br/>    end<br/>  else empty<br/>  end;<br/>\u00a0<br/>def task:<br/>  def pow(n): . as $m | reduce range(0;n) as $i (1; . * $m);<br/>\u00a0<br/>  \"The pop count of the first thirty powers of 3:\",<br/>   [range(0;30) as $n | 3 | pow($n) | popcount],<br/>\u00a0<br/>  \"The first thirty evil numbers:\",<br/>   [0 | firstN(30; (popcount\u00a0% 2) == 0)],<br/>\u00a0<br/>  \"The first thirty odious numbers:\",<br/>   [0 | firstN(30; (popcount\u00a0% 2) == 1)]<br/>;<br/>\u00a0<br/>task</pre>"}, {"lang": "Julia", "loc": 5, "block": "<pre class=\"text highlighted_source\">popcount(n) = sum(digits(n, 2))<br/>\u00a0<br/>println(\"First 3 ^ i, up to 29 pop. counts: \", join((popcount(3 ^ n) for n in 0:29), \", \"))<br/>println(\"Evil numbers: \", join(filter(x -&gt; iseven(popcount(x)), 0:59), \", \"))<br/>println(\"Odious numbers: \", join(filter(x -&gt; isodd(popcount(x)), 0:59), \", \"))</pre>"}, {"lang": "Kotlin", "loc": 40, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun popCount<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Long<span class=\"br0\">)</span> <span class=\"sy0\">=</span> when <span class=\"br0\">{</span><br/>    n <span class=\"sy0\">&lt;</span> 0L -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> IllegalArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"n must be non-negative\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a>   -<span class=\"sy0\">&gt;</span> java.<span class=\"me1\">lang</span>.<span class=\"me1\">Long</span>.<span class=\"me1\">bitCount</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"The population count of the first 30 powers of 3 are:\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> pow3 <span class=\"sy0\">=</span> 1L<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span>..<span class=\"nu0\">30</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        print<span class=\"br0\">(</span><span class=\"st0\">\"${popCount(pow3)} \"</span><span class=\"br0\">)</span><br/>        pow3 <span class=\"sy0\">*=</span> 3L<br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"The first thirty evil numbers are:\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> pc <span class=\"sy0\">=</span> popCount<span class=\"br0\">(</span>i.<span class=\"me1\">toLong</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>pc <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>           print<span class=\"br0\">(</span><span class=\"st0\">\"$i \"</span><span class=\"br0\">)</span><br/>           <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>++count <span class=\"sy0\">==</span> <span class=\"nu0\">30</span><span class=\"br0\">)</span> break<br/>        <span class=\"br0\">}</span><br/>        i++<br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"The first thirty odious numbers are:\"</span><span class=\"br0\">)</span><br/>    count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> pc <span class=\"sy0\">=</span> popCount<span class=\"br0\">(</span>i.<span class=\"me1\">toLong</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>pc <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            print<span class=\"br0\">(</span><span class=\"st0\">\"$i \"</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>++count <span class=\"sy0\">==</span> <span class=\"nu0\">30</span><span class=\"br0\">)</span> break<br/>        <span class=\"br0\">}</span><br/>        i++<br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span> <br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 43, "block": "<pre class=\"lua highlighted_source\"><span class=\"co1\">-- Take decimal number, return binary string</span><br/><span class=\"kw1\">function</span> dec2bin <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> bin<span class=\"sy0\">,</span> bit <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">while</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>        bit <span class=\"sy0\">=</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><br/>        n <span class=\"sy0\">=</span> <span class=\"kw3\">math.floor</span><span class=\"br0\">(</span>n <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        bin <span class=\"sy0\">=</span> bit <span class=\"sy0\">..</span> bin<br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> bin<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Take decimal number, return population count as number</span><br/><span class=\"kw1\">function</span> popCount <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> bin<span class=\"sy0\">,</span> count <span class=\"sy0\">=</span> dec2bin<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> pos <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> bin<span class=\"sy0\">:</span>len<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> bin<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span>pos<span class=\"sy0\">,</span> pos<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"1\"</span> <span class=\"kw1\">then</span> count <span class=\"sy0\">=</span> count <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> count<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Implement task requirements</span><br/><span class=\"kw1\">function</span> firstThirty <span class=\"br0\">(</span>mode<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> numStr<span class=\"sy0\">,</span> count<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> remainder <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">if</span> mode <span class=\"sy0\">==</span> <span class=\"st0\">\"Evil\"</span> <span class=\"kw1\">then</span> remainder <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">else</span> remainder <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">while</span> count <span class=\"sy0\">&lt;</span> <span class=\"nu0\">30</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> mode <span class=\"sy0\">==</span> <span class=\"st0\">\"3^x\"</span> <span class=\"kw1\">then</span><br/>            numStr <span class=\"sy0\">=</span> numStr <span class=\"sy0\">..</span> popCount<span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"sy0\">^</span> count<span class=\"br0\">)</span> <span class=\"sy0\">..</span> <span class=\"st0\">\" \"</span><br/>            count <span class=\"sy0\">=</span> count <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">else</span><br/>            <span class=\"kw1\">if</span> popCount<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> remainder <span class=\"kw1\">then</span><br/>                numStr <span class=\"sy0\">=</span> numStr <span class=\"sy0\">..</span> n <span class=\"sy0\">..</span> <span class=\"st0\">\" \"</span><br/>                count <span class=\"sy0\">=</span> count <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">end</span><br/>            n <span class=\"sy0\">=</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span>mode <span class=\"sy0\">..</span> <span class=\"st0\">\":\"</span> <span class=\"sy0\">,</span> numStr<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Main procedure</span><br/>firstThirty<span class=\"br0\">(</span><span class=\"st0\">\"3^x\"</span><span class=\"br0\">)</span><br/>firstThirty<span class=\"br0\">(</span><span class=\"st0\">\"Evil\"</span><span class=\"br0\">)</span><br/>firstThirty<span class=\"br0\">(</span><span class=\"st0\">\"Odious\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Mathematica", "loc": 25, "block": "<pre class=\"text highlighted_source\">popcount[n_Integer]\u00a0:= IntegerDigits[n, 2] // Total<br/>Print[\"population count of powers of 3\"]<br/>popcount[#] &amp; /@ (3^Range[0, 30])<br/>(*******)<br/>evilQ[n_Integer]\u00a0:= popcount[n] // EvenQ<br/>evilcount = 0;<br/>evillist = {};<br/>i = 0;<br/>While[evilcount &lt; 30,<br/> If[evilQ[i], AppendTo[evillist, i]; evilcount++];<br/> i++<br/> ]<br/>Print[\"first thirty evil numbers\"]<br/>evillist<br/>(*******)<br/>odiousQ[n_Integer]\u00a0:= popcount[n] // OddQ<br/>odiouscount = 0;<br/>odiouslist = {};<br/>i = 0;<br/>While[odiouscount &lt; 30,<br/> If[odiousQ[i], AppendTo[odiouslist, i]; odiouscount++];<br/> i++<br/> ]<br/>Print[\"first thirty odious numbers\"]<br/>odiouslist</pre>"}, {"lang": "Oforth", "loc": 12, "block": "<pre class=\"text highlighted_source\">: popcount(n)<br/>   0 while ( n ) [ n isOdd + n bitRight(1) -&gt;n ]\u00a0;<br/>\u00a0<br/>: test<br/>| i count |<br/>   30 seq map(#[ 3 swap 1- pow ]) map(#popcount) println<br/>\u00a0<br/>   0 -&gt;count<br/>   0 while( count 30 &lt;&gt; ) [ dup popcount isEven ifTrue: [ dup . count 1+ -&gt;count ] 1+ ] drop printcr<br/>\u00a0<br/>   0 -&gt;count<br/>   0 while( count 30 &lt;&gt; ) [ dup popcount isOdd ifTrue: [ dup . count 1+ -&gt;count ] 1+ ] drop\u00a0;</pre>"}, {"lang": "PARI/GP", "loc": 4, "block": "<pre class=\"parigp highlighted_source\"><span class=\"kw1\">vector</span><span class=\"br0\">(</span><span class=\"nu1\">30</span><span class=\"sy0\">,</span>n<span class=\"sy0\">,</span>hammingweight<span class=\"br0\">(</span><span class=\"nu1\">3</span><span class=\"sy0\">^</span><span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>od<span class=\"sy0\">=</span><span class=\"kw1\">select</span><span class=\"br0\">(</span>n<span class=\"sy0\">-&gt;</span>hammingweight<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">%</span><span class=\"nu2\">2</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu1\">0</span>..<span class=\"nu1\">100</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> ev<span class=\"sy0\">=</span><span class=\"kw1\">setminus</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu1\">0</span>..<span class=\"nu1\">100</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>od<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>ev<span class=\"br0\">[</span><span class=\"nu1\">1</span>..<span class=\"nu1\">30</span><span class=\"br0\">]</span><br/>od<span class=\"br0\">[</span><span class=\"nu1\">1</span>..<span class=\"nu1\">30</span><span class=\"br0\">]</span></pre>"}, {"lang": "Pascal", "loc": 82, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">unit</span> popcount<span class=\"sy1\">;</span><br/><span class=\"co2\">{$IFDEF FPC}</span><br/>   <span class=\"co2\">{$MODE DELPHI}</span><br/>   <span class=\"co2\">{$OPTIMIZATION ON,ASMCSE,CSE,PEEPHOLE}</span><br/>   <span class=\"co2\">{$Smartlink OFF}</span><br/><span class=\"co2\">{$ENDIF}</span><br/>\u00a0<br/><span class=\"kw1\">interface</span><br/>  <span class=\"kw1\">function</span> popcnt<span class=\"br0\">(</span>n<span class=\"sy1\">:</span>Uint64<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"kw4\">integer</span><span class=\"sy1\">;</span><span class=\"kw1\">overload</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">function</span> popcnt<span class=\"br0\">(</span>n<span class=\"sy1\">:</span>Uint32<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"kw4\">integer</span><span class=\"sy1\">;</span><span class=\"kw1\">overload</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">function</span> popcnt<span class=\"br0\">(</span>n<span class=\"sy1\">:</span>Uint16<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"kw4\">integer</span><span class=\"sy1\">;</span><span class=\"kw1\">overload</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">function</span> popcnt<span class=\"br0\">(</span>n<span class=\"sy1\">:</span>Uint8<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"kw4\">integer</span><span class=\"sy1\">;</span><span class=\"kw1\">overload</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">implementation</span><br/><span class=\"kw1\">const</span><br/><span class=\"co1\">//K1  = $0101010101010101;</span><br/>  K33  <span class=\"sy3\">=</span> <span class=\"re0\">$3333333333333333</span><span class=\"sy1\">;</span><br/>  K55  <span class=\"sy3\">=</span> <span class=\"re0\">$5555555555555555</span><span class=\"sy1\">;</span><br/>  KF1 <span class=\"sy3\">=</span> <span class=\"re0\">$0F0F0F0F0F0F0F0F</span><span class=\"sy1\">;</span><br/>  KF2 <span class=\"sy3\">=</span> <span class=\"re0\">$00FF00FF00FF00FF</span><span class=\"sy1\">;</span><br/>  KF4 <span class=\"sy3\">=</span> <span class=\"re0\">$0000FFFF0000FFFF</span><span class=\"sy1\">;</span><br/>  KF8 <span class=\"sy3\">=</span> <span class=\"re0\">$00000000FFFFFFFF</span><span class=\"sy1\">;</span><br/><span class=\"coMULTI\">{<br/>function popcnt64(n:Uint64):integer;<br/>begin<br/>  n\u00a0:= n- (n shr 1) AND K55;<br/>  n\u00a0:= (n AND K33)+ ((n shr 2) AND K33);<br/>  n\u00a0:= (n + (n shr 4)) AND KF1;<br/>  n\u00a0:= (n*k1) SHR 56;<br/>  result\u00a0:= n;<br/>end;<br/>}</span><br/><span class=\"kw1\">function</span> popcnt<span class=\"br0\">(</span>n<span class=\"sy1\">:</span>Uint64<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"kw4\">integer</span><span class=\"sy1\">;</span><span class=\"kw1\">overload</span><span class=\"sy1\">;</span><br/><span class=\"co1\">// on Intel Haswell 2x faster for fpc 32-Bit</span><br/><span class=\"kw1\">begin</span><br/>  n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>n <span class=\"kw3\">AND</span> K55<span class=\"br0\">)</span><span class=\"sy3\">+</span><span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"kw1\">shr</span>  <span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"kw3\">AND</span> K55<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>n <span class=\"kw3\">AND</span> K33<span class=\"br0\">)</span><span class=\"sy3\">+</span><span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"kw1\">shr</span>  <span class=\"nu0\">2</span><span class=\"br0\">)</span>  <span class=\"kw3\">AND</span> K33<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>n <span class=\"kw3\">AND</span> KF1<span class=\"br0\">)</span><span class=\"sy3\">+</span><span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"kw1\">shr</span>  <span class=\"nu0\">4</span><span class=\"br0\">)</span>  <span class=\"kw3\">AND</span> KF1<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>n <span class=\"kw3\">AND</span> KF2<span class=\"br0\">)</span><span class=\"sy3\">+</span><span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"kw1\">shr</span>  <span class=\"nu0\">8</span><span class=\"br0\">)</span>  <span class=\"kw3\">AND</span> KF2<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>n <span class=\"kw3\">AND</span> KF4<span class=\"br0\">)</span><span class=\"sy3\">+</span><span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"kw1\">shr</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span>  <span class=\"kw3\">AND</span> KF4<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>n <span class=\"kw3\">AND</span> KF8<span class=\"br0\">)</span><span class=\"sy3\">+</span> <span class=\"br0\">(</span>n <span class=\"kw1\">shr</span> <span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> n<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> popcnt<span class=\"br0\">(</span>n<span class=\"sy1\">:</span>Uint32<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"kw4\">integer</span><span class=\"sy1\">;</span><span class=\"kw1\">overload</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  c<span class=\"sy1\">,</span>b <span class=\"sy1\">:</span> NativeUint<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  b <span class=\"sy1\">:</span><span class=\"sy3\">=</span> n<span class=\"sy1\">;</span><br/>  c <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>b <span class=\"kw1\">shr</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw3\">AND</span> NativeUint<span class=\"br0\">(</span>K55<span class=\"br0\">)</span><span class=\"sy1\">;</span>   b <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>b <span class=\"kw3\">AND</span> NativeUint<span class=\"br0\">(</span>K55<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy3\">+</span>C<span class=\"sy1\">;</span><br/>  c <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>b <span class=\"kw1\">shr</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>  <span class=\"kw3\">AND</span> NativeUint<span class=\"br0\">(</span>K33<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>b <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>b <span class=\"kw3\">AND</span> NativeUint<span class=\"br0\">(</span>K33<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy3\">+</span>C<span class=\"sy1\">;</span><br/>  c<span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>b <span class=\"kw1\">shr</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span>  <span class=\"kw3\">AND</span> NativeUint<span class=\"br0\">(</span>KF1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> b <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>b <span class=\"kw3\">AND</span> NativeUint<span class=\"br0\">(</span>KF1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy3\">+</span>c<span class=\"sy1\">;</span><br/>  c <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>b <span class=\"kw1\">shr</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span>  <span class=\"kw3\">AND</span> NativeUint<span class=\"br0\">(</span>KF2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>b <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>b <span class=\"kw3\">AND</span> NativeUint<span class=\"br0\">(</span>KF2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy3\">+</span>c<span class=\"sy1\">;</span><br/>  c <span class=\"sy1\">:</span><span class=\"sy3\">=</span> b <span class=\"kw1\">shr</span> <span class=\"nu0\">16</span><span class=\"sy1\">;</span> b <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>b <span class=\"kw3\">AND</span> NativeUint<span class=\"br0\">(</span>KF4<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy3\">+</span> C<span class=\"sy1\">;</span><br/>  result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> b<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> popcnt<span class=\"br0\">(</span>n<span class=\"sy1\">:</span>Uint16<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"kw4\">integer</span><span class=\"sy1\">;</span><span class=\"kw1\">overload</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  c<span class=\"sy1\">,</span>b <span class=\"sy1\">:</span> NativeUint<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  b <span class=\"sy1\">:</span><span class=\"sy3\">=</span> n<span class=\"sy1\">;</span><br/>  c <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>b <span class=\"kw1\">shr</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw3\">AND</span> NativeUint<span class=\"br0\">(</span>K55<span class=\"br0\">)</span><span class=\"sy1\">;</span>  b <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>b <span class=\"kw3\">AND</span> NativeUint<span class=\"br0\">(</span>K55<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy3\">+</span>C<span class=\"sy1\">;</span><br/>  c <span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"br0\">(</span><span class=\"br0\">(</span>b <span class=\"kw1\">shr</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>  <span class=\"kw3\">AND</span> NativeUint<span class=\"br0\">(</span>K33<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> b <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>b <span class=\"kw3\">AND</span> NativeUint<span class=\"br0\">(</span>K33<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy3\">+</span>C<span class=\"sy1\">;</span><br/>  c<span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>b <span class=\"kw1\">shr</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span>  <span class=\"kw3\">AND</span> NativeUint<span class=\"br0\">(</span>KF1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> b <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>b <span class=\"kw3\">AND</span> NativeUint<span class=\"br0\">(</span>KF1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy3\">+</span>c<span class=\"sy1\">;</span><br/>  c <span class=\"sy1\">:</span><span class=\"sy3\">=</span>  b <span class=\"kw1\">shr</span> <span class=\"nu0\">8</span><span class=\"sy1\">;</span> b <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>b <span class=\"kw3\">AND</span> NativeUint<span class=\"br0\">(</span>KF2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy3\">+</span>c<span class=\"sy1\">;</span><br/>  result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> b<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> popcnt<span class=\"br0\">(</span>n<span class=\"sy1\">:</span>Uint8<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"kw4\">integer</span><span class=\"sy1\">;</span><span class=\"kw1\">overload</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  c<span class=\"sy1\">,</span>b <span class=\"sy1\">:</span> NativeUint<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  b <span class=\"sy1\">:</span><span class=\"sy3\">=</span> n<span class=\"sy1\">;</span><br/>  c <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>b <span class=\"kw1\">shr</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw3\">AND</span> NativeUint<span class=\"br0\">(</span>K55<span class=\"br0\">)</span><span class=\"sy1\">;</span>  b <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>b <span class=\"kw3\">AND</span> NativeUint<span class=\"br0\">(</span>K55<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy3\">+</span>C<span class=\"sy1\">;</span><br/>  c <span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"br0\">(</span><span class=\"br0\">(</span>b <span class=\"kw1\">shr</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>  <span class=\"kw3\">AND</span> NativeUint<span class=\"br0\">(</span>K33<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>b <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>b <span class=\"kw3\">AND</span> NativeUint<span class=\"br0\">(</span>K33<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy3\">+</span>C<span class=\"sy1\">;</span><br/>  c<span class=\"sy1\">:</span><span class=\"sy3\">=</span>   b <span class=\"kw1\">shr</span> <span class=\"nu0\">4</span><span class=\"sy1\">;</span><br/>  result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>b <span class=\"kw3\">AND</span> NativeUint<span class=\"br0\">(</span>KF1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy3\">+</span>c<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">Begin</span><br/><span class=\"kw1\">End</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 33, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> population_count <span class=\"br0\">{</span> <br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"argument can't be negative\"</span> <span class=\"kw1\">if</span> <span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$c</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$c</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span> <span class=\"re0\">$n</span> <span class=\"sy0\">&gt;&gt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>        <span class=\"re0\">$c</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$n</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <br/>    <span class=\"br0\">}</span> <br/>    <span class=\"re0\">$c</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st_h\">' '</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> population_count<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">**</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">30</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">sub</span> evil <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> <span class=\"re0\">$i</span><span class=\"sy0\">++</span> <span class=\"kw1\">while</span> population_count<span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">++</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> odious <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> <span class=\"re0\">$i</span><span class=\"sy0\">++</span> <span class=\"kw1\">until</span> population_count<span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">++</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$evil</span><span class=\"sy0\">,</span> <span class=\"re0\">$odious</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>evil<span class=\"sy0\">,</span> odious<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">@evil</span><span class=\"sy0\">,</span> <span class=\"re0\">@odious</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">30</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@evil</span><span class=\"sy0\">,</span> <span class=\"re0\">$evil</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@odious</span><span class=\"sy0\">,</span> <span class=\"re0\">$odious</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"Evil \u00a0:\u00a0%s<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st_h\">' '</span><span class=\"sy0\">,</span> <span class=\"re0\">@evil</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"Odious:\u00a0%s<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st_h\">' '</span><span class=\"sy0\">,</span> <span class=\"re0\">@odious</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 5, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> population<span class=\"sy0\">-</span>count<span class=\"br0\">(</span>Int <span class=\"re0\">$n</span> <span class=\"kw1\">where</span> <span class=\"sy0\">*</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"re0\">$n</span><span class=\"sy0\">.</span><span class=\"me1\">base</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"kw3\">map</span> <span class=\"re0\">&amp;population</span><span class=\"sy0\">-</span>count<span class=\"sy0\">,</span> <span class=\"nu0\">3</span> \u00ab<span class=\"sy0\">**</span>\u00ab\u00a0<span class=\"sy0\">^</span><span class=\"nu0\">30</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"Evil: \"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"kw3\">grep</span> <span class=\"br0\">{</span> population<span class=\"sy0\">-</span>count<span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"br0\">)</span> <span class=\"sy0\">%%</span> <span class=\"nu0\">2</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"nu0\">30</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"Odious: \"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"kw3\">grep</span> <span class=\"br0\">{</span> population<span class=\"sy0\">-</span>count<span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"br0\">)</span>  <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"nu0\">30</span><span class=\"br0\">]</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 29, "block": "<pre class=\"text highlighted_source\">function pop_count(atom n)<br/>    if n&lt;0 then\u00a0?9/0 end if<br/>    integer res = 0<br/>    while n!=0 do<br/>        res += and_bits(n,1)<br/>        n = floor(n/2)<br/>    end while<br/>    return res<br/>end function<br/>\u00a0<br/>sequence s = {}<br/>for i=0 to 29 do<br/>    s &amp;= pop_count(power(3,i))<br/>end for<br/>puts(1,\"3^x pop_counts:\")\u00a0?s<br/>\u00a0<br/>procedure eo(integer b0, string name)<br/>    integer k=0, l=1<br/>    while l&lt;=30 do<br/>        if and_bits(pop_count(k),1)=b0 then<br/>            s[l] = k<br/>            l += 1<br/>        end if<br/>        k += 1<br/>    end while<br/>    puts(1,name&amp;\" numbers:\")\u00a0?s<br/>end procedure<br/>eo(0,\"  evil\")<br/>eo(1,\"odious\")</pre>"}, {"lang": "PicoLisp", "loc": 26, "block": "<pre class=\"text highlighted_source\">(de popz (N)<br/>   (cnt<br/>      '((N) (= \"1\" N))<br/>      (chop (bin N)) ) )<br/>\u00a0<br/>(println<br/>   'pops:<br/>   (mapcar<br/>      '((N) (popz (** 3 N)))<br/>      (range 0 29) ) )<br/>(setq N -1)<br/>(println<br/>   'evil:<br/>   (make<br/>      (for (C 0 (&gt; 30 C))<br/>         (unless (bit? 1 (popz (inc 'N)))<br/>            (link N)<br/>            (inc 'C) ) ) ) )<br/>(setq N -1)<br/>(println<br/>   'odio:<br/>   (make<br/>      (for (C 0 (&gt; 30 C))<br/>         (when (bit? 1 (popz (inc 'N)))<br/>            (link N)<br/>            (inc 'C) ) ) ) )</pre>"}, {"lang": "PHP", "loc": 70, "block": "<pre class=\"php highlighted_source\">\u00a0<br/><span class=\"kw2\">function</span> convertToBinary<span class=\"br0\">(</span><span class=\"re0\">$integer</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$binary</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$quotient</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>int<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"re0\">$integer</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$binary</span> <span class=\"sy0\">.=</span> <span class=\"re0\">$integer</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$integer</span> <span class=\"sy0\">=</span> <span class=\"re0\">$quotient</span><span class=\"sy0\">;</span>    <br/>    <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"re0\">$quotient</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$binary</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">function</span> getPopCount<span class=\"br0\">(</span><span class=\"re0\">$integer</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$binary</span> <span class=\"sy0\">=</span> convertToBinary<span class=\"br0\">(</span><span class=\"re0\">$integer</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$offset</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$popCount</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$pos</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/strpos\"><span class=\"kw3\">strpos</span></a><span class=\"br0\">(</span><span class=\"re0\">$binary</span><span class=\"sy0\">,</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$offset</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$pos</span> <span class=\"sy0\">!==</span> <span class=\"kw4\">FALSE</span><span class=\"br0\">)</span> <span class=\"re0\">$popCount</span><span class=\"sy0\">++;</span><br/>        <span class=\"re0\">$offset</span> <span class=\"sy0\">=</span> <span class=\"re0\">$pos</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"re0\">$pos</span> <span class=\"sy0\">!==</span> <span class=\"kw4\">FALSE</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$popCount</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">function</span> print3PowPopCounts<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$p</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$p</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">30</span><span class=\"sy0\">;</span> <span class=\"re0\">$p</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">echo</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">.</span> getPopCount<span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"sy0\">**</span> <span class=\"re0\">$p</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">function</span> printFirst30Evil<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$counter</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$pops</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"re0\">$pops</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">30</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$popCount</span> <span class=\"sy0\">=</span> getPopCount<span class=\"br0\">(</span><span class=\"re0\">$counter</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$popCount</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>  <span class=\"br0\">{</span><br/>            <span class=\"kw1\">echo</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">.</span> <span class=\"re0\">$counter</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">$pops</span><span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"re0\">$counter</span><span class=\"sy0\">++;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">function</span> printFirst30Odious<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$counter</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$pops</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"re0\">$pops</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">30</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$popCount</span> <span class=\"sy0\">=</span> getPopCount<span class=\"br0\">(</span><span class=\"re0\">$counter</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$popCount</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>  <span class=\"br0\">{</span><br/>            <span class=\"kw1\">echo</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">.</span> <span class=\"re0\">$counter</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">$pops</span><span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"re0\">$counter</span><span class=\"sy0\">++;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">echo</span> <span class=\"st0\">\"3 ^ x pop counts:\"</span><span class=\"sy0\">;</span><br/>print3PowPopCounts<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">echo</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>first 30 evil numbers:\"</span><span class=\"sy0\">;</span><br/>printFirst30Evil<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">echo</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>first 30 odious numbers:\"</span><span class=\"sy0\">;</span><br/>printFirst30Odious<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 8, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> pop<span class=\"sy0\">-</span>count<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">[</span>Convert<span class=\"br0\">]</span>::ToString<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.toCharArray<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw3\">where</span> <span class=\"br0\">{</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"kw4\">-eq</span> <span class=\"st0\">'1'</span><span class=\"br0\">}</span><span class=\"br0\">)</span>.count <br/><span class=\"br0\">}</span><br/><span class=\"st0\">\"pop_count 3^n: $(1..29 | foreach -Begin {$n = 1; (pop-count $n)} -Process {$n = 3*$n; (pop-count $n)} )\"</span><br/><span class=\"st0\">\"even pop_count: $($m = $n = 0; while($m -lt 30) {if(0 -eq ((pop-count $n)%2)) {$m += 1; $n}; $n += 1} )\"</span><br/><span class=\"st0\">\"odd pop_count: $($m = $n = 0; while($m -lt 30) {if(1 -eq ((pop-count $n)%2)) {$m += 1; $n}; $n += 1} )\"</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 16, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">def</span> popcount<span class=\"br0\">(</span>n<span class=\"br0\">)</span>: <span class=\"kw1\">return</span> bin<span class=\"br0\">(</span>n<span class=\"br0\">)</span>.<span class=\"me1\">count</span><span class=\"br0\">(</span><span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><br/>... <br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"br0\">[</span>popcount<span class=\"br0\">(</span><span class=\"nu0\">3</span>**i<span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">30</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">13</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"sy0\">,</span> <span class=\"nu0\">14</span><span class=\"sy0\">,</span> <span class=\"nu0\">15</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"sy0\">,</span> <span class=\"nu0\">14</span><span class=\"sy0\">,</span> <span class=\"nu0\">14</span><span class=\"sy0\">,</span> <span class=\"nu0\">17</span><span class=\"sy0\">,</span> <span class=\"nu0\">17</span><span class=\"sy0\">,</span> <span class=\"nu0\">20</span><span class=\"sy0\">,</span> <span class=\"nu0\">19</span><span class=\"sy0\">,</span> <span class=\"nu0\">22</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"sy0\">,</span> <span class=\"nu0\">18</span><span class=\"sy0\">,</span> <span class=\"nu0\">24</span><span class=\"sy0\">,</span> <span class=\"nu0\">30</span><span class=\"sy0\">,</span> <span class=\"nu0\">25</span><span class=\"sy0\">,</span> <span class=\"nu0\">25</span><span class=\"br0\">]</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> evil<span class=\"sy0\">,</span> odious<span class=\"sy0\">,</span> i <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">while</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>evil<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">30</span> <span class=\"kw1\">or</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>odious<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">30</span>:<br/>...     <span class=\"me1\">p</span> <span class=\"sy0\">=</span> popcount<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>...     <span class=\"kw1\">if</span> p\u00a0% <span class=\"nu0\">2</span>: odious.<span class=\"me1\">append</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>...     <span class=\"kw1\">else</span>: evil.<span class=\"me1\">append</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>...     <span class=\"me1\">i</span> +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>... <br/><span class=\"sy0\">&gt;&gt;&gt;</span> evil<span class=\"br0\">[</span>:<span class=\"nu0\">30</span><span class=\"br0\">]</span><br/><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">12</span><span class=\"sy0\">,</span> <span class=\"nu0\">15</span><span class=\"sy0\">,</span> <span class=\"nu0\">17</span><span class=\"sy0\">,</span> <span class=\"nu0\">18</span><span class=\"sy0\">,</span> <span class=\"nu0\">20</span><span class=\"sy0\">,</span> <span class=\"nu0\">23</span><span class=\"sy0\">,</span> <span class=\"nu0\">24</span><span class=\"sy0\">,</span> <span class=\"nu0\">27</span><span class=\"sy0\">,</span> <span class=\"nu0\">29</span><span class=\"sy0\">,</span> <span class=\"nu0\">30</span><span class=\"sy0\">,</span> <span class=\"nu0\">33</span><span class=\"sy0\">,</span> <span class=\"nu0\">34</span><span class=\"sy0\">,</span> <span class=\"nu0\">36</span><span class=\"sy0\">,</span> <span class=\"nu0\">39</span><span class=\"sy0\">,</span> <span class=\"nu0\">40</span><span class=\"sy0\">,</span> <span class=\"nu0\">43</span><span class=\"sy0\">,</span> <span class=\"nu0\">45</span><span class=\"sy0\">,</span> <span class=\"nu0\">46</span><span class=\"sy0\">,</span> <span class=\"nu0\">48</span><span class=\"sy0\">,</span> <span class=\"nu0\">51</span><span class=\"sy0\">,</span> <span class=\"nu0\">53</span><span class=\"sy0\">,</span> <span class=\"nu0\">54</span><span class=\"sy0\">,</span> <span class=\"nu0\">57</span><span class=\"sy0\">,</span> <span class=\"nu0\">58</span><span class=\"br0\">]</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> odious<span class=\"br0\">[</span>:<span class=\"nu0\">30</span><span class=\"br0\">]</span><br/><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"sy0\">,</span> <span class=\"nu0\">13</span><span class=\"sy0\">,</span> <span class=\"nu0\">14</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"sy0\">,</span> <span class=\"nu0\">19</span><span class=\"sy0\">,</span> <span class=\"nu0\">21</span><span class=\"sy0\">,</span> <span class=\"nu0\">22</span><span class=\"sy0\">,</span> <span class=\"nu0\">25</span><span class=\"sy0\">,</span> <span class=\"nu0\">26</span><span class=\"sy0\">,</span> <span class=\"nu0\">28</span><span class=\"sy0\">,</span> <span class=\"nu0\">31</span><span class=\"sy0\">,</span> <span class=\"nu0\">32</span><span class=\"sy0\">,</span> <span class=\"nu0\">35</span><span class=\"sy0\">,</span> <span class=\"nu0\">37</span><span class=\"sy0\">,</span> <span class=\"nu0\">38</span><span class=\"sy0\">,</span> <span class=\"nu0\">41</span><span class=\"sy0\">,</span> <span class=\"nu0\">42</span><span class=\"sy0\">,</span> <span class=\"nu0\">44</span><span class=\"sy0\">,</span> <span class=\"nu0\">47</span><span class=\"sy0\">,</span> <span class=\"nu0\">49</span><span class=\"sy0\">,</span> <span class=\"nu0\">50</span><span class=\"sy0\">,</span> <span class=\"nu0\">52</span><span class=\"sy0\">,</span> <span class=\"nu0\">55</span><span class=\"sy0\">,</span> <span class=\"nu0\">56</span><span class=\"sy0\">,</span> <span class=\"nu0\">59</span><span class=\"br0\">]</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> </pre>"}, {"lang": "Racket", "loc": 41, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>;; Positive version from \"popcount_4\" in:<br/>;;   https://en.wikipedia.org/wiki/Hamming_weight#Efficient_implementation<br/>;; negative version follows R6RS definition documented in:<br/>;;   http://docs.racket-lang.org/r6rs/r6rs-lib-std/r6rs-lib-Z-H-12.html?q=bitwise-bit#node_idx_1074<br/>(define (population-count n)<br/>  (if (negative? n)<br/>      (bitwise-not (population-count (bitwise-not n)))<br/>      (let inr ((x n) (rv 0))<br/>        (if (= x 0) rv (inr (bitwise-and x (sub1 x)) (add1 rv))))))<br/>\u00a0<br/>(define (evil? x)<br/>  (and (not (negative? x))<br/>       (even? (population-count x))))<br/>\u00a0<br/>(define (odious? x)<br/>  (and (positive? x)<br/>       (odd? (population-count x))))<br/>\u00a0<br/>(define tasks<br/>  (list<br/>   \"display the pop count of the 1st thirty powers of 3 (3^0, 3^1, 3^2, 3^3, 3^4, ...).\"<br/>   (for/list ((i (in-range 30))) (population-count (expt 3 i)))<br/>   \"display the 1st thirty evil numbers.\"<br/>   (for/list ((_ (in-range 30)) (e (sequence-filter evil? (in-naturals)))) e)<br/>   \"display the 1st thirty odious numbers.\"<br/>   (for/list ((_ (in-range 30)) (o (sequence-filter odious? (in-naturals)))) o)))<br/>\u00a0<br/>(for-each displayln tasks)<br/>\u00a0<br/>(module+ test<br/>  (require rackunit)<br/>  (check-equal?<br/>   (for/list ((p (sequence-map population-count (in-range 16)))) p)<br/>   '(0 1 1 2 1 2 2 3 1 2 2 3 2 3 3 4))  <br/>  (check-true (evil? 0) \"0 has just *got* to be evil\")<br/>  (check-true (evil? #b011011011) \"six bits... truly evil\")<br/>  (check-false (evil? #b1011011011) \"seven bits, that's odd!\")  <br/>  (check-true (odious? 1) \"the least odious number\")<br/>  (check-true (odious? #b1011011011) \"seven (which is odd) bits\")<br/>  (check-false (odious? #b011011011) \"six bits... is evil\"))</pre>"}, {"lang": "REXX", "loc": 31, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program counts the number of \"one\" bits in the binary version of a decimal number*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 and also generates a specific number of  EVIL and ODIOUS  numbers.*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> N B <span class=\"sy0\">.</span>                                  <span class=\"coMULTI\">/*get optional arguments from the C.L. */</span><br/><span class=\"kw1\">if</span> N==<span class=\"st0\">''</span>  <span class=\"sy0\">|</span>  N==<span class=\"st0\">\",\"</span>   <span class=\"kw3\">then</span> N=<span class=\"nu0\">30</span>                  <span class=\"coMULTI\">/*N not specified?   Then use default. */</span><br/><span class=\"kw1\">if</span> B==<span class=\"st0\">''</span>  <span class=\"sy0\">|</span>  B==<span class=\"st0\">\",\"</span>   <span class=\"kw3\">then</span> B= <span class=\"nu0\">3</span>                  <span class=\"coMULTI\">/*B  \"      \"          \"   \"      \"    */</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">2000</span>                              <span class=\"coMULTI\">/*be able to handle  gihugeic  numbers.*/</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"kw6\">max</span><span class=\"br0\">(</span><span class=\"nu0\">20</span>, <span class=\"kw6\">length</span><span class=\"br0\">(</span>B<span class=\"sy0\">**</span>N<span class=\"br0\">)</span> <span class=\"br0\">)</span>            <span class=\"coMULTI\">/*whittle the  precision  down to size.*/</span><br/>$=                                               <span class=\"coMULTI\">/* [\u2191]  a little calculation for sizing*/</span><br/>     <span class=\"kw1\">do</span> j=<span class=\"nu0\">0</span>  <span class=\"kw2\">for</span>  N;   $=$ popcount<span class=\"br0\">(</span>B<span class=\"sy0\">**</span>j<span class=\"br0\">)</span>        <span class=\"coMULTI\">/*generate N popCounts for some powers.*/</span><br/>     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span>                                 <span class=\"coMULTI\">/* [\u2191]  append popCount to the $ list. */</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  display popcounts of \"3\" powers*/</span><br/><span class=\"kw1\">call</span> showList  <span class=\"st0\">'popcounts of the powers of'</span>  B   <span class=\"coMULTI\">/*display the list with a header/title.*/</span><br/>\u00a0<br/>     <span class=\"kw1\">do</span> j=<span class=\"nu0\">0</span>  <span class=\"kw2\">until</span>  #<span class=\"sy0\">&gt;</span>=N                         <span class=\"coMULTI\">/*generate   N   evil  numbers.        */</span><br/>     <span class=\"kw1\">if</span> popCount<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">//</span> <span class=\"nu0\">2</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>           <span class=\"coMULTI\">/*if  odd population count, skip it.   */</span><br/>     #=# + <span class=\"nu0\">1</span>;       $=$ j                        <span class=\"coMULTI\">/*bump evil # count;  add it to $ list.*/</span><br/>     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span>                                 <span class=\"coMULTI\">/* [\u2191]  build a list of evil numbers.  */</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  display the evil number list.  */</span><br/><span class=\"kw1\">call</span> showList  <span class=\"st0\">'evil numbers'</span>                    <span class=\"coMULTI\">/*display the  $  list with a header.  */</span><br/>\u00a0<br/>     <span class=\"kw1\">do</span> j=<span class=\"nu0\">0</span>  <span class=\"kw2\">until</span>  #<span class=\"sy0\">&gt;</span>=N                         <span class=\"coMULTI\">/*generate   N   odious  numbers.      */</span><br/>     <span class=\"kw1\">if</span> popCount<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">//</span> <span class=\"nu0\">2</span> ==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>       <span class=\"coMULTI\">/*if even population count, then skip. */</span><br/>     #=# + <span class=\"nu0\">1</span>;       $=$ j                        <span class=\"coMULTI\">/*bump odious # count;  add to $ list. */</span><br/>     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span>                                 <span class=\"coMULTI\">/* [\u2191]  build a list of odious numbers.*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  display the odious number list.*/</span><br/><span class=\"kw1\">call</span> showList  <span class=\"st0\">'odious numbers'</span>                  <span class=\"coMULTI\">/*display the   $  list with a header. */</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>d2b:      <span class=\"kw1\">return</span> <span class=\"kw6\">word</span><span class=\"br0\">(</span> <span class=\"kw6\">strip</span><span class=\"br0\">(</span> <span class=\"kw6\">x2b</span><span class=\"br0\">(</span> <span class=\"kw6\">d2x</span><span class=\"br0\">(</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span>, <span class=\"st0\">'L'</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span>  <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>        <span class=\"coMULTI\">/*dec \u2500\u2500\u25ba bin.*/</span><br/>popCount: <span class=\"kw1\">return</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span> <span class=\"kw6\">space</span><span class=\"br0\">(</span> <span class=\"kw6\">translate</span><span class=\"br0\">(</span> d2b<span class=\"br0\">(</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>, , <span class=\"nu0\">0</span><span class=\"br0\">)</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>       <span class=\"coMULTI\">/*count ones. */</span><br/>showList: <span class=\"kw1\">say</span>;   <span class=\"kw1\">say</span> <span class=\"st0\">'The 1st'</span>   N   <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"st0\">':'</span>;   <span class=\"kw1\">say</span> <span class=\"kw6\">strip</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span>;     #=<span class=\"nu0\">0</span>;     $=;    <span class=\"kw1\">return</span></pre>"}, {"lang": "Ring", "loc": 66, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Population count<br/>\u00a0<br/>load \"stdlib.ring\"<br/>n = 0<br/>neven = 0<br/>nodd = 0<br/>binodd = []<br/>bineven = []<br/>binpow = []<br/>while true<br/>        n = n + 1<br/>        numb = 0<br/>        bin = binarydigits(n)<br/>        for nr = 1 to len(bin)<br/>             if bin[nr] = \"1\"<br/>                numb = numb + 1<br/>             ok<br/>        next<br/>        if numb\u00a0% 2 = 0<br/>           neven = neven + 1<br/>           if neven &lt; 31<br/>              add(bineven, n)<br/>           ok<br/>        else<br/>           nodd = nodd + 1<br/>           if nodd &lt; 31<br/>              add(binodd, n)<br/>           ok<br/>        ok<br/>        if neven &gt; 30 and nodd &gt; 30<br/>           exit<br/>        ok<br/>end<br/>\u00a0<br/>see \"3^x:\" + nl<br/>for n = 0 to 29<br/>      numb = 0<br/>      bin = binarydigits(pow(3,n))<br/>      for nr = 1 to len(bin)<br/>            if bin[nr] = \"1\"<br/>                numb = numb + 1<br/>            ok<br/>      next<br/>      add(binpow, numb)<br/>next<br/>showarray(binpow)<br/>see nl<br/>\u00a0<br/>see \"Evil numbers\u00a0:\" + nl<br/>showarray(bineven)<br/>see nl<br/>see \"Odious numbers:\" + nl<br/>showarray(binodd)  <br/>see nl<br/>\u00a0<br/>func showarray(vect)<br/>        see \"[\"<br/>        svect = \"\"<br/>        for n = 1 to len(vect)<br/>              svect = svect + vect[n] + \", \"<br/>        next<br/>        svect = left(svect, len(svect) - 2)<br/>        see svect<br/>        see \"]\" + nl<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 15, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> <span class=\"kw3\">Integer</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> popcount<br/>    digits<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">count</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>     <span class=\"co1\">#pre Ruby 2.4: self.to_s(2).count(\"1\")</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> evil?<br/>    <span class=\"kw2\">self</span> <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> popcount.<span class=\"me1\">even</span>?<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"Powers of 3:\"</span>,  <span class=\"br0\">(</span><span class=\"nu0\">0</span>...<span class=\"nu0\">30</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">**</span>n<span class=\"br0\">)</span>.<span class=\"me1\">popcount</span><span class=\"br0\">}</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"Evil:\"</span>  , <span class=\"nu0\">0</span>.<span class=\"me1\">step</span>.<span class=\"me1\">lazy</span>.<span class=\"kw3\">select</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:evil?<span class=\"br0\">)</span>.<span class=\"me1\">first</span><span class=\"br0\">(</span><span class=\"nu0\">30</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"Odious:\"</span>, <span class=\"nu0\">0</span>.<span class=\"me1\">step</span>.<span class=\"me1\">lazy</span>.<span class=\"me1\">reject</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:evil?<span class=\"br0\">)</span>.<span class=\"me1\">first</span><span class=\"br0\">(</span><span class=\"nu0\">30</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span></pre>"}, {"lang": "Rust", "loc": 24, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fn main() {<br/>    let mut num = 1u64;<br/>    let mut vec = Vec::new();<br/>    for _ in 0..30 {<br/>        vec.push(num.count_ones());<br/>        num *= 3;<br/>    }<br/>    println!(\"pop count of 3^0, 3^1 ... 3^29:\\n{:?}\",vec);<br/>    let mut even = Vec::new();<br/>    let mut odd  = Vec::new();<br/>    num = 1;<br/>    while even.len() &lt; 30 || odd.len() &lt; 30 {<br/>        match 0 == num.count_ones()%2 {<br/>            true if even.len() &lt; 30 =&gt; even.push(num),<br/>            false if odd.len() &lt; 30 =&gt; odd.push(num),<br/>            _                       =&gt; {}<br/>        }<br/>        num += 1;<br/>    }<br/>    println!(\"\\nFirst 30 even pop count:\\n{:?}\",even);<br/>    println!(\"\\nFirst 30 odd pop count:\\n{:?}\",odd);<br/>}<br/>\u00a0</pre>"}, {"lang": "Seed7", "loc": 35, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const func integer: popcount (in integer: n) is<br/>    return card(bitset conv n);<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var integer: count is 0;<br/>    var integer: num is 0;<br/>  begin<br/>    for count range 0 to 29 do<br/>      write(popcount(3 ** count) &lt;&amp; \" \");<br/>    end for;<br/>    writeln;<br/>    write(\"evil:   \");<br/>    for count range 1 to 30 do<br/>      while odd(popcount(num)) do<br/>        incr(num);<br/>      end while;<br/>      write(num &lt;&amp; \" \");<br/>      incr(num);<br/>    end for;<br/>    writeln;<br/>    write(\"odious: \");<br/>    num\u00a0:= 0;<br/>    for count range 1 to 30 do<br/>      while not odd(popcount(num)) do<br/>        incr(num);<br/>      end while;<br/>      write(num &lt;&amp; \" \");<br/>      incr(num);<br/>    end for;<br/>    writeln;<br/>  end func;<br/>\u00a0</pre>"}, {"lang": "Sidef", "loc": 9, "block": "<pre class=\"ruby highlighted_source\">func population_count<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> n.<span class=\"me1\">as_bin</span>.<span class=\"me1\">count</span><span class=\"br0\">(</span><span class=\"st0\">'1'</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>say <span class=\"st0\">\"#{0..29 \u00ab**\u00ab\u00a03 \u00abcall\u00ab\u00a0population_count -&gt; join(' ')}\"</span><br/>\u00a0<br/>var numbers = <span class=\"nu0\">60</span>.<span class=\"me1\">of</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>    <span class=\"br0\">[</span>i, population_count<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>say <span class=\"st0\">\"Evil:   #{numbers.grep{_[1]\u00a0%% 2}.map{.first}.join(' ')}\"</span><br/>say <span class=\"st0\">\"Odious: #{numbers.grep{_[1] &amp;  1}.map{.first}.join(' ')}\"</span></pre>"}, {"lang": "Tcl", "loc": 14, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.6</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> hammingWeight <span class=\"br0\">{</span>n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    tcl::<span class=\"me1\">mathop</span>::+ <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"sy0\">%</span>llb <span class=\"re0\">$n</span><span class=\"br0\">]</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> n <span class=\"nu0\">0</span><span class=\"sy0\">;</span><span class=\"kw1\">set</span> l <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">30</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">lappend</span> l <span class=\"br0\">[</span>hammingWeight <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">3</span><span class=\"sy0\">**</span><span class=\"re0\">$n</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"p3: $l\"</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> n <span class=\"nu0\">0</span><span class=\"sy0\">;</span><span class=\"kw1\">set</span> e <span class=\"br0\">[</span><span class=\"kw1\">set</span> o <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$e</span><span class=\"br0\">]</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">30</span>||<span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$o</span><span class=\"br0\">]</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">30</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">lappend</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>hammingWeight <span class=\"re0\">$n</span><span class=\"br0\">]</span><span class=\"sy0\">&amp;</span><span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"o\"</span>\u00a0: <span class=\"st0\">\"e\"</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"re0\">$n</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"evil: [lrange $e 0 29]\"</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"odious: [lrange $o 0 29]\"</span></pre>"}, {"lang": "UNIX Shell", "loc": 33, "block": "<pre class=\"bash highlighted_source\">popcount<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">local</span> <span class=\"re5\">-i</span> <span class=\"re2\">n</span>=<span class=\"re4\">$1</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw3\">return</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw3\">local</span> <span class=\"re2\">ones</span>=<span class=\"nu0\">0</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span> <br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span> ones += n<span class=\"sy0\">%</span>2 <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span> n <span class=\"sy0\">/</span>= <span class=\"nu0\">2</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">done</span><br/>    <span class=\"kw3\">echo</span> <span class=\"re1\">$ones</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re2\">popcount_3s</span>=<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"re2\">n</span>=<span class=\"nu0\">1</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"br0\">(</span> <span class=\"re2\">i</span>=<span class=\"nu0\">0</span>; i<span class=\"sy0\">&lt;</span><span class=\"nu0\">30</span>; i++ <span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>    popcount_3s+=<span class=\"br0\">(</span> $<span class=\"br0\">(</span>popcount <span class=\"re1\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span> n <span class=\"sy0\">*</span>= <span class=\"nu0\">3</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">done</span><br/><span class=\"kw3\">echo</span> <span class=\"st0\">\"powers of 3 popcounts: <span class=\"es3\">${popcount_3s[*]}</span>\"</span><br/>\u00a0<br/><span class=\"re2\">evil</span>=<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"re2\">odious</span>=<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"re2\">n</span>=<span class=\"nu0\">0</span><br/><span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span> <span class=\"co1\">${#evil[@]}</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">30</span> <span class=\"sy0\">||</span> <span class=\"co1\">${#odious[@]}</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">30</span> <span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>    <span class=\"re2\">p</span>=$<span class=\"br0\">(</span> popcount <span class=\"re1\">$n</span> <span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span> <span class=\"re1\">$p</span><span class=\"sy0\">%</span>2 == <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">then</span> <br/>        evil+=<span class=\"br0\">(</span> <span class=\"re1\">$n</span> <span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span><br/>        odious+=<span class=\"br0\">(</span> <span class=\"re1\">$n</span> <span class=\"br0\">)</span><br/>    <span class=\"kw1\">fi</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span> n++ <span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">done</span><br/><span class=\"kw3\">echo</span> <span class=\"st0\">\"evil nums:   <span class=\"es3\">${evil[*]:0:30}</span>\"</span><br/><span class=\"kw3\">echo</span> <span class=\"st0\">\"odious nums: <span class=\"es3\">${odious[*]:0:30}</span>\"</span></pre>"}, {"lang": "zkl", "loc": 7, "block": "<pre class=\"text highlighted_source\">n:=1; do(30){ print(n.num1s,\",\"); n*=3 } println();<br/>\u00a0<br/>println(\"evil: \",[0..].filter(30,fcn(n){ n.num1s.isEven }).concat(\",\"));<br/>\u00a0<br/>// now, as an iterator aka lazy:<br/>println(\"odious: \",(0).walker(*).tweak(   // 0,1,2,3,4... iterator<br/>   fcn(n){ if(n.num1s.isEven) Void.Skip else n }).walk(30).concat(\",\"));</pre>"}]}