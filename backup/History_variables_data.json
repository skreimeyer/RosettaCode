{"task": "History_variables", "blocks": [{"lang": "Ada", "loc": 34, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">private</span> <span class=\"kw3\">with</span> Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Indefinite_Vectors</span>;<br/><span class=\"kw3\">generic</span><br/>   <span class=\"kw3\">type</span> Item_Type <span class=\"br0\">(</span>&lt;&gt;<span class=\"br0\">)</span> <span class=\"kw1\">is</span> <span class=\"kw3\">private</span>;<br/><span class=\"kw3\">package</span> History_Variables <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">type</span> Variable <span class=\"kw1\">is</span> <span class=\"kw3\">tagged</span> <span class=\"kw3\">limited</span> <span class=\"kw3\">private</span>;<br/>\u00a0<br/>   <span class=\"co1\">-- set and get current value</span><br/>   <span class=\"kw3\">procedure</span> Set<span class=\"br0\">(</span>V: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Variable; Item: Item_Type<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">function</span> Get<span class=\"br0\">(</span>V: Variable<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Item_Type;<br/>\u00a0<br/>   <span class=\"co1\">-- number of items in history (including the current one)</span><br/>   <span class=\"kw3\">function</span> Defined<span class=\"br0\">(</span>V: Variable<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Natural;<br/>\u00a0<br/>   <span class=\"co1\">-- non-destructively search for old values</span><br/>   <span class=\"kw3\">function</span> Peek<span class=\"br0\">(</span>V: Variable; Generation: Natural\u00a0:= <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> Item_Type;<br/>   <span class=\"co1\">-- V.Peek(0) returns current value; V.Peek(1) the previous value, ect.</span><br/>   <span class=\"co1\">-- when calling V.Peek(i), i must be in 0 .. V.Defined-1, else Constraint_Error is raised</span><br/>\u00a0<br/>   <span class=\"co1\">-- destructively restore previous value</span><br/>   <span class=\"kw3\">procedure</span> Undo<span class=\"br0\">(</span>V: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Variable<span class=\"br0\">)</span>;<br/>   <span class=\"co1\">-- old V.Peek(0) is forgotten, old V.Peek(i) is new V.Peek(i-1), ect.</span><br/>   <span class=\"co1\">-- accordingly, V.Defined decrements by 1</span><br/>   <span class=\"co1\">-- special case: if V.Defined=0 then V.Undo does not change V</span><br/>\u00a0<br/><span class=\"kw3\">private</span><br/>   <span class=\"kw3\">package</span> Vectors <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Indefinite_Vectors</span><br/>     <span class=\"br0\">(</span>Index_Type   =&gt; Positive,<br/>      Element_Type =&gt; Item_Type<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">type</span> Variable <span class=\"kw1\">is</span> <span class=\"kw3\">tagged</span> <span class=\"kw3\">limited</span> <span class=\"kw3\">record</span><br/>      History: Vectors.<span class=\"me1\">Vector</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw3\">record</span>;<br/><span class=\"kw1\">end</span> History_Variables;</pre>"}, {"lang": "AspectJ", "loc": 29, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> HistoryVariable<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">private</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aobject+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Object</span></a> value<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> HistoryVariable<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aobject+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Object</span></a> v<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        value <span class=\"sy0\">=</span> v<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> update<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aobject+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Object</span></a> v<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        value <span class=\"sy0\">=</span> v<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aobject+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Object</span></a> undo<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> value<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    @Override<br/>    <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> toString<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> value.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> dispose<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "AutoHotkey", "loc": 15, "block": "<pre class=\"ahk highlighted_source\">HV <span class=\"sy0\">:=</span> new HistoryVariable<br/>HV<span class=\"sy0\">.</span>var <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>HV<span class=\"sy0\">.</span>var <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span><br/>HV<span class=\"sy0\">.</span>var <span class=\"sy0\">:=</span> <span class=\"st0\">\"Latest value\"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">Msgbox</span></a>\u00a0% HV<span class=\"sy0\">.</span>var <span class=\"st0\">\"`n\"</span> HV<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"st0\">\"`n\"</span> HV<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><br/>\u00a0<br/>class HistoryVariable <span class=\"br0\">{</span><br/>\t__Set<span class=\"br0\">(</span>aName<span class=\"sy0\">,</span> aValue<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tthis<span class=\"sy0\">.</span><span class=\"kw6\">Insert</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>aValue<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">Return</span> aValue<br/>\t<span class=\"br0\">}</span><br/>\t__Get<span class=\"br0\">(</span>aName<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">Return</span> this<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 69, "block": "<pre class=\"c highlighted_source\">using System<span class=\"sy0\">;</span><br/>using System.<span class=\"me1\">Collections</span><span class=\"sy0\">;</span><br/>using System.<span class=\"me1\">Collections</span>.<span class=\"me1\">Generic</span><span class=\"sy0\">;</span><br/>using System.<span class=\"me1\">Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/>namespace History<br/><span class=\"br0\">{</span><br/>    class Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span>string<span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            var h <span class=\"sy0\">=</span> new HistoryObject<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            h.<span class=\"me1\">Value</span> <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/>            h.<span class=\"me1\">Value</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"foo\"</span><span class=\"sy0\">;</span><br/>            h.<span class=\"me1\">Value</span> <span class=\"sy0\">+=</span> <span class=\"st0\">\"bar\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            var history <span class=\"sy0\">=</span> h.<span class=\"me1\">ToArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> history.<span class=\"me1\">Length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                Console.<span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"{0}{1}\"</span><span class=\"sy0\">,</span> history<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"sy0\">&gt;=</span> history.<span class=\"me1\">Length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\" &lt;- \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            h.<span class=\"me1\">Undo</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            h.<span class=\"me1\">Undo</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            h.<span class=\"me1\">Undo</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            Console.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>h.<span class=\"me1\">Value</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        private class HistoryObject <span class=\"sy0\">:</span> IEnumerable<span class=\"sy0\">&lt;</span>object<span class=\"sy0\">&gt;</span><br/>        <span class=\"br0\">{</span><br/>            public HistoryObject<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                _history <span class=\"sy0\">=</span> new Stack<span class=\"sy0\">&lt;</span>object<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Initiates the history stack.</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            public object Value<br/>            <span class=\"br0\">{</span><br/>                get <span class=\"co1\">// Returns the top value from the history if there is one. Otherwise null.</span><br/>                <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>_history.<span class=\"me1\">Count</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                        <span class=\"kw1\">return</span> _history.<span class=\"me1\">Peek</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">return</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                set <span class=\"br0\">{</span> _history.<span class=\"me1\">Push</span><span class=\"br0\">(</span>value<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span> <span class=\"co1\">// Adds the specified value to the history.</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            public <span class=\"kw4\">void</span> Undo<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>_history.<span class=\"me1\">Count</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                    _history.<span class=\"me1\">Pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Removes the current value from the history.</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"co1\">// History stack that will hold all previous values of the object.</span><br/>            private readonly Stack<span class=\"sy0\">&lt;</span>object<span class=\"sy0\">&gt;</span> _history<span class=\"sy0\">;</span><br/>\u00a0<br/>            public IEnumerator<span class=\"sy0\">&lt;</span>object<span class=\"sy0\">&gt;</span> GetEnumerator<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> _history.<span class=\"me1\">GetEnumerator</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            IEnumerator IEnumerable.<span class=\"me1\">GetEnumerator</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> GetEnumerator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 5, "block": "<pre class=\"clojure highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> a <span class=\"br0\">(</span>ref <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> a<span class=\"sy0\">-</span>history <span class=\"br0\">(</span>atom <span class=\"br0\">[</span>@a<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; define a history vector to act as a stack for changes on variable a</span><br/><span class=\"br0\">(</span>add<span class=\"sy0\">-</span>watch a\u00a0:<span class=\"me1\">hist</span> <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>key ref old new<span class=\"br0\">]</span> <span class=\"br0\">(</span>swap<span class=\"sy0\">!</span> a<span class=\"sy0\">-</span>history <span class=\"kw1\">conj</span> new<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 24, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defmacro</span> make-hvar <span class=\"br0\">(</span><span class=\"kw1\">value</span><span class=\"br0\">)</span> <br/>  `<span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"sy0\">,</span><span class=\"kw1\">value</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defmacro</span> get-hvar <span class=\"br0\">(</span>hvar<span class=\"br0\">)</span><br/>  `<span class=\"br0\">(</span><span class=\"kw1\">car</span> <span class=\"sy0\">,</span>hvar<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defmacro</span> set-hvar <span class=\"br0\">(</span>hvar <span class=\"kw1\">value</span><span class=\"br0\">)</span><br/>  `<span class=\"br0\">(</span>push <span class=\"sy0\">,</span><span class=\"kw1\">value</span> <span class=\"sy0\">,</span>hvar<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Make sure that setf macro can be used</span><br/><span class=\"br0\">(</span>defsetf get-hvar set-hvar<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defmacro</span> undo-hvar <span class=\"br0\">(</span>hvar<span class=\"br0\">)</span><br/>  `<span class=\"br0\">(</span>pop <span class=\"sy0\">,</span>hvar<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>v <span class=\"br0\">(</span>make-hvar <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>format t <span class=\"st0\">\"Initial value = ~a~%\"</span> <span class=\"br0\">(</span>get-hvar v<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>set-hvar v <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>get-hvar v<span class=\"br0\">)</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"co1\">;; Alternative using setf</span><br/>  <span class=\"br0\">(</span>format t <span class=\"st0\">\"Current value = ~a~%\"</span> <span class=\"br0\">(</span>get-hvar v<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>undo-hvar v<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>undo-hvar v<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>format t <span class=\"st0\">\"Restored value = ~a~%\"</span> <span class=\"br0\">(</span>get-hvar v<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 63, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">array</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">datetime</span><span class=\"sy0\">,</span> std.<span class=\"me1\">traits</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co2\">/// A history variable.</span><br/><span class=\"kw4\">struct</span> HistoryVariable<span class=\"br0\">(</span>T<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co2\">/// A value in a point in time.</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">struct</span> HistoryValue <span class=\"br0\">{</span><br/>        SysTime time<span class=\"sy0\">;</span><br/>        T value<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Alternative to the more common toString.</span><br/>        <span class=\"co1\">//void toString(scope void delegate(string) output) const {</span><br/>        <span class=\"kw4\">void</span> toString<span class=\"br0\">(</span><span class=\"kw2\">scope</span> <span class=\"kw4\">void</span> <span class=\"kw2\">delegate</span><span class=\"br0\">(</span><span class=\"kw4\">const</span><span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> output<span class=\"br0\">)</span><span class=\"kw4\">const</span> <span class=\"br0\">{</span><br/>            output<span class=\"br0\">(</span>format<span class=\"br0\">(</span><span class=\"st0\">\"%s;\u00a0%s\"</span><span class=\"sy0\">,</span> time<span class=\"sy0\">,</span> value<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">const</span><span class=\"br0\">(</span>HistoryValue<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">]</span> values<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">private</span> <span class=\"kw4\">void</span> addValue<span class=\"br0\">(</span>T value<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        values <span class=\"sy0\">~=</span> HistoryValue<span class=\"br0\">(</span>Clock.<span class=\"me1\">currTime</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> value<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> opAssign<span class=\"br0\">(</span>T value<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        addValue<span class=\"br0\">(</span>value<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">@property</span> T currentValue<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> values.<span class=\"me1\">back</span>.<span class=\"me1\">value</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">alias</span> currentValue <span class=\"kw2\">this</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">@property</span> <span class=\"kw4\">auto</span> history<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> values<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co3\">/**<br/>    Demonstrating D's compile-time reflection features. The member<br/>    functions that are in this 'static if' block would be added for<br/>    types T that are arrays (including strings). */</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isArray<span class=\"sy0\">!</span>T<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">// Append-with-assign operator.</span><br/>        <span class=\"kw4\">void</span> opOpAssign<span class=\"br0\">(</span><span class=\"kw4\">string</span> op <span class=\"sy0\">:</span> <span class=\"st0\">\"~\"</span><span class=\"br0\">)</span><span class=\"br0\">(</span>T element<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            addValue<span class=\"br0\">(</span>currentValue <span class=\"sy0\">~</span> element<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">// Similar implementation for other array operators...</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    HistoryVariable<span class=\"sy0\">!</span><span class=\"kw4\">int</span> x<span class=\"sy0\">;</span><br/>    x <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    x <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    x <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"%(%s<span class=\"es1\">\\n</span>%)<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> x.<span class=\"me1\">history</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    HistoryVariable<span class=\"sy0\">!</span><span class=\"kw4\">string</span> s<span class=\"sy0\">;</span><br/>    s <span class=\"sy0\">=</span> <span class=\"st0\">\"hello\"</span><span class=\"sy0\">;</span><br/>    s <span class=\"sy0\">~=</span> <span class=\"st0\">\" world\"</span><span class=\"sy0\">;</span><br/>    s <span class=\"sy0\">=</span> <span class=\"st0\">\"goodby\"</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"%(%s<span class=\"es1\">\\n</span>%)\"</span><span class=\"sy0\">,</span> s.<span class=\"me1\">history</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 24, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>define-syntax-rule <span class=\"br0\">(</span>make-h-var <span class=\"kw1\">name</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>define <span class=\"kw1\">name</span> <span class=\"br0\">(</span>stack <span class=\"br0\">(</span><span class=\"kw1\">gensym</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>define-syntax-rule <span class=\"br0\">(</span>h-<span class=\"kw1\">get</span> <span class=\"kw1\">name</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>stack-top <span class=\"kw1\">name</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>define-syntax-rule <span class=\"br0\">(</span>h-<span class=\"kw1\">set</span> <span class=\"kw1\">name</span> <span class=\"kw1\">value</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>push <span class=\"kw1\">name</span> <span class=\"kw1\">value</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>define-syntax-rule <span class=\"br0\">(</span>h-undo <span class=\"kw1\">name</span><span class=\"br0\">)</span> <br/>\t<span class=\"br0\">(</span>begin<br/>\t<span class=\"br0\">(</span>pop <span class=\"kw1\">name</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span> stack-empty? <span class=\"kw1\">name</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">error</span> <span class=\"st0\">\"no more values\"</span> '<span class=\"kw1\">name</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>stack-top <span class=\"kw1\">name</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>define-syntax-rule <span class=\"br0\">(</span>h-values <span class=\"kw1\">name</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>stack-<span class=\"sy0\">&gt;</span><span class=\"kw1\">list</span> <span class=\"kw1\">name</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">;; usage</span><br/><span class=\"br0\">(</span>make-h-var x<span class=\"br0\">)</span>\u2192 x<br/>\u00a0<br/><span class=\"br0\">(</span>h-<span class=\"kw1\">set</span> x <span class=\"nu0\">42</span><span class=\"br0\">)</span> \u2192 <span class=\"nu0\">42</span><br/><span class=\"br0\">(</span>h-<span class=\"kw1\">set</span> x <span class=\"nu0\">666</span><span class=\"br0\">)</span>\u2192 <span class=\"nu0\">666</span><br/><span class=\"br0\">(</span>h-<span class=\"kw1\">set</span> x 'elvis<span class=\"br0\">)</span>\u2192 elvis<br/><span class=\"br0\">(</span>h-values x<span class=\"br0\">)</span> \u2192 <span class=\"br0\">(</span><span class=\"nu0\">42</span> <span class=\"nu0\">666</span> elvis<span class=\"br0\">)</span> <span class=\"co1\">;; historized values</span><br/>\u00a0<br/><span class=\"br0\">(</span>h-<span class=\"kw1\">get</span> x<span class=\"br0\">)</span> \u2192 elvis<br/><span class=\"br0\">(</span>h-undo x<span class=\"br0\">)</span>\u2192 <span class=\"nu0\">666</span><br/><span class=\"br0\">(</span>h-undo x<span class=\"br0\">)</span> \u2192 <span class=\"nu0\">42</span><br/><span class=\"br0\">(</span>h-undo x<span class=\"br0\">)</span> \u2192 \u274c <span class=\"kw1\">error</span><span class=\"sy0\">:</span> <span class=\"me1\">no</span> more values x<br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 51, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>import system'collections.<br/>import system'routines.<br/>import extensions'routines.<br/>\u00a0<br/>class HistoryVariable<br/>{<br/>    object prop Value\u00a0:: _value.<br/>    stack  _previous\u00a0:= Stack new.<br/>\u00a0<br/>    set Value:v<br/>    [<br/>        if ($nil\u00a0!= _value)<br/>        [<br/>            _previous push(_value)<br/>        ].<br/>\u00a0<br/>        _value\u00a0:= v<br/>    ]    <br/>\u00a0<br/>    undo<br/>    [<br/>        ifnot (_previous isEmpty)<br/>        [<br/>            _value\u00a0:= _previous pop<br/>        ];<br/>        [<br/>            _value\u00a0:= $nil<br/>        ]<br/>    ]<br/>\u00a0<br/>    enumerator =&gt; _previous.<br/>\u00a0<br/>    dispatch =&gt; _value.<br/>}<br/>\u00a0<br/>program =<br/>[<br/>    var o\u00a0:= HistoryVariable new.<br/>    o Value\u00a0:= 5.<br/>    o Value\u00a0:= \"foo\".<br/>    o Value\u00a0:= o Value + \"bar\".<br/>\u00a0<br/>    console printLine(o).<br/>\u00a0<br/>    o forEach:printingLn.<br/>\u00a0<br/>    o undo; undo; undo.<br/>\u00a0<br/>    console printLine(o Value).<br/>].</pre>"}, {"lang": "Erlang", "loc": 1, "block": "<pre>1&gt; V1 = \"123\".\n\"123\"\n2&gt; V1 = V1 ++ \"qwe\".\n** exception error: no match of right hand side value \"123qwe\"\n3&gt; V2 = V1 ++ \"qwe\".\n\"123qwe\"\n4&gt; V3 = V2 ++ \"ASD\".\n\"123qweASD\"\n5&gt; V1. \n\"123\"\n6&gt; V2.\n\"123qwe\"\n7&gt; V3.\n\"123qweASD\"\n</pre>"}, {"lang": "Forth", "loc": 5, "block": "<pre class=\"text highlighted_source\">: history create here cell+ , 0 , -1 ,\u00a0;<br/>: <a class=\"__cf_email__\" data-cfemail=\"aac2ea\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> @ @\u00a0;<br/>: h! swap here &gt;r , dup @ , r&gt; swap\u00a0!\u00a0;<br/>: .history @ begin dup cell+ @ -1 &lt;&gt; while dup\u00a0? cell+ @ repeat drop\u00a0;<br/>: h-- dup @ cell+ @ dup -1 = if abort\" End of history\" then swap\u00a0!\u00a0;</pre>"}, {"lang": "Go", "loc": 113, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"sort\"</span><br/>    <span class=\"st0\">\"sync\"</span><br/>    <span class=\"st0\">\"time\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"co1\">// data type for history variable (its an int)</span><br/><span class=\"kw1\">type</span> history <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    timestamp tsFunc<br/>    hs        <span class=\"sy1\">[]</span>hset<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// data type for timestamp generator</span><br/><span class=\"kw1\">type</span> tsFunc <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <a href=\"http://golang.org/search?q=time.Time\"><span class=\"kw5\">time.<span class=\"me1\">Time</span></span></a><br/>\u00a0<br/><span class=\"co1\">// data type for a \"set\" event</span><br/><span class=\"kw1\">type</span> hset <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw4\">int</span>           <span class=\"co1\">// new value</span><br/>    t   <a href=\"http://golang.org/search?q=time.Time\"><span class=\"kw5\">time.<span class=\"me1\">Time</span></span></a> <span class=\"co1\">// timestamp</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// newHistory creates a history variable</span><br/><span class=\"kw4\">func</span> newHistory<span class=\"sy1\">(</span>ts tsFunc<span class=\"sy1\">)</span> history <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> history<span class=\"sy1\">{</span>ts<span class=\"sy1\">,</span> <span class=\"sy1\">[]</span>hset<span class=\"sy1\">{{</span>t<span class=\"sy1\">:</span> ts<span class=\"sy1\">()}}}</span><br/><span class=\"sy1\">}</span>   <br/>\u00a0<br/><span class=\"co1\">// int returns the current value</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>h history<span class=\"sy1\">)</span> <span class=\"kw4\">int</span><span class=\"sy1\">()</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> h<span class=\"sy3\">.</span>hs<span class=\"sy1\">[</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>h<span class=\"sy3\">.</span>hs<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span><span class=\"kw4\">int</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// set does what you expect and returns the timestamp recorded for the event</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>h <span class=\"sy3\">*</span>history<span class=\"sy1\">)</span> set<span class=\"sy1\">(</span>x <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <a href=\"http://golang.org/search?q=time.Time\"><span class=\"kw5\">time.<span class=\"me1\">Time</span></span></a> <span class=\"sy1\">{</span><br/>    t <span class=\"sy2\">:=</span> h<span class=\"sy3\">.</span>timestamp<span class=\"sy1\">()</span><br/>    h<span class=\"sy3\">.</span>hs <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>h<span class=\"sy3\">.</span>hs<span class=\"sy1\">,</span> hset<span class=\"sy1\">{</span>x<span class=\"sy1\">,</span> t<span class=\"sy1\">})</span><br/>    <span class=\"kw1\">return</span> t<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// dump displays a complete history</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>h history<span class=\"sy1\">)</span> dump<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> hs <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> h<span class=\"sy3\">.</span>hs <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>hs<span class=\"sy3\">.</span>t<span class=\"sy3\">.</span>Format<span class=\"sy1\">(</span>time<span class=\"sy3\">.</span>StampNano<span class=\"sy1\">),</span> hs<span class=\"sy3\">.</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span>   <br/>\u00a0<br/><span class=\"co1\">// recall recalls the value stored in the history variable at time t.</span><br/><span class=\"co1\">// if the variable had not been created yet, ok is false.</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>h history<span class=\"sy1\">)</span> recall<span class=\"sy1\">(</span>t <a href=\"http://golang.org/search?q=time.Time\"><span class=\"kw5\">time.<span class=\"me1\">Time</span></span></a><span class=\"sy1\">)</span> <span class=\"sy1\">(</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> <span class=\"coMULTI\">/*ok*/</span> <span class=\"kw4\">bool</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> sort<span class=\"sy3\">.</span>Search<span class=\"sy1\">(</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>h<span class=\"sy3\">.</span>hs<span class=\"sy1\">),</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span><span class=\"nu2\">i</span> <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> h<span class=\"sy3\">.</span>hs<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>t<span class=\"sy3\">.</span>After<span class=\"sy1\">(</span>t<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">})</span><br/>    <span class=\"kw1\">if</span> <span class=\"nu2\">i</span> &gt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> h<span class=\"sy3\">.</span>hs<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> <span class=\"kw2\">true</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"kw2\">false</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// newTimestamper returns a function that generates unique timestamps.</span><br/><span class=\"co1\">// Use a single timestamper for multiple history variables to preserve</span><br/><span class=\"co1\">// an unambiguous sequence of assignments across the multiple history</span><br/><span class=\"co1\">// variables within a single goroutine.</span><br/><span class=\"kw4\">func</span> newTimestamper<span class=\"sy1\">()</span> tsFunc <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> last <a href=\"http://golang.org/search?q=time.Time\"><span class=\"kw5\">time.<span class=\"me1\">Time</span></span></a><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <a href=\"http://golang.org/search?q=time.Time\"><span class=\"kw5\">time.<span class=\"me1\">Time</span></span></a> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> t <span class=\"sy2\">:=</span> time<span class=\"sy3\">.</span>Now<span class=\"sy1\">();</span> t<span class=\"sy3\">.</span>After<span class=\"sy1\">(</span>last<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            last <span class=\"sy2\">=</span> t<br/>        <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>            last<span class=\"sy3\">.</span>Add<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">return</span> last<br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// newProtectedTimestamper generates unique timestamps for concurrent</span><br/><span class=\"co1\">// goroutines.</span><br/><span class=\"kw4\">func</span> newProtectedTimestamper<span class=\"sy1\">()</span> tsFunc <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> last <a href=\"http://golang.org/search?q=time.Time\"><span class=\"kw5\">time.<span class=\"me1\">Time</span></span></a><br/>    <span class=\"kw1\">var</span> m <a href=\"http://golang.org/search?q=sync.Mutex\"><span class=\"kw5\">sync.<span class=\"me1\">Mutex</span></span></a><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"sy1\">(</span>t <a href=\"http://golang.org/search?q=time.Time\"><span class=\"kw5\">time.<span class=\"me1\">Time</span></span></a><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        t <span class=\"sy2\">=</span> time<span class=\"sy3\">.</span>Now<span class=\"sy1\">()</span><br/>        m<span class=\"sy3\">.</span>Lock<span class=\"sy1\">()</span> <span class=\"co1\">// m protects last</span><br/>        <span class=\"kw1\">if</span> t<span class=\"sy3\">.</span>After<span class=\"sy1\">(</span>last<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            last <span class=\"sy2\">=</span> t<br/>        <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>            last<span class=\"sy3\">.</span>Add<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>            t <span class=\"sy2\">=</span> last<br/>        <span class=\"sy1\">}</span><br/>        m<span class=\"sy3\">.</span>Unlock<span class=\"sy1\">()</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// enable history variable support appropriate for single goroutine.</span><br/>    ts <span class=\"sy2\">:=</span> newTimestamper<span class=\"sy1\">()</span><br/>    <span class=\"co1\">// define a history variable</span><br/>    h <span class=\"sy2\">:=</span> newHistory<span class=\"sy1\">(</span>ts<span class=\"sy1\">)</span><br/>    <span class=\"co1\">// assign three values.  (timestamps kept for future reference.)</span><br/>    ref <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><a href=\"http://golang.org/search?q=time.Time\"><span class=\"kw5\">time.<span class=\"me1\">Time</span></span></a><span class=\"sy1\">{</span>h<span class=\"sy3\">.</span>set<span class=\"sy1\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">),</span> h<span class=\"sy3\">.</span>set<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">),</span> h<span class=\"sy3\">.</span>set<span class=\"sy1\">(</span><span class=\"nu0\">4</span><span class=\"sy1\">)}</span><br/>    <span class=\"co1\">// non-destructively display history</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"History of variable h:\"</span><span class=\"sy1\">)</span><br/>    h<span class=\"sy3\">.</span><span class=\"me1\">dump</span><span class=\"sy1\">()</span> <br/>    <span class=\"co1\">// recall the three values.  (this is non-destructive as well, but</span><br/>    <span class=\"co1\">// different than the dump in that values are recalled by time.)</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"Recalling values:\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> t <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> ref <span class=\"sy1\">{</span><br/>        rv<span class=\"sy1\">,</span> _ <span class=\"sy2\">:=</span> h<span class=\"sy3\">.</span>recall<span class=\"sy1\">(</span>t<span class=\"sy1\">)</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>rv<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 32, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>IORef<br/>\u00a0<br/><span class=\"kw1\">newtype</span> HVar a <span class=\"sy0\">=</span> HVar <span class=\"br0\">(</span>IORef <span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>newHVar <span class=\"sy0\">::</span> a <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span>HVar a<span class=\"br0\">)</span><br/>newHVar value <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> HVar <span class=\"br0\">(</span>newIORef <span class=\"br0\">[</span>value<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>readHVar <span class=\"sy0\">::</span> HVar a <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> a<br/>readHVar <span class=\"br0\">(</span>HVar ref<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a> <span class=\"br0\">(</span>readIORef ref<span class=\"br0\">)</span><br/>\u00a0<br/>writeHVar <span class=\"sy0\">::</span> a <span class=\"sy0\">-&gt;</span> HVar a <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>writeHVar value <span class=\"br0\">(</span>HVar ref<span class=\"br0\">)</span> <span class=\"sy0\">=</span> modifyIORef ref <span class=\"br0\">(</span>value:<span class=\"br0\">)</span><br/>\u00a0<br/>undoHVar <span class=\"sy0\">::</span> HVar a <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>undoHVar <span class=\"br0\">(</span>HVar ref<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">_</span>\u00a0: history<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> readIORef ref<br/>    writeIORef ref history<br/>\u00a0<br/>getHistory <span class=\"sy0\">::</span> HVar a <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">[</span>a<span class=\"br0\">]</span><br/>getHistory <span class=\"br0\">(</span>HVar ref<span class=\"br0\">)</span> <span class=\"sy0\">=</span> readIORef ref<br/>\u00a0<br/><span class=\"co1\">-- Testing</span><br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    var <span class=\"sy0\">&lt;-</span> newHVar <span class=\"nu0\">0</span><br/>    writeHVar <span class=\"nu0\">1</span> var<br/>    writeHVar <span class=\"nu0\">2</span> var<br/>    writeHVar <span class=\"nu0\">3</span> var<br/>    getHistory var <span class=\"sy0\">&gt;&gt;=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a><br/>    undoHVar var<br/>    undoHVar var<br/>    undoHVar var</pre>"}, {"lang": "J", "loc": 12, "block": "<pre class=\"j highlighted_source\">varref_hist_=:<span class=\"st_h\">'VAR'</span>,<span class=\"st_h\">'_hist_'</span>,~]<br/>set_hist_=:<span class=\"nu0\">4</span>\u00a0:<span class=\"nu0\">0</span><br/>  V=.varref <span class=\"kw2\">x</span><br/>  if.<span class=\"nu0\">0</span>&gt;nc&lt;V <span class=\"kw1\">do.</span><span class=\"sy0\">(</span>&lt;V<span class=\"sy0\">)</span>=:<span class=\"st_h\">''</span><span class=\"kw1\">end.</span><br/>  <span class=\"sy0\">(</span>&lt;V<span class=\"sy0\">)</span>=.V~,&lt;<span class=\"kw2\">y</span><br/>  <span class=\"kw2\">y</span><br/><span class=\"sy0\">)</span><br/>getall_hist_=:<span class=\"nu0\">3</span>\u00a0:<span class=\"nu0\">0</span><br/>  <span class=\"sy0\">(</span>varref <span class=\"kw2\">y</span><span class=\"sy0\">)</span>~<br/><span class=\"sy0\">)</span><br/>length_hist_=: #@getall<br/>get_hist_=: <span class=\"nu0\">_1</span> {:: getall</pre>"}, {"lang": "Java", "loc": 74, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Collections</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.LinkedList</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.List</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co3\">/**<br/> * A class for an \"Integer with a history\".<br/> * &lt;p&gt;<br/> * Note that it is not possible to create an empty Variable (so there is no \"null\") with this type. This is a design<br/> * choice, because if \"empty\" variables were allowed, reading of empty variables must return a value. Null is a<br/> * bad idea, and Java 8's Optional&lt;T&gt; (which is somewhat like the the official fix for the null-bad-idea) would<br/> * make things more complicated than an example should be.<br/> */</span><br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> IntegerWithHistory <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"co3\">/**<br/>     * The \"storage Backend\" is a list of all values that have been ever assigned to this variable. The List is<br/>     * populated front to back, so a new value is inserted at the start (position 0), and older values move toward the end.<br/>     */</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">final</span> List<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> history<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co3\">/**<br/>     * Creates this variable and assigns the initial value<br/>     *<br/>     * @param value initial value<br/>     */</span><br/>    <span class=\"kw1\">public</span> IntegerWithHistory<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a> value<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        history <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> LinkedList<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        history.<span class=\"me1\">add</span><span class=\"br0\">(</span>value<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co3\">/**<br/>     * Sets a new value, pushing the older ones back in the history<br/>     *<br/>     * @param value the new value to be assigned<br/>     */</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> set<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a> value<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">//History is populated from the front to the back, so the freshest value is stored a position 0</span><br/>        history.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, value<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co3\">/**<br/>     * Gets the current value. Since history is populuated front to back, the current value is the first element<br/>     * of the history.<br/>     *<br/>     * @return the current value<br/>     */</span><br/>    <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a> get<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> history.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co3\">/**<br/>     * Gets the entire history all values that have been assigned to this variable.<br/>     *<br/>     * @return a List of all values, including the current one, ordered new to old<br/>     */</span><br/>    <span class=\"kw1\">public</span> List<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> getHistory<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acollections+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Collections</span></a>.<span class=\"me1\">unmodifiableList</span><span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">history</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co3\">/**<br/>     * Rolls back the history one step, so the current value is removed from the history and replaced by it's predecessor.<br/>     * This is a destructive operation! It is not possible to rollback() beyond the initial value!<br/>     *<br/>     * @return the value that had been the current value until history was rolled back.<br/>     */</span><br/>    <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a> rollback<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>history.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> history.<span class=\"me1\">remove</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> history.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 28, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.4</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> HistoryVariable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>initialValue<span class=\"sy0\">:</span> T<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> history <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> currentValue<span class=\"sy0\">:</span> T<br/>        get<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> history<span class=\"br0\">[</span>history.<span class=\"me1\">size</span> - <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        set<span class=\"br0\">(</span>value<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>           history.<span class=\"me1\">add</span><span class=\"br0\">(</span>value<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    init <span class=\"br0\">{</span><br/>        currentValue <span class=\"sy0\">=</span> initialValue<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    fun showHistory<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"The variable's history, oldest values first, is:\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>item in history<span class=\"br0\">)</span> println<span class=\"br0\">(</span>item<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> v <span class=\"sy0\">=</span> HistoryVariable<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    v.<span class=\"me1\">currentValue</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>    v.<span class=\"me1\">currentValue</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>    v.<span class=\"me1\">showHistory</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Currentvalue is ${v.currentValue}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "M2000 Interpreter", "loc": 40, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Flush ' empty curtrent stack<br/>\\\\ a is a pointer to a new stack object<br/>a=stack:=1,<a class=\"__cf_email__\" data-cfemail=\"c6f486\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>,3%<br/>Print Len(A)=3<br/>For i=1 to Len(a) {<br/>      Print StackType$(a, i)=\"Number\"<br/>}<br/>b=stack<br/>Print len(b)=0<br/>Push 1, 2 \\\\ to current stack<br/>Stack b {<br/>      \\\\ make b the current stack<br/>      Data 1, 2, 3<br/>}  ' Data add to bottom<br/>\\\\ now current stack get the old object<br/>Stack b {Push 1, 2, 3 } ' Push add to top, so 3 is at top<br/>Stack b {<br/>      While not empty {<br/>            Read k  ' Read used to pop value to a variable<br/>            \\\\ number pop value in an expression<br/>            Print  k, number,  ' 3 2 1 1 2 3<br/>      }<br/>      Print<br/>}<br/>z=[]  ' [] pop all values from current stack to a new stack, and return a pointer<br/>Print z  ' 2 1<br/>z=Stack(a, z,a, z)  ' merge stack objects, to a new one, preserve a and z<br/>Print Len(z)<br/>\\\\ empty a using a new object<br/>a=stack<br/>b=stack:=1,2,3<br/>\\\\ z has two stack objects<br/>z=stack:= a, b<br/>Stack b { data 1000}<br/>b=stack ' b point to a new stack<br/>\\\\ we get pointer back<br/>b=stackitem(z, 2)<br/>Print stackitem(b, 4)=1000<br/>\u00a0</pre>"}, {"lang": "Oberon-2", "loc": 181, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> HVar;<br/><span class=\"kw1\">IMPORT</span> Out<span class=\"sy0\">,</span> Conv;<br/><span class=\"kw1\">TYPE</span><br/>\t<span class=\"coMULTI\">(* Generic Object *)</span><br/>\tObject<span class=\"sy0\">*</span> <span class=\"sy0\">=</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> ObjectDesc;<br/>\tObjectDesc <span class=\"sy0\">=</span> <span class=\"kw1\">RECORD</span><br/>\t\tShow<span class=\"sy0\">:</span> <span class=\"kw1\">PROCEDURE</span><span class=\"br0\">(</span>o<span class=\"sy0\">:</span>Object<span class=\"br0\">)</span>;<br/>\t\tAsString<span class=\"sy0\">:</span> <span class=\"kw1\">PROCEDURE</span><span class=\"br0\">(</span>o<span class=\"sy0\">:</span> Object; <span class=\"kw1\">VAR</span> str<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">END</span>;<br/>\u00a0<br/>\t<span class=\"coMULTI\">(* Integers *)</span><br/>\tInteger <span class=\"sy0\">=</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> IntegerDesc;<br/>\tIntegerDesc <span class=\"sy0\">=</span> <span class=\"kw1\">RECORD</span> <span class=\"br0\">(</span>ObjectDesc<span class=\"br0\">)</span><br/>\t\tval<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\t<span class=\"kw1\">END</span>;<br/>\u00a0<br/>\t<span class=\"coMULTI\">(* Chars *)</span><br/>\tChar <span class=\"sy0\">=</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> CharDesc;<br/>\tCharDesc <span class=\"sy0\">=</span> <span class=\"kw1\">RECORD</span> <span class=\"br0\">(</span>ObjectDesc<span class=\"br0\">)</span><br/>\t\tval<span class=\"sy0\">:</span> <span class=\"kw4\">CHAR</span>;<br/>\t<span class=\"kw1\">END</span>;<br/>\u00a0<br/>\tNode <span class=\"sy0\">=</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> NodeDesc;<br/>\tNodeDesc <span class=\"sy0\">=</span> <span class=\"kw1\">RECORD</span><br/>\t\tval<span class=\"sy0\">:</span> Object;<br/>\t\tnext<span class=\"sy0\">:</span> Node;<br/>\t<span class=\"kw1\">END</span>;<br/>\u00a0<br/>\t<span class=\"coMULTI\">(* History Variable *)</span><br/>\tHVar<span class=\"sy0\">*</span> <span class=\"sy0\">=</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> HVarDesc;<br/>\tHVarDesc <span class=\"sy0\">=</span> <span class=\"kw1\">RECORD</span><br/>\t\tfirst<span class=\"sy0\">,</span> last<span class=\"sy0\">:</span> Node;<br/>\t\tsize<span class=\"sy0\">-:</span> <span class=\"kw4\">INTEGER</span>;<br/>\t<span class=\"kw1\">END</span>;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> CharAsString<span class=\"br0\">(</span>o<span class=\"sy0\">:</span>Object; <span class=\"kw1\">VAR</span> dst<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\t<span class=\"kw1\">IF</span> <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>dst<span class=\"br0\">)</span> &gt;<span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">THEN</span><br/>\t\t\tdst<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> 0X;<br/>\t\t<span class=\"kw1\">END</span>;<br/>\t\tdst<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> o<span class=\"br0\">(</span>Char<span class=\"br0\">)</span>^.<span class=\"me1\">val</span><br/>\t<span class=\"kw1\">END</span> CharAsString;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> IntAsString<span class=\"br0\">(</span>o<span class=\"sy0\">:</span>Object; <span class=\"kw1\">VAR</span> dst<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\tConv.<span class=\"me1\">ConvInt</span><span class=\"br0\">(</span>o<span class=\"br0\">(</span>Integer<span class=\"br0\">)</span>^.<span class=\"me1\">val</span><span class=\"sy0\">,</span>dst<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">END</span> IntAsString;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> ShowInt<span class=\"br0\">(</span>o<span class=\"sy0\">:</span>Object<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\tOut.<span class=\"me1\">Int</span><span class=\"br0\">(</span>o<span class=\"br0\">(</span>Integer<span class=\"br0\">)</span>^.<span class=\"me1\">val</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">END</span> ShowInt;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> ShowChar<span class=\"br0\">(</span>o<span class=\"sy0\">:</span>Object<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\tOut.<span class=\"me1\">Char</span><span class=\"br0\">(</span>o<span class=\"br0\">(</span>Char<span class=\"br0\">)</span>^.<span class=\"me1\">val</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">END</span> ShowChar;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> BoxChar<span class=\"br0\">(</span>val<span class=\"sy0\">:</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Char;<br/>\t<span class=\"kw1\">VAR</span><br/>\t\tc<span class=\"sy0\">:</span> Char;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\t<span class=\"kw3\">NEW</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span>;<br/>\t\tc^.<span class=\"me1\">val</span> <span class=\"sy0\">:=</span> val;<br/>\t\tc^.<span class=\"me1\">Show</span> <span class=\"sy0\">:=</span> ShowChar;<br/>\t\tc^.<span class=\"me1\">AsString</span> <span class=\"sy0\">:=</span> CharAsString;<br/>\t\t<span class=\"kw1\">RETURN</span> c;<br/>\t<span class=\"kw1\">END</span> BoxChar;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> BoxInt<span class=\"br0\">(</span>val<span class=\"sy0\">:</span><span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Integer;<br/>\t<span class=\"kw1\">VAR</span><br/>\t\ti<span class=\"sy0\">:</span> Integer;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\t<span class=\"kw3\">NEW</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>; <br/>\t\ti^.<span class=\"me1\">val</span> <span class=\"sy0\">:=</span> val;<br/>\t\ti^.<span class=\"me1\">Show</span> <span class=\"sy0\">:=</span> ShowInt;<br/>\t\ti^.<span class=\"me1\">AsString</span> <span class=\"sy0\">:=</span> IntAsString;<br/>\t\t<span class=\"kw1\">RETURN</span> i;<br/>\t<span class=\"kw1\">END</span> BoxInt;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> InitNode<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Node;<br/>\t<span class=\"kw1\">VAR</span><br/>\t\tl<span class=\"sy0\">:</span> Node;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\t<span class=\"kw3\">NEW</span><span class=\"br0\">(</span>l<span class=\"br0\">)</span>;<br/>\t\tl.<span class=\"me1\">val</span> <span class=\"sy0\">:=</span> <span class=\"kw2\">NIL</span>;<br/>\t\tl.<span class=\"me1\">next</span> <span class=\"sy0\">:=</span> <span class=\"kw2\">NIL</span>;<br/>\t\t<span class=\"kw1\">RETURN</span> l;<br/>\t<span class=\"kw1\">END</span> InitNode;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> InitHVar<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> HVar;<br/>\t<span class=\"kw1\">VAR</span><br/>\t\thv<span class=\"sy0\">:</span> HVar;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\t<span class=\"kw3\">NEW</span><span class=\"br0\">(</span>hv<span class=\"br0\">)</span>;<br/>\t\thv.<span class=\"me1\">first</span> <span class=\"sy0\">:=</span> <span class=\"kw2\">NIL</span>;<br/>\t\thv.<span class=\"me1\">last</span> <span class=\"sy0\">:=</span> <span class=\"kw2\">NIL</span>;<br/>\t\thv.<span class=\"me1\">size</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>\t\t<span class=\"kw1\">RETURN</span> hv;<br/>\t<span class=\"kw1\">END</span> InitHVar;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>v<span class=\"sy0\">:</span> HVar<span class=\"br0\">)</span> Value<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Object;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\t<span class=\"kw1\">RETURN</span> v^.<span class=\"me1\">first</span>^.<span class=\"me1\">val</span>;<br/>\t<span class=\"kw1\">END</span> Value;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>v<span class=\"sy0\">:</span> HVar<span class=\"br0\">)</span> Set<span class=\"br0\">(</span>o<span class=\"sy0\">:</span> Object<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">VAR</span><br/>\t\tl<span class=\"sy0\">:</span> Node;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\tl <span class=\"sy0\">:=</span> InitNode<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>\t\tl^.<span class=\"me1\">val</span> <span class=\"sy0\">:=</span> o;<br/>\t\t<span class=\"kw1\">IF</span> <span class=\"br0\">(</span>v^.<span class=\"me1\">first</span> <span class=\"sy0\">=</span> v^.<span class=\"me1\">last</span><span class=\"br0\">)</span> &amp; <span class=\"br0\">(</span>v^.<span class=\"me1\">first</span> <span class=\"sy0\">=</span> <span class=\"kw2\">NIL</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>\t\t\tv^.<span class=\"me1\">first</span> <span class=\"sy0\">:=</span> l;<br/>\t\t\tv^.<span class=\"me1\">last</span> <span class=\"sy0\">:=</span> l;<br/>\t\t\t<span class=\"kw3\">INC</span><span class=\"br0\">(</span>v^.<span class=\"me1\">size</span><span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw1\">ELSIF</span> <span class=\"br0\">(</span>v^.<span class=\"me1\">first</span> <span class=\"sy0\">=</span> v^.<span class=\"me1\">last</span><span class=\"br0\">)</span> &amp; <span class=\"br0\">(</span>v^.<span class=\"me1\">first</span> <span class=\"sy0\">#</span> <span class=\"kw2\">NIL</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>\t\t\tv^.<span class=\"me1\">first</span>^.<span class=\"me1\">next</span> <span class=\"sy0\">:=</span> l;<br/>\t\t\tv^.<span class=\"me1\">last</span> <span class=\"sy0\">:=</span> v^.<span class=\"me1\">first</span>.<span class=\"me1\">next</span>;<br/>\t\t\t<span class=\"kw3\">INC</span><span class=\"br0\">(</span>v^.<span class=\"me1\">size</span><span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw1\">ELSIF</span> <span class=\"br0\">(</span>v^.<span class=\"me1\">first</span> <span class=\"sy0\">#</span> v^.<span class=\"me1\">last</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>\t\t\tv^.<span class=\"me1\">last</span>^.<span class=\"me1\">next</span> <span class=\"sy0\">:=</span> l;<br/>\t\t\tv^.<span class=\"me1\">last</span> <span class=\"sy0\">:=</span> l;<br/>\t\t\t<span class=\"kw3\">INC</span><span class=\"br0\">(</span>v^.<span class=\"me1\">size</span><span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw1\">END</span><br/>\t<span class=\"kw1\">END</span> Set;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>v<span class=\"sy0\">:</span> HVar<span class=\"br0\">)</span> Undo<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Object;<br/>\t<span class=\"kw1\">VAR</span> <br/>\t\to<span class=\"sy0\">:</span> Object;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\t<span class=\"kw1\">IF</span> <span class=\"br0\">(</span>v^.<span class=\"me1\">first</span> <span class=\"sy0\">=</span> v^.<span class=\"me1\">last</span><span class=\"br0\">)</span> &amp; <span class=\"br0\">(</span>v^.<span class=\"me1\">first</span> <span class=\"sy0\">=</span> <span class=\"kw2\">NIL</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>\t\t\to <span class=\"sy0\">:=</span> <span class=\"kw2\">NIL</span>;<br/>\t\t<span class=\"kw1\">ELSIF</span> <span class=\"br0\">(</span>v^.<span class=\"me1\">first</span> <span class=\"sy0\">=</span> v^.<span class=\"me1\">last</span><span class=\"br0\">)</span> &amp; <span class=\"br0\">(</span>v^.<span class=\"me1\">first</span> <span class=\"sy0\">#</span> <span class=\"kw2\">NIL</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>\t\t\to <span class=\"sy0\">:=</span> v^.<span class=\"me1\">first</span>^.<span class=\"me1\">val</span>;<br/>\t\t\tv^.<span class=\"me1\">first</span> <span class=\"sy0\">:=</span> <span class=\"kw2\">NIL</span>;<br/>\t\t\tv^.<span class=\"me1\">last</span> <span class=\"sy0\">:=</span> <span class=\"kw2\">NIL</span>;<br/>\t\t\t<span class=\"kw3\">DEC</span><span class=\"br0\">(</span>v^.<span class=\"me1\">size</span><span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw1\">ELSE</span><br/>\t\t\to <span class=\"sy0\">:=</span> v^.<span class=\"me1\">first</span>^.<span class=\"me1\">val</span>;<br/>\t\t\tv^.<span class=\"me1\">first</span> <span class=\"sy0\">:=</span> v^.<span class=\"me1\">first</span>^.<span class=\"me1\">next</span>;<br/>\t\t\t<span class=\"kw3\">DEC</span><span class=\"br0\">(</span>v^.<span class=\"me1\">size</span><span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw1\">END</span>;<br/>\t\t<span class=\"kw1\">RETURN</span> o;<br/>\t<span class=\"kw1\">END</span> Undo;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>v<span class=\"sy0\">:</span> HVar<span class=\"br0\">)</span> Print<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">VAR</span><br/>\t\titer <span class=\"sy0\">:</span> Node;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\titer <span class=\"sy0\">:=</span> v.<span class=\"me1\">first</span>;<br/>\t\t<span class=\"kw1\">WHILE</span><span class=\"br0\">(</span>iter <span class=\"sy0\">#</span> <span class=\"kw2\">NIL</span><span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>\t\t\titer^.<span class=\"me1\">val</span>^.<span class=\"me1\">Show</span><span class=\"br0\">(</span>iter^.<span class=\"me1\">val</span><span class=\"br0\">)</span>;<br/>\t\t\titer <span class=\"sy0\">:=</span> iter^.<span class=\"me1\">next</span>;<br/>\t\t<span class=\"kw1\">END</span>;<br/>\t\tOut.<span class=\"me1\">Ln</span>;<br/>\t<span class=\"kw1\">END</span> Print;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> ShowVal<span class=\"br0\">(</span>val<span class=\"sy0\">:</span> Object<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">VAR</span><br/>\t\ts<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"nu0\">128</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\tval^.<span class=\"me1\">AsString</span><span class=\"br0\">(</span>val<span class=\"sy0\">,</span>s<span class=\"br0\">)</span>;<br/>\t\tOut.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"&gt; \"</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">String</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span>;<br/>\t<span class=\"kw1\">END</span> ShowVal;<br/><span class=\"kw1\">VAR</span><br/>\thistory<span class=\"sy0\">:</span> HVar;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>\thistory <span class=\"sy0\">:=</span> InitHVar<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>\thistory.<span class=\"me1\">Set</span><span class=\"br0\">(</span>BoxChar<span class=\"br0\">(</span>64X<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\thistory.<span class=\"me1\">Set</span><span class=\"br0\">(</span>BoxInt<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\thistory.<span class=\"me1\">Set</span><span class=\"br0\">(</span>BoxInt<span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\thistory.<span class=\"me1\">Set</span><span class=\"br0\">(</span>BoxInt<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\thistory.<span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>\tShowVal<span class=\"br0\">(</span>history.<span class=\"me1\">Undo</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\tShowVal<span class=\"br0\">(</span>history.<span class=\"me1\">Undo</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\tShowVal<span class=\"br0\">(</span>history.<span class=\"me1\">Undo</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">END</span> HVar.<br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 18, "block": "<pre class=\"ocaml highlighted_source\">\u00a0<br/><span class=\"kw1\">open</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Stack.html\"><span class=\"kw2\">Stack</span></a><br/><span class=\"co1\">(* The following line is only for convenience when typing code *)</span><br/><span class=\"kw1\">module</span> H <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Stack.html\"><span class=\"kw2\">Stack</span></a><br/>\u00a0<br/><span class=\"kw1\">let</span> show_entry e <span class=\"sy0\">=</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"History entry:\u00a0%5d\\n\"</span> e<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span>  hs <span class=\"sy0\">=</span> H<span class=\"sy0\">.</span>create<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  H<span class=\"sy0\">.</span>push <span class=\"nu0\">111</span> hs <span class=\"sy0\">;</span><br/>  H<span class=\"sy0\">.</span>push <span class=\"nu0\">4</span> hs <span class=\"sy0\">;</span><br/>  H<span class=\"sy0\">.</span>push <span class=\"nu0\">42</span> hs <span class=\"sy0\">;</span><br/>  H<span class=\"sy0\">.</span>iter show_entry hs<span class=\"sy0\">;</span><br/>  hs <span class=\"sy0\">|&gt;</span> H<span class=\"sy0\">.</span>pop <span class=\"sy0\">|&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"%d\\n\"</span><span class=\"sy0\">;</span><br/>  hs <span class=\"sy0\">|&gt;</span> H<span class=\"sy0\">.</span>pop <span class=\"sy0\">|&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"%d\\n\"</span><span class=\"sy0\">;</span><br/>  hs <span class=\"sy0\">|&gt;</span> H<span class=\"sy0\">.</span>pop <span class=\"sy0\">|&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"%d\\n\"</span><br/>\u00a0</pre>"}, {"lang": "OxygenBasic", "loc": 60, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>'============<br/>class History<br/>'============<br/>\u00a0<br/>indexbase 0<br/>\u00a0<br/>string buf<br/>sys    ii,ld,pb<br/>\u00a0<br/>method constructor(sys n=1000, l=sizeof sys) {buf=nuls n*l\u00a0: pb=strptr buf\u00a0: ld=l\u00a0: ii=0}<br/>method destructor () {clear}<br/>'<br/>method setup(sys n=1000, l=sizeof sys) {buf=nuls n*l\u00a0: pb=strptr buf\u00a0: ld=l\u00a0: ii=0}<br/>method clear()                {buf=\"\"\u00a0: pb=0\u00a0: ld=0\u00a0: ii=0}<br/>method max  (sys i)           {if i&gt;ii{ii=i}}<br/>method count() as sys         {return ii}<br/>method size () as sys         {return ld}<br/>'<br/>method get  (any*p,i)         {copy @p, pb+i*ld,ld }           'out<br/>method add  (any*p)           {copy pb+ii*ld,@p,ld\u00a0: ii++}     'in<br/>method put  (any*p,sys i)     {copy pb+i*ld,@p,ld\u00a0: max i}     'in<br/>'<br/>end class<br/>\u00a0<br/>'====<br/>'TEST<br/>'====<br/>\u00a0<br/>'this works for fixed length types<br/>\u00a0<br/>'it will not work for types containing<br/>'volatile pointers. eg: string members<br/>\u00a0<br/>type vector double x,y,z<br/>\u00a0<br/>vector v<br/>\u00a0<br/>new History hv(1000,sizeof v) 'give number of records and variable size<br/>\u00a0<br/>sys i<br/>for i=0 to 9<br/>  v&lt;=i,i*10,i*100 'assign new values to vector<br/>  hv.add v      'add to history<br/>next<br/>\u00a0<br/>string tab=chr(9)\u00a0: cr=chr(13)+chr(10)<br/>string pr=\"Data History of v\" cr cr<br/>pr+=\"n\" tab \"x\" tab \"y\" tab \"z\" cr<br/>vector sv<br/>'<br/>for i=hv.count()-1 to 0 step -1<br/>  hv.get sv,i<br/>  pr+=i tab sv.x tab sv.y tab sv.z cr<br/>next<br/>\u00a0<br/>print pr 'result '9,90,900\u00a0: 8,80,800 ... <br/>\u00a0<br/>del hv<br/>\u00a0</pre>"}, {"lang": "PARI/GP", "loc": 10, "block": "<pre class=\"parigp highlighted_source\"><span class=\"kw1\">default</span><span class=\"br0\">(</span><span class=\"kw3\">histsize</span><span class=\"sy0\">,</span> <span class=\"nu1\">1000</span><span class=\"br0\">)</span> <span class=\"co1\">\\\\ or some other positive number to suit</span><br/><span class=\"nu1\">1</span><span class=\"sy0\">+</span><span class=\"nu1\">7</span><br/><span class=\"kw1\">sin</span><span class=\"br0\">(</span><span class=\"kw1\">Pi</span><span class=\"br0\">)</span><br/><span class=\"nu1\">2</span><span class=\"sy0\">^</span><span class=\"nu1\">100</span><br/><span class=\"sy0\">\\</span>a1 <span class=\"co1\">\\\\ display history item #1, etc.</span><br/><span class=\"sy0\">%</span> <span class=\"co1\">\\\\ alternate syntax</span><br/><span class=\"sy0\">%</span><span class=\"nu2\">1</span> <span class=\"co1\">\\\\ alternate syntax</span><br/><span class=\"sy0\">\\</span>a2<br/><span class=\"sy0\">\\</span>a3<br/><span class=\"br0\">[</span><span class=\"sy0\">%</span><span class=\"nu2\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">%</span><span class=\"nu2\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">%</span><span class=\"nu2\">3</span><span class=\"br0\">]</span> <span class=\"co1\">\\\\ or any other command using these values</span></pre>"}, {"lang": "Peloton", "loc": 11, "block": "<pre class=\"text highlighted_source\">Turn history on &lt;@ DEFHST&gt;__on&lt;/@&gt; <br/>Notify Protium we are interested in the variable mv <br/>&lt;@ DEFHST&gt;mv&lt;/@&gt; <br/>Assign a value: &lt;@ LETVARLIT&gt;mv|first value&lt;/@&gt;&lt;@ SAYVAR&gt;mv&lt;/@&gt; <br/>Reassign the value: &lt;@ LETVARLIT&gt;mv|second value&lt;/@&gt;&lt;@ SAYVAR&gt;mv&lt;/@&gt; <br/>Reassign the value: &lt;@ LETVARLIT&gt;mv|third value&lt;/@&gt;&lt;@ SAYVAR&gt;mv&lt;/@&gt; <br/>Dump history &lt;@ SAYDMPHSTVAR&gt;mv&lt;/@&gt; <br/>Current value: &lt;@ SAYVAR&gt;mv&lt;/@&gt;<br/>Undo once: &lt;@ ACTUNDVAR&gt;mv&lt;/@&gt;&lt;@ SAYVAR&gt;mv&lt;/@&gt; <br/>Undo twice: &lt;@ ACTUNDVAR&gt;mv&lt;/@&gt;&lt;@ SAYVAR&gt;mv&lt;/@&gt; <br/>Turn history off &lt;@ DEFHST&gt;__off&lt;/@&gt;</pre>"}, {"lang": "Perl", "loc": 40, "block": "<pre class=\"perl highlighted_source\"><a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> History<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> TIESCALAR <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$cls</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$cur_val</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <a href=\"http://perldoc.perl.org/functions/bless.html\"><span class=\"kw3\">bless</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> FETCH <span class=\"br0\">{</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> shift<span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> STORE <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$var</span><span class=\"sy0\">,</span> <span class=\"re0\">$val</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@$var</span><span class=\"sy0\">,</span> <span class=\"re0\">$val</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$val</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> get<span class=\"br0\">(</span>\\<span class=\"co5\">$)</span> <span class=\"br0\">{</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/tied.html\"><span class=\"kw3\">tied</span></a> <span class=\"co5\">$</span><span class=\"br0\">{</span><span class=\"sy0\">+</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> on<span class=\"br0\">(</span>\\<span class=\"co5\">$)</span> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/tie.html\"><span class=\"kw3\">tie</span></a> <span class=\"co5\">$</span><span class=\"br0\">{</span><span class=\"sy0\">+</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">}</span><span class=\"sy0\">,</span> __PACKAGE__ <span class=\"br0\">}</span> <br/><span class=\"kw2\">sub</span> off<span class=\"br0\">(</span>\\<span class=\"co5\">$)</span> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/untie.html\"><span class=\"kw3\">untie</span></a> <span class=\"co5\">$</span><span class=\"br0\">{</span><span class=\"sy0\">+</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">}</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> undo<span class=\"br0\">(</span>\\<span class=\"co5\">$)</span> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/pop.html\"><span class=\"kw3\">pop</span></a> <span class=\"sy0\">@</span><span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/tied.html\"><span class=\"kw3\">tied</span></a> <span class=\"co5\">$</span><span class=\"br0\">{</span><span class=\"sy0\">+</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> main<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>History<span class=\"sy0\">::</span><span class=\"me2\">on</span><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"st0\">\"a\"</span> <span class=\"sy0\">..</span> <span class=\"st0\">\"d\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"co5\">$_</span> <span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"History: @{[History::get($x)]}<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"undo $_, \"</span><span class=\"sy0\">;</span><br/>\tHistory<span class=\"sy0\">::</span><span class=\"me2\">undo</span><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"current value: $x<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>History<span class=\"sy0\">::</span><span class=\"me2\">off</span><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\$</span>x is: $x<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 18, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">class</span> HistoryVar <span class=\"br0\">{</span><br/>    <span class=\"kw1\">has</span> <span class=\"re0\">@</span><span class=\"sy0\">.</span><span class=\"me1\">history</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">has</span> <span class=\"re0\">$!var</span> handles <span class=\"sy0\">&lt;</span>Str gist FETCH Numeric<span class=\"sy0\">&gt;;</span><br/>    <span class=\"kw2\">method</span> STORE<span class=\"br0\">(</span><span class=\"re0\">$val</span><span class=\"br0\">)</span> <span class=\"kw1\">is</span> rw <span class=\"br0\">{</span><br/>        <span class=\"kw3\">push</span> <span class=\"re0\">@</span><span class=\"sy0\">.</span><span class=\"me1\">history</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>now<span class=\"sy0\">,</span> <span class=\"re0\">$!var</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$!var</span> <span class=\"sy0\">=</span> <span class=\"re0\">$val</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> \\foo <span class=\"sy0\">=</span> HistoryVar<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"sy0\">;</span><br/>\u00a0<br/>foo <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>foo <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>foo <span class=\"sy0\">+=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>foo <span class=\"sy0\">=</span> <span class=\"nu0\">42</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span> foo<span class=\"sy0\">.</span><span class=\"me1\">history</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"Current value: {foo}\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 12, "block": "<pre class=\"text highlighted_source\">sequence history = {}<br/>\u00a0<br/>type hvt(object o)<br/>    history = append(history,o)<br/>    return true<br/>end type<br/>\u00a0<br/>hvt test = 1<br/>test = 2<br/>test = 3<br/>?{\"current\",test}<br/>?{\"history\",history}</pre>"}, {"lang": "PicoLisp", "loc": 8, "block": "<pre class=\"text highlighted_source\">(de setH (\"Var\" Val)<br/>   (when (val \"Var\")<br/>      (with \"Var\"<br/>         (=: history (cons @ (: history))) ) )<br/>   (set \"Var\" Val) )<br/>\u00a0<br/>(de restoreH (\"Var\")<br/>   (set \"Var\" (pop (prop \"Var\" 'history))) )</pre>"}, {"lang": "PL/I", "loc": 11, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>declare t float controlled;<br/>\u00a0<br/>do i = 1 to 5; /* a loop to read in and save five values. */<br/>allocate t; get (t);<br/>end;<br/>\u00a0<br/>do while (allocation(t) &gt; 0); /* a loop to retrieve the values. */<br/>put (t); free t;<br/>end;<br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 50, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"co1\">; integer history variable</span><br/>\u00a0<br/><span class=\"kw1\">Structure</span> historyint<br/>    List value.i<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndStructure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> SetInt <span class=\"br0\">(</span><span class=\"sy0\">*</span>var.historyint, <span class=\"kw2\">val</span>.i<span class=\"br0\">)</span><br/>    <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>var<span class=\"sy0\">\\</span>value<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">If</span> <span class=\"br0\">(</span>ListSize<span class=\"br0\">(</span><span class=\"sy0\">*</span>var<span class=\"sy0\">\\</span>value<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"sy0\">*</span>var<span class=\"sy0\">\\</span>value<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>var<span class=\"sy0\">\\</span>value<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">EndIf</span><br/>\u00a0<br/>    <span class=\"sy0\">*</span>var<span class=\"sy0\">\\</span>value<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw2\">val</span>  <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> ShowHistory <span class=\"br0\">(</span><span class=\"sy0\">*</span>var.historyint<span class=\"br0\">)</span><br/>    <span class=\"kw1\">ForEach</span> <span class=\"sy0\">*</span>var<span class=\"sy0\">\\</span>value<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">Debug</span> <span class=\"sy0\">*</span>var<span class=\"sy0\">\\</span>value<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> UndoInt <span class=\"br0\">(</span><span class=\"sy0\">*</span>var.historyint<span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> <span class=\"br0\">(</span>ListSize<span class=\"br0\">(</span><span class=\"sy0\">*</span>var<span class=\"sy0\">\\</span>value<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">ProcedureReturn</span><br/>    <span class=\"kw1\">EndIf</span><br/>\u00a0<br/>    <span class=\"kw2\">DeleteElement</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>var<span class=\"sy0\">\\</span>value<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"co1\">;----------------------------------------------</span><br/>\u00a0<br/><span class=\"kw1\">Define</span> x.historyint<br/>\u00a0<br/><span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">3</span><br/>    setint<span class=\"br0\">(</span>x, <span class=\"kw2\">Random</span><span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">100</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Debug</span> <span class=\"st0\">\"x history:\"</span><br/>ShowHistory<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Debug</span> <span class=\"st0\">\"\"</span><br/>\u00a0<br/><span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">3</span><br/>    UndoInt<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Debug</span> <span class=\"st0\">\"undo, x = \"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>x<span class=\"sy0\">\\</span>value<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 34, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">sys</span><br/>\u00a0<br/>HIST <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">def</span> trace<span class=\"br0\">(</span>frame<span class=\"sy0\">,</span> event<span class=\"sy0\">,</span> arg<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">for</span> name<span class=\"sy0\">,</span>val <span class=\"kw1\">in</span> frame.<span class=\"me1\">f_locals</span>.<span class=\"me1\">items</span><span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">if</span> name <span class=\"kw1\">not</span> <span class=\"kw1\">in</span> HIST:<br/>            HIST<span class=\"br0\">[</span>name<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">else</span>:<br/>            <span class=\"kw1\">if</span> HIST<span class=\"br0\">[</span>name<span class=\"br0\">]</span><span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">is</span> val:<br/>                <span class=\"kw1\">continue</span><br/>        HIST<span class=\"br0\">[</span>name<span class=\"br0\">]</span>.<span class=\"me1\">append</span><span class=\"br0\">(</span>val<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> trace<br/>\u00a0<br/><span class=\"kw1\">def</span> undo<span class=\"br0\">(</span>name<span class=\"br0\">)</span>:<br/>    HIST<span class=\"br0\">[</span>name<span class=\"br0\">]</span>.<span class=\"me1\">pop</span><span class=\"br0\">(</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> HIST<span class=\"br0\">[</span>name<span class=\"br0\">]</span><span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">def</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    a <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><br/>    a <span class=\"sy0\">=</span> <span class=\"nu0\">20</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>:<br/>        c <span class=\"sy0\">=</span> i<br/>\u00a0<br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"c:\"</span><span class=\"sy0\">,</span> c<span class=\"sy0\">,</span> <span class=\"st0\">\"-&gt; undo x3 -&gt;\"</span><span class=\"sy0\">,</span><br/>    c <span class=\"sy0\">=</span> undo<span class=\"br0\">(</span><span class=\"st0\">'c'</span><span class=\"br0\">)</span><br/>    c <span class=\"sy0\">=</span> undo<span class=\"br0\">(</span><span class=\"st0\">'c'</span><span class=\"br0\">)</span><br/>    c <span class=\"sy0\">=</span> undo<span class=\"br0\">(</span><span class=\"st0\">'c'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span> c<br/>    <span class=\"kw1\">print</span> <span class=\"st0\">'HIST:'</span><span class=\"sy0\">,</span> HIST<br/>\u00a0<br/><span class=\"kw3\">sys</span>.<span class=\"me1\">settrace</span><span class=\"br0\">(</span>trace<span class=\"br0\">)</span><br/>main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 31, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(require rackunit)<br/>\u00a0<br/>(struct hvar (current history) #:mutable)<br/>\u00a0<br/>(define (make-hvar v) (hvar v empty))<br/>\u00a0<br/>(define (hvar-set! hv new)<br/>  (match-define (hvar cur hist) hv)<br/>  (set-hvar-history! hv (cons cur hist))<br/>  (set-hvar-current! hv new))<br/>\u00a0<br/>(define (hvar-undo! hv)<br/>  (match-define (hvar cur (cons old hist)) hv)<br/>  (set-hvar-current! hv old)<br/>  (set-hvar-history! hv hist))<br/>\u00a0<br/>;; unit tests<br/>(define hv (make-hvar 0))<br/>(hvar-set! hv 1)<br/>(check-equal? (hvar-current hv) 1)<br/>(hvar-set! hv 2)<br/>(hvar-set! hv 3)<br/>(check-equal? (hvar-history hv) '(2 1 0))<br/>(hvar-undo! hv)<br/>(hvar-undo! hv)<br/>(hvar-undo! hv)<br/>(check-equal? (hvar-current hv) 0)<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 22, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program demonstrates a method to track history of assignments to a REXX variable.*/</span><br/>varSet!<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>                                       <span class=\"coMULTI\">/*initialize the all of the VARSET!'s. */</span><br/><span class=\"kw1\">call</span> varSet <span class=\"st0\">'fluid'</span>,<span class=\"kw6\">min</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,-<span class=\"nu0\">5</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span>,-<span class=\"nu0\">1</span><span class=\"br0\">)</span>    \u00a0;    <span class=\"kw1\">say</span> <span class=\"st0\">'fluid='</span> fluid<br/><span class=\"kw1\">call</span> varSet <span class=\"st0\">'fluid'</span>,<span class=\"nu0\">3.14159</span>           \u00a0;    <span class=\"kw1\">say</span> <span class=\"st0\">'fluid='</span> fluid<br/><span class=\"kw1\">call</span> varSet <span class=\"st0\">'fluid'</span>,<span class=\"st0\">' Santa  Claus'</span>   \u00a0;    <span class=\"kw1\">say</span> <span class=\"st0\">'fluid='</span> fluid<br/><span class=\"kw1\">call</span> varSet <span class=\"st0\">'fluid'</span>,,<span class=\"nu0\">999</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'There were'</span> <span class=\"kw4\">result</span> <span class=\"st0\">\"assignments (sets) for the FLUID variable.\"</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>varSet: <span class=\"kw1\">arg</span>\u00a0?x;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span>\u00a0?z,\u00a0?v,\u00a0?L            <span class=\"coMULTI\">/*obtain varName, value, optional\u2500List.*/</span><br/><span class=\"kw1\">if</span>\u00a0?L==<span class=\"st0\">''</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>                                <span class=\"coMULTI\">/*not la ist,  so set the  X  variable.*/</span><br/>              \u00a0?_=varSet!<span class=\"sy0\">.</span>0<span class=\"sy0\">.</span>?x+<span class=\"nu0\">1</span>                 <span class=\"coMULTI\">/*bump the history count  (# of SETs). */</span><br/>               varSet!<span class=\"sy0\">.</span>0<span class=\"sy0\">.</span>?x=?_                   <span class=\"coMULTI\">/*   ... and store it in the \"database\"*/</span><br/>               varSet!<span class=\"sy0\">.</span>?_<span class=\"sy0\">.</span>?x=?v                  <span class=\"coMULTI\">/*   ... and store the  SET  value.    */</span><br/>               <span class=\"kw1\">call</span> <span class=\"kw2\">value</span><span class=\"br0\">(</span>?x<span class=\"br0\">)</span>,?v                 <span class=\"coMULTI\">/*now,  set the real  X  variable.     */</span><br/>               <span class=\"kw1\">return</span>\u00a0?v                         <span class=\"coMULTI\">/*also, return the value for function. */</span><br/>               <span class=\"kw3\">end</span><br/><span class=\"kw1\">say</span>                                              <span class=\"coMULTI\">/*show a blank line for readability.   */</span><br/>            <span class=\"kw1\">do</span>\u00a0?j=<span class=\"nu0\">1</span> <span class=\"kw2\">to</span>\u00a0?L <span class=\"kw2\">while</span>\u00a0?j<span class=\"sy0\">&lt;</span>=varSet!<span class=\"sy0\">.</span>0<span class=\"sy0\">.</span>?x <span class=\"coMULTI\">/*display the list of  \"set\"  history. */</span><br/>            <span class=\"kw1\">say</span> <span class=\"st0\">'history entry'</span>\u00a0?j <span class=\"st0\">\"for var\"</span>\u00a0?z<span class=\"st0\">\":\"</span> varSet!<span class=\"sy0\">.</span>?J<span class=\"sy0\">.</span>?x<br/>            <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*?j*/</span><br/><span class=\"kw1\">return</span>\u00a0?j-<span class=\"nu0\">1</span>                                      <span class=\"coMULTI\">/*return the number of assignments.    */</span></pre>"}, {"lang": "Ruby", "loc": 9, "block": "<pre class=\"ruby highlighted_source\">foo_hist = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/><span class=\"kw3\">trace_var</span><span class=\"br0\">(</span>:$foo<span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>v<span class=\"sy0\">|</span> foo_hist.<span class=\"me1\">unshift</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$foo</span> = <span class=\"st0\">\"apple\"</span><br/><span class=\"re0\">$foo</span> = <span class=\"st0\">\"pear\"</span><br/><span class=\"re0\">$foo</span> = <span class=\"st0\">\"banana\"</span><br/>\u00a0<br/><span class=\"kw3\">p</span> foo_hist <span class=\"co1\"># =&gt; [\"banana\", \"pear\", \"apple\"]</span><br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 20, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> HVar<span class=\"br0\">[</span>A<span class=\"br0\">]</span><span class=\"br0\">(</span>initialValue<span class=\"sy0\">:</span> A<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> Proxy <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> self <span class=\"sy0\">=</span> <span class=\"sy0\">!</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> toString <span class=\"sy0\">=</span> <span class=\"st0\">\"HVar(\"</span> + <span class=\"sy0\">!</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a> + <span class=\"st0\">\")\"</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> history <span class=\"sy0\">=</span> <span class=\"sy0\">_</span>history<br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> <span class=\"sy0\">_</span>history <span class=\"sy0\">=</span> List<span class=\"br0\">(</span>initialValue<span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> unary<span class=\"sy0\">_!</span> <span class=\"sy0\">=</span> <span class=\"sy0\">_</span>history.<span class=\"me1\">head</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> <span class=\"sy0\">:=</span><span class=\"br0\">(</span>newValue<span class=\"sy0\">:</span> A<span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"sy0\">_</span>history <span class=\"sy0\">=</span> newValue <span class=\"sy0\">::</span> <span class=\"sy0\">_</span>history<br/>  <span class=\"br0\">}</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> modify<span class=\"br0\">(</span>f<span class=\"sy0\">:</span> A <span class=\"sy0\">=&gt;</span> A<span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"sy0\">_</span>history <span class=\"sy0\">=</span> f<span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"sy0\">_</span>history<br/>  <span class=\"br0\">}</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> undo<span class=\"sy0\">:</span> A <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> v <span class=\"sy0\">=</span> <span class=\"sy0\">!</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><br/>    <span class=\"sy0\">_</span>history <span class=\"sy0\">=</span> <span class=\"sy0\">_</span>history.<span class=\"me1\">tail</span><br/>    v<br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 28, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> HistoryVar<span class=\"br0\">(</span>v<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    has history = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    has variable = v<br/>\u00a0<br/>    method \u2254<span class=\"br0\">(</span>value<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        history <span class=\"sy0\">&lt;&lt;</span> variable<br/>        variable = value<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    method to_s <span class=\"br0\">{</span><br/>        <span class=\"st0\">\"#{variable}\"</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    method <span class=\"kw3\">AUTOLOAD</span><span class=\"br0\">(</span>_, name, <span class=\"sy0\">*</span>args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        variable.<span class=\"br0\">(</span>name<span class=\"br0\">)</span><span class=\"br0\">(</span>args...<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>var foo = HistoryVar<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/>foo \u2254 <span class=\"nu0\">1</span><br/>foo \u2254 <span class=\"nu0\">2</span><br/>foo \u2254 foo<span class=\"sy0\">+</span><span class=\"nu0\">3</span><br/>foo \u2254 <span class=\"nu0\">42</span><br/>\u00a0<br/>say <span class=\"st0\">\"History: #{foo.history}\"</span><br/>say <span class=\"st0\">\"Current value: #{foo}\"</span></pre>"}, {"lang": "Smalltalk", "loc": 36, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re0\">Object</span> subclass:<span class=\"st0\">'HVar'</span><br/>    instanceVariableNames:<span class=\"st0\">'values'</span> <br/>    classVariableNames:<span class=\"st0\">''</span> <br/>    poolDictionaries:<span class=\"st0\">''</span> <br/>    category:<span class=\"st0\">'example'</span>.<br/>!<br/>\u00a0<br/>!<span class=\"re0\">HVar</span> methodsFor:<span class=\"st0\">'accessing'</span>!<br/>\u00a0<br/>&lt;-- <span class=\"re5\">value</span><br/>    <span class=\"br0\">(</span><span class=\"re5\">values</span> ifNil:<span class=\"br0\">[</span><span class=\"re5\">values</span> <span class=\"sy0\">:=</span> <span class=\"re0\">OrderedCollection</span> new<span class=\"br0\">]</span><span class=\"br0\">)</span> add:<span class=\"re5\">value</span>.<br/>    ^  value<br/>!<br/>\u00a0<br/>value<br/>    ^ values last<br/>!<br/>\u00a0<br/>undo<br/>    values removeLast.<br/>!<br/>\u00a0<br/>history<br/>    ^ history<br/>!\u00a0!<br/>\u00a0<br/>|<span class=\"re3\">x</span>|<br/>\u00a0<br/><span class=\"re6\">x</span> <span class=\"sy0\">:=</span> <span class=\"re0\">HVar</span> new.<br/><span class=\"re5\">x</span> &lt;-- <span class=\"re5\">1</span>.<br/><span class=\"re5\">x</span> value.  <br/><span class=\"re5\">x</span> &lt;-- <span class=\"re5\">2</span>.<br/><span class=\"re5\">x</span> &lt;-- <span class=\"br0\">(</span><span class=\"re5\">x</span> value + <span class=\"re5\">1</span><span class=\"br0\">)</span>.<br/><span class=\"re5\">x</span> value.  <br/><span class=\"re5\">x</span> history. <br/>\u00a0</pre>"}, {"lang": "Swift", "loc": 12, "block": "<pre class=\"text highlighted_source\">var historyOfHistory = [Int]()<br/>var history:Int = 0 {<br/>    willSet {<br/>        historyOfHistory.append(history)<br/>    }<br/>}<br/>\u00a0<br/>history = 2<br/>history = 3<br/>history = 4<br/>println(historyOfHistory)<br/>\u00a0</pre>"}, {"lang": "Tcl", "loc": 33, "block": "<pre class=\"tcl highlighted_source\"><span class=\"co1\"># Define the history machinery</span><br/><span class=\"kw1\">proc</span> histvar <span class=\"br0\">{</span>varName operation<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">upvar</span> <span class=\"nu0\">1</span> <span class=\"re0\">$varName</span> v ___history<span class=\"br0\">(</span><span class=\"re0\">$varName</span><span class=\"br0\">)</span> <span class=\"kw2\">history</span><br/>    <span class=\"kw1\">switch</span> -- <span class=\"re0\">$operation</span> <span class=\"br0\">{</span><br/>\tstart <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> <span class=\"kw2\">history</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">info</span> exist v<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">lappend</span> <span class=\"kw2\">history</span> <span class=\"re0\">$v</span><br/>\t    <span class=\"br0\">}</span><br/>\t    trace add <span class=\"kw1\">variable</span> v write <span class=\"br0\">[</span><span class=\"kw2\">list</span> histvar.write <span class=\"re0\">$varName</span><span class=\"br0\">]</span><br/>\t    trace add <span class=\"kw1\">variable</span> v <span class=\"kw2\">read</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> histvar.<span class=\"kw2\">read</span> <span class=\"re0\">$varName</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw2\">list</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">return</span> <span class=\"re0\">$history</span><br/>\t<span class=\"br0\">}</span><br/>\tundo <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> <span class=\"kw2\">history</span> <span class=\"br0\">[</span><span class=\"kw2\">lrange</span> <span class=\"re0\">$history</span> <span class=\"nu0\">0</span> end-<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\tstop <span class=\"br0\">{</span><br/>\t    unset <span class=\"kw2\">history</span><br/>\t    trace remove <span class=\"kw1\">variable</span> v write <span class=\"br0\">[</span><span class=\"kw2\">list</span> histvar.write <span class=\"re0\">$varName</span><span class=\"br0\">]</span><br/>\t    trace remove <span class=\"kw1\">variable</span> v <span class=\"kw2\">read</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> histvar.<span class=\"kw2\">read</span> <span class=\"re0\">$varName</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> histvar.write <span class=\"br0\">{</span>key varName args<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">upvar</span> <span class=\"nu0\">1</span> <span class=\"re0\">$varName</span> v ___history<span class=\"br0\">(</span><span class=\"re0\">$key</span><span class=\"br0\">)</span> <span class=\"kw2\">history</span><br/>    <span class=\"kw2\">lappend</span> <span class=\"kw2\">history</span> <span class=\"re0\">$v</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> histvar.<span class=\"kw2\">read</span> <span class=\"br0\">{</span>key varName args<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">upvar</span> <span class=\"nu0\">1</span> <span class=\"re0\">$varName</span> v ___history<span class=\"br0\">(</span><span class=\"re0\">$key</span><span class=\"br0\">)</span> <span class=\"kw2\">history</span><br/>    <span class=\"kw1\">set</span> v <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$history</span> end<span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "zkl", "loc": 18, "block": "<pre class=\"text highlighted_source\">class HistoryVar{<br/>   var [private] _v, _history=List(), maxSz;<br/>   fcn init(v,maxEntries=3){ maxSz=maxEntries; set(v) }<br/>   fcn set(v){ <br/>      _v=v; _history.append(T(Time.Clock.time,v));<br/>      if(_history.len()&gt;maxSz) _history.del(0);<br/>      self<br/>   }<br/>   fcn get(n=0){  // look back into history<br/>      z:=_history.len();<br/>      n=(if(n&gt;=z) 0 else z-n-1);<br/>      _history[n][1] <br/>   }<br/>   var [proxy] v=fcn{ _v };<br/>   var [proxy] history=<br/>      fcn{ _history.pump(List,fcn([(t,v)]){ T(Time.Date.ctime(t),v) }) };<br/>   fcn __opAdd(x){ set(_v + x); self }<br/>}</pre>"}]}