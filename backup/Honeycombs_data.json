{"task": "Honeycombs", "blocks": [{"lang": "ActionScript", "loc": 216, "block": "<pre class=\"actionscript3 highlighted_source\">\u00a0<br/><span class=\"kw4\">package</span>  <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">import</span> <span class=\"kw6\">flash.display</span><span class=\"sy0\">.</span>GraphicsPathCommand<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">import</span> <span class=\"kw6\">flash.display</span><span class=\"sy0\">.</span><a href=\"http://www.google.com/search?q=sprite%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:sprite.html\"><span class=\"kw5\">Sprite</span></a><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">import</span> <span class=\"kw6\">flash.text</span><span class=\"sy0\">.</span><a href=\"http://www.google.com/search?q=textfield%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:textfield.html\"><span class=\"kw5\">TextField</span></a><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">import</span> <span class=\"kw6\">flash.text</span><span class=\"sy0\">.</span><a href=\"http://www.google.com/search?q=textfieldautosize%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:textfieldautosize.html\"><span class=\"kw5\">TextFieldAutoSize</span></a><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">import</span> <span class=\"kw6\">flash.text</span><span class=\"sy0\">.</span><a href=\"http://www.google.com/search?q=textformat%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:textformat.html\"><span class=\"kw5\">TextFormat</span></a><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/**<br/>     * A honeycomb.<br/>     */</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">class</span> Honeycomb <span class=\"kw1\">extends</span> <a href=\"http://www.google.com/search?q=sprite%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:sprite.html\"><span class=\"kw5\">Sprite</span></a> <span class=\"br0\">{</span><br/>\u00a0<br/>        <span class=\"coMULTI\">/**<br/>         * The sine of 60 degrees.<br/>         * <br/>         * @private<br/>         */</span><br/>        <span class=\"kw1\">private</span> static const SIN_60<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html\"><span class=\"kw5\">Number</span></a> = <a href=\"http://www.google.com/search?q=math%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:math.html\"><span class=\"kw5\">Math</span></a><span class=\"sy0\">.</span><span class=\"kw7\">sin</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=math%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:math.html\"><span class=\"kw5\">Math</span></a><span class=\"sy0\">.</span><span class=\"kw8\">PI</span> <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"coMULTI\">/**<br/>         * The cosine of 60 degrees.<br/>         * <br/>         * @private<br/>         */</span><br/>        <span class=\"kw1\">private</span> static const COS_60<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html\"><span class=\"kw5\">Number</span></a> = <a href=\"http://www.google.com/search?q=math%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:math.html\"><span class=\"kw5\">Math</span></a><span class=\"sy0\">.</span><span class=\"kw7\">cos</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=math%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:math.html\"><span class=\"kw5\">Math</span></a><span class=\"sy0\">.</span><span class=\"kw8\">PI</span> <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"coMULTI\">/**<br/>         * The drawing commands to be passed to Graphics.drawPath()<br/>         * <br/>         * @private<br/>         */</span><br/>        <span class=\"kw1\">private</span> static <span class=\"kw2\">var</span> _gCommands<span class=\"sy0\">:</span>Vector<span class=\"sy0\">.&lt;</span>int<span class=\"sy0\">&gt;</span> = <span class=\"kw1\">new</span> Vector<span class=\"sy0\">.&lt;</span>int<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"kw1\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"coMULTI\">/**<br/>         * The coordinates to be passed to Graphics.drawPath()<br/>         * <br/>         * @private<br/>         */</span><br/>        <span class=\"kw1\">private</span> static <span class=\"kw2\">var</span> _gCoords<span class=\"sy0\">:</span>Vector<span class=\"sy0\">.&lt;</span>Number<span class=\"sy0\">&gt;</span> = <span class=\"kw1\">new</span> Vector<span class=\"sy0\">.&lt;</span>Number<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">14</span><span class=\"sy0\">,</span> <span class=\"kw1\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"coMULTI\">/**<br/>         * The side length of the last honeycomb created.<br/>         */</span><br/>        <span class=\"kw1\">private</span> static <span class=\"kw2\">var</span> _lastSide<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html\"><span class=\"kw5\">Number</span></a><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"coMULTI\">/**<br/>         * The horizontal space difference (between the leftmost and topmost vertex) of the last hexagon drawn.<br/>         * <br/>         * @private<br/>         */</span><br/>        <span class=\"kw1\">private</span> static <span class=\"kw2\">var</span> _lastHSpace<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html\"><span class=\"kw5\">Number</span></a><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"coMULTI\">/**<br/>         * The heightof the last hexagon drawn.<br/>         * <br/>         * @private<br/>         */</span><br/>        <span class=\"kw1\">private</span> static <span class=\"kw2\">var</span> _lastHeight<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html\"><span class=\"kw5\">Number</span></a><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"br0\">{</span><br/>            _staticInit<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"coMULTI\">/**<br/>         * Initialises the Honeycomb class.<br/>         * <br/>         * @private<br/>         */</span><br/>        <span class=\"kw1\">private</span> static <span class=\"kw3\">function</span> _staticInit<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span><span class=\"kw1\">void</span> <span class=\"br0\">{</span><br/>            _gCommands<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = GraphicsPathCommand<span class=\"sy0\">.</span>MOVE_TO<span class=\"sy0\">;</span><br/>            _gCommands<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> = _gCommands<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> = _gCommands<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> = _gCommands<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> = _gCommands<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> = _gCommands<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span> = GraphicsPathCommand<span class=\"sy0\">.</span>LINE_TO<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"coMULTI\">/**<br/>         * Calculates the points of the hexagon for a given side length.<br/>         * <br/>         * @param side The length of the side.<br/>         */</span><br/>        <span class=\"kw1\">private</span> static <span class=\"kw3\">function</span> _calculatePoints<span class=\"br0\">(</span>side<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html\"><span class=\"kw5\">Number</span></a><span class=\"br0\">)</span><span class=\"sy0\">:</span><span class=\"kw1\">void</span> <span class=\"br0\">{</span><br/>\u00a0<br/>            <span class=\"kw2\">var</span> <span class=\"kw7\">height</span><span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html\"><span class=\"kw5\">Number</span></a> = side <span class=\"sy0\">*</span> SIN_60 <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>            <span class=\"kw2\">var</span> hSpace<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html\"><span class=\"kw5\">Number</span></a> = side <span class=\"sy0\">*</span> COS_60<span class=\"sy0\">;</span><br/>\u00a0<br/>            _gCoords<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = _gCoords<span class=\"br0\">[</span><span class=\"nu0\">12</span><span class=\"br0\">]</span> = <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            _gCoords<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> = _gCoords<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span> = hSpace<span class=\"sy0\">;</span><br/>            _gCoords<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> = _gCoords<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span> = hSpace <span class=\"sy0\">+</span> side<span class=\"sy0\">;</span><br/>            _gCoords<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span> = side <span class=\"sy0\">+</span> hSpace <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            _gCoords<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> = _gCoords<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span> = _gCoords<span class=\"br0\">[</span><span class=\"nu0\">13</span><span class=\"br0\">]</span> = <span class=\"kw7\">height</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>            _gCoords<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> = _gCoords<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> = <span class=\"kw7\">height</span><span class=\"sy0\">;</span><br/>            _gCoords<span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"br0\">]</span> = _gCoords<span class=\"br0\">[</span><span class=\"nu0\">11</span><span class=\"br0\">]</span> = <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            _lastSide = side<span class=\"sy0\">;</span><br/>            _lastHSpace = hSpace<span class=\"sy0\">;</span><br/>            _lastHeight = <span class=\"kw7\">height</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"coMULTI\">/**<br/>         * The side length of the honeycomb.<br/>         * <br/>         * @private<br/>         */</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw2\">var</span> _side<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html\"><span class=\"kw5\">Number</span></a><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"coMULTI\">/**<br/>         * The text field displaying the character in the honeycomb.<br/>         * <br/>         * @private<br/>         */</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw2\">var</span> _text<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=textfield%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:textfield.html\"><span class=\"kw5\">TextField</span></a><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"coMULTI\">/**<br/>         * The character code of the character in the honeycomb.<br/>         * <br/>         * @private<br/>         */</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw2\">var</span> _charCode<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=uint%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:uint.html\"><span class=\"kw5\">uint</span></a><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"coMULTI\">/**<br/>         * Whether the honeycomb has been activated (i.e. the activate() method has been called).<br/>         * <br/>         * @private<br/>         */</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw2\">var</span> _activated<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=boolean%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:boolean.html\"><span class=\"kw5\">Boolean</span></a> = <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"coMULTI\">/**<br/>         * Creates a new Honeycomb object.<br/>         * <br/>         * @param side The length of the side of the honeycomb.<br/>         * @param fill The honeycomb's fill colour.<br/>         * @param letter The character code of the letter to be displayed in the honeycomb.<br/>         * @param textColour The colour of the letter displayed inside the honeycomb.<br/>         */</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw3\">function</span> Honeycomb<span class=\"br0\">(</span>side<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html\"><span class=\"kw5\">Number</span></a><span class=\"sy0\">,</span> fill<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=uint%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:uint.html\"><span class=\"kw5\">uint</span></a><span class=\"sy0\">,</span> letter<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=uint%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:uint.html\"><span class=\"kw5\">uint</span></a><span class=\"sy0\">,</span> textColour<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=uint%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:uint.html\"><span class=\"kw5\">uint</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            _init<span class=\"br0\">(</span>side<span class=\"sy0\">,</span> fill<span class=\"sy0\">,</span> letter<span class=\"sy0\">,</span> textColour<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"coMULTI\">/**<br/>         * Initialises the Honeycomb object.<br/>         * <br/>         * @param side The length of the side of the honeycomb.<br/>         * @param fill The honeycomb's fill colour.<br/>         * @param letter The character code of the letter to be displayed in the honeycomb.<br/>         * @param textColour The colour of the letter displayed inside the honeycomb.<br/>         */</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw3\">function</span> _init<span class=\"br0\">(</span>side<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=number%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:number.html\"><span class=\"kw5\">Number</span></a><span class=\"sy0\">,</span> fill<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=uint%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:uint.html\"><span class=\"kw5\">uint</span></a><span class=\"sy0\">,</span> letter<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=uint%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:uint.html\"><span class=\"kw5\">uint</span></a><span class=\"sy0\">,</span> textColour<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=uint%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:uint.html\"><span class=\"kw5\">uint</span></a><span class=\"br0\">)</span><span class=\"sy0\">:</span><span class=\"kw1\">void</span> <span class=\"br0\">{</span><br/>\u00a0<br/>            <span class=\"kw7\">mouseChildren</span> = <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>            <span class=\"kw7\">buttonMode</span> = <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>            <span class=\"kw7\">useHandCursor</span> = <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw7\">graphics</span><span class=\"sy0\">.</span><span class=\"kw7\">beginFill</span><span class=\"br0\">(</span>fill<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw7\">graphics</span><span class=\"sy0\">.</span><span class=\"kw7\">lineStyle</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> 0x000000<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span> side <span class=\"sy0\">!</span>= _lastSide <span class=\"br0\">)</span><br/>                _calculatePoints<span class=\"br0\">(</span>side<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            _side = side<span class=\"sy0\">;</span><br/>            _charCode = letter<span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw7\">graphics</span><span class=\"sy0\">.</span>drawPath<span class=\"br0\">(</span>_gCommands<span class=\"sy0\">,</span> _gCoords<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            _text = <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?q=textfield%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:textfield.html\"><span class=\"kw5\">TextField</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            _text<span class=\"sy0\">.</span><span class=\"kw7\">autoSize</span> = <a href=\"http://www.google.com/search?q=textfieldautosize%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:textfieldautosize.html\"><span class=\"kw5\">TextFieldAutoSize</span></a><span class=\"sy0\">.</span><span class=\"kw8\">CENTER</span><span class=\"sy0\">;</span><br/>            _text<span class=\"sy0\">.</span><span class=\"kw7\">defaultTextFormat</span> = <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?q=textformat%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:textformat.html\"><span class=\"kw5\">TextFormat</span></a><span class=\"br0\">(</span><span class=\"st0\">'_sans'</span><span class=\"sy0\">,</span> side <span class=\"sy0\">*</span> <span class=\"nu0\">1.2</span><span class=\"sy0\">,</span> textColour<span class=\"sy0\">,</span> <span class=\"kw1\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            _text<span class=\"sy0\">.</span><span class=\"kw7\">text</span> = <a href=\"http://www.google.com/search?q=string%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:string.html\"><span class=\"kw5\">String</span></a><span class=\"sy0\">.</span><span class=\"kw7\">fromCharCode</span><span class=\"br0\">(</span>letter<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            _text<span class=\"sy0\">.</span><span class=\"kw7\">x</span> = <span class=\"br0\">(</span>side <span class=\"sy0\">+</span> _lastHSpace <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> _text<span class=\"sy0\">.</span><span class=\"kw7\">width</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>            _text<span class=\"sy0\">.</span><span class=\"kw7\">y</span> = <span class=\"br0\">(</span>_lastHeight <span class=\"sy0\">-</span> _text<span class=\"sy0\">.</span><span class=\"kw7\">height</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw7\">addChild</span><span class=\"br0\">(</span>_text<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"coMULTI\">/**<br/>         * The character code of the character in the honeycomb.<br/>         */</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw3\">function</span> <span class=\"kw1\">get</span> <span class=\"kw7\">charCode</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=uint%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:uint.html\"><span class=\"kw5\">uint</span></a> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> _charCode<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"coMULTI\">/**<br/>         * Whether the honeycomb has been activated (i.e. the activate() method has been called).<br/>         */</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw3\">function</span> <span class=\"kw1\">get</span> activated<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=boolean%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:boolean.html\"><span class=\"kw5\">Boolean</span></a> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> _activated<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"coMULTI\">/**<br/>         * Activates the honeycomb and changes its colour.<br/>         * <br/>         * @param backColour The new fill colour of the honeycomb.<br/>         * @param textColour The new text colour of the honeycomb.<br/>         */</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw3\">function</span> <span class=\"kw7\">activate</span><span class=\"br0\">(</span>backColour<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=uint%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:uint.html\"><span class=\"kw5\">uint</span></a><span class=\"sy0\">,</span> textColour<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=uint%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:uint.html\"><span class=\"kw5\">uint</span></a><span class=\"br0\">)</span><span class=\"sy0\">:</span><span class=\"kw1\">void</span> <span class=\"br0\">{</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span> _side <span class=\"sy0\">!</span>= _lastSide <span class=\"br0\">)</span><br/>                _calculatePoints<span class=\"br0\">(</span>_side<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw7\">graphics</span><span class=\"sy0\">.</span><span class=\"kw7\">beginFill</span><span class=\"br0\">(</span>backColour<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw7\">graphics</span><span class=\"sy0\">.</span>drawPath<span class=\"br0\">(</span>_gCommands<span class=\"sy0\">,</span> _gCoords<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw2\">var</span> textFormat<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=textformat%20inurl:http://livedocs.adobe.com/flex/201/langref/%20inurl:textformat.html\"><span class=\"kw5\">TextFormat</span></a> = _text<span class=\"sy0\">.</span><span class=\"kw7\">getTextFormat</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            textFormat<span class=\"sy0\">.</span><span class=\"kw7\">color</span> = textColour<span class=\"sy0\">;</span><br/>            _text<span class=\"sy0\">.</span><span class=\"kw7\">setTextFormat</span><span class=\"br0\">(</span>textFormat<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            _activated = <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 84, "block": "<pre class=\"text highlighted_source\">      ALTERNATE = 1<br/>      VDU 23,22,252;252;8,16,16,128<br/>      *FONT Arial,24,B<br/>\u00a0<br/>      Letters$ = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"<br/>      Letters% =\u00a0!^Letters$<br/>      FOR i% = 0 TO 24<br/>        SWAP Letters%?i%, Letters%?(i%+RND(26-i%)-1)<br/>      NEXT<br/>\u00a0<br/>      DIM xpos%(20), ypos%(20), hrgn%(20)<br/>      C% = 1<br/>      FOR Y% = 36 TO 192 STEP 52<br/>        FOR X% = 35 TO 215 STEP 90<br/>          xpos%(C%) = X%<br/>          ypos%(C%) = Y%<br/>          C% += 1<br/>        NEXT<br/>        FOR X% = 80 TO 170 STEP 90<br/>          xpos%(C%) = X%<br/>          ypos%(C%) = Y%+26<br/>          C% += 1<br/>        NEXT<br/>      NEXT<br/>\u00a0<br/>      REM Plot the hexagons:<br/>      FOR C% = 1 TO 20<br/>        hrgn%(C%) = FNplothexagon(xpos%(C%), ypos%(C%), &amp;00FFFF, \\<br/>        \\           MID$(Letters$,C%,1), &amp;0000FF)<br/>      NEXT<br/>      SYS \"InvalidateRect\", @hwnd%, 0, 0<br/>\u00a0<br/>      REM Initialise word selected:<br/>      Word$ = \"\"<br/>\u00a0<br/>      REM Monitor mouse clicks:<br/>      ON MOUSE PROCmouse(@wparam%,@lparam%)\u00a0: RETURN<br/>\u00a0<br/>      REM Monitor keypresses:<br/>      REPEAT<br/>        key$ = INKEY$(1)<br/>        IF key$ &gt;= \"a\" key$ = CHR$(ASCkey$-32)<br/>        C% = INSTR(Letters$, key$)<br/>        IF C% IF C%&lt;21 IF hrgn%(C%) PROCselect(C%)<br/>      UNTIL FALSE<br/>      END<br/>\u00a0<br/>      REM Select a hexagon with the keyboard or mouse:<br/>      DEF PROCselect(C%)<br/>      hrgn%(C%) = 0 * FNplothexagon(xpos%(C%), ypos%(C%), &amp;FF00FF, \\<br/>      \\               MID$(Letters$,C%,1), &amp;000000)<br/>      SYS \"InvalidateRect\", @hwnd%, 0, 0<br/>      Word$ += MID$(Letters$, C%, 1)<br/>      SYS \"SetWindowText\", @hwnd%, Word$<br/>      ENDPROC<br/>\u00a0<br/>      DEF PROCmouse(W%, L%)<br/>      LOCAL C%, R%<br/>      IF W%&lt;&gt;1 ENDPROC<br/>      FOR C% = 1 TO 20<br/>        SYS \"PtInRegion\", hrgn%(C%), L% AND &amp;FFFF, L% &gt;&gt;&gt; 16 TO R%<br/>        IF R% PROCselect(C%)<br/>      NEXT<br/>      ENDPROC<br/>\u00a0<br/>      DEF FNplothexagon(x%, y%, hcol%, text$, tcol%)<br/>      LOCAL brush%, pen%, hrgn%, pt%(), size{}<br/>      DIM pt%(5,1), size{dx%,dy%}<br/>      pt%() = x%-30,y%,x%-15,y%+26,x%+15,y%+26,x%+30,y%,x%+15,y%-26,x%-15,y%-26<br/>      SYS \"CreatePen\", 0, 3, 0 TO pen%<br/>      SYS \"CreateSolidBrush\", hcol% TO brush%<br/>      SYS \"SelectObject\", @memhdc%, pen% TO pen%<br/>      SYS \"SelectObject\", @memhdc%, brush% TO brush%<br/>      SYS \"Polygon\", @memhdc%, ^pt%(0,0), 6<br/>      SYS \"SelectObject\", @memhdc%, pen% TO pen%<br/>      SYS \"SelectObject\", @memhdc%, brush% TO brush%<br/>      SYS \"DeleteObject\", pen%<br/>      SYS \"DeleteObject\", brush%<br/>      SYS \"GetTextExtentPoint32\", @memhdc%, text$, LEN(text$), size{}<br/>      SYS \"SetTextColor\", @memhdc%, tcol%<br/>      SYS \"SetBkColor\", @memhdc%, hcol%<br/>      SYS \"TextOut\", @memhdc%, x%-size.dx%/2, y%-size.dy%/2, text$, LEN(text$)<br/>      SYS \"CreatePolygonRgn\", ^pt%(0,0), 6, ALTERNATE TO hrgn%<br/>      = hrgn%</pre>"}, {"lang": "C", "loc": 271, "block": "<pre class=\"c highlighted_source\">\u00a0<br/>\u00a0<br/><span class=\"coMULTI\">/* Program for gtk3 */</span><br/><span class=\"coMULTI\">/* discovery: essential to use consistent documentation */</span><br/><span class=\"coMULTI\">/* compilation on linux: */</span><br/><span class=\"coMULTI\">/* $ a=./hexagon &amp;&amp; make -k \"CFLAGS=$( pkg-config --cflags gtk+-3.0 )\" \"LOADLIBES=$( pkg-config --libs gtk+-3.0 )\" $a &amp;&amp; $a --gtk-debug=all */</span><br/><span class=\"coMULTI\">/* search for  to do */</span><br/><span class=\"coMULTI\">/* The keyboard and mouse callbacks increment the \"selected\" status, */</span><br/><span class=\"coMULTI\">/* of the matching hexagon, */</span><br/><span class=\"coMULTI\">/* then invalidate the drawing window which triggers a draw event. */</span><br/><span class=\"coMULTI\">/* The draw callback redraws the screen and tests for completion, */</span><br/><span class=\"coMULTI\">/* upon which the program spits back the characters selected and exits */</span><br/>\u00a0<br/><span class=\"co2\">#include&lt;math.h&gt;</span><br/><span class=\"co2\">#include&lt;string.h&gt;</span><br/><span class=\"co2\">#include&lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include&lt;gtk/gtk.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">static</span> GdkPixbuf<span class=\"sy0\">*</span>create_pixbuf<span class=\"br0\">(</span><span class=\"kw4\">const</span> gchar<span class=\"sy0\">*</span>filename<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  GdkPixbuf<span class=\"sy0\">*</span>pixbuf<span class=\"sy0\">;</span><br/>  GError<span class=\"sy0\">*</span>error <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/>  pixbuf <span class=\"sy0\">=</span> gdk_pixbuf_new_from_file<span class=\"br0\">(</span>filename<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>error<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>pixbuf<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> error<span class=\"sy0\">-&gt;</span>message<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    g_error_free<span class=\"br0\">(</span>error<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> pixbuf<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">#define NGON struct ngon</span><br/>NGON <span class=\"br0\">{</span><br/>  <span class=\"kw4\">double</span> Cx<span class=\"sy0\">,</span>Cy<span class=\"sy0\">,</span> r<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">int</span> sides<span class=\"sy0\">,</span> selected<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">char</span> c<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>GRand<span class=\"sy0\">*</span>random_numbers <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co2\">#define R 20</span><br/><span class=\"co2\">#define TAU (2*M_PI)\t   /* http://laughingsquid.com/pi-is-wrong/ */</span><br/><span class=\"co2\">#define OFFSET_X (1+sin(TAU/12))</span><br/><span class=\"co2\">#define OFFSET_Y (cos(TAU/12))</span><br/><span class=\"co2\">#define ODD(A) ((A)&amp;1)</span><br/>\u00a0<br/><span class=\"kw4\">static</span> <span class=\"kw4\">void</span> initialize_hexagons<span class=\"br0\">(</span>NGON<span class=\"sy0\">*</span>hs<span class=\"sy0\">,</span><span class=\"kw4\">size_t</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  NGON<span class=\"sy0\">*</span>h<span class=\"sy0\">;</span><br/>  gint i<span class=\"sy0\">,</span>broken<span class=\"sy0\">;</span><br/>  GQueue<span class=\"sy0\">*</span>shuffler <span class=\"sy0\">=</span> g_queue_new<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>NULL <span class=\"sy0\">==</span> shuffler<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fputs.html\"><span class=\"kw3\">fputs</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>cannot allocate shuffling queue.  quitting!<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span>stderr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span>EXIT_FAILURE<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"coMULTI\">/* randomize characters by stuffing them onto a double end queue<br/>     and popping them off from random positions */</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>broken <span class=\"sy0\">=</span> <span class=\"br0\">(</span>NULL <span class=\"sy0\">==</span> random_numbers<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    random_numbers <span class=\"sy0\">=</span> g_rand_new<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"st0\">'A'</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"st0\">'Z'</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span><br/>    g_queue_push_head<span class=\"br0\">(</span>shuffler<span class=\"sy0\">,</span>GINT_TO_POINTER<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memset.html\"><span class=\"kw3\">memset</span></a><span class=\"br0\">(</span>hs<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>n<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>NGON<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  hs<span class=\"br0\">[</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">sides</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>\t\t<span class=\"coMULTI\">/* assign the sentinel */</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>h <span class=\"sy0\">=</span> hs<span class=\"sy0\">;</span> <span class=\"sy0\">!</span>h<span class=\"sy0\">-&gt;</span>sides<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>h<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/div.html\"><span class=\"kw3\">div</span></a> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>h<span class=\"sy0\">-</span>hs<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> mod <span class=\"sy0\">=</span> <span class=\"br0\">(</span>h<span class=\"sy0\">-</span>hs<span class=\"br0\">)</span><span class=\"sy0\">%</span><span class=\"nu19\">4</span><span class=\"sy0\">;</span><br/>    h<span class=\"sy0\">-&gt;</span>sides <span class=\"sy0\">=</span> <span class=\"nu0\">6</span><span class=\"sy0\">;</span><br/>    h<span class=\"sy0\">-&gt;</span>c <span class=\"sy0\">=</span> GPOINTER_TO_INT<span class=\"br0\">(</span><br/>\t     g_queue_pop_nth<span class=\"br0\">(</span><br/>\t       shuffler<span class=\"sy0\">,</span><br/>\t       g_rand_int_range<span class=\"br0\">(</span><br/>\t\t random_numbers<span class=\"sy0\">,</span><br/>\t\t <span class=\"br0\">(</span>gint32<span class=\"br0\">)</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>\t\t <span class=\"br0\">(</span>gint32<span class=\"br0\">)</span>g_queue_get_length<span class=\"br0\">(</span>shuffler<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fputc.html\"><span class=\"kw3\">fputc</span></a><span class=\"br0\">(</span>h<span class=\"sy0\">-&gt;</span>c<span class=\"sy0\">,</span>stderr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    h<span class=\"sy0\">-&gt;</span>r <span class=\"sy0\">=</span> R<span class=\"sy0\">;</span><br/>    h<span class=\"sy0\">-&gt;</span>Cx <span class=\"sy0\">=</span> R<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">+</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/div.html\"><span class=\"kw3\">div</span></a><span class=\"sy0\">*</span>OFFSET_X<span class=\"br0\">)</span><span class=\"sy0\">,</span> h<span class=\"sy0\">-&gt;</span>Cy <span class=\"sy0\">=</span> R<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span>mod<span class=\"sy0\">*</span>OFFSET_Y<span class=\"br0\">)</span><span class=\"sy0\">+</span>ODD<span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/div.html\"><span class=\"kw3\">div</span></a><span class=\"br0\">)</span><span class=\"sy0\">*</span>OFFSET_Y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span><span class=\"st0\">\"(%g,%g)<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span>h<span class=\"sy0\">-&gt;</span>Cx<span class=\"sy0\">,</span>h<span class=\"sy0\">-&gt;</span>Cy<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fputc.html\"><span class=\"kw3\">fputc</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy0\">,</span>stderr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  g_queue_free<span class=\"br0\">(</span>shuffler<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>broken<span class=\"br0\">)</span><br/>    g_rand_free<span class=\"br0\">(</span>random_numbers<span class=\"br0\">)</span><span class=\"sy0\">;</span>  <br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">static</span> <span class=\"kw4\">void</span> add_loop<span class=\"br0\">(</span>cairo_t<span class=\"sy0\">*</span>cr<span class=\"sy0\">,</span>NGON<span class=\"sy0\">*</span>hs<span class=\"sy0\">,</span><span class=\"kw4\">int</span> select<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  NGON<span class=\"sy0\">*</span>h<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">double</span> r<span class=\"sy0\">,</span>Cx<span class=\"sy0\">,</span>Cy<span class=\"sy0\">,</span>x<span class=\"sy0\">,</span>y<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> sides<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>h <span class=\"sy0\">=</span> hs<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>sides <span class=\"sy0\">=</span> h<span class=\"sy0\">-&gt;</span>sides<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>h<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>select <span class=\"sy0\">&amp;&amp;</span> h<span class=\"sy0\">-&gt;</span>selected<span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>select <span class=\"sy0\">==</span> h<span class=\"sy0\">-&gt;</span>selected<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      r <span class=\"sy0\">=</span> h<span class=\"sy0\">-&gt;</span>r<span class=\"sy0\">,</span> Cx <span class=\"sy0\">=</span> h<span class=\"sy0\">-&gt;</span>Cx<span class=\"sy0\">,</span> Cy <span class=\"sy0\">=</span> h<span class=\"sy0\">-&gt;</span>Cy<span class=\"sy0\">;</span><br/>      i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>      x <span class=\"sy0\">=</span> Cx<span class=\"sy0\">+</span>r<span class=\"sy0\">*</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/cos.html\"><span class=\"kw3\">cos</span></a><span class=\"br0\">(</span>TAU<span class=\"sy0\">*</span>i<span class=\"sy0\">/</span>sides<span class=\"br0\">)</span><span class=\"sy0\">,</span> y <span class=\"sy0\">=</span> Cy<span class=\"sy0\">+</span>r<span class=\"sy0\">*</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sin.html\"><span class=\"kw3\">sin</span></a><span class=\"br0\">(</span>TAU<span class=\"sy0\">*</span>i<span class=\"sy0\">/</span>sides<span class=\"br0\">)</span><span class=\"sy0\">,</span> cairo_move_to<span class=\"br0\">(</span>cr<span class=\"sy0\">,</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> sides<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span><br/>        x <span class=\"sy0\">=</span> Cx<span class=\"sy0\">+</span>r<span class=\"sy0\">*</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/cos.html\"><span class=\"kw3\">cos</span></a><span class=\"br0\">(</span>TAU<span class=\"sy0\">*</span>i<span class=\"sy0\">/</span>sides<span class=\"br0\">)</span><span class=\"sy0\">,</span> y <span class=\"sy0\">=</span> Cy<span class=\"sy0\">+</span>r<span class=\"sy0\">*</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sin.html\"><span class=\"kw3\">sin</span></a><span class=\"br0\">(</span>TAU<span class=\"sy0\">*</span>i<span class=\"sy0\">/</span>sides<span class=\"br0\">)</span><span class=\"sy0\">,</span> cairo_line_to<span class=\"br0\">(</span>cr<span class=\"sy0\">,</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      cairo_close_path<span class=\"br0\">(</span>cr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">static</span> <span class=\"kw4\">int</span> make_labels<span class=\"br0\">(</span>cairo_t<span class=\"sy0\">*</span>cr<span class=\"sy0\">,</span>NGON<span class=\"sy0\">*</span>hs<span class=\"sy0\">,</span><span class=\"kw4\">int</span> select<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  NGON<span class=\"sy0\">*</span>h<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">char</span> text<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  text<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>h <span class=\"sy0\">=</span> hs<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&lt;</span> h<span class=\"sy0\">-&gt;</span>sides<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>h<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>select <span class=\"sy0\">&amp;&amp;</span> h<span class=\"sy0\">-&gt;</span>selected<span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>select <span class=\"sy0\">==</span> h<span class=\"sy0\">-&gt;</span>selected<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"coMULTI\">/* yuck, need to measure the font.  Better to use pango_cairo */</span><br/>      <span class=\"sy0\">*</span>text <span class=\"sy0\">=</span> h<span class=\"sy0\">-&gt;</span>c<span class=\"sy0\">,</span> cairo_move_to<span class=\"br0\">(</span>cr<span class=\"sy0\">,</span>h<span class=\"sy0\">-&gt;</span>Cx<span class=\"sy0\">,</span>h<span class=\"sy0\">-&gt;</span>Cy<span class=\"br0\">)</span><span class=\"sy0\">,</span> cairo_show_text<span class=\"br0\">(</span>cr<span class=\"sy0\">,</span>text<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">++</span>i<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> i<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">static</span> <span class=\"kw4\">int</span> archive<span class=\"br0\">(</span><span class=\"kw4\">int</span> a<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw4\">static</span> GQueue<span class=\"sy0\">*</span>q <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>NULL <span class=\"sy0\">==</span> q<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>NULL <span class=\"sy0\">==</span> <span class=\"br0\">(</span>q <span class=\"sy0\">=</span> g_queue_new<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fputs.html\"><span class=\"kw3\">fputs</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>cannot allocate archival queue.  quitting!<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span>stderr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span>EXIT_FAILURE<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a <span class=\"sy0\">&lt;</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\t\t\t<span class=\"coMULTI\">/* reset */</span><br/>    <span class=\"kw1\">return</span> g_queue_free<span class=\"br0\">(</span>q<span class=\"br0\">)</span><span class=\"sy0\">,</span> q <span class=\"sy0\">=</span> NULL<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">==</span> a<span class=\"br0\">)</span>\t\t\t<span class=\"coMULTI\">/* pop off tail */</span><br/>    <span class=\"kw1\">return</span> g_queue_is_empty<span class=\"br0\">(</span>q<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span> GPOINTER_TO_INT<span class=\"br0\">(</span>g_queue_pop_tail<span class=\"br0\">(</span>q<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>a<span class=\"br0\">)</span>\t\t\t<span class=\"coMULTI\">/* peek most recent entry */</span><br/>    <span class=\"kw1\">return</span> g_queue_is_empty<span class=\"br0\">(</span>q<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span> GPOINTER_TO_INT<span class=\"br0\">(</span>g_queue_peek_head<span class=\"br0\">(</span>q<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  g_queue_push_head<span class=\"br0\">(</span>q<span class=\"sy0\">,</span>GINT_TO_POINTER<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* store */</span><br/>  <span class=\"kw1\">return</span> a<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* to do: use appropriate sizing, use the cairo transformation matrix */</span><br/><span class=\"kw4\">static</span> gboolean draw<span class=\"br0\">(</span>GtkWidget<span class=\"sy0\">*</span>widget<span class=\"sy0\">,</span>cairo_t<span class=\"sy0\">*</span>cr<span class=\"sy0\">,</span>gpointer data<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/* unselected fill in yellow */</span><br/>  cairo_set_source_rgba<span class=\"br0\">(</span>cr<span class=\"sy0\">,</span><span class=\"nu16\">0.8</span><span class=\"sy0\">,</span><span class=\"nu16\">0.8</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>  add_loop<span class=\"br0\">(</span>cr<span class=\"sy0\">,</span><span class=\"br0\">(</span>NGON<span class=\"sy0\">*</span><span class=\"br0\">)</span>data<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  cairo_fill<span class=\"br0\">(</span>cr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/* selected fill, purple */</span><br/>  cairo_set_source_rgba<span class=\"br0\">(</span>cr<span class=\"sy0\">,</span><span class=\"nu16\">0.8</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu16\">0.8</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  add_loop<span class=\"br0\">(</span>cr<span class=\"sy0\">,</span><span class=\"br0\">(</span>NGON<span class=\"sy0\">*</span><span class=\"br0\">)</span>data<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  cairo_fill_preserve<span class=\"br0\">(</span>cr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/* all outlines gray, background shows through, fun fun! */</span><br/>  cairo_set_line_width <span class=\"br0\">(</span>cr<span class=\"sy0\">,</span> <span class=\"nu16\">3.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  cairo_set_source_rgba<span class=\"br0\">(</span>cr<span class=\"sy0\">,</span><span class=\"nu16\">0.7</span><span class=\"sy0\">,</span><span class=\"nu16\">0.7</span><span class=\"sy0\">,</span><span class=\"nu16\">0.7</span><span class=\"sy0\">,</span><span class=\"nu16\">0.7</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>  add_loop<span class=\"br0\">(</span>cr<span class=\"sy0\">,</span><span class=\"br0\">(</span>NGON<span class=\"sy0\">*</span><span class=\"br0\">)</span>data<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  cairo_stroke<span class=\"br0\">(</span>cr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/* select labels */</span><br/>  cairo_set_source_rgba<span class=\"br0\">(</span>cr<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  make_labels<span class=\"br0\">(</span>cr<span class=\"sy0\">,</span><span class=\"br0\">(</span>NGON<span class=\"sy0\">*</span><span class=\"br0\">)</span>data<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  cairo_stroke<span class=\"br0\">(</span>cr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/* unselected labels */</span><br/>  cairo_set_source_rgba<span class=\"br0\">(</span>cr<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"coMULTI\">/* to do: clean up this exit code */</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>make_labels<span class=\"br0\">(</span>cr<span class=\"sy0\">,</span><span class=\"br0\">(</span>NGON<span class=\"sy0\">*</span><span class=\"br0\">)</span>data<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> c<span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>c <span class=\"sy0\">=</span> archive<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/puts.html\"><span class=\"kw3\">puts</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>finished\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    archive<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span>EXIT_SUCCESS<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  cairo_stroke<span class=\"br0\">(</span>cr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> TRUE<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/*the widget is a GtkDrawingArea*/</span><br/><span class=\"kw4\">static</span> gboolean button_press_event<span class=\"br0\">(</span>GtkWidget<span class=\"sy0\">*</span>widget<span class=\"sy0\">,</span><span class=\"kw4\">const</span> GdkEvent<span class=\"sy0\">*</span>event<span class=\"sy0\">,</span>gpointer data<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  NGON<span class=\"sy0\">*</span>h<span class=\"sy0\">,*</span>hs <span class=\"sy0\">=</span> <span class=\"br0\">(</span>NGON<span class=\"sy0\">*</span><span class=\"br0\">)</span>data<span class=\"sy0\">;</span><br/>  gdouble x_win<span class=\"sy0\">,</span> y_win<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>gdk_event_get_coords<span class=\"br0\">(</span>event<span class=\"sy0\">,&amp;</span>x_win<span class=\"sy0\">,&amp;</span>y_win<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fputs.html\"><span class=\"kw3\">fputs</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>BUTTON, gdk_event_get_coords(event,&amp;x_win,&amp;y_win)) failed<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span>stderr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span><span class=\"st0\">\"x_win=%g y_win=%g<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>x_win<span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>y_win<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>h <span class=\"sy0\">=</span> hs<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&lt;</span> h<span class=\"sy0\">-&gt;</span>sides<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>h<span class=\"br0\">)</span> <span class=\"coMULTI\">/* detection algorithm: */</span><br/>      <span class=\"coMULTI\">/* if mouse click within inner radius of hexagon */</span><br/>      <span class=\"coMULTI\">/* Much easier than all in-order cross products have same sign test! */</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/pow.html\"><span class=\"kw3\">pow</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span>x_win<span class=\"sy0\">-</span>h<span class=\"sy0\">-&gt;</span>Cx<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/pow.html\"><span class=\"kw3\">pow</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span>y_win<span class=\"sy0\">-</span>h<span class=\"sy0\">-&gt;</span>Cy<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/pow.html\"><span class=\"kw3\">pow</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span>h<span class=\"sy0\">-&gt;</span>r<span class=\"sy0\">*</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/cos.html\"><span class=\"kw3\">cos</span></a><span class=\"br0\">(</span>TAU<span class=\"sy0\">/</span><span class=\"br0\">(</span><span class=\"nu0\">180</span><span class=\"sy0\">/</span>h<span class=\"sy0\">-&gt;</span>sides<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"sy0\">++</span>h<span class=\"sy0\">-&gt;</span>selected<span class=\"sy0\">;</span><br/>\tarchive<span class=\"br0\">(</span>h<span class=\"sy0\">-&gt;</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"coMULTI\">/* discovery: gdk_window_invalidate_region with NULL second argument does not work */</span><br/>\tgdk_window_invalidate_rect<span class=\"br0\">(</span>gtk_widget_get_window<span class=\"br0\">(</span>widget<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> GdkRectangle<span class=\"sy0\">*</span><span class=\"br0\">)</span>NULL<span class=\"sy0\">,</span>TRUE<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> TRUE<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">static</span> gboolean key_press_event<span class=\"br0\">(</span>GtkWidget<span class=\"sy0\">*</span>widget<span class=\"sy0\">,</span><span class=\"kw4\">const</span> GdkEvent<span class=\"sy0\">*</span>event<span class=\"sy0\">,</span>gpointer data<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  NGON<span class=\"sy0\">*</span>h<span class=\"sy0\">,*</span>hs <span class=\"sy0\">=</span> <span class=\"br0\">(</span>NGON<span class=\"sy0\">*</span><span class=\"br0\">)</span>data<span class=\"sy0\">;</span><br/>  guint keyval<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">int</span> unicode<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>gdk_event_get_keyval<span class=\"br0\">(</span>event<span class=\"sy0\">,&amp;</span>keyval<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fputs.html\"><span class=\"kw3\">fputs</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>KEY!  gdk_event_get_keyval(event,&amp;keyval)) failed.<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span>stderr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>    unicode <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>gdk_keyval_to_unicode<span class=\"br0\">(</span>gdk_keyval_to_upper<span class=\"br0\">(</span>keyval<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span><span class=\"st0\">\"key with unicode value:\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span>unicode<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>h <span class=\"sy0\">=</span> hs<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&lt;</span> h<span class=\"sy0\">-&gt;</span>sides<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>h<span class=\"br0\">)</span> <span class=\"coMULTI\">/* look for a matching character associated with a hexagon */</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>h<span class=\"sy0\">-&gt;</span>c <span class=\"sy0\">==</span> unicode<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"sy0\">++</span><span class=\"br0\">(</span>h<span class=\"sy0\">-&gt;</span>selected<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tarchive<span class=\"br0\">(</span>h<span class=\"sy0\">-&gt;</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"coMULTI\">/* discovery: gdk_window_invalidate_region with NULL second argument does not work */</span><br/>\tgdk_window_invalidate_rect<span class=\"br0\">(</span>gtk_widget_get_window<span class=\"br0\">(</span>widget<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> GdkRectangle<span class=\"sy0\">*</span><span class=\"br0\">)</span>NULL<span class=\"sy0\">,</span>TRUE<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> TRUE<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span><span class=\"kw4\">char</span><span class=\"sy0\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  GtkWidget <span class=\"sy0\">*</span>window<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>vbox<span class=\"sy0\">,</span> <span class=\"coMULTI\">/* *label, */</span> <span class=\"sy0\">*</span>drawing_area<span class=\"sy0\">;</span><br/>  NGON ngons<span class=\"br0\">[</span><span class=\"nu0\">21</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>\t   <span class=\"coMULTI\">/* sentinal has negative number of sides */</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/* discovery: gtk_init removes gtk debug flags, such as --gtk-debug=all */</span><br/>  <span class=\"coMULTI\">/*   also calls gdk_init which handles --display and --screen or other X11 communication issues */</span><br/>  gtk_init<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>argc<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>argv<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/* GTK VERSION 3.2.0 */</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span><span class=\"st0\">\"GTK VERSION\u00a0%d.%d.%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span>GTK_MAJOR_VERSION<span class=\"sy0\">,</span>GTK_MINOR_VERSION<span class=\"sy0\">,</span>GTK_MICRO_VERSION<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  window <span class=\"sy0\">=</span> gtk_window_new<span class=\"br0\">(</span>GTK_WINDOW_TOPLEVEL<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/* discovery: to make window transparent I have to use the alpha channel correctly */</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/* discovery: GTK_WINDOW(GtkWidget*) casts the widget to window */</span><br/>  <span class=\"coMULTI\">/* discovery: window in the function name?  use GTK_WINDOW.  g_ in function name?  use G_OBJECT */</span><br/>  gtk_window_set_title<span class=\"br0\">(</span>GTK_WINDOW<span class=\"br0\">(</span>window<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Rosetta Code Honeycomb, C with GTK\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  gtk_window_set_default_size<span class=\"br0\">(</span>GTK_WINDOW<span class=\"br0\">(</span>window<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">308</span><span class=\"sy0\">,</span> <span class=\"nu0\">308</span><span class=\"sy0\">+</span><span class=\"nu0\">12</span><span class=\"sy0\">+</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* XxY */</span><br/>  <span class=\"coMULTI\">/* discovery: making the window vanish does not stop the program */</span><br/>  <span class=\"coMULTI\">/* discovery: NULL is placeholder for extra data sent to the callback */</span><br/>  g_signal_connect_swapped<span class=\"br0\">(</span>G_OBJECT<span class=\"br0\">(</span>window<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\"destroy\"</span><span class=\"sy0\">,</span>G_CALLBACK<span class=\"br0\">(</span>gtk_main_quit<span class=\"br0\">)</span><span class=\"sy0\">,</span>NULL<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/* I created /tmp/favicon.ico from http://rosettacode.org/favicon.ico */</span><br/>  <span class=\"coMULTI\">/* Your window manager could use the icon, if it exists, and you fix the file name */</span><br/>  gtk_window_set_icon<span class=\"br0\">(</span>GTK_WINDOW<span class=\"br0\">(</span>window<span class=\"br0\">)</span><span class=\"sy0\">,</span>create_pixbuf<span class=\"br0\">(</span><span class=\"st0\">\"/tmp/favicon.ico\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  vbox <span class=\"sy0\">=</span> gtk_vbox_new<span class=\"br0\">(</span>TRUE<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  gtk_container_add<span class=\"br0\">(</span>GTK_CONTAINER<span class=\"br0\">(</span>window<span class=\"br0\">)</span><span class=\"sy0\">,</span>vbox<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/* to do: fix the label widget */</span><br/>  <span class=\"coMULTI\">/* I did not learn to control multiple box packing, and I was */</span><br/>  <span class=\"coMULTI\">/* too lazy to make the label widget accessible.  Plan was to */</span><br/>  <span class=\"coMULTI\">/* insert the most recent character using \"peek\" option of the archive */</span><br/><span class=\"co2\">#if 0</span><br/>  label <span class=\"sy0\">=</span> gtk_label_new<span class=\"br0\">(</span><span class=\"st0\">\"None Selected\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  gtk_widget_set_size_request<span class=\"br0\">(</span>label<span class=\"sy0\">,</span><span class=\"nu0\">308</span><span class=\"sy0\">,</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  gtk_box_pack_end<span class=\"br0\">(</span>GTK_BOX<span class=\"br0\">(</span>vbox<span class=\"br0\">)</span><span class=\"sy0\">,</span>label<span class=\"sy0\">,</span>FALSE<span class=\"sy0\">,</span>TRUE<span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"co2\">#endif</span><br/>\u00a0<br/>  drawing_area <span class=\"sy0\">=</span> gtk_drawing_area_new<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  gtk_widget_set_events<span class=\"br0\">(</span>drawing_area<span class=\"sy0\">,</span>GDK_BUTTON_PRESS_MASK<span class=\"sy0\">|</span>GDK_KEY_PRESS_MASK<span class=\"sy0\">|</span>GDK_EXPOSURE_MASK<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  random_numbers <span class=\"sy0\">=</span> g_rand_new<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  initialize_hexagons<span class=\"br0\">(</span>ngons<span class=\"sy0\">,</span>G_N_ELEMENTS<span class=\"br0\">(</span>ngons<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"coMULTI\">/* Discovery: expose_event changed to draw signal.  We no longer need configure-event */</span><br/>  g_signal_connect<span class=\"br0\">(</span>G_OBJECT<span class=\"br0\">(</span>drawing_area<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\"draw\"</span><span class=\"sy0\">,</span>G_CALLBACK<span class=\"br0\">(</span>draw<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span>gpointer<span class=\"br0\">)</span>ngons<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  g_signal_connect<span class=\"br0\">(</span>G_OBJECT<span class=\"br0\">(</span>drawing_area<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\"button-press-event\"</span><span class=\"sy0\">,</span>G_CALLBACK<span class=\"br0\">(</span>button_press_event<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span>gpointer<span class=\"br0\">)</span>ngons<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  g_signal_connect<span class=\"br0\">(</span>G_OBJECT<span class=\"br0\">(</span>drawing_area<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\"key-press-event\"</span><span class=\"sy0\">,</span>G_CALLBACK<span class=\"br0\">(</span>key_press_event<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span>gpointer<span class=\"br0\">)</span>ngons<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  gtk_widget_set_size_request<span class=\"br0\">(</span>drawing_area<span class=\"sy0\">,</span> <span class=\"nu0\">308</span><span class=\"sy0\">,</span> <span class=\"nu0\">308</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* XxY */</span><br/>  gtk_box_pack_start<span class=\"br0\">(</span>GTK_BOX<span class=\"br0\">(</span>vbox<span class=\"br0\">)</span><span class=\"sy0\">,</span>drawing_area<span class=\"sy0\">,</span>TRUE<span class=\"sy0\">,</span>TRUE<span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/* Discovery: must allow focus to receive keyboard events */</span><br/>  gtk_widget_set_can_focus<span class=\"br0\">(</span>drawing_area<span class=\"sy0\">,</span>TRUE<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/* Discovery: can set show for individual widgets or use show_all */</span><br/>  gtk_widget_show_all<span class=\"br0\">(</span>window<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  gtk_main<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  g_rand_free<span class=\"br0\">(</span>random_numbers<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> EXIT_SUCCESS<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 198, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Windows</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Windows.Controls</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Windows.Input</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Windows.Media</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Windows.Shapes</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">////////////////////////////////////////////////////////////////////////////////////////////////////</span><br/><span class=\"co1\">// namespace: Honeycombs</span><br/><span class=\"co1\">//</span><br/><span class=\"co1\">// summary:\tWPF implementation of Rosetta Code Honeycombs task.  Uses Polygon shapes as hexes.</span><br/><span class=\"co1\">////////////////////////////////////////////////////////////////////////////////////////////////////</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> Honeycombs<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">partial</span> <span class=\"kw4\">class</span> MainWindow<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">const</span> <span class=\"kw4\">int</span> RowCount <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">const</span> <span class=\"kw4\">int</span> ColCount <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">const</span> <span class=\"kw4\">int</span> LabelSize <span class=\"sy0\">=</span> <span class=\"nu0\">20</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">readonly</span> <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span> _permutedChars<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> MainWindow<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>RowCount <span class=\"sy0\">*</span> ColCount <span class=\"sy0\">&gt;</span> <span class=\"nu0\">26</span><span class=\"br0\">)</span><br/><span class=\"co2\">#pragma warning disable 162</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"Too many cells\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/><span class=\"co2\">#pragma warning restore 162</span><br/>            _permutedChars <span class=\"sy0\">=</span> GetPermutedChars<span class=\"br0\">(</span>RowCount <span class=\"sy0\">*</span> ColCount<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"co1\">// VS Generated code not included</span><br/>            InitializeComponent<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span> GetPermutedChars<span class=\"br0\">(</span><span class=\"kw4\">int</span> characterCount<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">const</span> <span class=\"kw4\">string</span> allChars <span class=\"sy0\">=</span> <span class=\"st0\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> rnd <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Random<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> chars <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">char</span><span class=\"br0\">[</span>allChars<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> allChars<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                chars<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> allChars<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> characterCount<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw4\">int</span> swapIndex <span class=\"sy0\">=</span> rnd<span class=\"sy0\">.</span><span class=\"me1\">Next</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span>allChars<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">-</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw4\">char</span> tmp <span class=\"sy0\">=</span> chars<span class=\"br0\">[</span>swapIndex <span class=\"sy0\">+</span> i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                chars<span class=\"br0\">[</span>swapIndex <span class=\"sy0\">+</span> i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> chars<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                chars<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> tmp<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> chars<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw4\">void</span> SetHexProperties<span class=\"br0\">(</span>UIElementCollection hexes, <span class=\"kw4\">double</span> cellSize<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> charIndex <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            List<span class=\"sy0\">&lt;</span>Polygon<span class=\"sy0\">&gt;</span> hexList <span class=\"sy0\">=</span> hexes<span class=\"sy0\">.</span><span class=\"me1\">Cast</span><span class=\"sy0\">&lt;</span>Polygon<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>Polygon element <span class=\"kw1\">in</span> hexList<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                SetHexProperties<span class=\"br0\">(</span>element, _permutedChars<span class=\"br0\">[</span>charIndex<span class=\"sy0\">++</span><span class=\"br0\">]</span>, cellSize<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw4\">void</span> SetHexProperties<span class=\"br0\">(</span>Polygon hex, <span class=\"kw4\">char</span> charToSet, <span class=\"kw4\">double</span> cellSize<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> tag <span class=\"sy0\">=</span> <span class=\"br0\">(</span>Tuple<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span>, <span class=\"kw4\">int</span>, <span class=\"kw4\">double</span>, <span class=\"kw4\">double</span><span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> hex<span class=\"sy0\">.</span><span class=\"me1\">Tag</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">double</span> cellX <span class=\"sy0\">=</span> tag<span class=\"sy0\">.</span><span class=\"me1\">Item3</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">double</span> cellY <span class=\"sy0\">=</span> tag<span class=\"sy0\">.</span><span class=\"me1\">Item4</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"co1\">// We place the text in a grid centered on the hex.</span><br/>            <span class=\"co1\">// The grid will then center the text within itself.</span><br/>\u00a0<br/>            <span class=\"kw1\">var</span> centeringGrid <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Grid<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            centeringGrid<span class=\"sy0\">.</span><span class=\"me1\">Width</span> <span class=\"sy0\">=</span> centeringGrid<span class=\"sy0\">.</span><span class=\"me1\">Height</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> cellSize<span class=\"sy0\">;</span><br/>            centeringGrid<span class=\"sy0\">.</span><span class=\"me1\">SetValue</span><span class=\"br0\">(</span>Canvas<span class=\"sy0\">.</span><span class=\"me1\">LeftProperty</span>, cellX <span class=\"sy0\">-</span> cellSize<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            centeringGrid<span class=\"sy0\">.</span><span class=\"me1\">SetValue</span><span class=\"br0\">(</span>Canvas<span class=\"sy0\">.</span><span class=\"me1\">TopProperty</span>, cellY <span class=\"sy0\">-</span> cellSize<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            centeringGrid<span class=\"sy0\">.</span><span class=\"me1\">IsHitTestVisible</span> <span class=\"sy0\">=</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>            HoneycombCanvas<span class=\"sy0\">.</span><span class=\"me1\">Children</span><span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>centeringGrid<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">var</span> label <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> TextBlock<br/>                <span class=\"br0\">{</span><br/>                    Text <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">string</span><span class=\"br0\">(</span>charToSet, <span class=\"nu0\">1</span><span class=\"br0\">)</span>,<br/>                    FontFamily <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> FontFamily<span class=\"br0\">(</span><span class=\"st0\">\"Segoe\"</span><span class=\"br0\">)</span>,<br/>                    FontSize <span class=\"sy0\">=</span> LabelSize<br/>                <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            label<span class=\"sy0\">.</span><span class=\"me1\">HorizontalAlignment</span> <span class=\"sy0\">=</span> HorizontalAlignment<span class=\"sy0\">.</span><span class=\"me1\">Center</span><span class=\"sy0\">;</span><br/>            label<span class=\"sy0\">.</span><span class=\"me1\">VerticalAlignment</span> <span class=\"sy0\">=</span> VerticalAlignment<span class=\"sy0\">.</span><span class=\"me1\">Center</span><span class=\"sy0\">;</span><br/>            label<span class=\"sy0\">.</span><span class=\"me1\">IsHitTestVisible</span> <span class=\"sy0\">=</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>            centeringGrid<span class=\"sy0\">.</span><span class=\"me1\">Children</span><span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>label<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"co1\">// Reset the tag to keep track of the character in the hex</span><br/>            hex<span class=\"sy0\">.</span><span class=\"me1\">Tag</span> <span class=\"sy0\">=</span> charToSet<span class=\"sy0\">;</span><br/>            hex<span class=\"sy0\">.</span><span class=\"me1\">Fill</span> <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> SolidColorBrush<span class=\"br0\">(</span>Colors<span class=\"sy0\">.</span><span class=\"me1\">Yellow</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            hex<span class=\"sy0\">.</span><span class=\"me1\">Stroke</span> <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> SolidColorBrush<span class=\"br0\">(</span>Colors<span class=\"sy0\">.</span><span class=\"me1\">Black</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            hex<span class=\"sy0\">.</span><span class=\"me1\">StrokeThickness</span> <span class=\"sy0\">=</span> cellSize <span class=\"sy0\">/</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"co1\">// Mouse down event handler for the hex</span><br/>            hex<span class=\"sy0\">.</span><span class=\"me1\">MouseDown</span> <span class=\"sy0\">+=</span> hex_MouseDown<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw4\">void</span> hex_MouseDown<span class=\"br0\">(</span><span class=\"kw4\">object</span> sender, MouseButtonEventArgs e<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> hex <span class=\"sy0\">=</span> sender <span class=\"kw1\">as</span> Shape<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>hex <span class=\"sy0\">==</span> <span class=\"kw1\">null</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> InvalidCastException<span class=\"br0\">(</span><span class=\"st0\">\"Non-shape in Honeycomb\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"co1\">// Get the letter for this hex</span><br/>            <span class=\"kw1\">var</span> ch <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">)</span> hex<span class=\"sy0\">.</span><span class=\"me1\">Tag</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"co1\">// Add it to our Letters TextBlock</span><br/>            Letters<span class=\"sy0\">.</span><span class=\"me1\">Text</span> <span class=\"sy0\">=</span> Letters<span class=\"sy0\">.</span><span class=\"me1\">Text</span> <span class=\"sy0\">+</span> ch<span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"co1\">// Color the hex magenta</span><br/>            hex<span class=\"sy0\">.</span><span class=\"me1\">Fill</span> <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> SolidColorBrush<span class=\"br0\">(</span>Colors<span class=\"sy0\">.</span><span class=\"me1\">Magenta</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"co1\">// Remove the mouse down event handler so we won't hit on this hex again</span><br/>            hex<span class=\"sy0\">.</span><span class=\"me1\">MouseDown</span> <span class=\"sy0\">-=</span> hex_MouseDown<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> GetCombSize<span class=\"br0\">(</span><span class=\"kw4\">double</span> actualHeight, <span class=\"kw4\">double</span> actualWidth, <span class=\"kw4\">int</span> columns, <span class=\"kw4\">int</span> rows,<br/>                                        <span class=\"kw1\">out</span> <span class=\"kw4\">double</span> cellSize, <span class=\"kw1\">out</span> <span class=\"kw4\">double</span> combHeight, <span class=\"kw1\">out</span> <span class=\"kw4\">double</span> combWidth<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">double</span> columnFactor <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"sy0\">*</span> columns <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2.0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">double</span> rowFactor <span class=\"sy0\">=</span> <span class=\"br0\">(</span>Math<span class=\"sy0\">.</span><span class=\"me1\">Sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> rows <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2.0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">double</span> cellFromWidth <span class=\"sy0\">=</span> actualWidth <span class=\"sy0\">/</span> columnFactor<span class=\"sy0\">;</span><br/>            <span class=\"kw4\">double</span> cellFromHeight <span class=\"sy0\">=</span> actualHeight <span class=\"sy0\">/</span> rowFactor<span class=\"sy0\">;</span><br/>            cellSize <span class=\"sy0\">=</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Min</span><span class=\"br0\">(</span>cellFromWidth, cellFromHeight<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            combWidth <span class=\"sy0\">=</span> cellSize <span class=\"sy0\">*</span> columnFactor<span class=\"sy0\">;</span><br/>            combHeight <span class=\"sy0\">=</span> cellSize <span class=\"sy0\">*</span> rowFactor<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> AddCells<span class=\"br0\">(</span>Canvas canvas, <span class=\"kw4\">double</span> cellSize, <span class=\"kw4\">int</span> columns, <span class=\"kw4\">int</span> rows<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">double</span> rowHeight <span class=\"sy0\">=</span> cellSize <span class=\"sy0\">*</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> row <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> row <span class=\"sy0\">&lt;</span> rows<span class=\"sy0\">;</span> row<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                AddRow<span class=\"br0\">(</span>rowHeight, canvas, cellSize, columns, row<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                rowHeight <span class=\"sy0\">+=</span> cellSize <span class=\"sy0\">*</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> AddRow<span class=\"br0\">(</span><span class=\"kw4\">double</span> rowHeight, Canvas canvas, <span class=\"kw4\">double</span> cellSize, <span class=\"kw4\">int</span> columnCount, <span class=\"kw4\">int</span> row<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">double</span> cellX <span class=\"sy0\">=</span> cellSize<span class=\"sy0\">;</span><br/>            <span class=\"kw4\">double</span> cellHeight <span class=\"sy0\">=</span> cellSize <span class=\"sy0\">*</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> col <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> col <span class=\"sy0\">&lt;</span> columnCount<span class=\"sy0\">;</span> col<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw4\">double</span> cellY <span class=\"sy0\">=</span> rowHeight <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>col <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> cellHeight <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                Polygon hex <span class=\"sy0\">=</span> GetCenteredHex<span class=\"br0\">(</span>cellSize, cellX, cellY, cellHeight<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                hex<span class=\"sy0\">.</span><span class=\"me1\">Tag</span> <span class=\"sy0\">=</span> Tuple<span class=\"sy0\">.</span><span class=\"me1\">Create</span><span class=\"br0\">(</span>col, row, cellX, cellY<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                canvas<span class=\"sy0\">.</span><span class=\"me1\">Children</span><span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>hex<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                cellX <span class=\"sy0\">+=</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> cellSize <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> Polygon GetCenteredHex<span class=\"br0\">(</span><span class=\"kw4\">double</span> cellSize, <span class=\"kw4\">double</span> cellX, <span class=\"kw4\">double</span> cellY, <span class=\"kw4\">double</span> cellHeight<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> hex <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Polygon<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            hex<span class=\"sy0\">.</span><span class=\"me1\">Points</span><span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Point<span class=\"br0\">(</span>cellX <span class=\"sy0\">-</span> cellSize, cellY<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            hex<span class=\"sy0\">.</span><span class=\"me1\">Points</span><span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Point<span class=\"br0\">(</span>cellX <span class=\"sy0\">-</span> cellSize <span class=\"sy0\">/</span> <span class=\"nu0\">2</span>, cellY <span class=\"sy0\">+</span> cellHeight <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            hex<span class=\"sy0\">.</span><span class=\"me1\">Points</span><span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Point<span class=\"br0\">(</span>cellX <span class=\"sy0\">+</span> cellSize <span class=\"sy0\">/</span> <span class=\"nu0\">2</span>, cellY <span class=\"sy0\">+</span> cellHeight <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            hex<span class=\"sy0\">.</span><span class=\"me1\">Points</span><span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Point<span class=\"br0\">(</span>cellX <span class=\"sy0\">+</span> cellSize, cellY<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            hex<span class=\"sy0\">.</span><span class=\"me1\">Points</span><span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Point<span class=\"br0\">(</span>cellX <span class=\"sy0\">+</span> cellSize <span class=\"sy0\">/</span> <span class=\"nu0\">2</span>, cellY <span class=\"sy0\">-</span> cellHeight <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            hex<span class=\"sy0\">.</span><span class=\"me1\">Points</span><span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Point<span class=\"br0\">(</span>cellX <span class=\"sy0\">-</span> cellSize <span class=\"sy0\">/</span> <span class=\"nu0\">2</span>, cellY <span class=\"sy0\">-</span> cellHeight <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> hex<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw4\">void</span> Window_Loaded<span class=\"br0\">(</span><span class=\"kw4\">object</span> sender, RoutedEventArgs e<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">double</span> combHeight, combWidth, cellSize<span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"co1\">// Get sizes that will fit within our window</span><br/>            GetCombSize<span class=\"br0\">(</span>Main<span class=\"sy0\">.</span><span class=\"me1\">ActualHeight</span>, Main<span class=\"sy0\">.</span><span class=\"me1\">ActualWidth</span>, ColCount, RowCount, <span class=\"kw1\">out</span> cellSize, <span class=\"kw1\">out</span> combHeight,<br/>                        <span class=\"kw1\">out</span> combWidth<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"co1\">// Set the canvas size appropriately</span><br/>            HoneycombCanvas<span class=\"sy0\">.</span><span class=\"me1\">Width</span> <span class=\"sy0\">=</span> combWidth<span class=\"sy0\">;</span><br/>            HoneycombCanvas<span class=\"sy0\">.</span><span class=\"me1\">Height</span> <span class=\"sy0\">=</span> combHeight<span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"co1\">// Add the cells to the canvas</span><br/>            AddCells<span class=\"br0\">(</span>HoneycombCanvas, cellSize, ColCount, RowCount<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"co1\">// Set the cells to look like we want them</span><br/>            SetHexProperties<span class=\"br0\">(</span>HoneycombCanvas<span class=\"sy0\">.</span><span class=\"me1\">Children</span>, cellSize<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 141, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a> <span class=\"br0\">(</span>toUpper<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Function <span class=\"br0\">(</span>on<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>zipWith4<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Exit<br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Random<br/>\u00a0<br/><span class=\"co1\">-- External libraries.</span><br/><span class=\"kw1\">import</span> Graphics<span class=\"sy0\">.</span>Gloss<br/><span class=\"kw1\">import</span> Graphics<span class=\"sy0\">.</span>Gloss<span class=\"sy0\">.</span>Data<span class=\"sy0\">.</span>Vector<br/><span class=\"kw1\">import</span> Graphics<span class=\"sy0\">.</span>Gloss<span class=\"sy0\">.</span>Geometry<br/><span class=\"kw1\">import</span> Graphics<span class=\"sy0\">.</span>Gloss<span class=\"sy0\">.</span>Interface<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a><span class=\"sy0\">.</span>Game<br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Random<span class=\"sy0\">.</span>Shuffle<br/>\u00a0<br/><span class=\"co1\">-- A record of a hexagon-letter.</span><br/><span class=\"kw1\">data</span> Hex <span class=\"sy0\">=</span><br/>  Hex<br/>  <span class=\"br0\">{</span> hLetter   <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a>  <span class=\"co1\">-- The letter it holds.</span><br/>  <span class=\"sy0\">,</span> hSelected <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a>  <span class=\"co1\">-- The flag for if the hexagon has been selected.</span><br/>  <span class=\"sy0\">,</span> hPath     <span class=\"sy0\">::</span> Path  <span class=\"co1\">-- The hexagon's vertices.</span><br/>  <span class=\"sy0\">,</span> hCenter   <span class=\"sy0\">::</span> Point <span class=\"co1\">-- The center of the hexagon.</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">-- A record of the world state.</span><br/><span class=\"kw1\">data</span> World <span class=\"sy0\">=</span><br/>  World<br/>  <span class=\"br0\">{</span> wHexes  <span class=\"sy0\">::</span> <span class=\"br0\">[</span>Hex<span class=\"br0\">]</span>  <span class=\"co1\">-- The hexagons to interact with.</span><br/>  <span class=\"sy0\">,</span> wString <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"co1\">-- An ordering of picked letters.</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">-- Assorted helper functions.</span><br/>addV<span class=\"sy0\">,</span> subV <span class=\"sy0\">::</span> Vector <span class=\"sy0\">-&gt;</span> Vector <span class=\"sy0\">-&gt;</span> Vector<br/>addV <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a <span class=\"sy0\">+</span> x<span class=\"sy0\">,</span> b <span class=\"sy0\">+</span> y<span class=\"br0\">)</span><br/>subV <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a <span class=\"sy0\">-</span> x<span class=\"sy0\">,</span> b <span class=\"sy0\">-</span> y<span class=\"br0\">)</span><br/>\u00a0<br/>translateP <span class=\"sy0\">::</span> Vector <span class=\"sy0\">-&gt;</span> Path <span class=\"sy0\">-&gt;</span> Path<br/>translateP v <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>addV v<span class=\"br0\">)</span><br/>\u00a0<br/>translateV <span class=\"sy0\">::</span> Vector <span class=\"sy0\">-&gt;</span> Picture <span class=\"sy0\">-&gt;</span> Picture<br/>translateV <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> p <span class=\"sy0\">=</span> translate x y p<br/>\u00a0<br/>lightblue<span class=\"sy0\">,</span> darkblue <span class=\"sy0\">::</span> Color<br/>lightblue <span class=\"sy0\">=</span> makeColor <span class=\"nu0\">0.5</span> <span class=\"nu0\">0.5</span> <span class=\"nu0\">1.0</span> <span class=\"nu0\">1.0</span><br/>darkblue  <span class=\"sy0\">=</span> makeColor <span class=\"nu0\">0.0</span> <span class=\"nu0\">0.0</span> <span class=\"nu0\">0.5</span> <span class=\"nu0\">1.0</span><br/>\u00a0<br/><span class=\"co1\">-- Create vertices for an n-gon with the given radius to a vertex</span><br/>ngon <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a> <span class=\"sy0\">-&gt;</span> Path<br/>ngon n radius <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> angle <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:pi\"><span class=\"kw3\">pi</span></a> <span class=\"sy0\">/</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> n<br/>  <span class=\"kw1\">in</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>mulSV radius <span class=\"sy0\">.</span> unitVectorAtAngle <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> angle<span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a><span class=\"br0\">)</span><br/>     <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">-- Determine if a point lies on or within a polygon.</span><br/>inPolygon <span class=\"sy0\">::</span> Point <span class=\"sy0\">-&gt;</span> Path <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>inPolygon point path <span class=\"sy0\">=</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:all\"><span class=\"kw3\">all</span></a> <span class=\"br0\">(</span><span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> detV vas vbs<br/>  <span class=\"kw1\">where</span><br/>    vas <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> subV <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:drop\"><span class=\"kw3\">drop</span></a> <span class=\"nu0\">1</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:cycle\"><span class=\"kw3\">cycle</span></a> path<span class=\"br0\">)</span> path<br/>    vbs <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>subV point<span class=\"br0\">)</span> path<br/>\u00a0<br/><span class=\"co1\">-- Construct all of the hexagons transformed to their screen coordinates</span><br/><span class=\"co1\">-- to make mouse picking easier to solve.</span><br/>mkHexes <span class=\"sy0\">::</span> RandomGen g <span class=\"sy0\">=&gt;</span> g <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a> <span class=\"sy0\">-&gt;</span> World<br/>mkHexes gen radius <span class=\"sy0\">=</span> World hexes <span class=\"st0\">\"\"</span><br/>  <span class=\"kw1\">where</span><br/>    letters <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">20</span> <span class=\"sy0\">$</span> shuffle<span class=\"st0\">' ['</span>A<span class=\"st0\">'..'</span>Z<span class=\"st0\">'] 26 gen<br/>    xs      = concatMap (replicate 4) [-2..2]<br/>    ys      = cycle [-2..1]<br/>    inRad   = radius * (cos $ degToRad 30)<br/>    yOff x  = if ((floor x)\u00a0:: Int) `mod` 2 == 0 then inRad else 0<br/>    yStep   = inRad * 2<br/>    xStep   = radius * 1.5<br/>    centers = zipWith (<span class=\"es0\">\\x</span> y -&gt; (x * xStep, yOff x + y * yStep)) xs ys<br/>    paths   = map (flip translateP $ ngon 6 radius) centers<br/>    hexes   = zipWith4 Hex letters (repeat False) paths centers<br/>\u00a0<br/>-- Draw a single hexagon-letter.<br/>drawHex\u00a0:: Hex -&gt; Picture<br/>drawHex (Hex letter selected path center) =<br/>  pictures [hex, outline, letterPic]<br/>  where<br/>    hex              = color hcolor $ polygon path<br/>    outline          = color blue $ lineLoop path<br/>    letterPic        = color lcolor<br/>                       $ translateV (addV (-10, -10) center)<br/>                       $ scale 0.25 0.25<br/>                       $ text [letter]<br/>    (hcolor, lcolor) = if selected<br/>                       then (darkblue, white)<br/>                       else (lightblue, black)<br/>\u00a0<br/>-- Draw the whole scene.<br/>drawWorld\u00a0:: World -&gt; Picture<br/>drawWorld (World hexes string) =<br/>  pictures [pictures $ map drawHex hexes<br/>           ,pictures $ map drawHighHex hexes<br/>           ,color (light lightblue) $ textPic<br/>           ,scale 1.05 1.05 $ textPic]<br/>  where<br/>    drawHighHex hex = color black $ scale 1.05 1.05 $ lineLoop $ hPath hex<br/>    textPic = translateV (-130, -175) $ scale 0.15 0.15 $ text string<br/>\u00a0<br/>-- Handle keyboard and mouse events and update the hexagons<br/>-- accordingly. This function checks the hexagon states and<br/>-- invokes a system exit when all are marked selected.<br/>handleInput\u00a0:: Event -&gt; World -&gt; IO World<br/>handleInput event <a class=\"__cf_email__\" data-cfemail=\"e1968e938d85a1\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(World hexes string) =<br/>  case event of<br/>    EventKey key Down _ point -&gt;<br/>      case key of<br/>        SpecialKey KeyEsc -&gt; exitSuccess<br/>        Char char         -&gt; hCond (<span class=\"es0\">\\h</span>ex -&gt; hLetter hex == toUpper char)<br/>        MouseButton _     -&gt; hCond (<span class=\"es0\">\\h</span>ex -&gt; inPolygon point $ hPath hex)<br/>        _                 -&gt; return world<br/>    _                         -&gt;<br/>      return world<br/>  where<br/>    checkWorld w = if all hSelected $ wHexes w then exitSuccess else return w<br/>    hCond cond   = checkWorld $ World newHexes newString<br/>      where<br/>        newHexes  = flip map hexes<br/>                   (<span class=\"es0\">\\h</span>ex -&gt; if cond hex<br/>                            then hex {hSelected = True}<br/>                            else hex)<br/>        diff      = map fst<br/>                    $ filter (uncurry ((/=) `on` hSelected))<br/>                    $ zip hexes newHexes<br/>        newString = case diff of<br/>          []      -&gt; string<br/>          (hex:_) -&gt; string ++ [hLetter hex]<br/>\u00a0<br/>main\u00a0:: IO ()<br/>main = do<br/>  stdGen &lt;- getStdGen<br/>  playIO<br/>    (InWindow \"Honeycombs\" (500, 500) (100, 100))<br/>    white<br/>    60<br/>    (mkHexes stdGen 30)<br/>    (return . drawWorld)<br/>    handleInput<br/>    (<span class=\"es0\">\\_</span> x -&gt; return x)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 108, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">link</span> printf<br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>   h <span class=\"sy1\">:=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy1\">&lt;</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span><span class=\"sy1\">\\</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"nu0\">4</span>             <span class=\"co1\"># cells high</span><br/>   w <span class=\"sy1\">:=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy1\">&lt;</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span><span class=\"sy1\">\\</span>A<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"nu0\">5</span>             <span class=\"co1\"># cells wide</span><br/>   u <span class=\"sy1\">:=</span> <span class=\"br0\">(</span><span class=\"nu0\">10</span> <span class=\"sy1\">&lt;</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span><span class=\"sy1\">\\</span>A<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"nu0\">30</span>           <span class=\"co1\"># length of cell side</span><br/>   HoneyComb<span class=\"br0\">(</span>h<span class=\"sy1\">,</span>w<span class=\"sy1\">,</span>u<span class=\"br0\">)</span>                 <br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"sy2\">$</span><span class=\"kw6\">define</span> INACTIVE <span class=\"st0\">\"light yellow\"</span><br/><span class=\"sy2\">$</span><span class=\"kw6\">define</span> ACTIVE   <span class=\"st0\">\"light purple\"</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> HoneyComb<span class=\"br0\">(</span>h<span class=\"sy1\">,</span>w<span class=\"sy1\">,</span>u<span class=\"br0\">)</span>                   <span class=\"co1\">#: run HoneyComb demo</span><br/>\u00a0<br/>   wb <span class=\"sy1\">:=</span> u<span class=\"sy1\">/</span><span class=\"nu0\">2</span>                                 <span class=\"co1\"># window border</span><br/>   wmsg <span class=\"sy1\">:=</span> <span class=\"nu0\">10</span>                                <span class=\"co1\"># . message space</span><br/>   ww <span class=\"sy1\">:=</span> <span class=\"nu0\">2</span><span class=\"sy1\">*</span>wb <span class=\"sy1\">+</span> u<span class=\"sy1\">*</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">*</span>w<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">/</span><span class=\"nu0\">2</span>                  <span class=\"co1\"># . width </span><br/>   wh <span class=\"sy1\">:=</span> <span class=\"nu0\">2</span><span class=\"sy1\">*</span>wb<span class=\"sy1\">+</span>wmsg<span class=\"sy1\">+</span><span class=\"kw4\">integer</span><span class=\"br0\">(</span><span class=\"br0\">(</span>h<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">*</span>u<span class=\"sy1\">*</span><span class=\"kw4\">sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">.</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\"># . height  </span><br/>\u00a0<br/>   chosen <span class=\"sy1\">:=</span> sprintf<span class=\"br0\">(</span><span class=\"st0\">\"black,%d\"</span><span class=\"sy1\">,</span>wb<span class=\"br0\">)</span><br/>   fine   <span class=\"sy1\">:=</span> sprintf<span class=\"br0\">(</span><span class=\"st0\">\"black,%d\"</span><span class=\"sy1\">,</span>wmsg<span class=\"br0\">)</span><br/>\u00a0<br/>   wparms <span class=\"sy1\">:=</span> <span class=\"br0\">[</span> title <span class=\"sy1\">:=</span> sprintf<span class=\"br0\">(</span><span class=\"st0\">\"HoneyComb-%dx%d\"</span><span class=\"sy1\">,</span>h<span class=\"sy1\">,</span>w<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>               <span class=\"st0\">\"g\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"bg=white\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"fg=black\"</span><span class=\"sy1\">,</span><br/>               sprintf<span class=\"br0\">(</span><span class=\"st0\">\"size=%d,%d\"</span><span class=\"sy1\">,</span>ww<span class=\"sy1\">,</span>wh<span class=\"br0\">)</span> <span class=\"br0\">]</span><br/>   <span class=\"sy1\">&amp;</span><span class=\"kw3\">window</span> <span class=\"sy1\">:=</span> <span class=\"kw4\">open</span><span class=\"sy1\">!</span>wparms <span class=\"sy1\">|</span> <span class=\"kw4\">stop</span><span class=\"br0\">(</span><span class=\"st0\">\"Unable to open window\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>   alpha <span class=\"sy1\">:=</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">ucase</span>                           <span class=\"co1\"># per original spec</span><br/>   <span class=\"kw1\">if</span> h<span class=\"sy1\">*</span>w <span class=\"sy1\">&gt;</span> <span class=\"sy1\">*</span>alpha <span class=\"kw1\">then</span> alpha <span class=\"sy1\">++:=</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">lcase</span>    <span class=\"co1\"># more </span><br/>   <span class=\"kw1\">if</span> h<span class=\"sy1\">*</span>w <span class=\"sy1\">&gt;</span> <span class=\"sy1\">*</span>alpha <span class=\"kw1\">then</span> alpha <span class=\"sy1\">++:=</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">digits</span>   <span class=\"co1\"># more again</span><br/>   <span class=\"kw1\">if</span> h<span class=\"sy1\">*</span>w <span class=\"sy1\">&gt;</span> <span class=\"sy1\">*</span>alpha <span class=\"kw1\">then</span> <br/>      <span class=\"kw4\">stop</span><span class=\"br0\">(</span><span class=\"st0\">\"More than \"</span><span class=\"sy1\">,*</span>alpha<span class=\"sy1\">,</span><span class=\"st0\">\" cells.\"</span><span class=\"br0\">)</span>    <span class=\"co1\"># choke</span><br/>\u00a0<br/>   <span class=\"kw1\">every</span> <span class=\"kw4\">put</span><span class=\"br0\">(</span>letters <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,!</span><span class=\"kw4\">string</span><span class=\"br0\">(</span>alpha<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">every</span> <span class=\"sy1\">!</span>letters <span class=\"sy1\">:=:</span> <span class=\"sy1\">?</span>letters               <span class=\"co1\"># randomize</span><br/>\u00a0<br/>   Widgets <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>                             <span class=\"co1\"># prepare widgets </span><br/>   <span class=\"kw1\">every</span> c <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> w <span class=\"kw1\">do</span> <span class=\"br0\">{</span>                    <span class=\"co1\"># layout grid of cells</span><br/>      <span class=\"kw1\">if</span> <span class=\"sy1\">/</span>top <span class=\"kw1\">then</span>                           <span class=\"co1\"># start at top left</span><br/>         x <span class=\"sy1\">:=</span> y <span class=\"sy1\">:=</span> wb<br/>      <span class=\"kw1\">else</span> <span class=\"br0\">{</span>                                 <span class=\"co1\"># continue right from top</span><br/>         x <span class=\"sy1\">:=</span> top<span class=\"sy1\">.</span><span class=\"me1\">rx</span><br/>         y <span class=\"sy1\">:=</span> <span class=\"kw1\">if</span> c <span class=\"sy1\">%</span> <span class=\"nu0\">2</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> top<span class=\"sy1\">.</span><span class=\"me1\">ry0</span> <span class=\"kw1\">else</span> top<span class=\"sy1\">.</span><span class=\"me1\">ry1</span><br/>         <span class=\"br0\">}</span><br/>      <span class=\"kw4\">put</span><span class=\"br0\">(</span>Widgets<span class=\"sy1\">,</span>W <span class=\"sy1\">:=</span> top <span class=\"sy1\">:=</span> HexWidget<span class=\"br0\">(</span>x<span class=\"sy1\">,</span>y<span class=\"sy1\">,</span>u<span class=\"sy1\">,</span><span class=\"kw4\">get</span><span class=\"br0\">(</span>letters<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">every</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> h <span class=\"kw1\">do</span>                        <span class=\"co1\"># fill in rest of column</span><br/>         <span class=\"kw4\">put</span><span class=\"br0\">(</span>Widgets<span class=\"sy1\">,</span>W <span class=\"sy1\">:=</span> HexWidget<span class=\"br0\">(</span>x <span class=\"sy1\">:=</span> W<span class=\"sy1\">.</span><span class=\"me1\">dx</span><span class=\"sy1\">,</span>y <span class=\"sy1\">:=</span> W<span class=\"sy1\">.</span><span class=\"me1\">dy</span><span class=\"sy1\">,</span>u<span class=\"sy1\">,</span><span class=\"kw4\">get</span><span class=\"br0\">(</span>letters<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>      <br/>      <span class=\"br0\">}</span>   <br/>\u00a0<br/>   activated <span class=\"sy1\">:=</span> <span class=\"st0\">\"\"</span><br/>   <span class=\"kw1\">until</span> <span class=\"sy1\">*</span>activated <span class=\"sy1\">=</span> <span class=\"sy1\">*</span>Widgets <span class=\"kw1\">do</span> <span class=\"br0\">{</span>          <span class=\"co1\"># process widgets</span><br/>      e <span class=\"sy1\">:=</span> <span class=\"kw5\">Event</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">every</span> W <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span>Widgets <span class=\"kw1\">do</span>                          <span class=\"co1\"># select widget by </span><br/>         <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>e <span class=\"sy1\">==</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">lpress</span><span class=\"br0\">)</span> <span class=\"sy1\">&amp;</span> W<span class=\"sy1\">.</span><span class=\"me1\">inside</span><span class=\"br0\">(</span>W<span class=\"sy1\">,&amp;</span><span class=\"kw3\">x</span><span class=\"sy1\">,&amp;</span><span class=\"kw3\">y</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span>    <span class=\"co1\"># mouse (left press) or</span><br/>            <span class=\"br0\">(</span>e <span class=\"sy1\">==</span> W<span class=\"sy1\">.</span><span class=\"me1\">s</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span>                           <span class=\"co1\"># label character </span><br/>               <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> <span class=\"kw4\">find</span><span class=\"br0\">(</span>W<span class=\"sy1\">.</span><span class=\"me1\">s</span><span class=\"sy1\">,</span>activated<span class=\"br0\">)</span> <span class=\"kw1\">then</span>        <span class=\"co1\"># activate if new </span><br/>                  <span class=\"kw1\">break</span> activated <span class=\"sy1\">||:=</span> <span class=\"br0\">(</span> DrawCell<span class=\"br0\">(</span>W<span class=\"sy1\">,</span>ACTIVE<span class=\"br0\">)</span><span class=\"sy1\">,</span> W<span class=\"sy1\">.</span><span class=\"me1\">s</span><span class=\"br0\">)</span>     <br/>      <span class=\"kw5\">Font</span><span class=\"br0\">(</span>chosen<span class=\"br0\">)</span><br/>      <span class=\"kw5\">DrawString</span><span class=\"br0\">(</span>wb<span class=\"sy1\">,</span>wh<span class=\"sy1\">-</span>wb<span class=\"sy1\">-</span>wmsg<span class=\"sy1\">,</span><span class=\"st0\">\"Chosen: \"</span><span class=\"sy1\">||</span>activated<span class=\"br0\">)</span> <span class=\"co1\"># update selected list</span><br/>      <span class=\"br0\">}</span>    <br/>   <span class=\"kw5\">WriteImage</span><span class=\"br0\">(</span>sprintf<span class=\"br0\">(</span><span class=\"st0\">\"%s-%d.gif\"</span><span class=\"sy1\">,</span>title<span class=\"sy1\">,&amp;</span><span class=\"kw3\">now</span><span class=\"br0\">)</span><span class=\"br0\">)</span>        <span class=\"co1\"># save file</span><br/>   <span class=\"kw5\">Font</span><span class=\"br0\">(</span>fine<span class=\"br0\">)</span>                                         <span class=\"co1\"># tell how to quit</span><br/>   <span class=\"kw5\">DrawString</span><span class=\"br0\">(</span>wb<span class=\"sy1\">,</span>wh<span class=\"sy1\">-</span>wmsg<span class=\"sy1\">,</span><span class=\"st0\">\"Right click to exit\"</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">until</span> <span class=\"kw5\">Event</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">rpress</span>            <br/>   <span class=\"kw4\">close</span><span class=\"br0\">(</span><span class=\"sy1\">&amp;</span><span class=\"kw3\">window</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">record</span> HexWidgetData<span class=\"br0\">(</span>s<span class=\"sy1\">,</span>u<span class=\"sy1\">,</span>w<span class=\"sy1\">,</span>h<span class=\"sy1\">,</span>ax<span class=\"sy1\">,</span>ay<span class=\"sy1\">,</span>cx<span class=\"sy1\">,</span>cy<span class=\"sy1\">,</span>poly<span class=\"sy1\">,</span>xx<span class=\"sy1\">,</span>xy<span class=\"sy1\">,</span>dx<span class=\"sy1\">,</span>dy<span class=\"sy1\">,</span>rx<span class=\"sy1\">,</span>ry0<span class=\"sy1\">,</span>ry1<span class=\"sy1\">,</span>inside<span class=\"br0\">)</span> <br/>\u00a0<br/><span class=\"kw1\">procedure</span> HexWidget<span class=\"br0\">(</span>ax<span class=\"sy1\">,</span>ay<span class=\"sy1\">,</span>u<span class=\"sy1\">,</span>s<span class=\"br0\">)</span>               <span class=\"co1\">#: create widget s @ x,y &amp; side u</span><br/><span class=\"sy1\">/</span>u <span class=\"sy1\">:=</span> <span class=\"nu0\">20</span><span class=\"sy1\">.</span>                                    <span class=\"co1\"># side</span><br/>x <span class=\"sy1\">:=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy1\">&lt;=</span> ax<span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"kw4\">runerr</span><span class=\"br0\">(</span><span class=\"nu0\">205</span><span class=\"sy1\">,</span>ax<span class=\"br0\">)</span>       <span class=\"co1\"># ensure whole numbers</span><br/>y <span class=\"sy1\">:=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy1\">&lt;=</span> ay<span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"kw4\">runerr</span><span class=\"br0\">(</span><span class=\"nu0\">205</span><span class=\"sy1\">,</span>ay<span class=\"br0\">)</span><br/>u <span class=\"sy1\">:=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy1\">&lt;=</span> u<span class=\"br0\">)</span>  <span class=\"sy1\">|</span> <span class=\"kw4\">runerr</span><span class=\"br0\">(</span><span class=\"nu0\">205</span><span class=\"sy1\">,</span>u<span class=\"br0\">)</span>        <span class=\"co1\"># 1 is minimal if ridiculous</span><br/>h <span class=\"sy1\">:=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span><span class=\"kw4\">sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">./</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy1\">*</span> <span class=\"br0\">(</span>w <span class=\"sy1\">:=</span> <span class=\"nu0\">2</span> <span class=\"sy1\">*</span> u<span class=\"br0\">)</span><span class=\"br0\">)</span>      <span class=\"co1\"># h,w</span><br/>W <span class=\"sy1\">:=</span> HexWidgetData<span class=\"br0\">(</span>s<span class=\"sy1\">,</span>u<span class=\"sy1\">,</span>w<span class=\"sy1\">,</span>h<span class=\"sy1\">,</span>                  <span class=\"co1\"># string, side, width and height</span><br/>                  ax<span class=\"sy1\">,</span>ay<span class=\"sy1\">,</span>                     <span class=\"co1\"># absolute x,y</span><br/>                  ax<span class=\"sy1\">+</span>w<span class=\"sy1\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span>ay<span class=\"sy1\">+</span>h<span class=\"sy1\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span>             <span class=\"co1\"># center x,y </span><br/>                  <span class=\"br0\">[</span>ax<span class=\"sy1\">+</span>u<span class=\"sy1\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span>ay<span class=\"sy1\">,</span> ax<span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">*</span>u<span class=\"br0\">)</span><span class=\"sy1\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span>ay<span class=\"sy1\">,</span> ax<span class=\"sy1\">+</span><span class=\"nu0\">2</span><span class=\"sy1\">*</span>u<span class=\"sy1\">,</span>ay<span class=\"sy1\">+</span>h<span class=\"sy1\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <br/>                   ax<span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">*</span>u<span class=\"br0\">)</span><span class=\"sy1\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span>ay<span class=\"sy1\">+</span>h<span class=\"sy1\">,</span> ax<span class=\"sy1\">+</span>u<span class=\"sy1\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span>ay<span class=\"sy1\">+</span>h<span class=\"sy1\">,</span> ax<span class=\"sy1\">,</span>ay<span class=\"sy1\">+</span>h<span class=\"sy1\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">,</span>  <span class=\"co1\"># to draw polygon</span><br/>                   <span class=\"sy1\">-</span>u<span class=\"sy1\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span>h<span class=\"sy1\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span>                 <span class=\"co1\"># const for z of cross product</span><br/>                   x<span class=\"sy1\">,</span>ay<span class=\"sy1\">+</span>h<span class=\"sy1\">,</span>                   <span class=\"co1\"># next cell down</span><br/>                   ax<span class=\"sy1\">+</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">*</span>u<span class=\"br0\">)</span><span class=\"sy1\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span>ay<span class=\"sy1\">+</span>h<span class=\"sy1\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span>ay<span class=\"sy1\">-</span>h<span class=\"sy1\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"co1\"># next cells right up/down</span><br/>                   InHexWidget<span class=\"br0\">)</span>              <span class=\"co1\"># is it activated proc</span><br/><span class=\"kw1\">return</span> DrawCell<span class=\"br0\">(</span>W<span class=\"sy1\">,</span>INACTIVE<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> DrawCell<span class=\"br0\">(</span>W<span class=\"sy1\">,</span>colour<span class=\"br0\">)</span>                 <span class=\"co1\">#: Draw the (general) Widget</span><br/>   <span class=\"kw5\">Fg</span><span class=\"br0\">(</span>colour<span class=\"br0\">)</span><br/>   <span class=\"kw5\">FillPolygon</span><span class=\"sy1\">!</span>W<span class=\"sy1\">.</span><span class=\"me1\">poly</span>                        <span class=\"co1\"># can draw any polygon</span><br/>   <span class=\"kw5\">Fg</span><span class=\"br0\">(</span><span class=\"st0\">\"black\"</span><span class=\"br0\">)</span><br/>   <span class=\"kw5\">DrawPolygon</span><span class=\"sy1\">!</span>W<span class=\"sy1\">.</span><span class=\"me1\">poly</span> <br/>   <span class=\"kw5\">Font</span><span class=\"br0\">(</span>sprintf<span class=\"br0\">(</span><span class=\"st0\">\"Helvetica,%d\"</span><span class=\"sy1\">,</span><span class=\"kw4\">integer</span><span class=\"br0\">(</span>W<span class=\"sy1\">.</span><span class=\"me1\">h</span><span class=\"sy1\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">.</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw5\">DrawString</span><span class=\"br0\">(</span>W<span class=\"sy1\">.</span><span class=\"me1\">cx</span> <span class=\"sy1\">-</span> <span class=\"kw5\">TextWidth</span><span class=\"br0\">(</span>W<span class=\"sy1\">.</span><span class=\"me1\">s</span><span class=\"br0\">)</span><span class=\"sy1\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><br/>               W<span class=\"sy1\">.</span><span class=\"me1\">cy</span> <span class=\"sy1\">+</span> <span class=\"br0\">(</span><span class=\"kw5\">WAttrib</span><span class=\"br0\">(</span><span class=\"st0\">\"ascent\"</span><span class=\"br0\">)</span> <span class=\"sy1\">-</span> <span class=\"kw5\">WAttrib</span><span class=\"br0\">(</span><span class=\"st0\">\"descent\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">/</span><span class=\"nu0\">2</span> <span class=\"sy1\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span>W<span class=\"sy1\">.</span><span class=\"me1\">s</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">return</span> W<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> InHexWidget<span class=\"br0\">(</span>W<span class=\"sy1\">,</span>x<span class=\"sy1\">,</span>y<span class=\"br0\">)</span>                 <span class=\"co1\">#: return W if x,y are inside W</span><br/>   <span class=\"kw1\">if</span> W<span class=\"sy1\">.</span><span class=\"me1\">w</span> <span class=\"sy1\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> W<span class=\"sy1\">.</span><span class=\"me1\">ax</span> <span class=\"sy1\">-:=</span> <span class=\"br0\">(</span>W<span class=\"sy1\">.</span><span class=\"me1\">w</span> <span class=\"sy1\">:=</span> <span class=\"sy1\">-</span>W<span class=\"sy1\">.</span><span class=\"me1\">w</span><span class=\"br0\">)</span>                       <span class=\"co1\"># fix if -w</span><br/>   <span class=\"kw1\">if</span> W<span class=\"sy1\">.</span><span class=\"me1\">h</span> <span class=\"sy1\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> W<span class=\"sy1\">.</span><span class=\"me1\">ay</span> <span class=\"sy1\">-:=</span> <span class=\"br0\">(</span>W<span class=\"sy1\">.</span><span class=\"me1\">h</span> <span class=\"sy1\">:=</span> <span class=\"sy1\">-</span>W<span class=\"sy1\">.</span><span class=\"me1\">h</span><span class=\"br0\">)</span>                       <span class=\"co1\"># fix if -h</span><br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy1\">&lt;</span> x <span class=\"sy1\">-</span> W<span class=\"sy1\">.</span><span class=\"me1\">ax</span> <span class=\"sy1\">&lt;</span> W<span class=\"sy1\">.</span><span class=\"me1\">w</span><span class=\"br0\">)</span> <span class=\"sy1\">&amp;</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy1\">&lt;</span> y <span class=\"sy1\">-</span> W<span class=\"sy1\">.</span><span class=\"me1\">ay</span> <span class=\"sy1\">&lt;</span> W<span class=\"sy1\">.</span><span class=\"me1\">h</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span>        <span class=\"co1\"># disallow edge</span><br/>      <span class=\"kw1\">if</span> x <span class=\"sy1\">&gt;</span> W<span class=\"sy1\">.</span><span class=\"me1\">cx</span> <span class=\"kw1\">then</span> x <span class=\"sy1\">:=</span> W<span class=\"sy1\">.</span><span class=\"me1\">cx</span> <span class=\"sy1\">-</span> <span class=\"br0\">(</span>x <span class=\"sy1\">-</span> W<span class=\"sy1\">.</span><span class=\"me1\">cx</span><span class=\"br0\">)</span>                   <span class=\"co1\"># reflect x-&gt;NW</span><br/>      <span class=\"kw1\">if</span> y <span class=\"sy1\">&gt;</span> W<span class=\"sy1\">.</span><span class=\"me1\">cy</span> <span class=\"kw1\">then</span> y <span class=\"sy1\">:=</span> W<span class=\"sy1\">.</span><span class=\"me1\">cy</span> <span class=\"sy1\">-</span> <span class=\"br0\">(</span>y <span class=\"sy1\">-</span> W<span class=\"sy1\">.</span><span class=\"me1\">cy</span><span class=\"br0\">)</span>                   <span class=\"co1\"># reflect y-&gt;NW</span><br/>      <span class=\"kw1\">if</span> <span class=\"nu0\">0</span> <span class=\"sy1\">&gt;</span> <span class=\"kw4\">real</span><span class=\"br0\">(</span>W<span class=\"sy1\">.</span><span class=\"me1\">xx</span><span class=\"br0\">)</span><span class=\"sy1\">*</span><span class=\"br0\">(</span>y<span class=\"sy1\">-</span>W<span class=\"sy1\">.</span><span class=\"me1\">poly</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-</span> W<span class=\"sy1\">.</span><span class=\"me1\">xy</span><span class=\"sy1\">*</span><span class=\"br0\">(</span>x<span class=\"sy1\">-</span>W<span class=\"sy1\">.</span><span class=\"me1\">poly</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"co1\"># z from cross</span><br/>         <span class=\"kw1\">return</span> W<br/>      <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Java", "loc": 131, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.awt.*</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.awt.event.*</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">javax.swing.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Honeycombs <span class=\"kw1\">extends</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajframe+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JFrame</span></a> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aswingutilities+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">SwingUtilities</span></a>.<span class=\"me1\">invokeLater</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajframe+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JFrame</span></a> f <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Honeycombs<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setDefaultCloseOperation</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajframe+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JFrame</span></a>.<span class=\"me1\">EXIT_ON_CLOSE</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setVisible</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> Honeycombs<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        add<span class=\"br0\">(</span><span class=\"kw1\">new</span> HoneycombsPanel<span class=\"br0\">(</span><span class=\"br0\">)</span>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aborderlayout+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BorderLayout</span></a>.<span class=\"me1\">CENTER</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        setTitle<span class=\"br0\">(</span><span class=\"st0\">\"Honeycombs\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        setResizable<span class=\"br0\">(</span><span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        pack<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        setLocationRelativeTo<span class=\"br0\">(</span><span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">class</span> HoneycombsPanel <span class=\"kw1\">extends</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajpanel+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JPanel</span></a> <span class=\"br0\">{</span><br/>\u00a0<br/>    Hexagon<span class=\"br0\">[</span><span class=\"br0\">]</span> comb<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> HoneycombsPanel<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        setPreferredSize<span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adimension+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Dimension</span></a><span class=\"br0\">(</span><span class=\"nu0\">600</span>, <span class=\"nu0\">500</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        setBackground<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a>.<span class=\"me1\">white</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        setFocusable<span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        addMouseListener<span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amouseadapter+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">MouseAdapter</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            @Override<br/>            <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> mousePressed<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amouseevent+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">MouseEvent</span></a> e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span>Hexagon hex <span class=\"sy0\">:</span> comb<span class=\"br0\">)</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>hex.<span class=\"me1\">contains</span><span class=\"br0\">(</span>e.<span class=\"me1\">getX</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, e.<span class=\"me1\">getY</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        hex.<span class=\"me1\">setSelected</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                repaint<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        addKeyListener<span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Akeyadapter+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">KeyAdapter</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            @Override<br/>            <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> keyPressed<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Akeyevent+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">KeyEvent</span></a> e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span>Hexagon hex <span class=\"sy0\">:</span> comb<span class=\"br0\">)</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>hex.<span class=\"me1\">letter</span> <span class=\"sy0\">==</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acharacter+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Character</span></a>.<span class=\"me1\">toUpperCase</span><span class=\"br0\">(</span>e.<span class=\"me1\">getKeyChar</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        hex.<span class=\"me1\">setSelected</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                repaint<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span> letters <span class=\"sy0\">=</span> <span class=\"st0\">\"LRDGITPFBVOKANUYCESM\"</span>.<span class=\"me1\">toCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        comb <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Hexagon<span class=\"br0\">[</span><span class=\"nu0\">20</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> x1 <span class=\"sy0\">=</span> <span class=\"nu0\">150</span>, y1 <span class=\"sy0\">=</span> <span class=\"nu0\">100</span>, x2 <span class=\"sy0\">=</span> <span class=\"nu0\">225</span>, y2 <span class=\"sy0\">=</span> <span class=\"nu0\">143</span>, w <span class=\"sy0\">=</span> <span class=\"nu0\">150</span>, h <span class=\"sy0\">=</span> <span class=\"nu0\">87</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> comb.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> x, y<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">12</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                x <span class=\"sy0\">=</span> x1 <span class=\"sy0\">+</span> <span class=\"br0\">(</span>i <span class=\"sy0\">%</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> w<span class=\"sy0\">;</span><br/>                y <span class=\"sy0\">=</span> y1 <span class=\"sy0\">+</span> <span class=\"br0\">(</span>i <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> h<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                x <span class=\"sy0\">=</span> x2 <span class=\"sy0\">+</span> <span class=\"br0\">(</span>i <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> w<span class=\"sy0\">;</span><br/>                y <span class=\"sy0\">=</span> y2 <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">12</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> h<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            comb<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Hexagon<span class=\"br0\">(</span>x, y, w <span class=\"sy0\">/</span> <span class=\"nu0\">3</span>, letters<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        requestFocus<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    @Override<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> paintComponent<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics</span></a> gg<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">super</span>.<span class=\"me1\">paintComponent</span><span class=\"br0\">(</span>gg<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics2d+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics2D</span></a> g <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics2d+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics2D</span></a><span class=\"br0\">)</span> gg<span class=\"sy0\">;</span><br/>        g.<span class=\"me1\">setRenderingHint</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arenderinghints+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">RenderingHints</span></a>.<span class=\"me1\">KEY_ANTIALIASING</span>,<br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arenderinghints+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">RenderingHints</span></a>.<span class=\"me1\">VALUE_ANTIALIAS_ON</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        g.<span class=\"me1\">setFont</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afont+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Font</span></a><span class=\"br0\">(</span><span class=\"st0\">\"SansSerif\"</span>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afont+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Font</span></a>.<span class=\"me1\">BOLD</span>, <span class=\"nu0\">30</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        g.<span class=\"me1\">setStroke</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abasicstroke+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BasicStroke</span></a><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>Hexagon hex <span class=\"sy0\">:</span> comb<span class=\"br0\">)</span><br/>            hex.<span class=\"me1\">draw</span><span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Hexagon <span class=\"kw1\">extends</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apolygon+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Polygon</span></a> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a> baseColor <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a>.<span class=\"me1\">yellow</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a> selectedColor <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a>.<span class=\"me1\">magenta</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">final</span> <span class=\"kw4\">char</span> letter<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">boolean</span> hasBeenSelected<span class=\"sy0\">;</span><br/>\u00a0<br/>    Hexagon<span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y, <span class=\"kw4\">int</span> halfWidth, <span class=\"kw4\">char</span> c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        letter <span class=\"sy0\">=</span> c<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">6</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            addPoint<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>x <span class=\"sy0\">+</span> halfWidth <span class=\"sy0\">*</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">cos</span><span class=\"br0\">(</span>i <span class=\"sy0\">*</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">PI</span> <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>                     <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>y <span class=\"sy0\">+</span> halfWidth <span class=\"sy0\">*</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sin</span><span class=\"br0\">(</span>i <span class=\"sy0\">*</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">PI</span> <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        getBounds<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> setSelected<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        hasBeenSelected <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> draw<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics2d+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics2D</span></a> g<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span>hasBeenSelected <span class=\"sy0\">?</span> selectedColor <span class=\"sy0\">:</span> baseColor<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        g.<span class=\"me1\">fillPolygon</span><span class=\"br0\">(</span><span class=\"kw1\">this</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a>.<span class=\"me1\">black</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        g.<span class=\"me1\">drawPolygon</span><span class=\"br0\">(</span><span class=\"kw1\">this</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span>hasBeenSelected <span class=\"sy0\">?</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a>.<span class=\"me1\">black</span> <span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a>.<span class=\"me1\">red</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        drawCenteredString<span class=\"br0\">(</span>g, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>letter<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> drawCenteredString<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics2d+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics2D</span></a> g, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afontmetrics+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">FontMetrics</span></a> fm <span class=\"sy0\">=</span> g.<span class=\"me1\">getFontMetrics</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> asc <span class=\"sy0\">=</span> fm.<span class=\"me1\">getAscent</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> dec <span class=\"sy0\">=</span> fm.<span class=\"me1\">getDescent</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> bounds.<span class=\"me1\">x</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>bounds.<span class=\"me1\">width</span> <span class=\"sy0\">-</span> fm.<span class=\"me1\">stringWidth</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> y <span class=\"sy0\">=</span> bounds.<span class=\"me1\">y</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>asc <span class=\"sy0\">+</span> <span class=\"br0\">(</span>bounds.<span class=\"me1\">height</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>asc <span class=\"sy0\">+</span> dec<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        g.<span class=\"me1\">drawString</span><span class=\"br0\">(</span>s, x, y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Kotlin", "loc": 147, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.4</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">BasicStroke</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">BorderLayout</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">Color</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">Dimension</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">Font</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">Graphics</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">Graphics2D</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">Polygon</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">RenderingHints</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">event</span>.<span class=\"me1\">KeyAdapter</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">event</span>.<span class=\"me1\">KeyEvent</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">event</span>.<span class=\"me1\">MouseAdapter</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">event</span>.<span class=\"me1\">MouseEvent</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">event</span>.<span class=\"me1\">WindowEvent</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> javax.<span class=\"me1\">swing</span>.<span class=\"me1\">JFrame</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> javax.<span class=\"me1\">swing</span>.<span class=\"me1\">JPanel</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> javax.<span class=\"me1\">swing</span>.<span class=\"me1\">SwingUtilities</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Honeycombs <span class=\"sy0\">:</span> JPanel<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> comb<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>Hexagon<span class=\"sy0\">?&gt;</span> <span class=\"sy0\">=</span> arrayOfNulls<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><br/>\u00a0<br/>    init <span class=\"br0\">{</span><br/>        preferredSize <span class=\"sy0\">=</span> Dimension<span class=\"br0\">(</span><span class=\"nu0\">600</span>, <span class=\"nu0\">500</span><span class=\"br0\">)</span><br/>        background <span class=\"sy0\">=</span> Color.<span class=\"me1\">white</span><br/>        isFocusable <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>\u00a0<br/>        addMouseListener<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> <span class=\"sy0\">:</span> MouseAdapter<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun mousePressed<span class=\"br0\">(</span>e<span class=\"sy0\">:</span> MouseEvent<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>hex in comb<span class=\"br0\">)</span><br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>hex<span class=\"sy0\">!!</span>.<span class=\"me1\">contains</span><span class=\"br0\">(</span>e.<span class=\"me1\">x</span>, e.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        hex.<span class=\"me1\">setSelected</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                        checkForClosure<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                        break<br/>                    <span class=\"br0\">}</span><br/>                repaint<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/>        addKeyListener<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> <span class=\"sy0\">:</span> KeyAdapter<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun keyPressed<span class=\"br0\">(</span>e<span class=\"sy0\">:</span> KeyEvent<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>hex in comb<span class=\"br0\">)</span><br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>hex<span class=\"sy0\">!!</span>.<span class=\"me1\">letter</span> <span class=\"sy0\">==</span> e.<span class=\"me1\">keyChar</span>.<span class=\"me1\">toUpperCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        hex.<span class=\"me1\">setSelected</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                        checkForClosure<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                        break<br/>                    <span class=\"br0\">}</span><br/>                repaint<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> letters <span class=\"sy0\">=</span> <span class=\"st0\">\"LRDGITPFBVOKANUYCESM\"</span>.<span class=\"me1\">toCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x1 <span class=\"sy0\">=</span> <span class=\"nu0\">150</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> y1 <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x2 <span class=\"sy0\">=</span> <span class=\"nu0\">225</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> y2 <span class=\"sy0\">=</span> <span class=\"nu0\">143</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> w <span class=\"sy0\">=</span> <span class=\"nu0\">150</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> h <span class=\"sy0\">=</span> <span class=\"nu0\">87</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until comb.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> x<span class=\"sy0\">:</span> Int<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> y<span class=\"sy0\">:</span> Int<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">12</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                x <span class=\"sy0\">=</span> x1 + <span class=\"br0\">(</span>i <span class=\"sy0\">%</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> w<br/>                y <span class=\"sy0\">=</span> y1 + <span class=\"br0\">(</span>i / <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> h<br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>                x <span class=\"sy0\">=</span> x2 + <span class=\"br0\">(</span>i <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> w<br/>                y <span class=\"sy0\">=</span> y2 + <span class=\"br0\">(</span><span class=\"br0\">(</span>i - <span class=\"nu0\">12</span><span class=\"br0\">)</span> / <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> h<br/>            <span class=\"br0\">}</span><br/>            comb<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> Hexagon<span class=\"br0\">(</span>x, y, w / <span class=\"nu0\">3</span>, letters<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        requestFocus<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun paintComponent<span class=\"br0\">(</span>gg<span class=\"sy0\">:</span> Graphics<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">super</span></a>.<span class=\"me1\">paintComponent</span><span class=\"br0\">(</span>gg<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> g <span class=\"sy0\">=</span> gg as Graphics2D<br/>        g.<span class=\"me1\">setRenderingHint</span><span class=\"br0\">(</span>RenderingHints.<span class=\"me1\">KEY_ANTIALIASING</span>,<br/>                           RenderingHints.<span class=\"me1\">VALUE_ANTIALIAS_ON</span><span class=\"br0\">)</span><br/>        g.<span class=\"me1\">font</span> <span class=\"sy0\">=</span> Font<span class=\"br0\">(</span><span class=\"st0\">\"SansSerif\"</span>, Font.<span class=\"me1\">BOLD</span>, <span class=\"nu0\">30</span><span class=\"br0\">)</span><br/>        g.<span class=\"me1\">stroke</span> <span class=\"sy0\">=</span> BasicStroke<span class=\"br0\">(</span>3.0f<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>hex in comb<span class=\"br0\">)</span> hex<span class=\"sy0\">!!</span>.<span class=\"me1\">draw</span><span class=\"br0\">(</span>g<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun checkForClosure<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>comb.<span class=\"me1\">all</span> <span class=\"br0\">{</span> it<span class=\"sy0\">!!</span>.<span class=\"me1\">hasBeenSelected</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> f <span class=\"sy0\">=</span> SwingUtilities.<span class=\"me1\">getWindowAncestor</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">)</span> as JFrame<br/>            f.<span class=\"me1\">dispatchEvent</span><span class=\"br0\">(</span>WindowEvent<span class=\"br0\">(</span>f, WindowEvent.<span class=\"me1\">WINDOW_CLOSING</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Hexagon<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Int, y<span class=\"sy0\">:</span> Int, halfWidth<span class=\"sy0\">:</span> Int, c<span class=\"sy0\">:</span> Char<span class=\"br0\">)</span> <span class=\"sy0\">:</span> Polygon<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> baseColor <span class=\"sy0\">=</span> Color.<span class=\"me1\">yellow</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> selectedColor <span class=\"sy0\">=</span> Color.<span class=\"me1\">magenta</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> hasBeenSelected <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> letter <span class=\"sy0\">=</span> c<br/>\u00a0<br/>    init <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>            addPoint<span class=\"br0\">(</span><span class=\"br0\">(</span>x + halfWidth <span class=\"sy0\">*</span> Math.<span class=\"me1\">cos</span><span class=\"br0\">(</span>i <span class=\"sy0\">*</span> Math.<span class=\"me1\">PI</span> / <span class=\"nu0\">3.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,<br/>                     <span class=\"br0\">(</span>y + halfWidth <span class=\"sy0\">*</span> Math.<span class=\"me1\">sin</span><span class=\"br0\">(</span>i <span class=\"sy0\">*</span> Math.<span class=\"me1\">PI</span> / <span class=\"nu0\">3.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        getBounds<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    fun setSelected<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        hasBeenSelected <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    fun draw<span class=\"br0\">(</span>g<span class=\"sy0\">:</span> Graphics2D<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">with</span></a><span class=\"br0\">(</span>g<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            color <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>hasBeenSelected<span class=\"br0\">)</span> selectedColor <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> baseColor<br/>            fillPolygon<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"sy0\">@</span>Hexagon<span class=\"br0\">)</span><br/>            color <span class=\"sy0\">=</span> Color.<span class=\"me1\">black</span><br/>            drawPolygon<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"sy0\">@</span>Hexagon<span class=\"br0\">)</span><br/>            color <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>hasBeenSelected<span class=\"br0\">)</span> Color.<span class=\"me1\">black</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> Color.<span class=\"me1\">red</span><br/>            drawCenteredString<span class=\"br0\">(</span>g, letter.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun drawCenteredString<span class=\"br0\">(</span>g<span class=\"sy0\">:</span> Graphics2D, s<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fm <span class=\"sy0\">=</span> g.<span class=\"me1\">fontMetrics</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> asc <span class=\"sy0\">=</span> fm.<span class=\"me1\">ascent</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dec <span class=\"sy0\">=</span> fm.<span class=\"me1\">descent</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x <span class=\"sy0\">=</span> bounds.<span class=\"me1\">x</span> + <span class=\"br0\">(</span>bounds.<span class=\"me1\">width</span> - fm.<span class=\"me1\">stringWidth</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span> / <span class=\"nu0\">2</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> y <span class=\"sy0\">=</span> bounds.<span class=\"me1\">y</span> + <span class=\"br0\">(</span>asc + <span class=\"br0\">(</span>bounds.<span class=\"me1\">height</span> - <span class=\"br0\">(</span>asc + dec<span class=\"br0\">)</span><span class=\"br0\">)</span> / <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        g.<span class=\"me1\">drawString</span><span class=\"br0\">(</span>s, x, y<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    SwingUtilities.<span class=\"me1\">invokeLater</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> f <span class=\"sy0\">=</span> JFrame<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">with</span></a><span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            defaultCloseOperation <span class=\"sy0\">=</span> JFrame.<span class=\"me1\">EXIT_ON_CLOSE</span><br/>            add<span class=\"br0\">(</span>Honeycombs<span class=\"br0\">(</span><span class=\"br0\">)</span>, BorderLayout.<span class=\"me1\">CENTER</span><span class=\"br0\">)</span><br/>            title <span class=\"sy0\">=</span> <span class=\"st0\">\"Honeycombs\"</span><br/>            isResizable <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>            pack<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            setLocationRelativeTo<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span><br/>            isVisible <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 139, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/><span class=\"kw1\">NoMainWin</span><br/><span class=\"kw1\">Dim</span> hxc<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> ltr<span class=\"br0\">(</span><span class=\"nu0\">26</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Global</span> sw<span class=\"sy0\">,</span> sh<span class=\"sy0\">,</span> radius<span class=\"sy0\">,</span> radChk<span class=\"sy0\">,</span> mx<span class=\"sy0\">,</span> my<span class=\"sy0\">,</span> h$<span class=\"sy0\">,</span> last<br/>h$<span class=\"sy0\">=</span><span class=\"st0\">\"#g\"</span><span class=\"sy0\">:</span> radius <span class=\"sy0\">=</span> <span class=\"nu0\">40</span><span class=\"sy0\">:</span> radChk <span class=\"sy0\">=</span> <span class=\"nu0\">35</span> <span class=\"sy0\">*</span> <span class=\"nu0\">35</span><span class=\"sy0\">:</span> last <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>sw <span class=\"sy0\">=</span> <span class=\"nu0\">400</span><span class=\"sy0\">:</span> sh <span class=\"sy0\">=</span> <span class=\"nu0\">380</span><span class=\"sy0\">:</span> <span class=\"kw3\">WindowWidth</span> <span class=\"sy0\">=</span> sw<span class=\"sy0\">+</span><span class=\"nu0\">6</span><span class=\"sy0\">:</span> <span class=\"kw3\">WindowHeight</span><span class=\"sy0\">=</span> sh<span class=\"sy0\">+</span><span class=\"nu0\">32</span><br/><span class=\"kw1\">Open</span> <span class=\"st0\">\"Liberty BASIC - Honeycombs\"</span> <span class=\"kw1\">For</span> graphics_nsb_nf <span class=\"kw1\">As</span> <span class=\"sy0\">#</span>g<br/><span class=\"sy0\">#</span>g <span class=\"st0\">\"Down; Cls; TrapClose xit\"</span><br/>\u00a0<br/><span class=\"kw1\">Call</span> shuffle<br/><span class=\"kw1\">Call</span> grid <span class=\"nu0\">75</span><span class=\"sy0\">,</span> <span class=\"nu0\">15</span><span class=\"sy0\">,</span> <span class=\"st0\">\"0 0 0\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"255 215 32\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"0 0 0\"</span><br/>\u00a0<br/><span class=\"sy0\">#</span>g <span class=\"st0\">\"SetFocus; when characterInput getKey; when leftButtonDown chkClick\"</span><br/><span class=\"kw1\">Wait</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> xit h$<br/>    <span class=\"kw1\">Close</span> <span class=\"sy0\">#</span>h$<span class=\"sy0\">:</span><span class=\"kw1\">End</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"co1\">'Assign ASCII values of A thru Z to ltr() array and randomize order of letters</span><br/><span class=\"kw1\">Sub</span> shuffle<br/>    <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">26</span><br/>        ltr<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">+</span><span class=\"nu0\">64</span><br/>    <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">77</span><br/>        r1 <span class=\"sy0\">=</span> <span class=\"kw2\">Int</span><span class=\"br0\">(</span><span class=\"kw2\">Rnd</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">26</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>        r2 <span class=\"sy0\">=</span> <span class=\"kw2\">Int</span><span class=\"br0\">(</span><span class=\"kw2\">Rnd</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">26</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>        temp <span class=\"sy0\">=</span> ltr<span class=\"br0\">(</span>r1<span class=\"br0\">)</span><span class=\"sy0\">:</span> ltr<span class=\"br0\">(</span>r1<span class=\"br0\">)</span> <span class=\"sy0\">=</span> ltr<span class=\"br0\">(</span>r2<span class=\"br0\">)</span><span class=\"sy0\">:</span> ltr<span class=\"br0\">(</span>r2<span class=\"br0\">)</span> <span class=\"sy0\">=</span> temp<br/>    <span class=\"kw1\">Next</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"co1\">'Draw the hex cells and fill with 20 out of 26 random letters</span><br/><span class=\"kw1\">Sub</span> grid ox<span class=\"sy0\">,</span> oy<span class=\"sy0\">,</span> fc$<span class=\"sy0\">,</span> bc$<span class=\"sy0\">,</span> tc$<br/>    cx <span class=\"sy0\">=</span> ox<span class=\"sy0\">:</span> cy <span class=\"sy0\">=</span> oy<br/>    <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">5</span><br/>        <span class=\"kw1\">If</span> <span class=\"br0\">(</span>i <span class=\"kw1\">And</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> cy <span class=\"sy0\">=</span> oy <span class=\"sy0\">+</span> <span class=\"nu0\">76</span> <span class=\"kw1\">Else</span> cy <span class=\"sy0\">=</span> oy <span class=\"sy0\">+</span> <span class=\"nu0\">42</span><br/>        <span class=\"kw1\">For</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">4</span><br/>            count <span class=\"sy0\">=</span> count <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span> letter$ <span class=\"sy0\">=</span> <span class=\"kw2\">Chr$</span><span class=\"br0\">(</span>ltr<span class=\"br0\">(</span>count<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">Call</span> cell<span class=\"sy0\">,</span> cx<span class=\"sy0\">,</span> cy<span class=\"sy0\">,</span> fc$<span class=\"sy0\">,</span> bc$<span class=\"sy0\">,</span> tc$<span class=\"sy0\">,</span> letter$<br/>            hxc<span class=\"br0\">(</span>count<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>cx<span class=\"sy0\">:</span> hxc<span class=\"br0\">(</span>count<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>cy<span class=\"sy0\">:</span> cy <span class=\"sy0\">=</span> cy <span class=\"sy0\">+</span> <span class=\"nu0\">70</span><br/>        <span class=\"kw1\">Next</span><br/>        cx <span class=\"sy0\">=</span> cx <span class=\"sy0\">+</span> <span class=\"nu0\">61</span><br/>    <span class=\"kw1\">Next</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"co1\">'Draw a filled hex cell and printed the letter associated with cell</span><br/><span class=\"kw1\">Sub</span> cell cx<span class=\"sy0\">,</span> cy<span class=\"sy0\">,</span> fc$<span class=\"sy0\">,</span> bc$<span class=\"sy0\">,</span> tc$<span class=\"sy0\">,</span> lt$<br/>    lastx <span class=\"sy0\">=</span> cx <span class=\"sy0\">+</span> radius<span class=\"sy0\">:</span> lasty <span class=\"sy0\">=</span> cy<br/>    <span class=\"kw1\">For</span> f <span class=\"sy0\">=</span> <span class=\"nu0\">1.04719755</span> <span class=\"kw1\">To</span> <span class=\"nu0\">6.2831853</span> Step <span class=\"nu0\">1.0471955</span><br/>        nx <span class=\"sy0\">=</span> <span class=\"kw2\">Cos</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">*</span>radius<span class=\"sy0\">+</span>cx<span class=\"sy0\">:</span> ny <span class=\"sy0\">=</span> <span class=\"kw2\">Sin</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">*</span>radius<span class=\"sy0\">+</span>cy<br/>        <span class=\"sy0\">#</span>g <span class=\"st0\">\"Size 2; Color \"</span>;bc$;<span class=\"st0\">\";BackColor \"</span>;bc$<br/>        <span class=\"kw1\">Call</span> triFill cx<span class=\"sy0\">,</span> cy<span class=\"sy0\">,</span> lastx<span class=\"sy0\">,</span> lasty<span class=\"sy0\">,</span> nx<span class=\"sy0\">,</span> ny<br/>        <span class=\"sy0\">#</span>g <span class=\"st0\">\"Size 5; Color \"</span>;fc$<br/>        <span class=\"sy0\">#</span>g <span class=\"st0\">\"Line \"</span>;lastx;<span class=\"st0\">\" \"</span>;lasty;<span class=\"st0\">\" \"</span>;nx;<span class=\"st0\">\" \"</span>;ny;<span class=\"st0\">\";Size 1\"</span><br/>        lastx <span class=\"sy0\">=</span> nx<span class=\"sy0\">:</span> lasty <span class=\"sy0\">=</span> ny<br/>    <span class=\"kw1\">Next</span><br/>    <span class=\"sy0\">#</span>g <span class=\"st0\">\"Font Courier_New 36 Bold\"</span><br/>    <span class=\"sy0\">#</span>g <span class=\"st0\">\"Color \"</span>;tc$;<span class=\"st0\">\";BackColor \"</span>;bc$<br/>    <span class=\"sy0\">#</span>g <span class=\"st0\">\"Place \"</span>;cx<span class=\"sy0\">-</span><span class=\"nu0\">15</span>;<span class=\"st0\">\" \"</span>;cy<span class=\"sy0\">+</span><span class=\"nu0\">15</span>;<span class=\"st0\">\";\\\"</span>;lt$<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"co1\">'Check for a mouse click in a hex cell</span><br/><span class=\"kw1\">Sub</span> chkClick h$<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> y<br/>    mx <span class=\"sy0\">=</span> <span class=\"kw3\">MouseX</span><br/>    my <span class=\"sy0\">=</span> <span class=\"kw3\">MouseY</span><br/>    <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">20</span><br/>        <span class=\"kw1\">If</span> pnc<span class=\"br0\">(</span>mx<span class=\"sy0\">,</span>my<span class=\"sy0\">,</span>hxc<span class=\"br0\">(</span>i<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>hxc<span class=\"br0\">(</span>i<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <span class=\"co1\">'selected hex cell found</span><br/>            <span class=\"kw1\">If</span> hxc<span class=\"br0\">(</span>i<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>                hxc<span class=\"br0\">(</span>i<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"co1\">'when set to 1, hex cell &amp; letter no longer selectable</span><br/>                key$ <span class=\"sy0\">=</span> <span class=\"kw2\">Chr$</span><span class=\"br0\">(</span>ltr<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">Call</span> cell hxc<span class=\"br0\">(</span>i<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>hxc<span class=\"br0\">(</span>i<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\"0 0 0\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"80 0 128\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"255 255 255\"</span><span class=\"sy0\">,</span>key$<br/>                <span class=\"kw1\">Call</span> showLetter key$<br/>                <span class=\"kw1\">Exit</span> <span class=\"kw1\">For</span><br/>            <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">Next</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"co1\">'Allow letter selection via keyboard</span><br/><span class=\"kw1\">Sub</span> getKey h$<span class=\"sy0\">,</span> char$<br/>    key$ <span class=\"sy0\">=</span> <span class=\"kw2\">Upper$</span><span class=\"br0\">(</span><span class=\"kw3\">Inkey$</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">'Poll ESC key to exit at any time</span><br/>    <span class=\"kw1\">If</span> key$<span class=\"sy0\">=</span><span class=\"kw2\">Chr$</span><span class=\"br0\">(</span><span class=\"nu0\">27</span><span class=\"br0\">)</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Call</span> xit h$<br/>    idx <span class=\"sy0\">=</span> <span class=\"kw2\">Instr</span><span class=\"br0\">(</span><span class=\"st0\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span><span class=\"sy0\">,</span>key$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> idx <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>        <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">20</span><br/>            <span class=\"kw1\">If</span> idx<span class=\"sy0\">+</span><span class=\"nu0\">64</span> <span class=\"sy0\">=</span> ltr<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">Then</span> <span class=\"co1\">'letter matching key press found</span><br/>                <span class=\"kw1\">If</span> hxc<span class=\"br0\">(</span>i<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>                    hxc<span class=\"br0\">(</span>i<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"co1\">'when set to 1, hex cell &amp; letter no longer selectable</span><br/>                    <span class=\"kw1\">Call</span> cell hxc<span class=\"br0\">(</span>i<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>hxc<span class=\"br0\">(</span>i<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\"0 0 0\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"80 0 128\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"255 255 255\"</span><span class=\"sy0\">,</span>key$<br/>                    <span class=\"kw1\">Call</span> showLetter key$<br/>                    <span class=\"kw1\">Exit</span> <span class=\"kw1\">For</span><br/>                <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>            <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>        <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"co1\">'Print letters selected at bottom of screen</span><br/><span class=\"kw1\">Sub</span> showLetter key$<br/>    <span class=\"sy0\">#</span>g <span class=\"st0\">\"Font Courier_New 18 Bold\"</span><br/>    <span class=\"sy0\">#</span>g <span class=\"st0\">\"Color Black;BackColor white\"</span><br/>    <span class=\"sy0\">#</span>g <span class=\"st0\">\"Place \"</span>;last<span class=\"sy0\">*</span><span class=\"nu0\">18</span><span class=\"sy0\">+</span><span class=\"nu0\">20</span>;<span class=\"st0\">\" 365;\\\"</span>; key$<br/>    last <span class=\"sy0\">=</span> last <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"co1\">'When 20th letter selected; exit</span><br/>    <span class=\"kw1\">If</span> last <span class=\"sy0\">&gt;</span> <span class=\"nu0\">19</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Call</span> xit h$<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"co1\">'Draw a filled triangle</span><br/><span class=\"kw1\">Sub</span> triFill x1<span class=\"sy0\">,</span>y1<span class=\"sy0\">,</span> x2<span class=\"sy0\">,</span>y2<span class=\"sy0\">,</span> x3<span class=\"sy0\">,</span>y3<br/>    <span class=\"kw1\">If</span> x2<span class=\"sy0\">&lt;</span>x1 <span class=\"kw1\">Then</span> x<span class=\"sy0\">=</span>x2<span class=\"sy0\">:</span> y<span class=\"sy0\">=</span>y2<span class=\"sy0\">:</span> x2<span class=\"sy0\">=</span>x1<span class=\"sy0\">:</span> y2<span class=\"sy0\">=</span>y1<span class=\"sy0\">:</span> x1<span class=\"sy0\">=</span>x<span class=\"sy0\">:</span> y1<span class=\"sy0\">=</span>y<br/>    <span class=\"kw1\">If</span> x3<span class=\"sy0\">&lt;</span>x1 <span class=\"kw1\">Then</span> x<span class=\"sy0\">=</span>x3<span class=\"sy0\">:</span> y<span class=\"sy0\">=</span>y3<span class=\"sy0\">:</span> x3<span class=\"sy0\">=</span>x1<span class=\"sy0\">:</span> y3<span class=\"sy0\">=</span>y1<span class=\"sy0\">:</span> x1<span class=\"sy0\">=</span>x<span class=\"sy0\">:</span> y1<span class=\"sy0\">=</span>y<br/>    <span class=\"kw1\">If</span> x3<span class=\"sy0\">&lt;</span>x2 <span class=\"kw1\">Then</span> x<span class=\"sy0\">=</span>x3<span class=\"sy0\">:</span> y<span class=\"sy0\">=</span>y3<span class=\"sy0\">:</span> x3<span class=\"sy0\">=</span>x2<span class=\"sy0\">:</span> y3<span class=\"sy0\">=</span>y2<span class=\"sy0\">:</span> x2<span class=\"sy0\">=</span>x<span class=\"sy0\">:</span> y2<span class=\"sy0\">=</span>y<br/>    <span class=\"kw1\">If</span> x1<span class=\"sy0\">&lt;&gt;</span>x3 <span class=\"kw1\">Then</span> slope1<span class=\"sy0\">=</span><span class=\"br0\">(</span>y3<span class=\"sy0\">-</span>y1<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>x3<span class=\"sy0\">-</span>x1<span class=\"br0\">)</span><br/>    length<span class=\"sy0\">=</span>x2<span class=\"sy0\">-</span>x1<br/>    <span class=\"kw1\">If</span> length<span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>        slope2<span class=\"sy0\">=</span><span class=\"br0\">(</span>y2<span class=\"sy0\">-</span>y1<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>x2<span class=\"sy0\">-</span>x1<span class=\"br0\">)</span><br/>        <span class=\"kw1\">For</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> length<br/>            <span class=\"sy0\">#</span>g <span class=\"st0\">\"Line \"</span>;<span class=\"kw2\">Int</span><span class=\"br0\">(</span>x<span class=\"sy0\">+</span>x1<span class=\"br0\">)</span>;<span class=\"st0\">\" \"</span>;<span class=\"kw2\">Int</span><span class=\"br0\">(</span>x<span class=\"sy0\">*</span>slope1<span class=\"sy0\">+</span>y1<span class=\"br0\">)</span>;<span class=\"st0\">\" \"</span>;<span class=\"kw2\">Int</span><span class=\"br0\">(</span>x<span class=\"sy0\">+</span>x1<span class=\"br0\">)</span>;<span class=\"st0\">\" \"</span>;<span class=\"kw2\">Int</span><span class=\"br0\">(</span>x<span class=\"sy0\">*</span>slope2<span class=\"sy0\">+</span>y1<span class=\"br0\">)</span><br/>        <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    y <span class=\"sy0\">=</span> length<span class=\"sy0\">*</span>slope1<span class=\"sy0\">+</span>y1 <span class=\"sy0\">:</span>length<span class=\"sy0\">=</span>x3<span class=\"sy0\">-</span>x2<br/>    <span class=\"kw1\">If</span> length<span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>        slope3<span class=\"sy0\">=</span><span class=\"br0\">(</span>y3<span class=\"sy0\">-</span>y2<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>x3<span class=\"sy0\">-</span>x2<span class=\"br0\">)</span><br/>        <span class=\"kw1\">For</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> length<br/>            <span class=\"sy0\">#</span>g <span class=\"st0\">\"Line \"</span>;<span class=\"kw2\">Int</span><span class=\"br0\">(</span>x<span class=\"sy0\">+</span>x2<span class=\"br0\">)</span>;<span class=\"st0\">\" \"</span>;<span class=\"kw2\">Int</span><span class=\"br0\">(</span>x<span class=\"sy0\">*</span>slope1<span class=\"sy0\">+</span>y<span class=\"br0\">)</span>;<span class=\"st0\">\" \"</span>;<span class=\"kw2\">Int</span><span class=\"br0\">(</span>x<span class=\"sy0\">+</span>x2<span class=\"br0\">)</span>;<span class=\"st0\">\" \"</span>;<span class=\"kw2\">Int</span><span class=\"br0\">(</span>x<span class=\"sy0\">*</span>slope3<span class=\"sy0\">+</span>y2<span class=\"br0\">)</span><br/>        <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"co1\">'Point in Circle function</span><br/><span class=\"kw1\">Function</span> pnc<span class=\"br0\">(</span>ax<span class=\"sy0\">,</span> ay<span class=\"sy0\">,</span> bx<span class=\"sy0\">,</span> by<span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> <span class=\"br0\">(</span>bx<span class=\"sy0\">-</span>ax<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>bx<span class=\"sy0\">-</span>ax<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"br0\">(</span>by<span class=\"sy0\">-</span>ay<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>by<span class=\"sy0\">-</span>ay<span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> radChk <span class=\"kw1\">Then</span><br/>        pnc<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Else</span><br/>        pnc<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 33, "block": "<pre class=\"text highlighted_source\">hexagon[{x_, y_}]\u00a0:= <br/>  Polygon[Transpose[{{1/2, 1/4, -1/4, -1/2, -1/4, 1/4} + <br/>      x, {0, Sqrt[3]/4, Sqrt[3]/4, 0, -Sqrt[3]/4, -Sqrt[3]/4} + y}]];<br/>off = Transpose[{ConstantArray[0, 20], {0, 0, 0, 0, Sqrt[3]/4, <br/>     Sqrt[3]/4, Sqrt[3]/4, Sqrt[3]/4, 0, 0, 0, 0, Sqrt[3]/4, <br/>     Sqrt[3]/4, Sqrt[3]/4, Sqrt[3]/4, 0, 0, 0, 0}}];<br/>DynamicModule[{letters = RandomSample[CharacterRange[\"A\", \"Z\"], 20], <br/>  blue = False, cols = {}, <br/>  locs = Tuples[{Range[1, 4, 3/4], <br/>      Range[1, 1 + (3 Sqrt[3])/2, Sqrt[3]/2]}] - off}, <br/> EventHandler[<br/>  Dynamic[Graphics[{EdgeForm[{Thick, Black}], LightGray, <br/>     hexagon /@ locs, {#[[1]], hexagon[#[[2]]]} &amp; /@ cols, Black, <br/>     MapThread[<br/>      Text, {Style[#, FontSize -&gt; Large] &amp; /@ letters, locs}], Red, <br/>     Text[Style[<br/>       StringJoin[<br/>        letters[[FirstPosition[locs, #[[2]]][[1]]]] &amp; /@ <br/>         Cases[cols, {Red, _}][[All, 2]]], <br/>       FontSize -&gt; 40], {5/2, -1/2}, {Right, Center}], Blue, <br/>     Text[Style[<br/>       StringJoin[<br/>        letters[[FirstPosition[locs, #[[2]]][[1]]]] &amp; /@ <br/>         Cases[cols, {Blue, _}][[All, 2]]], <br/>       FontSize -&gt; 40], {5/2, -1/2}, {Left, Center}]}, <br/>    PlotRange -&gt; {{-1, 6}, Automatic}, <br/>    ImageSize -&gt; Large]], {\"MouseClicked\"\u00a0:&gt; <br/>    If[! MemberQ[cols[[All, 2]], <br/>       Nearest[locs, MousePosition[\"Graphics\"]][[1]]], <br/>     AppendTo[<br/>      cols, {If[blue, Blue, Red], <br/>       Nearest[locs, MousePosition[\"Graphics\"]][[1]]}]; <br/>     blue =\u00a0! blue]}]]</pre>"}, {"lang": "MATLAB", "loc": 57, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> Honeycombs<br/>    nRows = <span class=\"nu0\">4</span>;                      <span class=\"co1\">% Number of rows</span><br/>    nCols = <span class=\"nu0\">5</span>;                      <span class=\"co1\">% Number of columns</span><br/>    nHexs = nRows*nCols;            <span class=\"co1\">% Number of hexagons</span><br/>    rOuter = <span class=\"nu0\">1</span>;                     <span class=\"co1\">% Circumradius</span><br/>    startX = <span class=\"nu0\">0</span>;                     <span class=\"co1\">% x-coordinate of upper left hexagon</span><br/>    startY = <span class=\"nu0\">0</span>;                     <span class=\"co1\">% y-coordinate of upper left hexagon</span><br/>    delX = rOuter*<span class=\"nu0\">1.5</span>;              <span class=\"co1\">% Horizontal distance between hexagons</span><br/>    delY = rOuter*<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sqrt.html\"><span class=\"kw2\">sqrt</span></a><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>;          <span class=\"co1\">% Vertical distance between hexagons</span><br/>    offY = delY/<span class=\"nu0\">2</span>;                  <span class=\"co1\">% Vertical offset between columns</span><br/>    genHexX = rOuter.*<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/cos.html\"><span class=\"kw2\">cos</span></a><span class=\"br0\">(</span><span class=\"nu0\">2</span>.*<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/pi.html\"><span class=\"kw2\">pi</span></a>.*<span class=\"br0\">(</span><span class=\"nu0\">0</span>:<span class=\"nu0\">5</span><span class=\"br0\">)</span>.'./<span class=\"nu0\">6</span><span class=\"br0\">)</span>;   <span class=\"co1\">% x-coords of general hexagon</span><br/>    genHexY = rOuter.*<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sin.html\"><span class=\"kw2\">sin</span></a><span class=\"br0\">(</span><span class=\"nu0\">2</span>.*<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/pi.html\"><span class=\"kw2\">pi</span></a>.*<span class=\"br0\">(</span><span class=\"nu0\">0</span>:<span class=\"nu0\">5</span><span class=\"br0\">)</span>.'./<span class=\"nu0\">6</span><span class=\"br0\">)</span>;   <span class=\"co1\">% y-coords of general hexagon</span><br/>    centX = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/zeros.html\"><span class=\"kw2\">zeros</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span>, nHexs<span class=\"br0\">)</span>;        <span class=\"co1\">% x-coords of hexagon centers</span><br/>    centY = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/zeros.html\"><span class=\"kw2\">zeros</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span>, nHexs<span class=\"br0\">)</span>;        <span class=\"co1\">% y-coords of hexagon centers</span><br/>    <span class=\"kw1\">for</span> c = <span class=\"nu0\">1</span>:nCols<br/>        idxs = <span class=\"br0\">(</span>c-<span class=\"nu0\">1</span><span class=\"br0\">)</span>*nRows+<span class=\"nu0\">1</span>:c*nRows;   <span class=\"co1\">% Indeces of hexagons in that column</span><br/>        <span class=\"kw1\">if</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/mod.html\"><span class=\"kw2\">mod</span></a><span class=\"br0\">(</span>c, <span class=\"nu0\">2</span><span class=\"br0\">)</span>                <span class=\"co1\">% Odd numbered column - higher y-values</span><br/>            centY<span class=\"br0\">(</span>idxs<span class=\"br0\">)</span> = startY:-delY:startY-delY*<span class=\"br0\">(</span>nRows-<span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">else</span>                        <span class=\"co1\">% Even numbered column - lower y-values</span><br/>            centY<span class=\"br0\">(</span>idxs<span class=\"br0\">)</span> = startY-offY:-delY:startY-offY-delY*<span class=\"br0\">(</span>nRows-<span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">end</span><br/>        centX<span class=\"br0\">(</span>idxs<span class=\"br0\">)</span> = <span class=\"br0\">(</span>startX+<span class=\"br0\">(</span>c-<span class=\"nu0\">1</span><span class=\"br0\">)</span>*delX<span class=\"br0\">)</span>.*<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/ones.html\"><span class=\"kw2\">ones</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span>, nRows<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">end</span><br/>    <span class=\"br0\">[</span>MCentX, MGenHexX<span class=\"br0\">]</span> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/meshgrid.html\"><span class=\"kw2\">meshgrid</span></a><span class=\"br0\">(</span>centX, genHexX<span class=\"br0\">)</span>;<br/>    <span class=\"br0\">[</span>MCentY, MGenHexY<span class=\"br0\">]</span> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/meshgrid.html\"><span class=\"kw2\">meshgrid</span></a><span class=\"br0\">(</span>centY, genHexY<span class=\"br0\">)</span>;<br/>    HexX = MCentX+MGenHexX;         <span class=\"co1\">% x-coords of hexagon vertices</span><br/>    HexY = MCentY+MGenHexY;         <span class=\"co1\">% y-coords of hexagon vertices</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/figure.html\"><span class=\"kw2\">figure</span></a><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/hold.html\"><span class=\"kw2\">hold</span></a> on<br/>    letters = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/char.html\"><span class=\"kw2\">char</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">65</span>:<span class=\"nu0\">90</span> <span class=\"nu0\">97</span>:<span class=\"nu0\">122</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>    randIdxs = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/randperm.html\"><span class=\"kw2\">randperm</span></a><span class=\"br0\">(</span><span class=\"nu0\">26</span><span class=\"br0\">)</span>;<br/>    letters = <span class=\"br0\">[</span>letters<span class=\"br0\">(</span>randIdxs<span class=\"br0\">)</span> letters<span class=\"br0\">(</span><span class=\"nu0\">26</span>+randIdxs<span class=\"br0\">)</span><span class=\"br0\">]</span>;<br/>    hexH = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/zeros.html\"><span class=\"kw2\">zeros</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span>, nHexs<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">for</span> k = <span class=\"nu0\">1</span>:nHexs                 <span class=\"co1\">% Create patches individually</span><br/>        hexH<span class=\"br0\">(</span>k<span class=\"br0\">)</span> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/patch.html\"><span class=\"kw2\">patch</span></a><span class=\"br0\">(</span>HexX<span class=\"br0\">(</span>:, k<span class=\"br0\">)</span>, HexY<span class=\"br0\">(</span>:, k<span class=\"br0\">)</span>, <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>        textH = text<span class=\"br0\">(</span>centX<span class=\"br0\">(</span>k<span class=\"br0\">)</span>, centY<span class=\"br0\">(</span>k<span class=\"br0\">)</span>, letters<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/mod.html\"><span class=\"kw2\">mod</span></a><span class=\"br0\">(</span>k, <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>letters<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, <span class=\"sy0\">...</span><br/>            <span class=\"co2\">'HorizontalAlignment'</span>, <span class=\"co2\">'center'</span>, <span class=\"co2\">'FontSize'</span>, <span class=\"nu0\">14</span>, <span class=\"sy0\">...</span><br/>            <span class=\"co2\">'FontWeight'</span>, <span class=\"co2\">'bold'</span>, <span class=\"co2\">'Color'</span>, <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span>, <span class=\"co2\">'HitTest'</span>, <span class=\"co2\">'off'</span><span class=\"br0\">)</span>;<br/>        <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/set.html\"><span class=\"kw2\">set</span></a><span class=\"br0\">(</span>hexH<span class=\"br0\">(</span>k<span class=\"br0\">)</span>, <span class=\"co2\">'UserData'</span>, textH<span class=\"br0\">)</span> <span class=\"co1\">% Save to object for easy access</span><br/>    <span class=\"kw1\">end</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/axis.html\"><span class=\"kw2\">axis</span></a> equal<br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/axis.html\"><span class=\"kw2\">axis</span></a> off<br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/set.html\"><span class=\"kw2\">set</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/gca.html\"><span class=\"kw2\">gca</span></a>, <span class=\"co2\">'UserData'</span>, <span class=\"co2\">''</span><span class=\"br0\">)</span>        <span class=\"co1\">% List of clicked patch labels</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/set.html\"><span class=\"kw2\">set</span></a><span class=\"br0\">(</span>hexH, <span class=\"co2\">'ButtonDownFcn'</span>, @onClick<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> onClick<span class=\"br0\">(</span>obj, event<span class=\"br0\">)</span><br/>    axesH = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/get.html\"><span class=\"kw2\">get</span></a><span class=\"br0\">(</span>obj, <span class=\"co2\">'Parent'</span><span class=\"br0\">)</span>;<br/>    textH = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/get.html\"><span class=\"kw2\">get</span></a><span class=\"br0\">(</span>obj, <span class=\"co2\">'UserData'</span><span class=\"br0\">)</span>;<br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/set.html\"><span class=\"kw2\">set</span></a><span class=\"br0\">(</span>obj, <span class=\"co2\">'FaceColor'</span>, <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>                      <span class=\"co1\">% Change color</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/set.html\"><span class=\"kw2\">set</span></a><span class=\"br0\">(</span>textH, <span class=\"co2\">'Color'</span>, <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>                        <span class=\"co1\">% Change label color</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/set.html\"><span class=\"kw2\">set</span></a><span class=\"br0\">(</span>obj, <span class=\"co2\">'HitTest'</span>, <span class=\"co2\">'off'</span><span class=\"br0\">)</span>                          <span class=\"co1\">% Ignore future clicks</span><br/>    currList = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/get.html\"><span class=\"kw2\">get</span></a><span class=\"br0\">(</span>axesH, <span class=\"co2\">'UserData'</span><span class=\"br0\">)</span>;                  <span class=\"co1\">% Hexs already clicked</span><br/>    newList = <span class=\"br0\">[</span>currList <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/get.html\"><span class=\"kw2\">get</span></a><span class=\"br0\">(</span>textH, <span class=\"co2\">'String'</span><span class=\"br0\">)</span><span class=\"br0\">]</span>;          <span class=\"co1\">% Update list</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/set.html\"><span class=\"kw2\">set</span></a><span class=\"br0\">(</span>axesH, <span class=\"co2\">'UserData'</span>, newList<span class=\"br0\">)</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/title.html\"><span class=\"kw2\">title</span></a><span class=\"br0\">(</span>newList<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Perl", "loc": 90, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!/usr/bin/perl</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">use</span> Tk<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> List<span class=\"sy0\">::</span><span class=\"me2\">Util</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>shuffle<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw2\">sub</span> altitude <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">/</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw2\">sub</span> polygon_coordinates <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$size</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$alt</span> <span class=\"sy0\">=</span> altitude<span class=\"br0\">(</span><span class=\"re0\">$size</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">-</span> <span class=\"re0\">$size</span><span class=\"sy0\">,</span>       <span class=\"re0\">$y</span><span class=\"sy0\">,</span><br/>            <span class=\"re0\">$x</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"re0\">$size</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span> <span class=\"sy0\">-</span> <span class=\"re0\">$alt</span><span class=\"sy0\">,</span><br/>            <span class=\"re0\">$x</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"re0\">$size</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span> <span class=\"sy0\">-</span> <span class=\"re0\">$alt</span><span class=\"sy0\">,</span><br/>            <span class=\"re0\">$x</span> <span class=\"sy0\">+</span> <span class=\"re0\">$size</span><span class=\"sy0\">,</span>       <span class=\"re0\">$y</span><span class=\"sy0\">,</span><br/>            <span class=\"re0\">$x</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"re0\">$size</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span> <span class=\"sy0\">+</span> <span class=\"re0\">$alt</span><span class=\"sy0\">,</span><br/>            <span class=\"re0\">$x</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"re0\">$size</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span> <span class=\"sy0\">+</span> <span class=\"re0\">$alt</span><span class=\"sy0\">,</span><br/>           <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">{</span>   <span class=\"kw1\">my</span> <span class=\"re0\">%changed</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">sub</span> change <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$canvas</span><span class=\"sy0\">,</span> <span class=\"re0\">$id</span><span class=\"sy0\">,</span> <span class=\"re0\">$letter_id</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$canvas</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">itemconfigure</span><span class=\"br0\">(</span><span class=\"re0\">$id</span><span class=\"sy0\">,</span>        <span class=\"sy0\">-</span>fill <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'magenta'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">$canvas</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">itemconfigure</span><span class=\"br0\">(</span><span class=\"re0\">$letter_id</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span>fill <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'black'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://perldoc.perl.org/functions/undef.html\"><span class=\"kw3\">undef</span></a> <span class=\"re0\">$changed</span><span class=\"br0\">{</span><span class=\"re0\">$id</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">20</span> <span class=\"sy0\">==</span> <a href=\"http://perldoc.perl.org/functions/keys.html\"><span class=\"kw3\">keys</span></a> <span class=\"re0\">%changed</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"All letters pressed.<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>                <span class=\"co1\"># Simple exit causes a \"Font still in cache\" segfault</span><br/>                <span class=\"co1\"># when the last letter is changed with a mouse button.</span><br/>                <span class=\"re0\">$canvas</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">MainWindow</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">after</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/exit.html\"><span class=\"kw3\">exit</span></a> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">{</span>   <span class=\"kw1\">my</span> <span class=\"re0\">@letters</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>shuffle<span class=\"br0\">(</span><span class=\"st_h\">'A'</span> <span class=\"sy0\">..</span> <span class=\"st_h\">'Z'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">20</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">sub</span> comb <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$canvas</span><span class=\"sy0\">,</span> <span class=\"re0\">$fromx</span><span class=\"sy0\">,</span> <span class=\"re0\">$fromy</span><span class=\"sy0\">,</span> <span class=\"re0\">$size</span><span class=\"sy0\">,</span> <span class=\"re0\">$count</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"re0\">$fromx</span><span class=\"sy0\">;</span> <span class=\"re0\">$x</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> <span class=\"re0\">$count</span> <span class=\"sy0\">*</span> <span class=\"re0\">$size</span><span class=\"sy0\">;</span> <span class=\"re0\">$x</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> <span class=\"re0\">$size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$y</span> <span class=\"sy0\">=</span> <span class=\"re0\">$fromy</span><span class=\"sy0\">;</span> <span class=\"re0\">$y</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">7.5</span> <span class=\"sy0\">*</span> <span class=\"re0\">$size</span><span class=\"sy0\">;</span> <span class=\"re0\">$y</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> altitude<span class=\"br0\">(</span><span class=\"re0\">$size</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">my</span> <span class=\"re0\">$id</span> <span class=\"sy0\">=</span> <span class=\"re0\">$canvas</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">createPolygon</span><span class=\"br0\">(</span><br/>                                      polygon_coordinates<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$size</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                                      <span class=\"sy0\">-</span>outline <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'black'</span><span class=\"sy0\">,</span><br/>                                      <span class=\"sy0\">-</span>fill    <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'yellow'</span><span class=\"sy0\">,</span><br/>                                      <span class=\"sy0\">-</span>width   <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span><br/>                                  <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">my</span> <span class=\"re0\">$letter</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a> <span class=\"re0\">@letters</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">my</span> <span class=\"re0\">$letter_id</span> <span class=\"sy0\">=</span> <span class=\"re0\">$canvas</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">createText</span><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span><br/>                                         <span class=\"sy0\">-</span>fill <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'red'</span><span class=\"sy0\">,</span><br/>                                         <span class=\"sy0\">-</span>text <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$letter</span><span class=\"sy0\">,</span><br/>                                         <span class=\"sy0\">-</span>font <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"{sans} \"</span> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"re0\">$size</span> <span class=\"sy0\">*</span> <span class=\"nu0\">0.9</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                                     <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"re0\">$canvas</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">MainWindow</span><span class=\"sy0\">-&gt;</span><a href=\"http://perldoc.perl.org/functions/bind.html\"><span class=\"kw3\">bind</span></a><span class=\"br0\">(</span><span class=\"st_h\">'all'</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/lc.html\"><span class=\"kw3\">lc</span></a> <span class=\"re0\">$letter</span><span class=\"sy0\">,</span><br/>                                          change<span class=\"br0\">(</span><span class=\"re0\">$canvas</span><span class=\"sy0\">,</span> <span class=\"re0\">$id</span><span class=\"sy0\">,</span> <span class=\"re0\">$letter_id</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"re0\">$canvas</span><span class=\"sy0\">-&gt;</span><a href=\"http://perldoc.perl.org/functions/bind.html\"><span class=\"kw3\">bind</span></a><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"sy0\">,</span> <span class=\"st_h\">'&lt;Button-1&gt;'</span><span class=\"sy0\">,</span><br/>                              change<span class=\"br0\">(</span><span class=\"re0\">$canvas</span><span class=\"sy0\">,</span> <span class=\"re0\">$id</span><span class=\"sy0\">,</span> <span class=\"re0\">$letter_id</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">for</span> <span class=\"re0\">$id</span><span class=\"sy0\">,</span> <span class=\"re0\">$letter_id</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$size</span> <span class=\"sy0\">=</span> <span class=\"nu0\">36</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$mw</span>     <span class=\"sy0\">=</span> <span class=\"st_h\">'MainWindow'</span><span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"sy0\">-</span>title <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"Honeycombs\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$canvas</span> <span class=\"sy0\">=</span> <span class=\"re0\">$mw</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Canvas</span><span class=\"br0\">(</span><span class=\"sy0\">-</span>width  <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">8</span> <span class=\"sy0\">*</span> <span class=\"re0\">$size</span><span class=\"sy0\">,</span><br/>                         <span class=\"sy0\">-</span>height <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">8</span> <span class=\"sy0\">*</span> <span class=\"re0\">$size</span><span class=\"sy0\">,</span><br/>                        <span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><a href=\"http://perldoc.perl.org/functions/pack.html\"><span class=\"kw3\">pack</span></a><span class=\"sy0\">;</span><br/>\u00a0<br/>comb<span class=\"br0\">(</span><span class=\"re0\">$canvas</span><span class=\"sy0\">,</span> <span class=\"re0\">$size</span><span class=\"sy0\">,</span>       <span class=\"re0\">$size</span><span class=\"sy0\">,</span>                   <span class=\"re0\">$size</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>comb<span class=\"br0\">(</span><span class=\"re0\">$canvas</span><span class=\"sy0\">,</span> <span class=\"re0\">$size</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2.5</span><span class=\"sy0\">,</span> <span class=\"re0\">$size</span> <span class=\"sy0\">+</span> altitude<span class=\"br0\">(</span><span class=\"re0\">$size</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">$size</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$btn</span> <span class=\"sy0\">=</span> <span class=\"re0\">$mw</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Button</span><span class=\"br0\">(</span><span class=\"sy0\">-</span>text      <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'Quit'</span><span class=\"sy0\">,</span><br/>                      <span class=\"sy0\">-</span>underline <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>                      <span class=\"sy0\">-</span>command   <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/exit.html\"><span class=\"kw3\">exit</span></a> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>                     <span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><a href=\"http://perldoc.perl.org/functions/pack.html\"><span class=\"kw3\">pack</span></a><span class=\"sy0\">;</span><br/><span class=\"re0\">$mw</span><span class=\"sy0\">-&gt;</span><a href=\"http://perldoc.perl.org/functions/bind.html\"><span class=\"kw3\">bind</span></a><span class=\"br0\">(</span><span class=\"st_h\">'&lt;Alt-q&gt;'</span><span class=\"sy0\">,</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> <span class=\"re0\">$btn</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">invoke</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>MainLoop<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 191, "block": "<pre class=\"text highlighted_source\">include ..\\arwen\\arwen.ew<br/>include ..\\arwen\\axtra.ew<br/>\u00a0<br/>constant N = 5, -- columns<br/>         M = 4, -- rows<br/>         cLetter = Yellow,  -- initial colour(!)<br/>         cChosen = Purple,<br/>         cPlayr2 = Purple,  -- (2 player if!=c_Chosen)<br/>         cHover  = White,<br/>         cLines  = Black,<br/>         cSelect = Black,   -- (text/list of selected letters)<br/>         cBackgnd = #EFF8FA,<br/>         letters = shuffle(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")[1..N*M]<br/>sequence fonts  -- list of {width,handle}, see set_font()<br/>string chosen = \"\"<br/>\u00a0<br/>constant main = create(Window, \"honeycomb\", 0, 0, 20, 20, 520, 540, 0),<br/>         mainDC = getPrivateDC(main),<br/>         viewDC = c_func(xCreateCompatibleDC, {NULL}),<br/>         pSize = allocate_Point() <br/>\u00a0<br/>integer ls,         -- length of a single side<br/>        dx, dy,     -- bounding rectangle of a sloping side<br/>        ox, oy,     -- offsets needed to center things<br/>        lw          -- line width (10% of ls, tweaked)<br/>\u00a0<br/>-- The total bounding rectange of a completed N by M honeycomb is N*(ls+dx)+dx by (2*M+1)*dy. <br/>--  However, as space for the chosen letters, pretend there is an extra row at the bottom.<br/>-- Use that to determine the best ls, and hence dx and dy, as the window is resized.<br/>\u00a0<br/>constant cos60 = cos(2*PI*60/360),      -- dx = ls*cos60 (cos60=0.5)<br/>         sin60 = sin(2*PI*60/360)       -- dy = ls*sin60<br/>\u00a0<br/>function font_info(integer size)<br/>atom hFont = createFontForDC(viewDC, \"Calibri\", size, Bold)<br/>    {} = selectObject(viewDC,hFont)<br/>    {} = c_func(xGetTextExtentPoint32,{viewDC,\"W\",1,pSize})<br/>    return {peek4u(pSize),hFont}<br/>end function<br/>fonts = {font_info(1)}<br/>\u00a0<br/>procedure set_font(atom ls)<br/>    while length(fonts)&lt;=200    -- (arbitrary limit)<br/>      and fonts[$][1]&lt;ls do     -- until slightly too big<br/>        fonts = append(fonts,font_info(length(fonts)+1))<br/>    end while<br/>    for i=length(fonts) to 1 by -1 do<br/>        if fonts[i][1]&lt;=ls then<br/>            {} = selectObject(viewDC,fonts[i][2])<br/>            exit<br/>        end if<br/>    end for<br/>end procedure<br/>\u00a0<br/>integer mx=0, my=0  -- mouse hover cell<br/>\u00a0<br/>procedure drawHexagon(integer x, integer y)<br/>integer k = (y-1)*N+x<br/>integer ch = letters[k]<br/>string s = letters[k..k]<br/>sequence points<br/>    -- calculate position of left mid:<br/>    atom x0 = (x-1)*(ls+dx) + ox + 5<br/>    atom y0 = (2*y-mod(x,2))*dy + oy + 10<br/>    -- and 3 more x co-ords, and above/below y0:<br/>    atom x1 = x0+dx, x2 = x1+ls, x3 = x2+dx,<br/>         ya = y0-dy, yb = y0+dy<br/>    -- points are {{left,top},top,right,btm,btm,home(left)}<br/>    points = {{x0,y0,x1,ya},{x2,ya},{x3,y0},{x2,yb},{x1,yb},{x0,y0}}<br/>    k = find(ch,chosen)<br/>    setPenColor(iff(k?iff(mod(k,2)?cChosen:cPlayr2):iff(x=mx and y=my?cHover:cLetter)))<br/>    drawPolygonh(viewDC,points)<br/>    setPenColor(cLines)<br/>    drawLinesh(viewDC,points)   <br/>    {} = c_func(xGetTextExtentPoint32,{viewDC,s,1,pSize})<br/>    x0 += dx+ls/2-peek4u(pSize)/2 -- centre-width/2<br/>    y0 -= peek4u(pSize+4)/2       -- (centre)-height/2<br/>    wPuts2(viewDC,x0,y0,s)<br/>end procedure<br/>\u00a0<br/>function xy_to_hex(sequence xy)<br/>integer x, y, gx, gy, rx, ry, hx=0, hy=0<br/>\u00a0<br/>    if dx!=0 and dy!=0 then -- (avoid divide by 0)<br/>        x = xy[1]-ox-5<br/>        y = xy[2]-oy-10+2*dy<br/>\u00a0<br/>        -- Credit: Matt Lewis (hexes.exw)<br/>        -- (but I basically tilted it on its head<br/>        --  and tweaked it using trial and error;<br/>        --  see commented out loop in WM_PAINT.)<br/>        gx = floor(x/dx)<br/>        gy = floor((y-dy)/dy)<br/>        rx = remainder(x,dx)<br/>        ry = remainder(y,dy)<br/>\u00a0<br/>        hx = floor(gx/3+0.7)<br/>        if remainder(gx,3)&lt;1 then<br/>            atom mxb = (dx/dy)*ry<br/>            -- need to check the slope<br/>            if remainder(hx,2)!=remainder(gy,2) then<br/>                mxb = dx-mxb<br/>            end if<br/>            hx += (rx&gt;mxb)<br/>        end if<br/>        hy = floor((gy+remainder(hx,2))/2)<br/>    end if<br/>    return {hx,hy}<br/>end function<br/>\u00a0<br/>integer dw = 0, dh = 0      -- client area width and height<br/>atom bmView<br/>integer vwX = 0, vwY = 0    -- actual size of the view bitmap<br/>\u00a0<br/>function mainHandler(integer id, integer msg, atom wParam, object lParam)<br/>integer ch<br/>\u00a0<br/>    if msg=WM_SIZE then<br/>        {{},{},dw,dh} = getClientRect(main)<br/>        if dw&gt;vwX or dh&gt;vwY then<br/>            -- we need a bigger bitmap<br/>            bmView = c_func(xCreateCompatibleBitmap, {mainDC, dw, dh})<br/>            {} = deleteObject(selectObject(viewDC,bmView))<br/>            {vwX,vwY} = {dw,dh}<br/>        end if<br/>        --  width = N*(ls+dx)+dx = ls*(N*(1+cos60)+cos60),<br/>        --  height = (2*M+3)*dy = ls*(2*M+3)*sin60, pick whichever fits:<br/>        ls = min(floor((dw-10)/(N*(1+cos60)+cos60)),<br/>                 floor((dh-20)/((2*M+3)*sin60)))<br/>        dx = floor(ls*cos60)    -- (same as ls/2)<br/>        dy = floor(ls*sin60)<br/>        ox = floor((dw-((N*(ls+dx))+dx))/2)<br/>        oy = floor((dh-((2*M+3)*dy))/2)<br/>        lw = floor((ls-10)/10)+1<br/>        setPenWidth(lw)<br/>        set_font(ls)<br/>    elsif msg=WM_PAINT then<br/>        setPenColor(cBackgnd)<br/>        drawRectangleh(viewDC, True, 0, 0, dw, dh)<br/>        for x=1 to N do<br/>            for y=1 to M do<br/>                drawHexagon(x,y)<br/>            end for<br/>        end for<br/>        -- text/list of selected letters goes where (M+2)th row would:<br/>        setPenColor(cSelect)<br/>        wPuts2(viewDC,ox+dx+5,oy+(2*M+1)*dy+10,chosen)<br/>        -- I needed this to get xy_to_hex() working:<br/>--      for i=1 to 400 do<br/>--          for j=1 to 400 do<br/>--              if xy_to_hex({i,j})={1,1} then<br/>--                  drawRectangleh(viewDC, True, i, j, i+1, j+1)<br/>--              end if<br/>--          end for<br/>--      end for<br/>        void = c_func(xBitBlt,{mainDC,0,0,dw,dh,viewDC,0,0,SRCCOPY})<br/>    elsif msg=WM_CHAR then<br/>        if wParam=VK_ESCAPE then<br/>            closeWindow(main)<br/>            if id then end if -- suppress warnings<br/>--      elsif wParam='!' then<br/>--         \u00a0?9/0<br/>        else<br/>            ch = upper(wParam)<br/>            if find(ch,letters) and not find(ch,chosen) then<br/>                chosen &amp;= ch<br/>                repaintWindow(main)<br/>            end if<br/>        end if<br/>    elsif msg=WM_MOUSEMOVE then<br/>        {mx,my} = xy_to_hex(lParam)<br/>        repaintWindow(main)<br/>    elsif msg = WM_LBUTTONDOWN then<br/>        {mx,my} = xy_to_hex(lParam)<br/>        if mx&gt;=1 and mx&lt;=N<br/>        and my&gt;=1 and my&lt;=M then<br/>            ch = letters[(my-1)*N+mx]<br/>            if find(ch,letters) and not find(ch,chosen) then<br/>                chosen &amp;= ch<br/>                repaintWindow(main)<br/>            end if<br/>        end if<br/>    elsif msg=WM_GETMINMAXINFO then<br/>        -- below this, things stop working...<br/>        poke4(lParam+MINMAXINFO_ptMinTrackSize,{188,250})<br/>    end if<br/>    return 0<br/>end function<br/>setHandler(main,routine_id(\"mainHandler\"))<br/>\u00a0<br/>WinMain(main, SW_NORMAL)</pre>"}, {"lang": "Prolog", "loc": 216, "block": "<pre class=\"prolog highlighted_source\">honeycomb <span class=\"sy1\">:-</span><br/>\tnew<span class=\"br0\">(</span>W<span class=\"sy4\">,</span> window<span class=\"br0\">(</span><span class=\"st_h\">'Honeycomb'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnew<span class=\"br0\">(</span>Counter<span class=\"sy4\">,</span> counter<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>        new<span class=\"br0\">(</span>Ph<span class=\"sy4\">,</span> phrase<span class=\"br0\">(</span>W<span class=\"sy4\">,</span> point<span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"sy4\">,</span><span class=\"nu0\">500</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>W<span class=\"sy4\">,</span> recogniser<span class=\"sy4\">,</span> new<span class=\"br0\">(</span>KB<span class=\"sy4\">,</span> key_binding<span class=\"br0\">(</span><span class=\"sy5\">@</span>nil<span class=\"sy4\">,</span> argument<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnumlist<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> <span class=\"nu0\">19</span><span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">NL</span></a><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tcreate_letters<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> LL<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tmaplist<span class=\"br0\">(</span>build_list<span class=\"br0\">(</span><span class=\"nu0\">150</span><span class=\"sy4\">,</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">NL</span></a><span class=\"sy4\">,</span> LP<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnew<span class=\"br0\">(</span>ChCell<span class=\"sy4\">,</span> chain<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tmaplist<span class=\"br0\">(</span>create_cell<span class=\"br0\">(</span>W<span class=\"sy4\">,</span> Counter<span class=\"sy4\">,</span> Ph<span class=\"sy4\">,</span> KB<span class=\"sy4\">,</span> ChCell<span class=\"br0\">)</span><span class=\"sy4\">,</span> LP<span class=\"sy4\">,</span> LL<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>W<span class=\"sy4\">,</span> size<span class=\"sy4\">,</span> size<span class=\"br0\">(</span><span class=\"nu0\">600</span><span class=\"sy4\">,</span> <span class=\"nu0\">600</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"co1\">% we must free the resources</span><br/>\tsend<span class=\"br0\">(</span>W<span class=\"sy4\">,</span> done_message<span class=\"sy4\">,</span> and<span class=\"br0\">(</span>message<span class=\"br0\">(</span>ChCell<span class=\"sy4\">,</span> for_all<span class=\"sy4\">,</span> message<span class=\"br0\">(</span><span class=\"sy5\">@</span>arg1<span class=\"sy4\">,</span> free<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\t\t\t  message<span class=\"br0\">(</span>ChCell<span class=\"sy4\">,</span> free<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\t\t\t  message<span class=\"br0\">(</span>Counter<span class=\"sy4\">,</span> free<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\t\t\t  message<span class=\"br0\">(</span>Ph<span class=\"sy4\">,</span> free<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\t\t\t  message<span class=\"br0\">(</span>W<span class=\"sy4\">,</span> destroy<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>W<span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">open</span></a><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">% create the link between the keyboard and the cell</span><br/>init_key_binding<span class=\"br0\">(</span>KB<span class=\"sy4\">,</span> Cell<span class=\"sy3\">-</span>UpperCase<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tdowncase_atom<span class=\"br0\">(</span>UpperCase<span class=\"sy4\">,</span> LowerCase<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>KB<span class=\"sy4\">,</span> function<span class=\"sy4\">,</span> UpperCase<span class=\"sy4\">,</span> message<span class=\"br0\">(</span>Cell<span class=\"sy4\">,</span> click<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>KB<span class=\"sy4\">,</span> function<span class=\"sy4\">,</span> LowerCase<span class=\"sy4\">,</span> message<span class=\"br0\">(</span>Cell<span class=\"sy4\">,</span> click<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>create_letters<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> LL<span class=\"sy4\">,</span> LL<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <span class=\"sy5\">!</span><span class=\"sy4\">.</span><br/>\u00a0<br/>create_letters<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> L1<span class=\"sy4\">,</span> LL<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tC <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> random<span class=\"br0\">(</span><span class=\"nu0\">26</span><span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"nu0\">65</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   <span class=\"sy2\">\\+</span>member<span class=\"br0\">(</span>C<span class=\"sy4\">,</span> L1<span class=\"br0\">)</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span><br/>\t    N1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> create_letters<span class=\"br0\">(</span>N1<span class=\"sy4\">,</span> <span class=\"br0\">[</span>C<span class=\"sy5\">|</span>L1<span class=\"br0\">]</span><span class=\"sy4\">,</span> LL<span class=\"br0\">)</span><br/>\t<span class=\"sy4\">;</span>   create_letters<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> L1<span class=\"sy4\">,</span> LL<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% creation of the cells</span><br/>create_cell<span class=\"br0\">(</span>W<span class=\"sy4\">,</span> Counter<span class=\"sy4\">,</span>Phrase<span class=\"sy4\">,</span> KB<span class=\"sy4\">,</span> ChCell<span class=\"sy4\">,</span> Point<span class=\"sy4\">,</span>  Code<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">char_code</span></a><span class=\"br0\">(</span>Letter<span class=\"sy4\">,</span> Code<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnew<span class=\"br0\">(</span>H<span class=\"sy4\">,</span> cell<span class=\"br0\">(</span>W<span class=\"sy4\">,</span> Counter<span class=\"sy4\">,</span> Phrase<span class=\"sy4\">,</span> Letter<span class=\"sy4\">,</span> Point<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>H<span class=\"sy4\">,</span> my_draw<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>ChCell<span class=\"sy4\">,</span> append<span class=\"sy4\">,</span> H<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"co1\">% create the link between the keyboard and the cell</span><br/>\tinit_key_binding<span class=\"br0\">(</span>KB<span class=\"sy4\">,</span> H<span class=\"sy3\">-</span>Letter<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">% build the list of the centers of the cells</span><br/>build_list<span class=\"br0\">(</span>X0<span class=\"sy4\">,</span>Y0<span class=\"sy4\">,</span> N<span class=\"sy4\">,</span> point<span class=\"br0\">(</span>X<span class=\"sy4\">,</span>Y<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tC <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">mod</span></a>  <span class=\"nu0\">5</span><span class=\"sy4\">,</span><br/>\tL <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N <span class=\"sy3\">//</span> <span class=\"nu0\">5</span><span class=\"sy4\">,</span><br/>\tC0 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> C <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">mod</span></a> <span class=\"nu0\">2</span><span class=\"sy4\">,</span><br/>\tX <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> C <span class=\"sy3\">*</span> <span class=\"nu0\">75</span> <span class=\"sy3\">+</span> X0<span class=\"sy4\">,</span><br/>\tY <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> L <span class=\"sy3\">*</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">round</span></a><span class=\"br0\">(</span><span class=\"nu0\">50</span> <span class=\"sy3\">*</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">sqrt</span></a><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy3\">+</span> C0 <span class=\"sy3\">*</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">round</span></a><span class=\"br0\">(</span><span class=\"nu0\">25</span> <span class=\"sy3\">*</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">sqrt</span></a><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy3\">+</span> Y0<span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br/><span class=\"co1\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br/><span class=\"sy1\">:-</span> pce_begin_class<span class=\"br0\">(</span>phrase<span class=\"sy4\">,</span> string<span class=\"sy4\">,</span> \"spelled string\"<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>str<span class=\"sy4\">,</span> string<span class=\"sy4\">,</span> both<span class=\"sy4\">,</span> \"displayed string\"<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>window<span class=\"sy4\">,</span> object<span class=\"sy4\">,</span> both<span class=\"sy4\">,</span> \"the display\" <span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>pt<span class=\"sy4\">,</span> point<span class=\"sy4\">,</span> both<span class=\"sy4\">,</span> \"where to display strings\"<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>lbl1<span class=\"sy4\">,</span> label<span class=\"sy4\">,</span> both<span class=\"sy4\">,</span> \"label to display the letters\"<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>lbl2<span class=\"sy4\">,</span> label<span class=\"sy4\">,</span> both<span class=\"sy4\">,</span> \"label to display the last letter\"<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>initialise<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> Window <span class=\"sy4\">:</span> object<span class=\"sy4\">,</span> Point <span class=\"sy4\">:</span> point<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><span class=\"sy6\">&gt;</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> window<span class=\"sy4\">,</span> Window<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> str<span class=\"sy4\">,</span> new<span class=\"br0\">(</span>_<span class=\"sy4\">,</span> string<span class=\"br0\">(</span><span class=\"st_h\">''</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> pt<span class=\"sy4\">,</span> Point<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnew<span class=\"br0\">(</span>Lbl1<span class=\"sy4\">,</span> label<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>Lbl1<span class=\"sy4\">,</span> font<span class=\"sy4\">,</span>  <span class=\"sy5\">@</span>times_bold_24<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> lbl1<span class=\"sy4\">,</span> Lbl1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnew<span class=\"br0\">(</span>Lbl2<span class=\"sy4\">,</span> label<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>Lbl2<span class=\"sy4\">,</span> font<span class=\"sy4\">,</span>  <span class=\"sy5\">@</span>times_bold_24<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> lbl2<span class=\"sy4\">,</span> Lbl2<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>unlink<span class=\"br0\">(</span>P<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><span class=\"sy6\">&gt;</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> lbl1<span class=\"sy4\">,</span> Lbl1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>Lbl1<span class=\"sy4\">,</span> free<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> lbl2<span class=\"sy4\">,</span> Lbl2<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>Lbl2<span class=\"sy4\">,</span> free<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> send_super<span class=\"sy4\">,</span> unlink<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% display the list of the letters</span><br/><span class=\"co1\">% and the last letter on the screen</span><br/>new_letter<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> Letter<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><span class=\"sy6\">&gt;</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> str<span class=\"sy4\">,</span> Str<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>Str<span class=\"sy4\">,</span> append<span class=\"sy4\">,</span> Letter<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> str<span class=\"sy4\">,</span> Str<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnew<span class=\"br0\">(</span>S1<span class=\"sy4\">,</span> string<span class=\"br0\">(</span><span class=\"st_h\">'Chosen\u00a0:\u00a0%s'</span><span class=\"sy4\">,</span> Str<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> lbl1<span class=\"sy4\">,</span> Lbl1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>Lbl1<span class=\"sy4\">,</span> selection<span class=\"sy4\">,</span> S1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> window<span class=\"sy4\">,</span> W<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> pt<span class=\"sy4\">,</span> Pt<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>W<span class=\"sy4\">,</span> display<span class=\"sy4\">,</span>  Lbl1<span class=\"sy4\">,</span> Pt<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnew<span class=\"br0\">(</span>S2<span class=\"sy4\">,</span> string<span class=\"br0\">(</span><span class=\"st_h\">'The user choose letter\u00a0%c.'</span><span class=\"sy4\">,</span> Letter<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> lbl2<span class=\"sy4\">,</span> Lbl2<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>Lbl2<span class=\"sy4\">,</span> selection<span class=\"sy4\">,</span> S2<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>Pt<span class=\"sy4\">,</span> x<span class=\"sy4\">,</span> X<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>Pt<span class=\"sy4\">,</span> y<span class=\"sy4\">,</span> Y<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tY1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Y <span class=\"sy3\">+</span> <span class=\"nu0\">30</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>W<span class=\"sy4\">,</span> display<span class=\"sy4\">,</span> Lbl2<span class=\"sy4\">,</span> point<span class=\"br0\">(</span>X<span class=\"sy4\">,</span> Y1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"sy1\">:-</span> pce_end_class<span class=\"br0\">(</span>phrase<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br/><span class=\"co1\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br/><span class=\"sy1\">:-</span> pce_begin_class<span class=\"br0\">(</span>counter<span class=\"sy4\">,</span> object<span class=\"sy4\">,</span> \"count the unclicked cells\"<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>nb<span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">number</span></a><span class=\"sy4\">,</span> both<span class=\"sy4\">,</span> \"<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">number</span></a> of unclicked cells\"<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>initialise<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> N <span class=\"sy4\">:</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">number</span></a><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><span class=\"sy6\">&gt;</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> nb<span class=\"sy4\">,</span> N<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>decrement<span class=\"br0\">(</span>P<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><span class=\"sy6\">&gt;</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> nb<span class=\"sy4\">,</span> N<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> minus<span class=\"sy4\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> nb<span class=\"sy4\">,</span> N<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   send<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> equal<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span><br/>\t    send<span class=\"br0\">(</span><span class=\"sy5\">@</span>display<span class=\"sy4\">,</span> inform<span class=\"sy4\">,</span> <span class=\"st_h\">'The game is over\u00a0!'</span><span class=\"br0\">)</span><br/>\t<span class=\"sy4\">;</span>   <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/><span class=\"sy1\">:-</span> pce_end_class<span class=\"br0\">(</span>counter<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br/><span class=\"co1\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br/><span class=\"sy1\">:-</span> pce_begin_class<span class=\"br0\">(</span>cell<span class=\"sy4\">,</span> path<span class=\"sy4\">,</span> \"The honneycomb cell\"<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>p<span class=\"sy4\">,</span> path<span class=\"sy4\">,</span> both<span class=\"sy4\">,</span> \"the cell itself\" <span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>window<span class=\"sy4\">,</span> object<span class=\"sy4\">,</span> both<span class=\"sy4\">,</span> \"the display\" <span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>letter<span class=\"sy4\">,</span> name<span class=\"sy4\">,</span> both<span class=\"sy4\">,</span> \"Upcase letter displayed in the cell\" <span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>center<span class=\"sy4\">,</span> point<span class=\"sy4\">,</span> both<span class=\"sy4\">,</span> \"coordinates of the center of the cell\"<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>color<span class=\"sy4\">,</span> colour<span class=\"sy4\">,</span> both<span class=\"sy4\">,</span> \"colour of the cell\"<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>count<span class=\"sy4\">,</span> counter<span class=\"sy4\">,</span> both<span class=\"sy4\">,</span> \"counter of unclicked cells\"<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>status<span class=\"sy4\">,</span> object<span class=\"sy4\">,</span> both<span class=\"sy4\">,</span> \"clicked<span class=\"sy3\">/</span>unclicked\"<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>variable<span class=\"br0\">(</span>phr<span class=\"sy4\">,</span> phrase<span class=\"sy4\">,</span> both<span class=\"sy4\">,</span> \"to display the new letter\"<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>initialise<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> Window <span class=\"sy4\">:</span> object<span class=\"sy4\">,</span> Counter <span class=\"sy4\">:</span> counter<span class=\"sy4\">,</span><br/>\t   Phrase<span class=\"sy4\">:</span> phrase<span class=\"sy4\">,</span> Letter<span class=\"sy4\">:</span>name<span class=\"sy4\">,</span> Center<span class=\"sy4\">:</span>point<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><span class=\"sy6\">&gt;</span><br/>\tsend_super<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> initialise<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> letter<span class=\"sy4\">,</span> Letter<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> center<span class=\"sy4\">,</span> Center<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> window<span class=\"sy4\">,</span> Window<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> count<span class=\"sy4\">,</span> Counter<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> status<span class=\"sy4\">,</span> unclicked<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> phr<span class=\"sy4\">,</span> Phrase<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnew<span class=\"br0\">(</span>Pa<span class=\"sy4\">,</span> path<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>        <span class=\"br0\">(</span><br/>\t   get<span class=\"br0\">(</span>Center<span class=\"sy4\">,</span> x<span class=\"sy4\">,</span> X0<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t   get<span class=\"br0\">(</span>Center<span class=\"sy4\">,</span> y<span class=\"sy4\">,</span> Y0<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t   X <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> X0 <span class=\"sy3\">-</span> <span class=\"nu0\">25</span><span class=\"sy4\">,</span> Y <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Y0 <span class=\"sy3\">-</span>  <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">round</span></a><span class=\"br0\">(</span><span class=\"nu0\">25</span> <span class=\"sy3\">*</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">sqrt</span></a><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>   \t   send<span class=\"br0\">(</span>Pa<span class=\"sy4\">,</span> append<span class=\"sy4\">,</span> point<span class=\"br0\">(</span>X<span class=\"sy4\">,</span> Y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t   X1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> X <span class=\"sy3\">+</span> <span class=\"nu0\">50</span><span class=\"sy4\">,</span><br/>  \t   send<span class=\"br0\">(</span>Pa<span class=\"sy4\">,</span> append<span class=\"sy4\">,</span> point<span class=\"br0\">(</span>X1<span class=\"sy4\">,</span> Y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t   X2 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> X1 <span class=\"sy3\">+</span> <span class=\"nu0\">25</span><span class=\"sy4\">,</span><br/>\t   send<span class=\"br0\">(</span>Pa<span class=\"sy4\">,</span> append<span class=\"sy4\">,</span> point<span class=\"br0\">(</span>X2<span class=\"sy4\">,</span> Y0<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/> \t   Y3 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a>  Y0 <span class=\"sy3\">+</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">round</span></a><span class=\"br0\">(</span><span class=\"nu0\">25</span> <span class=\"sy3\">*</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">sqrt</span></a><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t   send<span class=\"br0\">(</span>Pa<span class=\"sy4\">,</span> append<span class=\"sy4\">,</span> point<span class=\"br0\">(</span>X1<span class=\"sy4\">,</span> Y3<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t   send<span class=\"br0\">(</span>Pa<span class=\"sy4\">,</span> append<span class=\"sy4\">,</span> point<span class=\"br0\">(</span>X<span class=\"sy4\">,</span> Y3<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t   X4 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> X <span class=\"sy3\">-</span> <span class=\"nu0\">25</span><span class=\"sy4\">,</span><br/>\t   send<span class=\"br0\">(</span>Pa<span class=\"sy4\">,</span> append<span class=\"sy4\">,</span> point<span class=\"br0\">(</span>X4<span class=\"sy4\">,</span> Y0<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t   send<span class=\"br0\">(</span>Pa<span class=\"sy4\">,</span> closed<span class=\"sy4\">,</span> <span class=\"sy5\">@</span>on<span class=\"br0\">)</span><br/>\t<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> p<span class=\"sy4\">,</span> Pa<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> color<span class=\"sy4\">,</span> colour<span class=\"br0\">(</span><span class=\"sy5\">@</span>default<span class=\"sy4\">,</span> <span class=\"nu0\">65535</span><span class=\"sy4\">,</span> <span class=\"nu0\">65535</span><span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"co1\">% create the link between the mouse and the cell</span><br/>\tsend<span class=\"br0\">(</span>Pa<span class=\"sy4\">,</span> recogniser<span class=\"sy4\">,</span><br/>\t     click_gesture<span class=\"br0\">(</span>left<span class=\"sy4\">,</span> <span class=\"st_h\">''</span><span class=\"sy4\">,</span> single<span class=\"sy4\">,</span> message<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> click<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>unlink<span class=\"br0\">(</span>P<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><span class=\"sy6\">&gt;</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> p<span class=\"sy4\">,</span> Pa<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>Pa<span class=\"sy4\">,</span> free<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> send_super<span class=\"sy4\">,</span> unlink<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">% message processed when the cell is clicked</span><br/><span class=\"co1\">% or when the letter is pressed on the keyboard</span><br/>click<span class=\"br0\">(</span>P<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><span class=\"sy6\">&gt;</span><br/>\t<span class=\"co1\">% test if the cell has already been clicked</span><br/>\t<span class=\"co1\">% succeed when the the status is 'unclicked'</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> status<span class=\"sy4\">,</span> unclicked<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"co1\">% change the status</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> status<span class=\"sy4\">,</span> clicked<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"co1\">% change the color</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> color<span class=\"sy4\">,</span> colour<span class=\"br0\">(</span><span class=\"sy5\">@</span>default<span class=\"sy4\">,</span> <span class=\"nu0\">65535</span><span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> <span class=\"nu0\">65535</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> my_draw<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> letter<span class=\"sy4\">,</span> Letter<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"co1\">% inform the object \"phrase\" that a new letter is clicked</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> phr<span class=\"sy4\">,</span> Phrase<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>Phrase<span class=\"sy4\">,</span> new_letter<span class=\"sy4\">,</span> Letter<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"co1\">% inform the object \"counter\" that a new letter is clicked</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> count<span class=\"sy4\">,</span> Counter<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>Counter<span class=\"sy4\">,</span> decrement<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>my_draw<span class=\"br0\">(</span>P<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><span class=\"sy6\">&gt;</span><br/>\t<span class=\"co1\">% display the path and fill it with the current colour</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> window<span class=\"sy4\">,</span> W<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> p<span class=\"sy4\">,</span> Pa<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>        send<span class=\"br0\">(</span>W<span class=\"sy4\">,</span> display<span class=\"sy4\">,</span> Pa<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>        get<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> color<span class=\"sy4\">,</span> Col<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>Pa<span class=\"sy4\">,</span> fill_pattern<span class=\"sy4\">,</span> Col<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\t<span class=\"co1\">% display the letter centered</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> letter<span class=\"sy4\">,</span> C<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>   \tnew<span class=\"br0\">(</span>Str<span class=\"sy4\">,</span> string<span class=\"br0\">(</span>C<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnew<span class=\"br0\">(</span>Tx<span class=\"sy4\">,</span> text<span class=\"br0\">(</span>Str?value<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>Tx<span class=\"sy4\">,</span> font<span class=\"sy4\">,</span> font<span class=\"br0\">(</span>times<span class=\"sy4\">,</span> bold<span class=\"sy4\">,</span> <span class=\"nu0\">24</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\t<span class=\"co1\">% compute the size of the message to center it</span><br/>\tget<span class=\"br0\">(</span>P<span class=\"sy4\">,</span> slot<span class=\"sy4\">,</span> center<span class=\"sy4\">,</span> point<span class=\"br0\">(</span>X0<span class=\"sy4\">,</span>Y0<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>font<span class=\"br0\">(</span>times<span class=\"sy4\">,</span> bold<span class=\"sy4\">,</span> <span class=\"nu0\">24</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> width<span class=\"br0\">(</span>Str<span class=\"br0\">)</span><span class=\"sy4\">,</span> M<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tXT <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> X0 <span class=\"sy3\">-</span> M<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy4\">,</span><br/>\tget<span class=\"br0\">(</span>font<span class=\"br0\">(</span>times<span class=\"sy4\">,</span> bold<span class=\"sy4\">,</span> <span class=\"nu0\">24</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> height<span class=\"sy4\">,</span> H<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tYT <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Y0 <span class=\"sy3\">-</span> H<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy4\">,</span><br/>\tsend<span class=\"br0\">(</span>W<span class=\"sy4\">,</span> display<span class=\"sy4\">,</span> Tx<span class=\"sy4\">,</span> point<span class=\"br0\">(</span>XT<span class=\"sy4\">,</span> YT<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"sy1\">:-</span> pce_end_class<span class=\"br0\">(</span>cell<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 203, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Structure</span> hexGadget<br/>  text.s<br/>  Status.i     <span class=\"co1\">;nonselected = 0, selected = 1</span><br/>  center.<span class=\"kw2\">POINT</span> <span class=\"co1\">;location of hex's center</span><br/>  List shape.<span class=\"kw2\">POINT</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndStructure</span><br/>\u00a0<br/><span class=\"kw1\">Structure</span> honeycomb<br/>  <span class=\"kw2\">gadgetID</span>.i<br/>  margins.<span class=\"kw2\">POINT</span><br/>  unusedLetters.s<br/>  chosen.s<br/>  maxLength.i<br/>  Array hexGadgets.hexGadget<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  textY.i<br/><span class=\"kw1\">EndStructure</span><br/>\u00a0<br/><span class=\"kw1\">Prototype</span> hexEvent_prt<span class=\"br0\">(</span><span class=\"sy0\">*</span>h.honeycomb, hexID<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> inpoly<span class=\"br0\">(</span><span class=\"sy0\">*</span>p.<span class=\"kw2\">POINT</span>, List poly.<span class=\"kw2\">POINT</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">;returns 1 if point is inside the polygon defined by poly(), otherwise returns 0</span><br/>  <span class=\"kw1\">Protected</span> new.<span class=\"kw2\">POINT</span>, old.<span class=\"kw2\">POINT</span>, lp.<span class=\"kw2\">POINT</span>, rp.<span class=\"kw2\">POINT</span>, i, inside, <span class=\"sy0\">*</span>poly<br/>  <span class=\"kw1\">If</span> ListSize<span class=\"br0\">(</span>poly<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span>: <span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">0</span>: <span class=\"kw1\">EndIf</span> <br/>  <span class=\"kw2\">LastElement</span><span class=\"br0\">(</span>poly<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>: old <span class=\"sy0\">=</span> poly<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">ForEach</span> poly<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">;find leftmost endpoint 'lp' and the rightmost endpoint 'rp' based on x value</span><br/>    <span class=\"kw1\">If</span> poly<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>x <span class=\"sy0\">&gt;</span> old<span class=\"sy0\">\\</span>x <br/>      lp <span class=\"sy0\">=</span> old<br/>      rp <span class=\"sy0\">=</span> poly<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Else</span><br/>      lp <span class=\"sy0\">=</span> poly<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      rp <span class=\"sy0\">=</span> old<br/>    <span class=\"kw1\">EndIf</span> <br/>    <span class=\"kw1\">If</span> lp<span class=\"sy0\">\\</span>x <span class=\"sy0\">&lt;</span> <span class=\"sy0\">*</span>p<span class=\"sy0\">\\</span>x <span class=\"kw1\">And</span> <span class=\"sy0\">*</span>p<span class=\"sy0\">\\</span>x <span class=\"sy0\">&lt;=</span> rp<span class=\"sy0\">\\</span>x <span class=\"kw1\">And</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>p<span class=\"sy0\">\\</span>y <span class=\"sy0\">-</span> lp<span class=\"sy0\">\\</span>y<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>rp<span class=\"sy0\">\\</span>x <span class=\"sy0\">-</span> lp<span class=\"sy0\">\\</span>x<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>rp<span class=\"sy0\">\\</span>y <span class=\"sy0\">-</span> lp<span class=\"sy0\">\\</span>y<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>p<span class=\"sy0\">\\</span>x <span class=\"sy0\">-</span> lp<span class=\"sy0\">\\</span>x<span class=\"br0\">)</span><br/>      inside <span class=\"sy0\">=</span> <span class=\"sy0\">~</span>inside<br/>    <span class=\"kw1\">EndIf</span> <br/>    old <span class=\"sy0\">=</span> poly<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span> <br/>  <span class=\"kw1\">ProcedureReturn</span> inside <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"co1\">;draw a hex Gadget by number</span><br/><span class=\"kw1\">Procedure</span> drawhex<span class=\"br0\">(</span><span class=\"sy0\">*</span>h.honeycomb, hexID<span class=\"br0\">)</span><br/>  <span class=\"kw1\">With</span> <span class=\"sy0\">*</span>h<span class=\"sy0\">\\</span>hexGadgets<span class=\"br0\">(</span>hexID<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Protected</span> p.<span class=\"kw2\">POINT</span><br/>    <span class=\"kw1\">If</span> <span class=\"kw2\">LastElement</span><span class=\"br0\">(</span><span class=\"sy0\">\\</span>shape<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      p <span class=\"sy0\">=</span> <span class=\"sy0\">\\</span>shape<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">EndIf</span> <br/>    <span class=\"kw1\">ForEach</span> <span class=\"sy0\">\\</span>shape<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"kw2\">LineXY</span><span class=\"br0\">(</span>p<span class=\"sy0\">\\</span>x, p<span class=\"sy0\">\\</span>y, <span class=\"sy0\">\\</span>shape<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>x, <span class=\"sy0\">\\</span>shape<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>y, <span class=\"kw2\">RGB</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;black</span><br/>      p <span class=\"sy0\">=</span> <span class=\"sy0\">\\</span>shape<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span> <br/>    <span class=\"kw2\">DrawingMode</span><span class=\"br0\">(</span>#PB_2DDrawing_Transparent<span class=\"br0\">)</span><br/>    <span class=\"kw2\">DrawingFont</span><span class=\"br0\">(</span><span class=\"kw2\">FontID</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> <span class=\"sy0\">\\</span>Status<br/>      <span class=\"kw2\">FillArea</span><span class=\"br0\">(</span><span class=\"sy0\">\\</span>center<span class=\"sy0\">\\</span>x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, <span class=\"sy0\">\\</span>center<span class=\"sy0\">\\</span>y <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, <span class=\"kw2\">RGB</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span>, <span class=\"kw2\">RGB</span><span class=\"br0\">(</span>$FF, <span class=\"nu0\">0</span>, $FF<span class=\"br0\">)</span><span class=\"br0\">)</span>    <span class=\"co1\">;magenta</span><br/>      <span class=\"kw2\">DrawText</span><span class=\"br0\">(</span><span class=\"sy0\">\\</span>center<span class=\"sy0\">\\</span>x <span class=\"sy0\">-</span> <span class=\"kw2\">TextWidth</span><span class=\"br0\">(</span><span class=\"sy0\">\\</span>text<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span>, <span class=\"sy0\">\\</span>center<span class=\"sy0\">\\</span>y <span class=\"sy0\">-</span> <span class=\"kw2\">TextHeight</span><span class=\"br0\">(</span><span class=\"sy0\">\\</span>text<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span>, <span class=\"sy0\">\\</span>text, <span class=\"kw2\">RGB</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;black, almost</span><br/>    <span class=\"kw1\">Else</span><br/>      <span class=\"kw2\">FillArea</span><span class=\"br0\">(</span><span class=\"sy0\">\\</span>center<span class=\"sy0\">\\</span>x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, <span class=\"sy0\">\\</span>center<span class=\"sy0\">\\</span>y <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, <span class=\"kw2\">RGB</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span>, <span class=\"kw2\">RGB</span><span class=\"br0\">(</span>$FF, $FF, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;yellow</span><br/>      <span class=\"kw2\">DrawText</span><span class=\"br0\">(</span><span class=\"sy0\">\\</span>center<span class=\"sy0\">\\</span>x <span class=\"sy0\">-</span> <span class=\"kw2\">TextWidth</span><span class=\"br0\">(</span><span class=\"sy0\">\\</span>text<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span>, <span class=\"sy0\">\\</span>center<span class=\"sy0\">\\</span>y <span class=\"sy0\">-</span> <span class=\"kw2\">TextHeight</span><span class=\"br0\">(</span><span class=\"sy0\">\\</span>text<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span>, <span class=\"sy0\">\\</span>text, <span class=\"kw2\">RGB</span><span class=\"br0\">(</span>$FF, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;red</span><br/>    <span class=\"kw1\">EndIf</span> <br/>  <span class=\"kw1\">EndWith</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> selectHex<span class=\"br0\">(</span><span class=\"sy0\">*</span>h.honeycomb, hexID<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> <span class=\"sy0\">*</span>h<span class=\"sy0\">\\</span>hexGadgets<span class=\"br0\">(</span>hexID<span class=\"br0\">)</span><span class=\"sy0\">\\</span>Status<br/>    <span class=\"sy0\">*</span>h<span class=\"sy0\">\\</span>chosen <span class=\"sy0\">+</span> <span class=\"sy0\">*</span>h<span class=\"sy0\">\\</span>hexGadgets<span class=\"br0\">(</span>hexID<span class=\"br0\">)</span><span class=\"sy0\">\\</span>text<br/>    <span class=\"sy0\">*</span>h<span class=\"sy0\">\\</span>hexGadgets<span class=\"br0\">(</span>hexID<span class=\"br0\">)</span><span class=\"sy0\">\\</span>Status <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw2\">StartDrawing</span><span class=\"br0\">(</span>CanvasOutput<span class=\"br0\">(</span><span class=\"sy0\">*</span>h<span class=\"sy0\">\\</span><span class=\"kw2\">gadgetID</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      drawhex<span class=\"br0\">(</span><span class=\"sy0\">*</span>h, hexID<span class=\"br0\">)</span><br/>      <span class=\"kw2\">DrawingMode</span><span class=\"br0\">(</span>#PB_2DDrawing_Default<span class=\"br0\">)</span><br/>      <span class=\"kw2\">DrawingFont</span><span class=\"br0\">(</span>#PB_Default<span class=\"br0\">)</span><br/>      <span class=\"kw2\">DrawText</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"sy0\">*</span>h<span class=\"sy0\">\\</span>textY, <span class=\"st0\">\"Chosen: \"</span> <span class=\"sy0\">+</span> <span class=\"sy0\">*</span>h<span class=\"sy0\">\\</span>chosen<span class=\"br0\">)</span><br/>      <span class=\"kw2\">DrawText</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"sy0\">*</span>h<span class=\"sy0\">\\</span>textY <span class=\"sy0\">+</span> <span class=\"nu0\">20</span>, <span class=\"st0\">\"The user chose letter \"</span> <span class=\"sy0\">+</span> <span class=\"sy0\">*</span>h<span class=\"sy0\">\\</span>hexGadgets<span class=\"br0\">(</span>hexID<span class=\"br0\">)</span><span class=\"sy0\">\\</span>text <span class=\"sy0\">+</span> <span class=\"st0\">\".  \"</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">StopDrawing</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">EndIf</span> <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> hexKey<span class=\"br0\">(</span><span class=\"sy0\">*</span>h.honeycomb, hexID<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw2\">UCase</span><span class=\"br0\">(</span><span class=\"kw2\">Chr</span><span class=\"br0\">(</span><span class=\"kw2\">GetGadgetAttribute</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>h<span class=\"sy0\">\\</span><span class=\"kw2\">gadgetID</span>, #PB_Canvas_Input<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>h<span class=\"sy0\">\\</span>hexGadgets<span class=\"br0\">(</span>hexID<span class=\"br0\">)</span><span class=\"sy0\">\\</span>text<br/>    <span class=\"kw1\">ProcedureReturn</span> selectHex<span class=\"br0\">(</span><span class=\"sy0\">*</span>h, hexID<span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndIf</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> hexMouse<span class=\"br0\">(</span><span class=\"sy0\">*</span>h.honeycomb, hexID<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> mPos.<span class=\"kw2\">POINT</span><br/>  mPos<span class=\"sy0\">\\</span>x <span class=\"sy0\">=</span> <span class=\"kw2\">GetGadgetAttribute</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>h<span class=\"sy0\">\\</span><span class=\"kw2\">gadgetID</span>, #PB_Canvas_MouseX<span class=\"br0\">)</span><br/>  mPos<span class=\"sy0\">\\</span>y <span class=\"sy0\">=</span> <span class=\"kw2\">GetGadgetAttribute</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>h<span class=\"sy0\">\\</span><span class=\"kw2\">gadgetID</span>, #PB_Canvas_MouseY<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> inpoly<span class=\"br0\">(</span>mPos,<span class=\"sy0\">*</span>h<span class=\"sy0\">\\</span>hexGadgets<span class=\"br0\">(</span>hexID<span class=\"br0\">)</span><span class=\"sy0\">\\</span>shape<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">ProcedureReturn</span> selectHex<span class=\"br0\">(</span><span class=\"sy0\">*</span>h, hexID<span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndIf</span> <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> honeycombEvents<span class=\"br0\">(</span><span class=\"sy0\">*</span>h.honeycomb<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>h<span class=\"sy0\">\\</span>chosen<span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"sy0\">*</span>h<span class=\"sy0\">\\</span>maxLength: <span class=\"kw1\">ProcedureReturn</span>: <span class=\"kw1\">EndIf</span><br/>\u00a0<br/>  <span class=\"kw1\">Protected</span> event <span class=\"sy0\">=</span> <span class=\"kw2\">EventType</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"sy0\">*</span>eventFunction.hexEvent_prt<br/>  <span class=\"kw1\">Select</span> event<br/>    <span class=\"kw1\">Case</span> #PB_EventType_Input<br/>      <span class=\"sy0\">*</span>eventFunction <span class=\"sy0\">=</span> @hexKey<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Case</span> #PB_EventType_LeftButtonUp<br/>      <span class=\"sy0\">*</span>eventFunction <span class=\"sy0\">=</span> @hexMouse<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Case</span> #PB_EventType_LostFocus<br/>      <span class=\"kw2\">SetActiveGadget</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>h<span class=\"sy0\">\\</span><span class=\"kw2\">gadgetID</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndSelect</span><br/>\u00a0<br/>  <span class=\"kw1\">If</span> <span class=\"sy0\">*</span>eventFunction<br/>    <span class=\"kw1\">For</span> hexID <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> ArraySize<span class=\"br0\">(</span><span class=\"sy0\">*</span>h<span class=\"sy0\">\\</span>hexGadgets<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">If</span> <span class=\"sy0\">*</span>eventFunction<span class=\"br0\">(</span><span class=\"sy0\">*</span>h, hexID<span class=\"br0\">)</span><br/>        <span class=\"kw1\">Break</span> <span class=\"co1\">;event successfully handled</span><br/>      <span class=\"kw1\">EndIf</span> <br/>    <span class=\"kw1\">Next</span> <br/>  <span class=\"kw1\">EndIf</span> <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> createHexGadget<span class=\"br0\">(</span><span class=\"sy0\">*</span>h.honeycomb, hexID, x, y, dx, dy<span class=\"br0\">)</span><br/>  <span class=\"kw1\">With</span> <span class=\"sy0\">*</span>h<span class=\"sy0\">\\</span>hexGadgets<span class=\"br0\">(</span>hexID<span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> <span class=\"sy0\">*</span>h<span class=\"sy0\">\\</span>unusedLetters<br/>      <span class=\"kw1\">Protected</span> letterNum <span class=\"sy0\">=</span> <span class=\"kw2\">Random</span><span class=\"br0\">(</span><span class=\"kw2\">Len</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>h<span class=\"sy0\">\\</span>unusedLetters<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>      <span class=\"sy0\">\\</span>text <span class=\"sy0\">=</span> <span class=\"kw2\">Mid</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>h<span class=\"sy0\">\\</span>unusedLetters, letterNum, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"sy0\">*</span>h<span class=\"sy0\">\\</span>unusedLetters <span class=\"sy0\">=</span> <span class=\"kw2\">ReplaceString</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>h<span class=\"sy0\">\\</span>unusedLetters, <span class=\"sy0\">\\</span>text, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">EndIf</span> <br/>    <span class=\"sy0\">\\</span>center<span class=\"sy0\">\\</span>x <span class=\"sy0\">=</span> x: <span class=\"sy0\">\\</span>center<span class=\"sy0\">\\</span>y <span class=\"sy0\">=</span> y<br/>    <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span><span class=\"sy0\">\\</span>shape<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>: <span class=\"sy0\">\\</span>shape<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>x <span class=\"sy0\">=</span> x <span class=\"sy0\">-</span> dx:     <span class=\"sy0\">\\</span>shape<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>y <span class=\"sy0\">=</span> y<br/>    <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span><span class=\"sy0\">\\</span>shape<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>: <span class=\"sy0\">\\</span>shape<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>x <span class=\"sy0\">=</span> x <span class=\"sy0\">-</span> dx <span class=\"sy0\">/</span> <span class=\"nu0\">2</span>: <span class=\"sy0\">\\</span>shape<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>y <span class=\"sy0\">=</span> y <span class=\"sy0\">+</span> dy<br/>    <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span><span class=\"sy0\">\\</span>shape<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>: <span class=\"sy0\">\\</span>shape<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>x <span class=\"sy0\">=</span> x <span class=\"sy0\">+</span> dx <span class=\"sy0\">/</span> <span class=\"nu0\">2</span>: <span class=\"sy0\">\\</span>shape<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>y <span class=\"sy0\">=</span> y <span class=\"sy0\">+</span> dy<br/>    <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span><span class=\"sy0\">\\</span>shape<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>: <span class=\"sy0\">\\</span>shape<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>x <span class=\"sy0\">=</span> x <span class=\"sy0\">+</span> dx:     <span class=\"sy0\">\\</span>shape<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>y <span class=\"sy0\">=</span> y<br/>    <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span><span class=\"sy0\">\\</span>shape<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>: <span class=\"sy0\">\\</span>shape<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>x <span class=\"sy0\">=</span> x <span class=\"sy0\">+</span> dx <span class=\"sy0\">/</span> <span class=\"nu0\">2</span>: <span class=\"sy0\">\\</span>shape<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>y <span class=\"sy0\">=</span> y <span class=\"sy0\">-</span> dy<br/>    <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span><span class=\"sy0\">\\</span>shape<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>: <span class=\"sy0\">\\</span>shape<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>x <span class=\"sy0\">=</span> x <span class=\"sy0\">-</span> dx <span class=\"sy0\">/</span> <span class=\"nu0\">2</span>: <span class=\"sy0\">\\</span>shape<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>y <span class=\"sy0\">=</span> y <span class=\"sy0\">-</span> dy <br/>  <span class=\"kw1\">EndWith</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> initHoneycomb<span class=\"br0\">(</span><span class=\"sy0\">*</span>h.honeycomb, posX, posY, dx <span class=\"sy0\">=</span> <span class=\"nu0\">30</span>, dy <span class=\"sy0\">=</span> <span class=\"nu0\">25</span>, marginX <span class=\"sy0\">=</span> <span class=\"nu0\">10</span>, marginY <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> i, sx, sy, hCols <span class=\"sy0\">=</span> <span class=\"nu0\">5</span>, hRows <span class=\"sy0\">=</span> <span class=\"nu0\">4</span>, hexGadgetCount <span class=\"sy0\">=</span> hCols <span class=\"sy0\">*</span> hRows <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> <span class=\"sy0\">*</span>h: <span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">0</span>: <span class=\"kw1\">EndIf</span><br/>\u00a0<br/>  <span class=\"sy0\">*</span>h<span class=\"sy0\">\\</span>unusedLetters.s <span class=\"sy0\">=</span> <span class=\"st0\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span>    <br/>  <span class=\"sy0\">*</span>h<span class=\"sy0\">\\</span>chosen <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>  <span class=\"sy0\">*</span>h<span class=\"sy0\">\\</span>maxLength <span class=\"sy0\">=</span> <span class=\"nu0\">20</span><br/>\u00a0<br/>  <span class=\"kw1\">Dim</span> <span class=\"sy0\">*</span>h<span class=\"sy0\">\\</span>hexGadgets<span class=\"br0\">(</span>hexGadgetCount<span class=\"br0\">)</span><br/>  <span class=\"co1\">;calculate size width, height and create honeycomb with margins</span><br/>  sx <span class=\"sy0\">=</span> <span class=\"kw2\">Round</span><span class=\"br0\">(</span>dx <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"nu0\">0.5</span> <span class=\"sy0\">+</span> hCols <span class=\"sy0\">*</span> <span class=\"nu0\">1.5</span><span class=\"br0\">)</span>, #PB_Round_Nearest<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> marginX<br/>  sy <span class=\"sy0\">=</span> dy <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> hRows <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> marginY <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"nu0\">20</span> <span class=\"co1\">;includes room for hex, margins, and text</span><br/>  <span class=\"sy0\">*</span>h<span class=\"sy0\">\\</span>textY <span class=\"sy0\">=</span> sy <span class=\"sy0\">-</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"nu0\">20</span><br/>\u00a0<br/>  <span class=\"co1\">;create hexes</span><br/>  <span class=\"kw1\">Protected</span> hexID, column, row, x, y, baseX, baseY, majorOffsetY <span class=\"sy0\">=</span> dy<br/>  baseX <span class=\"sy0\">=</span> dx <span class=\"sy0\">+</span> marginX<br/>  <span class=\"kw1\">For</span> column <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> hCols <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    baseY <span class=\"sy0\">=</span> dy <span class=\"sy0\">+</span> marginY<br/>    majorOffsetY <span class=\"sy0\">!</span> dy<br/>    <span class=\"kw1\">For</span> row <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> hRows <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>      x <span class=\"sy0\">=</span> baseX<br/>      y <span class=\"sy0\">=</span> baseY <span class=\"sy0\">+</span> majorOffsetY<br/>      createHexGadget<span class=\"br0\">(</span><span class=\"sy0\">*</span>h, hexID, x, y, dx, dy<span class=\"br0\">)</span><br/>      baseY <span class=\"sy0\">+</span> dy <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><br/>      hexID <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Next</span> <br/>    baseX <span class=\"sy0\">+</span> dx <span class=\"sy0\">*</span> <span class=\"nu0\">1.5</span><br/>  <span class=\"kw1\">Next</span> <br/>\u00a0<br/>  <span class=\"co1\">;draw honeycomb</span><br/>  <span class=\"sy0\">*</span>h<span class=\"sy0\">\\</span><span class=\"kw2\">gadgetID</span> <span class=\"sy0\">=</span> CanvasGadget<span class=\"br0\">(</span>#PB_Any, posX, posY, sx, sy, #PB_Canvas_Keyboard <span class=\"sy0\">|</span> #PB_Canvas_ClipMouse<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> <span class=\"sy0\">*</span>h<span class=\"sy0\">\\</span><span class=\"kw2\">gadgetID</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>: <span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">0</span>: <span class=\"kw1\">EndIf</span> <span class=\"co1\">;failed to created honeycomb</span><br/>\u00a0<br/>  <span class=\"kw2\">LoadFont</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"st0\">\"Arial\"</span>, <span class=\"nu0\">24</span>, #PB_Font_Bold<span class=\"br0\">)</span><br/>  <span class=\"kw2\">StartDrawing</span><span class=\"br0\">(</span>CanvasOutput<span class=\"br0\">(</span><span class=\"sy0\">*</span>h<span class=\"sy0\">\\</span><span class=\"kw2\">gadgetID</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> ArraySize<span class=\"br0\">(</span><span class=\"sy0\">*</span>h<span class=\"sy0\">\\</span>hexGadgets<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      drawhex<span class=\"br0\">(</span><span class=\"sy0\">*</span>h, i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span> <br/>    <span class=\"kw2\">Box</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"sy0\">*</span>h<span class=\"sy0\">\\</span>textY, sx, <span class=\"nu0\">40</span>, <span class=\"kw2\">RGB</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;draw black text box</span><br/>  <span class=\"kw2\">StopDrawing</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenWindow</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">400</span>, <span class=\"nu0\">400</span>, <span class=\"st0\">\"PureBasic - Honeycombs\"</span>, #PB_Window_SystemMenu<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span> honeycomb.honeycomb, quit<br/>  <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> initHoneycomb<span class=\"br0\">(</span>honeycomb, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span>: <span class=\"kw1\">End</span>: <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw2\">ResizeWindow</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, #PB_Ignore, #PB_Ignore, <span class=\"kw2\">GadgetWidth</span><span class=\"br0\">(</span>honeycomb<span class=\"sy0\">\\</span><span class=\"kw2\">gadgetID</span><span class=\"br0\">)</span>, <span class=\"kw2\">GadgetHeight</span><span class=\"br0\">(</span>honeycomb<span class=\"sy0\">\\</span><span class=\"kw2\">gadgetID</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">SetActiveGadget</span><span class=\"br0\">(</span>honeycomb<span class=\"sy0\">\\</span><span class=\"kw2\">gadgetID</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">Repeat</span><br/>    event <span class=\"sy0\">=</span> <span class=\"kw2\">WaitWindowEvent</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">Select</span> event<br/>      <span class=\"kw1\">Case</span> #PB_Event_Gadget<br/>        <span class=\"kw1\">If</span> <span class=\"kw2\">EventGadget</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> honeycomb<span class=\"sy0\">\\</span><span class=\"kw2\">gadgetID</span><br/>          honeycombEvents<span class=\"br0\">(</span>honeycomb<span class=\"br0\">)</span><br/>          <span class=\"kw1\">If</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span>honeycomb<span class=\"sy0\">\\</span>chosen<span class=\"br0\">)</span> <span class=\"sy0\">=</span> honeycomb<span class=\"sy0\">\\</span>maxLength<br/>            <span class=\"kw2\">MessageRequester</span><span class=\"br0\">(</span><span class=\"st0\">\"Exit\"</span>, <span class=\"st0\">\"You chose: \"</span> <span class=\"sy0\">+</span> honeycomb<span class=\"sy0\">\\</span>chosen <span class=\"sy0\">+</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>            quit <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>          <span class=\"kw1\">EndIf</span> <br/>        <span class=\"kw1\">EndIf</span><br/>      <span class=\"kw1\">Case</span> #PB_Event_CloseWindow<br/>        quit <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">EndSelect</span><br/>\u00a0<br/>  <span class=\"kw1\">Until</span> quit <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw2\">FreeGadget</span><span class=\"br0\">(</span>honeycomb<span class=\"sy0\">\\</span><span class=\"kw2\">gadgetID</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseWindow</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 61, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>\u00a0<br/>(struct Hex (x y letter clicked?) #:mutable #:transparent)<br/>\u00a0<br/>(define hexes<br/>  (let* ([A (char-&gt;integer #\\A)]<br/>         [letters (take (shuffle (map (compose string integer-&gt;char)<br/>                                      (range A (+ A 26))))<br/>                        20)])<br/>    (for*/list ([row 4] [column 5])<br/>      (Hex (* 3/2 column) (* 2 (+ row (if (odd? column) 1/2 0)))<br/>           (list-ref letters (+ (* 5 row) column))<br/>           false))))<br/>\u00a0<br/>(require 2htdp/image)<br/>(define (blank width height) (rectangle width height 'outline (color 0 0 0 0)))<br/>\u00a0<br/>(define (hexagon mode color) (regular-polygon 1 6 mode color))<br/>(define aspect-ratio (sin (/ pi 3)))<br/>\u00a0<br/>(define (board _)<br/>  (scale 100<br/>         (for/fold ([the-board (blank 8 (* aspect-ratio 9))])<br/>           ([hex hexes])<br/>           (define-values (letter-color hex-color)<br/>             (if (Hex-clicked? hex) (values 'black 'purple) (values 'red 'yellow)))<br/>           (underlay/align/offset<br/>            'left 'top the-board<br/>            (Hex-x hex) (* aspect-ratio (Hex-y hex))<br/>            (overlay (scale 1/10 (text (Hex-letter hex) 10 letter-color))<br/>                     (hexagon 'outline 'black)<br/>                     (hexagon 'solid hex-color))))))<br/>\u00a0<br/>#| Closest hex in hexes to x y, as one with minimum distance to its center. |#<br/>(define (hex-at x y)<br/>  (argmin (\u03bb (hex) (+ (sqr (- x (* 100 (add1 (Hex-x hex)))))<br/>                      (sqr (- y (* aspect-ratio 100 (add1 (Hex-y hex)))))))<br/>          hexes))<br/>\u00a0<br/>(define letters-chosen '())<br/>(define (choose hex)<br/>  (set-Hex-clicked?! hex true)<br/>  (define letter (Hex-letter hex))<br/>  (when (not (member letter letters-chosen))<br/>    (set! letters-chosen (list* (Hex-letter hex) letters-chosen))))<br/>\u00a0<br/>(require 2htdp/universe)<br/>(void (big-bang<br/>       (void)<br/>       [to-draw board]<br/>       [stop-when (\u03bb (_) (andmap Hex-clicked? hexes)) board]<br/>       [on-key (\u03bb (_ k)<br/>                 (define hex (findf (\u03bb (hex) (key=? k (string-downcase (Hex-letter hex))))<br/>                                    hexes))<br/>                 (when hex (choose hex)))]<br/>       [on-mouse (\u03bb (_ x y event-type)<br/>                   (when (equal? \"button-down\" event-type)<br/>                     (choose (hex-at x y))))]))<br/>\u00a0<br/>(displayln \"The letters were chosen in the order:\")<br/>(for-each display (add-between (reverse letters-chosen) \" \"))</pre>"}, {"lang": "Racket", "loc": 61, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>\u00a0<br/>(struct Hex (x y letter clicked?) #:mutable #:transparent)<br/>\u00a0<br/>(define hexes<br/>  (let* ([A (char-&gt;integer #\\A)]<br/>         [letters (take (shuffle (map (compose string integer-&gt;char)<br/>                                      (range A (+ A 26))))<br/>                        20)])<br/>    (for*/list ([row 4] [column 5])<br/>      (Hex (* 3/2 column) (* 2 (+ row (if (odd? column) 1/2 0)))<br/>           (list-ref letters (+ (* 5 row) column))<br/>           false))))<br/>\u00a0<br/>(require 2htdp/image)<br/>(define (blank width height) (rectangle width height 'outline (color 0 0 0 0)))<br/>\u00a0<br/>(define (hexagon mode color) (regular-polygon 1 6 mode color))<br/>(define aspect-ratio (sin (/ pi 3)))<br/>\u00a0<br/>(define (board _)<br/>  (scale 100<br/>         (for/fold ([the-board (blank 8 (* aspect-ratio 9))])<br/>           ([hex hexes])<br/>           (define-values (letter-color hex-color)<br/>             (if (Hex-clicked? hex) (values 'black 'purple) (values 'red 'yellow)))<br/>           (underlay/align/offset<br/>            'left 'top the-board<br/>            (Hex-x hex) (* aspect-ratio (Hex-y hex))<br/>            (overlay (scale 1/10 (text (Hex-letter hex) 10 letter-color))<br/>                     (hexagon 'outline 'black)<br/>                     (hexagon 'solid hex-color))))))<br/>\u00a0<br/>#| Closest hex in hexes to x y, as one with minimum distance to its center. |#<br/>(define (hex-at x y)<br/>  (argmin (\u03bb (hex) (+ (sqr (- x (* 100 (add1 (Hex-x hex)))))<br/>                      (sqr (- y (* aspect-ratio 100 (add1 (Hex-y hex)))))))<br/>          hexes))<br/>\u00a0<br/>(define letters-chosen '())<br/>(define (choose hex)<br/>  (set-Hex-clicked?! hex true)<br/>  (define letter (Hex-letter hex))<br/>  (when (not (member letter letters-chosen))<br/>    (set! letters-chosen (list* (Hex-letter hex) letters-chosen))))<br/>\u00a0<br/>(require 2htdp/universe)<br/>(void (big-bang<br/>       (void)<br/>       [to-draw board]<br/>       [stop-when (\u03bb (_) (andmap Hex-clicked? hexes)) board]<br/>       [on-key (\u03bb (_ k)<br/>                 (define hex (findf (\u03bb (hex) (key=? k (string-downcase (Hex-letter hex))))<br/>                                    hexes))<br/>                 (when hex (choose hex)))]<br/>       [on-mouse (\u03bb (_ x y event-type)<br/>                   (when (equal? \"button-down\" event-type)<br/>                     (choose (hex-at x y))))]))<br/>\u00a0<br/>(displayln \"The letters were chosen in the order:\")<br/>(for-each display (add-between (reverse letters-chosen) \" \"))</pre>"}, {"lang": "Ruby", "loc": 135, "block": "<pre class=\"ruby highlighted_source\">Shoes.app(title: \"Honeycombs\", height: 700, width: 700) do<br/>  C = Math::cos(Math::PI/3)<br/>  S = Math::sin(Math::PI/3)<br/>  Radius = 60.0<br/>  letters = [<br/>   \u00a0%w[L A R N D 1 2], <br/>   \u00a0%w[G U I Y T 3 4], <br/>   \u00a0%w[P C F E B 5 6], <br/>   \u00a0%w[V S O M K 7 8],<br/>   \u00a0%w[Q X J Z H 9 0],<br/>  ]<br/>\u00a0<br/>  def highlight(hexagon)<br/>    hexagon.style(fill: magenta)<br/>  end<br/>\u00a0<br/>  def unhighlight(hexagon)<br/>    hexagon.style(fill: yellow)<br/>  end<br/>\u00a0<br/>  def choose(hexagon)<br/>    hexagon.choose<br/>    highlight hexagon<br/>    chosen = @hexagons.find_all {|h| h.chosen?}.map {|h| h.letter}<br/>    if chosen.size == @hexagons.size<br/>      @chosen.text = 'Every hexagon has been chosen.'<br/>    else<br/>      @chosen.text = \"Chosen: #{chosen.sort.join(',')}\\n\" +<br/>                     \"Last Chosen: #{hexagon.letter}\" <br/>    end<br/>  end<br/>\u00a0<br/>  width = 20 + (Radius*(7*letters[0].size - 3)/4.0).ceil<br/>  height = 60 + (Radius*(1 + 2*S*letters.size)).ceil<br/>  @hexagons = []<br/>  letter_to_hex = {}<br/>\u00a0<br/>  # create the GUI<br/>  stack(height: height, width: width) do<br/>    @chosen = para(\"Chosen:\\nLast chosen:\")<br/>\u00a0<br/>    # draw the hexagrams<br/>    letters.each_index do |row|<br/>      letters[0].each_index do |column|<br/>        x = 60 + column * Radius * 0.75 + (1-S) * Radius<br/>        y = 80 + row * S * Radius + (column.odd?\u00a0? S * Radius * 0.5\u00a0: 0)<br/>        h = shape(x-Radius, y-S*Radius) do<br/>          strokewidth 3<br/>          move_to(x-C*Radius, y-S*Radius)<br/>          line_to(x+C*Radius, y-S*Radius)<br/>          line_to(x+Radius,   y)<br/>          line_to(x+C*Radius, y+S*Radius)<br/>          line_to(x-C*Radius, y+S*Radius)<br/>          line_to(x-Radius,   y)<br/>          line_to(x-C*Radius, y-S*Radius)<br/>        end<br/>\u00a0<br/>        # add some attributes and methods to the shape<br/>        class &lt;&lt; h<br/>          attr_accessor\u00a0:x,\u00a0:y,\u00a0:state,\u00a0:letter<br/>          def chosen?<br/>            not @state.nil?<br/>          end<br/>          def choose<br/>            @state =\u00a0:chosen<br/>          end<br/>          def contains?(px, py)<br/>            if @x-Radius &lt; px and px &lt;= @x-C*Radius<br/>              ratio = (px - @x + Radius)/(Radius*(1-C))<br/>              @y - ratio*S*Radius &lt; py and py &lt;= @y + ratio*S*Radius<br/>            elsif @x-C*Radius &lt; px and px &lt;= @x+C*Radius<br/>              @y - S*Radius &lt; py and py &lt; @y + S*Radius<br/>            elsif @x+C*Radius &lt; px and px &lt;= @x+Radius<br/>              ratio = (@x + Radius - px)/(Radius*(1-C))<br/>              @y - ratio*S*Radius &lt; py and py &lt;= @y + ratio*S*Radius<br/>            else<br/>              false<br/>            end<br/>          end<br/>          def inspect<br/>           \u00a0%q(<span class=\"sy0\">&lt;%</span>s,<span class=\"st0\">\"%s\"</span>,<span class=\"sy0\">%</span>s,<span class=\"sy0\">%</span><a class=\"__cf_email__\" data-cfemail=\"d6b296\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">%</span>d<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"br0\">[</span><span class=\"kw2\">self</span>.<span class=\"kw1\">class</span>, letter, chosen?, x, y<span class=\"br0\">]</span><br/>          <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>        h.<span class=\"me1\">x</span> = x <span class=\"sy0\">+</span> x <span class=\"sy0\">-</span> Radius<br/>        h.<span class=\"me1\">y</span> = y <span class=\"sy0\">+</span> y <span class=\"sy0\">-</span> S<span class=\"sy0\">*</span>Radius<br/>        h.<span class=\"me1\">letter</span> = letters<span class=\"br0\">[</span>row<span class=\"br0\">]</span><span class=\"br0\">[</span>column<span class=\"br0\">]</span><br/>        unhighlight h<br/>\u00a0<br/>        <span class=\"re1\">@hexagons</span> <span class=\"sy0\">&lt;&lt;</span> h<br/>        letter_to_hex<span class=\"br0\">[</span>h.<span class=\"me1\">letter</span>.<span class=\"me1\">downcase</span><span class=\"br0\">]</span> = h<br/>        letter_to_hex<span class=\"br0\">[</span>h.<span class=\"me1\">letter</span>.<span class=\"me1\">upcase</span><span class=\"br0\">]</span> = h<br/>\u00a0<br/>        <span class=\"co1\"># add the letter to the hexagon</span><br/>        para<span class=\"br0\">(</span>h.<span class=\"me1\">letter</span><span class=\"br0\">)</span>.<span class=\"me1\">style</span><span class=\"br0\">(</span>size:<span class=\"nu0\">56</span>, stroke:red<span class=\"br0\">)</span> \\<br/>                      .<span class=\"me1\">move</span><span class=\"br0\">(</span>h.<span class=\"me1\">x</span> <span class=\"sy0\">-</span> C<span class=\"sy0\">*</span>Radius, h.<span class=\"me1\">y</span> <span class=\"sy0\">-</span> S<span class=\"sy0\">*</span>Radius<span class=\"br0\">)</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"co1\"># highlight the hexagon under the mouse</span><br/>    hex_over = <span class=\"kw2\">nil</span><br/>    motion <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>x, y<span class=\"sy0\">|</span><br/>      hex = <span class=\"re1\">@hexagons</span>.<span class=\"me1\">find</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>h<span class=\"sy0\">|</span> h.<span class=\"me1\">contains</span>?<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>      <span class=\"kw1\">unless</span> hex.<span class=\"kw2\">nil</span>? <span class=\"kw1\">or</span> hex.<span class=\"me1\">chosen</span>?<br/>        highlight hex <br/>      <span class=\"kw1\">end</span><br/>      <span class=\"kw1\">unless</span> hex_over == hex <span class=\"kw1\">or</span> hex_over.<span class=\"kw2\">nil</span>? <span class=\"kw1\">or</span> hex_over.<span class=\"me1\">chosen</span>?<br/>        unhighlight hex_over <br/>      <span class=\"kw1\">end</span><br/>      hex_over = hex<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"co1\"># handle mouse clicks</span><br/>    click <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>button, x, y<span class=\"sy0\">|</span><br/>      info<span class=\"br0\">(</span><span class=\"st0\">\"button #{button} clicked at (#{x}, #{y})\"</span><span class=\"br0\">)</span><br/>      hexagon = <span class=\"re1\">@hexagons</span>.<span class=\"me1\">find</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>h<span class=\"sy0\">|</span> h.<span class=\"me1\">contains</span>?<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>      <span class=\"kw1\">if</span> hexagon<br/>        info<span class=\"br0\">(</span><span class=\"st0\">\"clicked hexagon #{hexagon}\"</span><span class=\"br0\">)</span><br/>        choose hexagon<br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"co1\"># handle keystrokes</span><br/>    keypress <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>key<span class=\"sy0\">|</span> <br/>      <span class=\"kw1\">if</span> key == <span class=\"st0\">\"<span class=\"es0\">\\x</span>11\"</span>  <span class=\"co1\"># control-Q</span><br/>        <span class=\"kw3\">exit</span><br/>      <span class=\"kw1\">elsif</span> key == <span class=\"st0\">\"?\"</span><br/>        info <span class=\"re1\">@hexagons</span>.<span class=\"me1\">collect</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>h<span class=\"sy0\">|</span> h.<span class=\"me1\">inspect</span><span class=\"br0\">}</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">elsif</span> letter_to_hex.<span class=\"me1\">has_key</span>?<span class=\"br0\">(</span>key<span class=\"br0\">)</span><br/>        info<span class=\"br0\">(</span><span class=\"st0\">\"pressed key #{key} -&gt; #{letter_to_hex[key]}\"</span><span class=\"br0\">)</span><br/>        choose letter_to_hex<span class=\"br0\">[</span>key<span class=\"br0\">]</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Sidef", "loc": 84, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span><span class=\"br0\">(</span><span class=\"st0\">'Tk'</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Honeycombs<span class=\"br0\">(</span><br/>    Number size   = <span class=\"nu0\">36</span>,<br/>    <span class=\"kw3\">Array</span> letters = @<span class=\"br0\">(</span><span class=\"st0\">'A'</span> .. <span class=\"st0\">'Z'</span><span class=\"br0\">)</span>.<span class=\"me1\">shuffle</span>.<span class=\"me1\">first</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span>,<br/><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    define tk   = <span class=\"sy0\">%</span>S<span class=\"sy0\">&lt;</span>Tk<span class=\"sy0\">&gt;</span><br/>    has changed = <span class=\"kw4\">Hash</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    func altitude<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        sqrt<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">/</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> n<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    method polygon_coordinates<span class=\"br0\">(</span>x, y, size<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        var alt = altitude<span class=\"br0\">(</span>size<span class=\"br0\">)</span><br/>        <span class=\"kw2\">return</span> <span class=\"br0\">(</span>x <span class=\"sy0\">-</span> size,       y,<br/>                x <span class=\"sy0\">-</span> size<span class=\"sy0\">/</span><span class=\"nu0\">2</span>, y <span class=\"sy0\">-</span> alt,<br/>                x <span class=\"sy0\">+</span> size<span class=\"sy0\">/</span><span class=\"nu0\">2</span>, y <span class=\"sy0\">-</span> alt,<br/>                x <span class=\"sy0\">+</span> size,       y,<br/>                x <span class=\"sy0\">+</span> size<span class=\"sy0\">/</span><span class=\"nu0\">2</span>, y <span class=\"sy0\">+</span> alt,<br/>                x <span class=\"sy0\">-</span> size<span class=\"sy0\">/</span><span class=\"nu0\">2</span>, y <span class=\"sy0\">+</span> alt,<br/>               <span class=\"br0\">)</span>;<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    method change<span class=\"br0\">(</span>canvas, id, letter_id<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">return</span> <span class=\"br0\">{</span><br/>            canvas.<span class=\"me1\">itemconfigure</span><span class=\"br0\">(</span>id,        <span class=\"st0\">'-fill'</span> <span class=\"sy0\">=&gt;</span> <span class=\"st0\">'magenta'</span><span class=\"br0\">)</span><br/>            canvas.<span class=\"me1\">itemconfigure</span><span class=\"br0\">(</span>letter_id, <span class=\"st0\">'-fill'</span> <span class=\"sy0\">=&gt;</span> <span class=\"st0\">'black'</span><span class=\"br0\">)</span><br/>            changed<span class=\"br0\">{</span>id<span class=\"br0\">}</span> = <span class=\"kw2\">true</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">20</span> == changed.<span class=\"me1\">len</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                say <span class=\"st0\">\"All letters pressed.\"</span><br/>                canvas.<span class=\"me1\">MainWindow</span>.<span class=\"me1\">after</span><span class=\"br0\">(</span><span class=\"nu0\">10</span>, <span class=\"br0\">{</span> tk.<span class=\"kw3\">exit</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    method comb<span class=\"br0\">(</span>canvas, fromx, fromy, size, count<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> x,y <span class=\"kw1\">in</span> <span class=\"br0\">(</span><br/>            RangeNum<span class=\"br0\">(</span>fromx, <span class=\"nu0\">3</span><span class=\"sy0\">*</span>count<span class=\"sy0\">*</span>size <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>,          <span class=\"nu0\">3</span><span class=\"sy0\">*</span>size<span class=\"br0\">)</span> ~X<br/>            RangeNum<span class=\"br0\">(</span>fromy,     <span class=\"nu0\">7.5</span><span class=\"sy0\">*</span>size <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"sy0\">*</span>altitude<span class=\"br0\">(</span>size<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            var id = canvas.<span class=\"me1\">createPolygon</span><span class=\"br0\">(</span><br/>                                  <span class=\"kw2\">self</span>.<span class=\"me1\">polygon_coordinates</span><span class=\"br0\">(</span>x, y, size<span class=\"br0\">)</span>,<br/>                                  <span class=\"st0\">'-outline'</span> <span class=\"sy0\">=&gt;</span> <span class=\"st0\">'black'</span>,<br/>                                  <span class=\"st0\">'-fill'</span>    <span class=\"sy0\">=&gt;</span> <span class=\"st0\">'yellow'</span>,<br/>                                  <span class=\"st0\">'-width'</span>   <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">2</span>,<br/>                                <span class=\"br0\">)</span><br/>            var letter = letters.<span class=\"me1\">shift</span><br/>            var letter_id = canvas.<span class=\"me1\">createText</span><span class=\"br0\">(</span>x, y,<br/>                                     <span class=\"st0\">'-fill'</span> <span class=\"sy0\">=&gt;</span> <span class=\"st0\">'red'</span>,<br/>                                     <span class=\"st0\">'-text'</span> <span class=\"sy0\">=&gt;</span> letter,<br/>                                     <span class=\"st0\">'-font'</span> <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"{sans} #{size * 0.9}\"</span>,<br/>                                <span class=\"br0\">)</span><br/>            canvas.<span class=\"me1\">MainWindow</span>.<span class=\"me1\">bind</span><span class=\"br0\">(</span><span class=\"st0\">'all'</span>, letter.<span class=\"me1\">lc</span>,<br/>                                      <span class=\"kw2\">self</span>.<span class=\"me1\">change</span><span class=\"br0\">(</span>canvas, id, letter_id<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">[</span>id, letter_id<span class=\"br0\">]</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>b<span class=\"sy0\">|</span><br/>                canvas.<span class=\"me1\">bind</span><span class=\"br0\">(</span>b, <span class=\"st0\">'&lt;Button-1&gt;'</span>,<br/>                                      <span class=\"kw2\">self</span>.<span class=\"me1\">change</span><span class=\"br0\">(</span>canvas, id, letter_id<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    method display<span class=\"br0\">(</span>title<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"br0\">{</span><br/>            var mw     = <span class=\"sy0\">%</span>s<span class=\"st0\">'MainWindow'</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"st0\">'-title'</span> <span class=\"sy0\">=&gt;</span> title<span class=\"br0\">)</span><br/>            var canvas = mw.<span class=\"me1\">Canvas</span><span class=\"br0\">(</span><span class=\"st0\">'-width'</span>  <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">8</span><span class=\"sy0\">*</span>size,<br/>                                   <span class=\"st0\">'-height'</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">8</span><span class=\"sy0\">*</span>size<span class=\"br0\">)</span>.<span class=\"me1\">pack</span><br/>\u00a0<br/>            <span class=\"kw2\">self</span>.<span class=\"me1\">comb</span><span class=\"br0\">(</span>canvas, size,       size,                  size, <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>            <span class=\"kw2\">self</span>.<span class=\"me1\">comb</span><span class=\"br0\">(</span>canvas, size <span class=\"sy0\">*</span> <span class=\"nu0\">2.5</span>, size <span class=\"sy0\">+</span> altitude<span class=\"br0\">(</span>size<span class=\"br0\">)</span>, size, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/>            var btn = mw.<span class=\"me1\">Button</span><span class=\"br0\">(</span><span class=\"st0\">'-text'</span>      <span class=\"sy0\">=&gt;</span> <span class=\"st0\">'Quit'</span>,<br/>                                <span class=\"st0\">'-underline'</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">0</span>,<br/>                                <span class=\"st0\">'-command'</span>   <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span> tk.<span class=\"kw3\">exit</span> <span class=\"br0\">}</span>,<br/>                               <span class=\"br0\">)</span>.<span class=\"me1\">pack</span><br/>            mw.<span class=\"me1\">bind</span><span class=\"br0\">(</span><span class=\"st0\">'&lt;Alt-q&gt;'</span>, <span class=\"br0\">{</span> btn.<span class=\"me1\">invoke</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>            tk.<span class=\"me1\">MainLoop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span>.<span class=\"kw3\">fork</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>Honeycombs<span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">display</span><span class=\"br0\">(</span>title: <span class=\"st0\">'Honeycombs'</span><span class=\"br0\">)</span></pre>"}, {"lang": "Tcl", "loc": 87, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/><span class=\"kw2\">package</span> require Tk<br/>\u00a0<br/><span class=\"co1\"># How to make a honeycomb</span><br/><span class=\"kw1\">proc</span> honeycomb <span class=\"br0\">{</span>w letterpattern<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    canvas <span class=\"re0\">$w</span> -width <span class=\"nu0\">500</span> -height <span class=\"nu0\">470</span><br/>    <span class=\"kw1\">set</span> basey <span class=\"nu0\">10</span><br/>    <span class=\"kw1\">foreach</span> row <span class=\"re0\">$letterpattern</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> basex <span class=\"nu0\">10</span><br/>\t<span class=\"kw1\">set</span> majoroffsety <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">foreach</span> letter <span class=\"re0\">$row</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> x <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$basex</span> + <span class=\"nu0\">60</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">set</span> y <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$basey</span> + <span class=\"nu0\">50</span> + <span class=\"re0\">$majoroffsety</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t    drawhex <span class=\"re0\">$w</span> <span class=\"re0\">$x</span> <span class=\"re0\">$y</span> <span class=\"re0\">$letter</span> <span class=\"nu0\">30</span> <span class=\"nu0\">50</span><br/>\t    <span class=\"kw1\">set</span> majoroffsety <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">50</span> - <span class=\"re0\">$majoroffsety</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw2\">incr</span> basex <span class=\"nu0\">90</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw2\">incr</span> basey <span class=\"nu0\">100</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$w</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> import tcl::<span class=\"me1\">mathop</span>::<span class=\"sy0\">?</span>   <span class=\"sy0\">;</span><span class=\"co1\"># For convenience</span><br/><span class=\"co1\"># How to draw a single hexagon, centered at a particular point.</span><br/><span class=\"kw1\">proc</span> drawhex <span class=\"br0\">{</span>w x y ch dx dy<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$ch</span> eq <span class=\"st0\">\"\"</span><span class=\"br0\">}</span> <span class=\"kw1\">return</span>          <span class=\"sy0\">;</span><span class=\"co1\"># Allow elision of cells (not used here)</span><br/>    <span class=\"re0\">$w</span> create polygon \\<br/>\t<span class=\"br0\">[</span>- <span class=\"re0\">$x</span> <span class=\"re0\">$dx</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>- <span class=\"re0\">$y</span> <span class=\"re0\">$dy</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>+ <span class=\"re0\">$x</span> <span class=\"re0\">$dx</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>- <span class=\"re0\">$y</span> <span class=\"re0\">$dy</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>+ <span class=\"re0\">$x</span> <span class=\"re0\">$dx</span> <span class=\"re0\">$dx</span><span class=\"br0\">]</span> <span class=\"re0\">$y</span> \\<br/>\t<span class=\"br0\">[</span>+ <span class=\"re0\">$x</span> <span class=\"re0\">$dx</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>+ <span class=\"re0\">$y</span> <span class=\"re0\">$dy</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>- <span class=\"re0\">$x</span> <span class=\"re0\">$dx</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>+ <span class=\"re0\">$y</span> <span class=\"re0\">$dy</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>- <span class=\"re0\">$x</span> <span class=\"re0\">$dx</span> <span class=\"re0\">$dx</span><span class=\"br0\">]</span> <span class=\"re0\">$y</span> \\<br/>\t-fill yellow -outline black -tags <span class=\"br0\">[</span><span class=\"kw2\">list</span> hex<span class=\"re0\">$ch</span> hull<span class=\"re0\">$ch</span><span class=\"br0\">]</span> -width <span class=\"nu0\">3</span><br/>    <span class=\"re0\">$w</span> create text <span class=\"re0\">$x</span> <span class=\"re0\">$y</span> -text <span class=\"re0\">$ch</span> -fill red -tags <span class=\"br0\">[</span><span class=\"kw2\">list</span> hex<span class=\"re0\">$ch</span> txt<span class=\"re0\">$ch</span><span class=\"br0\">]</span> \\<br/>\t-font <span class=\"br0\">{</span>Arial <span class=\"nu0\">72</span> bold<span class=\"br0\">}</span><br/>    <span class=\"co1\"># Install bindings on items</span><br/>    <span class=\"re0\">$w</span> bind hex<span class=\"re0\">$ch</span> <span class=\"sy0\">&lt;</span>Enter<span class=\"sy0\">&gt;</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> enterhex <span class=\"re0\">$w</span> <span class=\"re0\">$ch</span><span class=\"br0\">]</span><br/>    <span class=\"re0\">$w</span> bind hex<span class=\"re0\">$ch</span> <span class=\"sy0\">&lt;</span>Leave<span class=\"sy0\">&gt;</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> leavehex <span class=\"re0\">$w</span> <span class=\"re0\">$ch</span><span class=\"br0\">]</span><br/>    <span class=\"re0\">$w</span> bind hex<span class=\"re0\">$ch</span> <span class=\"sy0\">&lt;</span>Button-<span class=\"nu0\">1</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> dohex <span class=\"re0\">$w</span> <span class=\"re0\">$ch</span><span class=\"br0\">]</span><br/>    <span class=\"co1\"># Handle keyboard activity through canvas-level bindings</span><br/>    bind <span class=\"re0\">$w</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> toupper <span class=\"re0\">$ch</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> dokey <span class=\"re0\">$w</span> <span class=\"re0\">$ch</span><span class=\"br0\">]</span><br/>    bind <span class=\"re0\">$w</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> tolower <span class=\"re0\">$ch</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> dokey <span class=\"re0\">$w</span> <span class=\"re0\">$ch</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Callbacks for various bindings</span><br/><span class=\"kw1\">proc</span> enterhex <span class=\"br0\">{</span>w ch<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">global</span> chosen<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$ch</span> ni <span class=\"re0\">$chosen</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"re0\">$w</span> itemconfigure hull<span class=\"re0\">$ch</span> -fill magenta<br/>\t<span class=\"re0\">$w</span> itemconfigure txt<span class=\"re0\">$ch</span> -fill black<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> leavehex <span class=\"br0\">{</span>w ch<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">global</span> chosen<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$ch</span> ni <span class=\"re0\">$chosen</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"re0\">$w</span> itemconfigure hull<span class=\"re0\">$ch</span> -fill yellow<br/>\t<span class=\"re0\">$w</span> itemconfigure txt<span class=\"re0\">$ch</span> -fill red<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> dohex <span class=\"br0\">{</span>w ch<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">global</span> chosen<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$ch</span> ni <span class=\"re0\">$chosen</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">lappend</span> chosen <span class=\"re0\">$ch</span><br/>\t<span class=\"kw2\">puts</span> <span class=\"st0\">\"chosen $ch\"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$chosen</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">5</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\tdestroy <span class=\"re0\">$w</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> dokey <span class=\"br0\">{</span>w ch<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    enterhex <span class=\"re0\">$w</span> <span class=\"re0\">$ch</span><br/>    dohex <span class=\"re0\">$w</span> <span class=\"re0\">$ch</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Initial declarations of state variables</span><br/><span class=\"kw1\">set</span> chosen <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw1\">set</span> letterpattern <span class=\"br0\">{</span><br/>    <span class=\"br0\">{</span>L A R N D<span class=\"br0\">}</span><br/>    <span class=\"br0\">{</span>G U I Y T<span class=\"br0\">}</span><br/>    <span class=\"br0\">{</span>P C F E B<span class=\"br0\">}</span><br/>    <span class=\"br0\">{</span>V S O M K<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Build the GUI</span><br/>pack <span class=\"br0\">[</span>honeycomb .c <span class=\"re0\">$letterpattern</span><span class=\"br0\">]</span><br/>focus .c<br/><span class=\"co1\"># Usually don't use this, but it's ideal for this interaction pattern</span><br/>tkwait window .c<br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"overall list of characters: $chosen\"</span><br/><span class=\"kw1\">exit</span></pre>"}, {"lang": "XPL0", "loc": 42, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\stdlib;                 \\(color definitions, etc.)<br/>\u00a0<br/>proc DrawHexagon(X0, Y0, Side, Color);  \\Draw a filled hexagon centered at X0,Y0<br/>int  X0, Y0, Side, Color;<br/>int  X, Y;<br/>for Y:= -Side*19/22 to +Side*19/22 do           \\19/22 aprox = sqrt(3.0)/2.0<br/>    for X:= -Side to +Side do<br/>        if abs(X) + abs(Y)*23/38 &lt;= Side then   \\23/38 aprox = 1.0/sqrt(3.0)<br/>            Point(X+X0, Y+Y0, Color);<br/>\u00a0<br/>def Cols=5, Rows=4, X0=23, Y0=20;               \\matrix shape, offset on screen<br/>int C, R, X, Y, Letter, Counter, SaveX(26), SaveY(26);<br/>[SetVid($101);                                  \\set video to 640x480x8 graphics<br/>for Letter:= 0 to 26-1 do SaveX(Letter):= 0;<br/>Attrib(LMagenta&lt;&lt;8);                            \\light magenta letter background<br/>for R:= 0 to Rows-1 do<br/>    for C:= 0 to Cols-1 do<br/>        [X:= C*35 + X0;  Y:= R*40 + (C&amp;1)*20 + Y0;<br/>        DrawHexagon(X, Y, 22, LMagenta);<br/>        repeat Letter:= Ran(26) until SaveX(Letter) = 0;<br/>        Move(X-4, Y-7);  ChOut(6, Letter+^A);<br/>        SaveX(Letter):= X;  SaveY(Letter):= Y;  \\save coordinates for letter<br/>        ];<br/>Counter:= 0;<br/>repeat  Letter:= ChIn(1);                       \\get letter from keyboard<br/>        if Letter&gt;=^a &amp; Letter&lt;=^z then Letter:= Letter-$20;    \\make uppercase<br/>        if Letter&gt;=^A &amp; Letter&lt;=^Z then<br/>           if SaveX(Letter-^A) # 0 then         \\letter is available<br/>                [X:= SaveX(Letter-^A);  Y:= SaveY(Letter-^A);<br/>                DrawHexagon(X, Y, 22, Yellow);  \\change color<br/>                Move(X-4, Y-7);<br/>                Attrib(Yellow&lt;&lt;8);  ChOut(6, Letter);<br/>                Move(Counter*8+8, Rows*40+30);  \\show record of chosen letters<br/>                Attrib(Yellow);  ChOut(6, Letter);<br/>                Counter:= Counter+1;<br/>                SaveX(Letter-^A):= 0;           \\letter is no longer available<br/>                ]<br/>           else ChOut(0, Bel)                   \\letter is not available<br/>        else ChOut(0, Bel);                     \\not a letter (A..Z)<br/>until   Counter &gt;= Cols*Rows;<br/>SetVid($03);                                    \\restore normal text display<br/>]</pre>"}]}