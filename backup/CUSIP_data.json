{"task": "CUSIP", "blocks": [{"lang": "360 Assembly", "loc": 81, "block": "<pre class=\"text highlighted_source\">*        CUSIP                     07/06/2018<br/>CUSIP    CSECT<br/>         USING  CUSIP,R13          base register<br/>         B      72(R15)            skip savearea<br/>         DC     17F'0'             savearea<br/>         SAVE   (14,12)            save previous context<br/>         ST     R13,4(R15)         link backward<br/>         ST     R15,8(R13)         link forward<br/>         LR     R13,R15            set addressability<br/>         LA     R6,1               i=1<br/>       DO WHILE=(C,R6,LE,=F'6')    do i=1 to 6<br/>         LR     R1,R6                i<br/>         MH     R1,=H'9'             *9<br/>         LA     R4,T-9(R1)           @t(i)<br/>         MVC    X,0(R4)              x=t(i)<br/>         SR     R10,R10              w=0<br/>         LA     R7,1                 j=1<br/>       DO WHILE=(C,R7,LE,=F'8')      do j=1 to 8<br/>         LA     R14,X-1                x<br/>         AR     R14,R7                 j<br/>         MVC    Y(1),0(R14)            y=substr(x,j,1)<br/>         LA     R9,L'XX                z=length(xx)<br/>         LA     R8,1                   k=1<br/>       DO WHILE=(C,R8,LE,=A(L'XX))     do k=1 to length(xx)<br/>         LA     R4,XX-1                  xx<br/>         AR     R4,R8                    k<br/>         MVC    C(1),0(R4)               c=substr(xx,k,1)<br/>       IF CLC,Y(1),EQ,C THEN             if y=c then<br/>         LR     R9,R8                      k<br/>         BCTR   R9,0                       z=k-1<br/>       ENDIF    ,                        endif<br/>         LA     R8,1(R8)                 k++<br/>       ENDDO    ,                      enddo k<br/>         LR     R4,R7                  j<br/>         LA     R1,2                   2<br/>         SRDA   R4,32                  ~<br/>         DR     R4,R1                  j/2=0<br/>       IF LTR,R4,Z,R4 THEN             if j//2=0 then<br/>         AR     R9,R9                    z=z+z<br/>       ENDIF    ,                      endif<br/>         LR     R4,R9                  z<br/>         LA     R1,10                  10<br/>         SRDA   R4,32                  ~<br/>         DR     R4,R1                  r4=z//10\u00a0; r5=z/10<br/>         AR     R10,R5                 w+z/10<br/>         AR     R10,R4                 w=w+z/10+z//10<br/>         LA     R7,1(R7)               j++<br/>       ENDDO    ,                    enddo j<br/>         LR     R4,R10               w<br/>         LA     R1,10                10<br/>         SRDA   R4,32                ~<br/>         DR     R4,R1                w/10<br/>         LA     R2,10                10<br/>         SR     R2,R4                10-w//10<br/>         SRDA   R2,32                ~<br/>         DR     R2,R1                /10<br/>         STC    R2,U                 u=(10-w//10)//10<br/>         OI     U,X'F0'              bin to char<br/>       IF CLC,U,EQ,X+8 THEN          if u=substr(x,9,1) then<br/>         MVC    OK,=CL3' '             ok=' '<br/>       ELSE     ,                    else<br/>         MVC    OK,=C'n''t'            ok='n''t'<br/>       ENDIF    ,                    endif<br/>         MVC    PG+6(9),X            output x<br/>         MVC    PG+18(3),OK          output ok<br/>         XPRNT  PG,L'PG              print<br/>         LA     R6,1(R6)             i++<br/>       ENDDO    ,                  enddo i<br/>         L      R13,4(0,R13)       restore previous savearea pointer<br/>         RETURN (14,12),RC=0       restore registers from calling sav<br/>XX       DC     CL39'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ*@#'<br/>U        DS     CL1<br/>Y        DS     CL1<br/>C        DS     CL1<br/>T        DC     CL9'037833100',CL9'17275R102',CL9'38259P508'<br/>         DC     CL9'594918104',CL9'68389X106',CL9'68389X105'<br/>X        DS     CL9<br/>OK       DS     CL3<br/>PG       DC     CL80'CUSIP ......... is... valid'<br/>         YREGS<br/>         END    CUSIP</pre>"}, {"lang": "Ada", "loc": 54, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Cusip_Test <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/>   <span class=\"kw3\">subtype</span> Cusip <span class=\"kw1\">is</span> String <span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"nu0\">9</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Check_Cusip <span class=\"br0\">(</span>Code\u00a0: Cusip<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span><br/>      Sum\u00a0: Integer\u00a0:= <span class=\"nu0\">0</span>;<br/>      V  \u00a0: Integer;<br/>\u00a0<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Code'First .. <span class=\"me1\">Code</span>'Last - <span class=\"nu0\">1</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">case</span> Code <span class=\"br0\">(</span>I<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>            <span class=\"kw3\">when</span> '<span class=\"nu0\">0</span>' .. '<span class=\"nu0\">9</span>' =&gt;<br/>               V\u00a0:= Character'Pos <span class=\"br0\">(</span>Code <span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span> - Character'Pos <span class=\"br0\">(</span>'<span class=\"nu0\">0</span>'<span class=\"br0\">)</span>;<br/>            <span class=\"kw3\">when</span> 'A' .. 'Z' =&gt;<br/>               V\u00a0:= Character'Pos <span class=\"br0\">(</span>Code <span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span> - Character'Pos <span class=\"br0\">(</span>'A'<span class=\"br0\">)</span> + <span class=\"nu0\">10</span>;<br/>            <span class=\"kw3\">when</span> '*' =&gt; V\u00a0:= <span class=\"nu0\">36</span>;<br/>            <span class=\"kw3\">when</span> '@' =&gt; V\u00a0:= <span class=\"nu0\">37</span>;<br/>            <span class=\"kw3\">when</span> '#' =&gt; V\u00a0:= <span class=\"nu0\">38</span>;<br/>            <span class=\"kw3\">when</span> <span class=\"kw3\">others</span> =&gt; <span class=\"kw1\">return</span> False;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">case</span>;<br/>\u00a0<br/>         <span class=\"kw1\">if</span> I <span class=\"kw2\">mod</span> <span class=\"nu0\">2</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>            V\u00a0:= V * <span class=\"nu0\">2</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>\u00a0<br/>         Sum\u00a0:= Sum + V / <span class=\"nu0\">10</span> + <span class=\"br0\">(</span>V <span class=\"kw2\">mod</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>\u00a0<br/>      <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"nu0\">10</span> - <span class=\"br0\">(</span>Sum <span class=\"kw2\">mod</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">mod</span> <span class=\"nu0\">10</span> =<br/>        Character'Pos <span class=\"br0\">(</span>Code <span class=\"br0\">(</span>Code'Last<span class=\"br0\">)</span><span class=\"br0\">)</span> - Character'Pos <span class=\"br0\">(</span>'<span class=\"nu0\">0</span>'<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Check_Cusip;<br/>\u00a0<br/>   <span class=\"kw3\">type</span> Cusip_Array <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Natural <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Cusip;<br/>\u00a0<br/>   Test_Array\u00a0: Cusip_Array\u00a0:=<br/>     <span class=\"br0\">(</span><span class=\"st0\">\"037833100\"</span>,<br/>      <span class=\"st0\">\"17275R102\"</span>,<br/>      <span class=\"st0\">\"38259P508\"</span>,<br/>      <span class=\"st0\">\"594918104\"</span>,<br/>      <span class=\"st0\">\"68389X106\"</span>,<br/>      <span class=\"st0\">\"68389X105\"</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Test_Array'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>      Put <span class=\"br0\">(</span>Test_Array <span class=\"br0\">(</span>I<span class=\"br0\">)</span> &amp; <span class=\"st0\">\": \"</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">if</span> Check_Cusip <span class=\"br0\">(</span>Test_Array <span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>         Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"valid\"</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">else</span><br/>         Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"not valid\"</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Cusip_Test;</pre>"}, {"lang": "ALGOL 68", "loc": 49, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw2\">BEGIN</span><br/>    <span class=\"coMULTI\"># returns TRUE if cusip is a valid CUSIP code #</span><br/>    <span class=\"kw4\">OP</span> ISCUSIP <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> cusip <span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span><br/>       <span class=\"kw2\">IF</span> <span class=\"br0\">(</span> <span class=\"kw8\">UPB</span> cusip <span class=\"sy1\">-</span> <span class=\"kw8\">LWB</span> cusip <span class=\"br0\">)</span> <span class=\"sy1\">/=</span> 8<br/>       <span class=\"kw2\">THEN</span><br/>           <span class=\"coMULTI\"># code is wrong length #</span><br/>           <span class=\"kw7\">FALSE</span><br/>       <span class=\"kw2\">ELSE</span><br/>           <span class=\"coMULTI\"># string is 9 characters long - check it is valid #</span><br/>           <span class=\"kw3\">STRING</span> cusip digits <span class=\"sy1\">=</span> <span class=\"st0\">\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ*@#\"</span><span class=\"br0\">[</span> <span class=\"kw7\">AT</span> 0 <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>           <span class=\"kw3\">INT</span> check digit <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>           <span class=\"kw2\">IF</span> <span class=\"kw8\">NOT</span> <span class=\"kw26\">char in string</span><span class=\"br0\">(</span> cusip<span class=\"br0\">[</span> <span class=\"kw8\">UPB</span> cusip <span class=\"br0\">]</span><span class=\"sy1\">,</span> check digit<span class=\"sy1\">,</span> cusip digits <span class=\"br0\">)</span><br/>           <span class=\"kw2\">THEN</span><br/>               <span class=\"coMULTI\"># invalid check digit #</span><br/>               <span class=\"kw7\">FALSE</span><br/>           <span class=\"kw2\">ELSE</span><br/>               <span class=\"coMULTI\"># OK so far compare the calculated check sum to the supplied one #</span><br/>               <span class=\"kw3\">INT</span> sum <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>               <span class=\"kw3\">INT</span> c pos <span class=\"sy1\">:=</span> <span class=\"kw8\">LWB</span> cusip <span class=\"sy1\">-</span> 1<span class=\"sy1\">;</span><br/>               <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> 8 <span class=\"kw2\">DO</span><br/>                   <span class=\"kw3\">INT</span> digit <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>                   <span class=\"kw2\">IF</span> <span class=\"kw8\">NOT</span> <span class=\"kw26\">char in string</span><span class=\"br0\">(</span> cusip<span class=\"br0\">[</span> i <span class=\"sy1\">+</span> c pos <span class=\"br0\">]</span><span class=\"sy1\">,</span> digit<span class=\"sy1\">,</span> cusip digits <span class=\"br0\">)</span><br/>                   <span class=\"kw2\">THEN</span><br/>                       <span class=\"coMULTI\"># invalid digit #</span><br/>                       digit <span class=\"sy1\">:=</span> <span class=\"sy1\">-</span>999<br/>                   <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>                   <span class=\"kw2\">IF</span> <span class=\"kw8\">NOT</span> <span class=\"kw8\">ODD</span> i<br/>                   <span class=\"kw2\">THEN</span><br/>                       <span class=\"coMULTI\"># even digit #</span><br/>                       digit <span class=\"sy1\">*:=</span> 2<br/>                   <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>                   sum <span class=\"sy1\">+:=</span> <span class=\"br0\">(</span> digit <span class=\"kw12\">OVER</span> 10 <span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"br0\">(</span> digit <span class=\"kw12\">MOD</span> 10 <span class=\"br0\">)</span><br/>               <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>               <span class=\"br0\">(</span> 10 <span class=\"sy1\">-</span> <span class=\"br0\">(</span> sum <span class=\"kw12\">MOD</span> 10 <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw12\">MOD</span> 10 <span class=\"sy1\">=</span> check digit<br/>           <span class=\"kw2\">FI</span><br/>       <span class=\"kw2\">FI</span> <span class=\"sy1\">;</span> <span class=\"coMULTI\"># ISCUSIP #</span><br/>\u00a0<br/>    <span class=\"coMULTI\"># task test cases #</span><br/>\u00a0<br/>    <span class=\"kw4\">PROC</span> test cusip <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> cusip <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>        <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> cusip<span class=\"sy1\">,</span> <span class=\"kw2\">IF</span> ISCUSIP cusip <span class=\"kw2\">THEN</span> <span class=\"st0\">\" valid\"</span> <span class=\"kw2\">ELSE</span> <span class=\"st0\">\" invalid\"</span> <span class=\"kw2\">FI</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    test cusip<span class=\"br0\">(</span> <span class=\"st0\">\"037833100\"</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    test cusip<span class=\"br0\">(</span> <span class=\"st0\">\"17275R102\"</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    test cusip<span class=\"br0\">(</span> <span class=\"st0\">\"38259P508\"</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    test cusip<span class=\"br0\">(</span> <span class=\"st0\">\"594918104\"</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    test cusip<span class=\"br0\">(</span> <span class=\"st0\">\"68389X106\"</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    test cusip<span class=\"br0\">(</span> <span class=\"st0\">\"68389X105\"</span> <span class=\"br0\">)</span><br/><span class=\"kw2\">END</span></pre>"}, {"lang": "ALGOL W", "loc": 35, "block": "<pre class=\"text highlighted_source\">begin   \u00a0% returns true if cusip is a valid CUSIP code\u00a0%<br/>    logical procedure isCusip ( string(9) value cusip )\u00a0;<br/>    begin<br/>       \u00a0% returns the base 39 digit corresponding to a character of a CUSIP code\u00a0%<br/>        integer procedure cusipDigit( string(1) value cChar )\u00a0;<br/>            if      cChar &gt;= \"0\" and cChar &lt;= \"9\" then ( decode( cChar ) - decode( \"0\" ) )<br/>            else if cChar &gt;= \"A\" and cChar &lt;= \"Z\" then ( decode( cChar ) - decode( \"A\" ) ) + 10<br/>            else if cChar  = \"*\"                  then   36<br/>            else if cChar  = \"@\"                  then   37<br/>            else if cChar  = \"#\"                  then   38<br/>            else   \u00a0% invalid digit\u00a0%                  -999\u00a0;<br/>\u00a0<br/>        integer checkDigit, sum;<br/>        checkDigit\u00a0:= cusipDigit( cusip( 8 // 1 ) );<br/>        for cPos\u00a0:= 1 until 8 do begin<br/>            integer   digit;<br/>            digit\u00a0:= cusipDigit( cusip( ( cPos - 1 ) // 1 ) );<br/>            if not odd( cPos ) then digit\u00a0:= digit * 2;<br/>            sum\u00a0:= sum + ( digit div 10 ) + ( digit rem 10 )<br/>        end for_cPos\u00a0;<br/>        ( ( 10 - ( sum rem 10 ) ) rem 10 ) = checkDigit<br/>    end isCusip\u00a0;<br/>\u00a0<br/>    begin\u00a0% task test cases\u00a0%<br/>        procedure testCusip ( string(9) value cusip )\u00a0;<br/>            write( s_w\u00a0:= 0, cusip, if isCusip( cusip ) then \" valid\" else \" invalid\" );<br/>\u00a0<br/>        testCusip( \"037833100\" );<br/>        testCusip( \"17275R102\" );<br/>        testCusip( \"38259P508\" );<br/>        testCusip( \"594918104\" );<br/>        testCusip( \"68389X106\" );<br/>        testCusip( \"68389X105\" )<br/>    end testCases<br/>end.</pre>"}, {"lang": "AWK", "loc": 43, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f CUSIP.AWK</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    n = <span class=\"kw4\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"037833100,17275R102,38259P508,594918104,68389X106,68389X105\"</span>,arr,<span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;=</span>n; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%9s\u00a0%s<span class=\"es0\">\\n</span>\"</span>,arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span>,cusip<span class=\"br0\">(</span>arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> cusip<span class=\"br0\">(</span>n,  c,i,sum,v,x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/><span class=\"co1\"># returns: 1=OK, 0=NG, -1=bad data</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">length</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw6\">return</span><span class=\"br0\">(</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;=</span><span class=\"nu0\">8</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      c = <span class=\"kw4\">substr</span><span class=\"br0\">(</span>n,i,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy4\">~</span> <span class=\"sy3\">/</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy3\">-</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        v = c<br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy4\">~</span> <span class=\"sy3\">/</span><span class=\"br0\">[</span>A<span class=\"sy3\">-</span>Z<span class=\"br0\">]</span><span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        v = <span class=\"kw4\">index</span><span class=\"br0\">(</span><span class=\"st0\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span>,c<span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"nu0\">9</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy2\">==</span> <span class=\"st0\">\"*\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        v = <span class=\"nu0\">36</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy2\">==</span> <span class=\"st0\">\"@\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        v = <span class=\"nu0\">37</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy2\">==</span> <span class=\"st0\">\"#\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        v = <span class=\"nu0\">38</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw6\">return</span><span class=\"br0\">(</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy4\">~</span> <span class=\"sy3\">/</span><span class=\"br0\">[</span>02468<span class=\"br0\">]</span><span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        v <span class=\"sy3\">*</span>= <span class=\"nu0\">2</span><br/>      <span class=\"br0\">}</span><br/>      sum <span class=\"sy3\">+</span>= <span class=\"kw4\">int</span><span class=\"br0\">(</span>v <span class=\"sy3\">/</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"br0\">(</span>v <span class=\"sy3\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    x = <span class=\"br0\">(</span><span class=\"nu0\">10</span> <span class=\"sy3\">-</span> <span class=\"br0\">(</span>sum <span class=\"sy3\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy3\">%</span> <span class=\"nu0\">10</span><br/>    <span class=\"kw6\">return</span><span class=\"br0\">(</span><span class=\"kw4\">substr</span><span class=\"br0\">(</span>n,<span class=\"nu0\">9</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy2\">==</span> x <span class=\"sy5\">?</span> <span class=\"nu0\">1</span> <span class=\"sy5\">:</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C", "loc": 55, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include&lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include&lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> cusipCheck<span class=\"br0\">(</span><span class=\"kw4\">char</span> str<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> sum<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>i<span class=\"sy0\">,</span>v<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span><span class=\"nu0\">8</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>str<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">&gt;=</span><span class=\"st0\">'0'</span><span class=\"sy0\">&amp;&amp;</span>str<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">&lt;=</span><span class=\"st0\">'9'</span><span class=\"br0\">)</span><br/>\t\t\tv <span class=\"sy0\">=</span> str<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">-</span><span class=\"st0\">'0'</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>str<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">&gt;=</span><span class=\"st0\">'A'</span><span class=\"sy0\">&amp;&amp;</span>str<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">&lt;=</span><span class=\"st0\">'Z'</span><span class=\"br0\">)</span><br/>\t\t\tv <span class=\"sy0\">=</span> <span class=\"br0\">(</span>str<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"st0\">'A'</span> <span class=\"sy0\">+</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>str<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"st0\">'*'</span><span class=\"br0\">)</span><br/>\t\t\tv <span class=\"sy0\">=</span> <span class=\"nu0\">36</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>str<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"st0\">'@'</span><span class=\"br0\">)</span><br/>\t\t\tv <span class=\"sy0\">=</span> <span class=\"nu0\">37</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>str<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"st0\">'#'</span><span class=\"br0\">)</span><br/>\t\t\tv <span class=\"sy0\">=</span> <span class=\"nu0\">38</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>i<span class=\"sy0\">%</span><span class=\"nu19\">2</span><span class=\"sy0\">!=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t\tv<span class=\"sy0\">*=</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tsum <span class=\"sy0\">+=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">(</span>v<span class=\"sy0\">/</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> v<span class=\"sy0\">%</span><span class=\"nu19\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">10</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>sum<span class=\"sy0\">%</span><span class=\"nu19\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">%</span><span class=\"nu19\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argC<span class=\"sy0\">,</span><span class=\"kw4\">char</span><span class=\"sy0\">*</span> argV<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">char</span> cusipStr<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span>numLines<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>argC<span class=\"sy0\">==</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Usage\u00a0:\u00a0%s &lt;full path of CUSIP Data file&gt;\"</span><span class=\"sy0\">,</span>argV<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">else</span><span class=\"br0\">{</span><br/>\t\tFILE<span class=\"sy0\">*</span> fp <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fopen.html\"><span class=\"kw3\">fopen</span></a><span class=\"br0\">(</span>argV<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"st0\">\"r\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fscanf.html\"><span class=\"kw3\">fscanf</span></a><span class=\"br0\">(</span>fp<span class=\"sy0\">,</span><span class=\"st0\">\"%d\"</span><span class=\"sy0\">,&amp;</span>numLines<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"CUSIP       Verdict<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"-------------------\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>numLines<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\u00a0<br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fscanf.html\"><span class=\"kw3\">fscanf</span></a><span class=\"br0\">(</span>fp<span class=\"sy0\">,</span><span class=\"st0\">\"%s\"</span><span class=\"sy0\">,</span>cusipStr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>%s\u00a0:\u00a0%s\"</span><span class=\"sy0\">,</span>cusipStr<span class=\"sy0\">,</span><span class=\"br0\">(</span>cusipCheck<span class=\"br0\">(</span>cusipStr<span class=\"br0\">)</span><span class=\"sy0\">==</span><span class=\"br0\">(</span>cusipStr<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">-</span><span class=\"st0\">'0'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">?</span><span class=\"st0\">\"Valid\"</span><span class=\"sy0\">:</span><span class=\"st0\">\"Invalid\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>fp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 48, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> CUSIP <span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> IsCusip<span class=\"br0\">(</span><span class=\"kw4\">string</span> s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">7</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">char</span> c <span class=\"sy0\">=</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw4\">int</span> v<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">&gt;=</span> <span class=\"st0\">'0'</span> <span class=\"sy0\">&amp;&amp;</span> c <span class=\"sy0\">&lt;=</span> <span class=\"st0\">'9'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    v <span class=\"sy0\">=</span> c <span class=\"sy0\">-</span> <span class=\"nu0\">48</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">&gt;=</span> <span class=\"st0\">'A'</span> <span class=\"sy0\">&amp;&amp;</span> c <span class=\"sy0\">&lt;=</span> <span class=\"st0\">'Z'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    v <span class=\"sy0\">=</span> c <span class=\"sy0\">-</span> <span class=\"nu0\">64</span><span class=\"sy0\">;</span>  <span class=\"co1\">// lower case letters apparently invalid</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> <span class=\"st0\">'*'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    v <span class=\"sy0\">=</span> <span class=\"nu0\">36</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> <span class=\"st0\">'#'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    v <span class=\"sy0\">=</span> <span class=\"nu0\">38</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">return</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> v <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span>  <span class=\"co1\">// check if odd as using 0-based indexing</span><br/>                sum <span class=\"sy0\">+=</span> v <span class=\"sy0\">/</span> <span class=\"nu0\">10</span> <span class=\"sy0\">+</span> v <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> s<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"nu0\">48</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span><span class=\"nu0\">10</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>sum <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            List<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span><span class=\"sy0\">&gt;</span> candidates <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"st0\">\"037833100\"</span>,<br/>                <span class=\"st0\">\"17275R102\"</span>,<br/>                <span class=\"st0\">\"38259P508\"</span>,<br/>                <span class=\"st0\">\"594918104\"</span>,<br/>                <span class=\"st0\">\"68389X106\"</span>,<br/>                <span class=\"st0\">\"68389X105\"</span><br/>            <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> candidate <span class=\"kw1\">in</span> candidates<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"{0} -&gt; {1}\"</span>, candidate, IsCusip<span class=\"br0\">(</span>candidate<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"correct\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"incorrect\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Cach\u00e9 ObjectScript", "loc": 19, "block": "<pre class=\"text highlighted_source\">Class Utils.Check [ Abstract ]<br/>{<br/>\u00a0<br/>ClassMethod CUSIP(x As\u00a0%String) As\u00a0%Boolean<br/>{<br/>\tSET x=$TRANSLATE(x,\" \")<br/>\t// https://leiq.bus.umich.edu/res_codes_cusip.htm<br/>\tIF x'?8UNP1N QUIT 0<br/>\tSET cd=$EXTRACT(x,*), x=$EXTRACT(x,1,*-1), t=0<br/>\tFOR i=1:1:$LENGTH(x) {<br/>\t\tSET n=$EXTRACT(x,i)<br/>\t\tIF n'=+n SET n=$CASE(n,\"*\":36,\"@\":37,\"#\":38,:$ASCII(n)-55)<br/>\t\tIF i#2=0 SET n=n*2<br/>\t\tSET t=t+(n\\10)+(n#10)<br/>\t}<br/>\tQUIT cd=((10-(t#10))#10)<br/>}<br/>\u00a0<br/>}</pre>"}, {"lang": "Common Lisp", "loc": 23, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> char-<span class=\"sy0\">&gt;</span><span class=\"kw1\">value</span> <span class=\"br0\">(</span>c<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>digit-char-p c <span class=\"nu0\">36</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span>char<span class=\"sy0\">=</span> c #\\*<span class=\"br0\">)</span> <span class=\"nu0\">36</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span>char<span class=\"sy0\">=</span> c #\\@<span class=\"br0\">)</span> <span class=\"nu0\">37</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span>char<span class=\"sy0\">=</span> c #\\#<span class=\"br0\">)</span> <span class=\"nu0\">38</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>t <span class=\"br0\">(</span><span class=\"kw1\">error</span> <span class=\"st0\">\"Invalid character: ~A\"</span> c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> cusip-p <span class=\"br0\">(</span>cusip<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">9</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> cusip<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>loop for i from <span class=\"nu0\">1</span> to <span class=\"nu0\">8</span><br/>             for c across cusip<br/>             for v <span class=\"sy0\">=</span> <span class=\"br0\">(</span>char-<span class=\"sy0\">&gt;</span><span class=\"kw1\">value</span> c<span class=\"br0\">)</span><br/>             <span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">evenp</span> i<span class=\"br0\">)</span><br/>               <span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw1\">setf</span> v <span class=\"br0\">(</span>* <span class=\"nu0\">2</span> v<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             sum <span class=\"br0\">(</span>multiple-value-bind <span class=\"br0\">(</span>quot <span class=\"kw1\">rem</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>floor v <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span>+ quot <span class=\"kw1\">rem</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               into sum<br/>             finally <span class=\"br0\">(</span><span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"kw1\">eql</span> <span class=\"br0\">(</span>digit-char-p <span class=\"br0\">(</span>char cusip <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                  <span class=\"br0\">(</span>mod <span class=\"br0\">(</span>- <span class=\"nu0\">10</span> <span class=\"br0\">(</span>mod sum <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">dolist</span> <span class=\"br0\">(</span>cusip '<span class=\"br0\">(</span><span class=\"st0\">\"037833100\"</span> <span class=\"st0\">\"17275R102\"</span> <span class=\"st0\">\"38259P508\"</span> <span class=\"st0\">\"594918104\"</span> <span class=\"st0\">\"68389X106\"</span> <span class=\"st0\">\"68389X105\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>format t <span class=\"st0\">\"~A: ~A~%\"</span> cusip <span class=\"br0\">(</span>cusip-p cusip<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 99, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"CUSIP       Verdict\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>arg<span class=\"sy0\">;</span> args<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span>$<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"%9s\u00a0:\u00a0%s\"</span><span class=\"sy0\">,</span> arg<span class=\"sy0\">,</span> isValidCusip<span class=\"br0\">(</span>arg<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"Valid\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"Invalid\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">class</span> IllegalCharacterException <span class=\"sy0\">:</span> <span class=\"kw3\">Exception</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">this</span><span class=\"br0\">(</span><span class=\"kw4\">string</span> msg<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">super</span><span class=\"br0\">(</span>msg<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> isValidCusip<span class=\"br0\">(</span><span class=\"kw4\">string</span> cusip<span class=\"br0\">)</span> <span class=\"kw2\">in</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>cusip.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Incorrect cusip length\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">try</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">auto</span> check <span class=\"sy0\">=</span> cusipCheckDigit<span class=\"br0\">(</span>cusip<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> cusip<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span><span class=\"st0\">'0'</span> <span class=\"sy0\">+</span> check<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw2\">catch</span> <span class=\"br0\">(</span>IllegalCharacterException e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">unittest</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// Oracle Corporation</span><br/>    assertEquals<span class=\"br0\">(</span>isValidCusip<span class=\"br0\">(</span><span class=\"st0\">\"68389X105\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Oracle Corporation (invalid)</span><br/>    assertEquals<span class=\"br0\">(</span>isValidCusip<span class=\"br0\">(</span><span class=\"st0\">\"68389X106\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> cusipCheckDigit<span class=\"br0\">(</span><span class=\"kw4\">string</span> cusip<span class=\"br0\">)</span> <span class=\"kw2\">in</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>cusip.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Incorrect cusip length\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> sum<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span><span class=\"nu0\">8</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">char</span> c <span class=\"sy0\">=</span> cusip<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> v<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">switch</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">'0'</span><span class=\"sy0\">:</span> <span class=\"sy0\">..</span> <span class=\"kw1\">case</span> <span class=\"st0\">'9'</span><span class=\"sy0\">:</span><br/>                v <span class=\"sy0\">=</span> c <span class=\"sy0\">-</span> <span class=\"st0\">'0'</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">'A'</span><span class=\"sy0\">:</span> <span class=\"sy0\">..</span> <span class=\"kw1\">case</span> <span class=\"st0\">'Z'</span><span class=\"sy0\">:</span><br/>                v <span class=\"sy0\">=</span> c <span class=\"sy0\">-</span> <span class=\"st0\">'A'</span> <span class=\"sy0\">+</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">'*'</span><span class=\"sy0\">:</span><br/>                v <span class=\"sy0\">=</span> <span class=\"nu0\">36</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">'@'</span><span class=\"sy0\">:</span><br/>                v <span class=\"sy0\">=</span> <span class=\"nu0\">37</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">'#'</span><span class=\"sy0\">:</span><br/>                v <span class=\"sy0\">=</span> <span class=\"nu0\">38</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw2\">default</span><span class=\"sy0\">:</span><br/>                <span class=\"kw2\">throw</span> <span class=\"kw2\">new</span> IllegalCharacterException<span class=\"br0\">(</span><span class=\"st0\">\"Saw character: \"</span> <span class=\"sy0\">~</span> c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i<span class=\"sy0\">%</span><span class=\"nu19\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            v <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> v<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        sum <span class=\"sy0\">=</span> sum <span class=\"sy0\">+</span> <span class=\"br0\">(</span>v <span class=\"sy0\">/</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>v <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>   <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"nu0\">10</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>sum <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">unittest</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// Apple Incorporated</span><br/>    assertEquals<span class=\"br0\">(</span>cusipCheckDigit<span class=\"br0\">(</span><span class=\"st0\">\"037833100\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Cisco Systems</span><br/>    assertEquals<span class=\"br0\">(</span>cusipCheckDigit<span class=\"br0\">(</span><span class=\"st0\">\"17275R102\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Google Incorporated</span><br/>    assertEquals<span class=\"br0\">(</span>cusipCheckDigit<span class=\"br0\">(</span><span class=\"st0\">\"38259P508\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Microsoft Corporation</span><br/>    assertEquals<span class=\"br0\">(</span>cusipCheckDigit<span class=\"br0\">(</span><span class=\"st0\">\"594918104\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Oracle Corporation</span><br/>    assertEquals<span class=\"br0\">(</span>cusipCheckDigit<span class=\"br0\">(</span><span class=\"st0\">\"68389X105\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">version</span><span class=\"br0\">(</span><span class=\"kw4\">unittest</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">void</span> assertEquals<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span>T actual<span class=\"sy0\">,</span> T expected<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">import</span> core.<span class=\"me1\">exception</span><span class=\"sy0\">;</span><br/>        <span class=\"kw2\">import</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>actual <span class=\"sy0\">!=</span> expected<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">throw</span> <span class=\"kw2\">new</span> AssertError<span class=\"br0\">(</span><span class=\"st0\">\"Actual [\"</span> <span class=\"sy0\">~</span> to<span class=\"sy0\">!</span><span class=\"kw4\">string</span><span class=\"br0\">(</span>actual<span class=\"br0\">)</span> <span class=\"sy0\">~</span> <span class=\"st0\">\"]; Expected [\"</span> <span class=\"sy0\">~</span> to<span class=\"sy0\">!</span><span class=\"kw4\">string</span><span class=\"br0\">(</span>expected<span class=\"br0\">)</span> <span class=\"sy0\">~</span> <span class=\"st0\">\"]\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">/// Invoke with `cusip 037833100 17275R102 38259P508 594918104 68389X106 68389X105`</span></pre>"}, {"lang": "Fortran", "loc": 34, "block": "<pre class=\"fortran highlighted_source\">      <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">1</span> <span class=\"kw1\">FUNCTION</span> CUSIPCHECK<span class=\"br0\">(</span>TEXT<span class=\"br0\">)</span>\t<span class=\"co1\">!Determines the check sum character.</span><br/><span class=\"co1\">Committee on Uniform Security Identification Purposes, of the American (i.e. USA) Bankers' Association.</span><br/>       <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">8</span> TEXT\t\t<span class=\"co1\">!Specifically, an eight-symbol code.</span><br/>       <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> VALID\t<span class=\"co1\">!These only are valid.</span><br/>       <span class=\"kw3\">PARAMETER</span> <span class=\"br0\">(</span>VALID <span class=\"sy0\">=</span> <span class=\"st0\">\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ*@#\"</span><span class=\"br0\">)</span><br/>       <span class=\"kw3\">INTEGER</span> I,V,S\t\t<span class=\"co1\">!Assistants.</span><br/>        S <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\t\t<span class=\"co1\">!Start the checksum.</span><br/>        <span class=\"kw1\">DO</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,<span class=\"kw4\">LEN</span><span class=\"br0\">(</span>TEXT<span class=\"br0\">)</span>\t<span class=\"co1\">!Step through the text.</span><br/>          V <span class=\"sy0\">=</span> <span class=\"kw4\">INDEX</span><span class=\"br0\">(</span>VALID,TEXT<span class=\"br0\">(</span>I<span class=\"sy0\">:</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>\t<span class=\"co1\">!Since counting starts with one.</span><br/>          <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw4\">MOD</span><span class=\"br0\">(</span>I,<span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">EQ</span>.0<span class=\"br0\">)</span> V <span class=\"sy0\">=</span> V<span class=\"sy0\">*</span><span class=\"nu0\">2</span>\t\t<span class=\"co1\">!V = V*(2 - MOD(I,2))?</span><br/>          S <span class=\"sy0\">=</span> S <span class=\"sy0\">+</span> V<span class=\"sy0\">/</span><span class=\"nu0\">10</span> <span class=\"sy0\">+</span> <span class=\"kw4\">MOD</span><span class=\"br0\">(</span>V,<span class=\"nu0\">10</span><span class=\"br0\">)</span>\t\t<span class=\"co1\">!Specified calculation.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t\t\t<span class=\"co1\">!On to the next character.</span><br/>        I <span class=\"sy0\">=</span> <span class=\"kw4\">MOD</span><span class=\"br0\">(</span><span class=\"nu0\">10</span> <span class=\"sy0\">-</span> <span class=\"kw4\">MOD</span><span class=\"br0\">(</span>S,<span class=\"nu0\">10</span><span class=\"br0\">)</span>,<span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t<span class=\"co1\">!Again, counting starts with one.</span><br/>        CUSIPCHECK <span class=\"sy0\">=</span> VALID<span class=\"br0\">(</span>I<span class=\"sy0\">:</span>I<span class=\"br0\">)</span>\t<span class=\"co1\">!Thanks to the MOD 10, surely a digit.</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span> CUSIPCHECK\t<span class=\"co1\">!No checking for invalid input...</span><br/>\u00a0<br/>      <span class=\"kw1\">PROGRAM</span> POKE\t<span class=\"co1\">!Just to try it out.</span><br/>      <span class=\"kw3\">INTEGER</span> I,N\t<span class=\"co1\">!Assistants.</span><br/>      <span class=\"kw3\">PARAMETER</span> <span class=\"br0\">(</span>N <span class=\"sy0\">=</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span>\t\t<span class=\"co1\">!A whole lot of blather</span><br/>      <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">9</span> CUSIP<span class=\"br0\">(</span>N<span class=\"br0\">)</span>\t<span class=\"co1\">!Just to have an array of test codes.</span><br/>      <span class=\"kw3\">DATA</span> CUSIP<span class=\"sy0\">/</span>\t\t<span class=\"co1\">!Here they are, as specified.</span><br/>     <span class=\"nu0\">1</span>  <span class=\"st0\">\"037833100\"</span>,<br/>     <span class=\"nu0\">2</span>  <span class=\"st0\">\"17275R102\"</span>,<br/>     <span class=\"nu0\">3</span>  <span class=\"st0\">\"38259P508\"</span>,<br/>     <span class=\"nu0\">4</span>  <span class=\"st0\">\"594918104\"</span>,<br/>     <span class=\"nu0\">5</span>  <span class=\"st0\">\"68389X106\"</span>,<br/>     <span class=\"nu0\">6</span>  <span class=\"st0\">\"68389X105\"</span><span class=\"sy0\">/</span><br/>      <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">1</span> CUSIPCHECK\t<span class=\"co1\">!Needed as no use of the MODULE protocol.</span><br/>\u00a0<br/>      <span class=\"kw1\">DO</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,N\t<span class=\"co1\">!\"More than two? Use a DO...\"</span><br/>        WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> CUSIP<span class=\"br0\">(</span>I<span class=\"br0\">)</span>,CUSIPCHECK<span class=\"br0\">(</span>CUSIP<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">EQ</span>.<span class=\"me1\">CUSIP</span><span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"sy0\">:</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>\u00a0<br/>      <span class=\"kw1\">END</span></pre>"}, {"lang": "FreeBASIC", "loc": 63, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 04-04-2017</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"kw1\">sub</span> cusip<span class=\"br0\">(</span>input_str <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">Print</span> input_str;<br/>    <span class=\"kw1\">If</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>input_str<span class=\"br0\">)</span> &lt;&gt; <span class=\"nu0\">9</span> <span class=\"kw1\">Then</span><br/>        <span class=\"kw1\">Print</span> <span class=\"st0\">\" length is incorrect, invalid cusip\"</span><br/>        <span class=\"kw1\">Return</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Long</span> i, v , sum<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UByte</span> x<br/>\u00a0<br/>    <span class=\"kw1\">For</span> i = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">8</span><br/>        x = input_str<span class=\"br0\">[</span>i-<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        Select <span class=\"kw1\">Case</span> x<br/>            <span class=\"kw1\">Case</span> <span class=\"kw1\">Asc</span><span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Asc</span><span class=\"br0\">(</span><span class=\"st0\">\"9\"</span><span class=\"br0\">)</span><br/>                v = x - <span class=\"kw1\">Asc</span><span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">Case</span> <span class=\"kw1\">Asc</span><span class=\"br0\">(</span><span class=\"st0\">\"A\"</span><span class=\"br0\">)</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Asc</span><span class=\"br0\">(</span><span class=\"st0\">\"Z\"</span><span class=\"br0\">)</span><br/>                v = x - <span class=\"kw1\">Asc</span><span class=\"br0\">(</span><span class=\"st0\">\"A\"</span><span class=\"br0\">)</span> + <span class=\"nu0\">1</span> + <span class=\"nu0\">9</span><br/>            <span class=\"kw1\">Case</span> <span class=\"kw1\">Asc</span><span class=\"br0\">(</span><span class=\"st0\">\"*\"</span><span class=\"br0\">)</span><br/>                v= <span class=\"nu0\">36</span><br/>            <span class=\"kw1\">Case</span> <span class=\"kw1\">Asc</span><span class=\"br0\">(</span><span class=\"st0\">\"@\"</span><span class=\"br0\">)</span><br/>                v = <span class=\"nu0\">37</span><br/>            <span class=\"kw1\">Case</span> <span class=\"kw1\">Asc</span><span class=\"br0\">(</span><span class=\"st0\">\"#\"</span><span class=\"br0\">)</span><br/>                v = <span class=\"nu0\">38</span><br/>            <span class=\"kw1\">Case</span> <span class=\"kw1\">Else</span><br/>                <span class=\"kw1\">Print</span> <span class=\"st0\">\" found a invalid character, invalid cusip\"</span><br/>                <span class=\"kw1\">return</span><br/>        <span class=\"kw1\">End</span> Select<br/>\u00a0<br/>        <span class=\"kw1\">If</span> <span class=\"br0\">(</span>i And <span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> v = v * <span class=\"nu0\">2</span><br/>        sum = sum + v \\ <span class=\"nu0\">10</span> + v <span class=\"kw1\">Mod</span> <span class=\"nu0\">10</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    sum = <span class=\"br0\">(</span><span class=\"nu0\">10</span> - <span class=\"br0\">(</span>sum <span class=\"kw1\">Mod</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">Mod</span> <span class=\"nu0\">10</span><br/>    <span class=\"kw1\">If</span> sum = <span class=\"br0\">(</span>input_str<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span> - <span class=\"kw1\">Asc</span><span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>        <span class=\"kw1\">Print</span> <span class=\"st0\">\" is valid\"</span><br/>    <span class=\"kw1\">Else</span><br/>        <span class=\"kw1\">Print</span> <span class=\"st0\">\" is invalid\"</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/><span class=\"kw1\">Data</span> <span class=\"st0\">\"037833100\"</span>, <span class=\"st0\">\"17275R102\"</span>, <span class=\"st0\">\"38259P508\"</span><br/><span class=\"kw1\">Data</span> <span class=\"st0\">\"594918104\"</span>, <span class=\"st0\">\"68389X106\"</span>, <span class=\"st0\">\"68389X105\"</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> input_str<br/>\u00a0<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">6</span><br/>    <span class=\"kw1\">Read</span> input_str<br/>    cusip<span class=\"br0\">(</span>input_str<span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">InKey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Go", "loc": 51, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> isCusip<span class=\"sy1\">(</span>s <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">)</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">9</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span> <span class=\"sy1\">}</span><br/>    sum <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"nu0\">8</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        c <span class=\"sy2\">:=</span> s<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><br/>        <span class=\"kw1\">var</span> v <span class=\"kw4\">int</span><br/>        <span class=\"kw1\">switch</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">case</span> c &gt;<span class=\"sy2\">=</span> <span class=\"st0\">'0'</span> <span class=\"sy3\">&amp;&amp;</span> c <span class=\"sy3\">&lt;=</span> <span class=\"st0\">'9'</span><span class=\"sy1\">:</span><br/>                v <span class=\"sy2\">=</span> <span class=\"kw4\">int</span><span class=\"sy1\">(</span>c<span class=\"sy1\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">48</span><br/>            <span class=\"kw1\">case</span> c &gt;<span class=\"sy2\">=</span> <span class=\"st0\">'A'</span> <span class=\"sy3\">&amp;&amp;</span> c <span class=\"sy3\">&lt;=</span> <span class=\"st0\">'Z'</span><span class=\"sy1\">:</span><br/>                v <span class=\"sy2\">=</span> <span class=\"kw4\">int</span><span class=\"sy1\">(</span>c<span class=\"sy1\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">64</span><br/>            <span class=\"kw1\">case</span> c <span class=\"sy3\">==</span> <span class=\"st0\">'*'</span><span class=\"sy1\">:</span><br/>                v <span class=\"sy2\">=</span> <span class=\"nu0\">36</span><br/>            <span class=\"kw1\">case</span> c <span class=\"sy3\">==</span> <span class=\"st0\">'@'</span><span class=\"sy1\">:</span><br/>                v <span class=\"sy2\">=</span> <span class=\"nu0\">37</span><br/>            <span class=\"kw1\">case</span> c <span class=\"sy3\">==</span> <span class=\"st0\">'#'</span><span class=\"sy1\">:</span><br/>                v <span class=\"sy2\">=</span> <span class=\"nu0\">38</span><br/>            <span class=\"kw1\">default</span><span class=\"sy1\">:</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"nu2\">i</span> <span class=\"sy3\">%</span> <span class=\"nu0\">2</span> <span class=\"sy3\">==</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span> v <span class=\"sy2\">*=</span> <span class=\"nu0\">2</span> <span class=\"sy1\">}</span>  <span class=\"co1\">// check if odd as using 0-based indexing</span><br/>        sum <span class=\"sy2\">+=</span> v<span class=\"sy3\">/</span><span class=\"nu0\">10</span> <span class=\"sy3\">+</span> v<span class=\"sy3\">%</span><span class=\"nu0\">10</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">int</span><span class=\"sy1\">(</span>s<span class=\"sy1\">[</span><span class=\"nu0\">8</span><span class=\"sy1\">])</span> <span class=\"sy3\">-</span> <span class=\"nu0\">48</span> <span class=\"sy3\">==</span> <span class=\"sy1\">(</span><span class=\"nu0\">10</span> <span class=\"sy3\">-</span> <span class=\"sy1\">(</span>sum<span class=\"sy3\">%</span><span class=\"nu0\">10</span><span class=\"sy1\">))</span> <span class=\"sy3\">%</span> <span class=\"nu0\">10</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    candidates <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>        <span class=\"st0\">\"037833100\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"17275R102\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"38259P508\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"594918104\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"68389X106\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"68389X105\"</span><span class=\"sy1\">,</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> candidate <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> candidates <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">var</span> b <span class=\"kw4\">string</span><br/>        <span class=\"kw1\">if</span> isCusip<span class=\"sy1\">(</span>candidate<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            b <span class=\"sy2\">=</span> <span class=\"st0\">\"correct\"</span><br/>        <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>            b <span class=\"sy2\">=</span> <span class=\"st0\">\"incorrect\"</span><br/>        <span class=\"sy1\">}</span><br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"%s -&gt;\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> candidate<span class=\"sy1\">,</span> b<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0</pre>"}, {"lang": "Haskell", "loc": 48, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List<span class=\"br0\">(</span>elemIndex<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">data</span> Result <span class=\"sy0\">=</span> Valid <span class=\"sy0\">|</span> BadCheck <span class=\"sy0\">|</span> TooLong <span class=\"sy0\">|</span> TooShort <span class=\"sy0\">|</span> InvalidContent <span class=\"kw1\">deriving</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a><br/>\u00a0<br/>prependMaybe <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> a <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> <span class=\"br0\">[</span>a<span class=\"br0\">]</span><br/>prependMaybe <span class=\"br0\">(</span>Just v<span class=\"br0\">)</span> <span class=\"br0\">(</span>Just vs<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Just <span class=\"br0\">(</span>v:vs<span class=\"br0\">)</span><br/>prependMaybe <span class=\"sy0\">_</span> <span class=\"sy0\">_</span> <span class=\"sy0\">=</span> Nothing<br/>\u00a0<br/><span class=\"co1\">-- convert a list of Maybe to a Maybe list.</span><br/><span class=\"co1\">-- result is Nothing if any of values from the original list are Nothing</span><br/>allMaybe <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> <span class=\"br0\">[</span>a<span class=\"br0\">]</span><br/>allMaybe <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldr\"><span class=\"kw3\">foldr</span></a> prependMaybe <span class=\"br0\">(</span>Just <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <br/>\u00a0<br/>toValue <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>toValue c <span class=\"sy0\">=</span> elemIndex c <span class=\"sy0\">$</span> <span class=\"br0\">[</span><span class=\"st0\">'0'</span><span class=\"sy0\">..</span><span class=\"st0\">'9'</span><span class=\"br0\">]</span> <span class=\"sy0\">++</span> <span class=\"br0\">[</span><span class=\"st0\">'A'</span><span class=\"sy0\">..</span><span class=\"st0\">'Z'</span><span class=\"br0\">]</span> <span class=\"sy0\">++</span> <span class=\"st0\">\"*&amp;#\"</span> <br/>\u00a0<br/><span class=\"co1\">-- check a list of ints to see if they represent a valid CUSIP</span><br/>valid <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>valid ns0 <span class=\"sy0\">=</span> <br/>    <span class=\"kw1\">let</span> <span class=\"co1\">-- multiply values with even index by 2</span><br/>        ns1 <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> <span class=\"br0\">(</span>\\i n <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:odd\"><span class=\"kw3\">odd</span></a> i <span class=\"kw1\">then</span> n <span class=\"kw1\">else</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"br0\">]</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">8</span> ns0<br/>\u00a0<br/>        <span class=\"co1\">-- apply div/mod formula from site and sum up results</span><br/>        sm <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <span class=\"br0\">(</span>\\s <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span> s `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` <span class=\"nu0\">10</span> <span class=\"br0\">)</span> <span class=\"sy0\">+</span> s `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mod\"><span class=\"kw3\">mod</span></a>` <span class=\"nu0\">10</span><span class=\"br0\">)</span> ns1<br/>\u00a0<br/>    <span class=\"kw1\">in</span>  <span class=\"co1\">-- apply mod/mod formula from site and compare to last value in list</span><br/>        ns0<span class=\"sy0\">!!</span><span class=\"nu0\">8</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span><span class=\"nu0\">10</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>sm `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mod\"><span class=\"kw3\">mod</span></a>` <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span> `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mod\"><span class=\"kw3\">mod</span></a>` <span class=\"nu0\">10</span><br/>\u00a0<br/><span class=\"co1\">-- check a String to see if it represents a valid CUSIP</span><br/>checkCUSIP <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> Result<br/>checkCUSIP cs <br/>       <span class=\"sy0\">|</span> l <span class=\"sy0\">&lt;</span> <span class=\"nu0\">9</span>     <span class=\"sy0\">=</span> TooShort<br/>       <span class=\"sy0\">|</span> l <span class=\"sy0\">&gt;</span> <span class=\"nu0\">9</span>     <span class=\"sy0\">=</span> TooLong<br/>       <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span> <span class=\"kw1\">case</span> allMaybe <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> toValue cs<span class=\"br0\">)</span> <span class=\"kw1\">of</span><br/>                         Nothing <span class=\"sy0\">-&gt;</span> InvalidContent<br/>                         Just ns <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">if</span> valid ns <span class=\"kw1\">then</span> Valid <span class=\"kw1\">else</span> BadCheck<br/>    <span class=\"kw1\">where</span> l <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> cs<br/>\u00a0<br/>testData <span class=\"sy0\">=</span>  <br/>    <span class=\"br0\">[</span> <span class=\"st0\">\"037833100\"</span><br/>    <span class=\"sy0\">,</span> <span class=\"st0\">\"17275R102\"</span><br/>    <span class=\"sy0\">,</span> <span class=\"st0\">\"38259P508\"</span><br/>    <span class=\"sy0\">,</span> <span class=\"st0\">\"594918104\"</span><br/>    <span class=\"sy0\">,</span> <span class=\"st0\">\"68389X106\"</span><br/>    <span class=\"sy0\">,</span> <span class=\"st0\">\"68389X105\"</span><br/>    <span class=\"br0\">]</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <span class=\"br0\">(</span>\\s <span class=\"sy0\">-&gt;</span> s <span class=\"sy0\">++</span> <span class=\"st0\">\": \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"br0\">(</span>checkCUSIP s<span class=\"br0\">)</span><span class=\"br0\">)</span> testData<span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 40, "block": "<pre class=\"icon highlighted_source\"><span class=\"co1\"># cusip.icn -- Committee on Uniform Security Identification Procedures</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   <span class=\"kw2\">local</span> code<span class=\"sy1\">,</span> codes<br/>   codes <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"st0\">\"037833100\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"17275R102\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"38259P508\"</span><span class=\"sy1\">,</span><br/>            <span class=\"st0\">\"594918104\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"68389X106\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"68389X105\"</span><span class=\"br0\">]</span><br/>   <span class=\"kw1\">while</span> code <span class=\"sy1\">:=</span> <span class=\"kw4\">pop</span><span class=\"br0\">(</span>codes<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>      <span class=\"kw4\">writes</span><span class=\"br0\">(</span>code<span class=\"sy1\">,</span> <span class=\"st0\">\"\u00a0: \"</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> check_code<span class=\"br0\">(</span>code<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>         <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"valid.\"</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">else</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"not valid.\"</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> check_code<span class=\"br0\">(</span>c<span class=\"br0\">)</span><br/>   <span class=\"kw2\">local</span> p<span class=\"sy1\">,</span> sum<span class=\"sy1\">,</span> value<br/>   <span class=\"kw2\">static</span> codetable<br/>   <span class=\"kw1\">initial</span> codetable <span class=\"sy1\">:=</span> buildtable<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>   sum   <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span><br/>   value <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span><br/>   <span class=\"kw1\">every</span> p <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">8</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> p <span class=\"sy1\">%</span> <span class=\"nu0\">2</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span>    <span class=\"co1\"># odd position</span><br/>         value <span class=\"sy1\">:=</span> codetable<span class=\"br0\">[</span>c<span class=\"br0\">[</span>p<span class=\"br0\">]</span><span class=\"br0\">]</span> <br/>      <span class=\"kw1\">else</span>                 <span class=\"co1\"># even position</span><br/>         value <span class=\"sy1\">:=</span> <span class=\"nu0\">2</span> <span class=\"sy1\">*</span> codetable<span class=\"br0\">[</span>c<span class=\"br0\">[</span>p<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>      sum <span class=\"sy1\">+:=</span> <span class=\"br0\">(</span>value <span class=\"sy1\">/</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"br0\">(</span>value <span class=\"sy1\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>   sum <span class=\"sy1\">:=</span> <span class=\"br0\">(</span><span class=\"nu0\">10</span> <span class=\"sy1\">-</span> <span class=\"br0\">(</span>sum <span class=\"sy1\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">%</span> <span class=\"nu0\">10</span><br/>   <span class=\"kw1\">if</span> sum <span class=\"sy1\">=</span> c<span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"br0\">]</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"kw1\">else</span> <span class=\"kw1\">fail</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> buildtable<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   <span class=\"kw2\">local</span> chars<span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> t<br/>   t <span class=\"sy1\">:=</span> <span class=\"kw4\">table</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   chars <span class=\"sy1\">:=</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">digits</span> <span class=\"sy1\">||</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">ucase</span> <span class=\"sy1\">||</span> <span class=\"st0\">\"*@#\"</span><br/>   <span class=\"kw1\">every</span> n <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"sy1\">*</span>chars <span class=\"kw1\">do</span><br/>      t<span class=\"br0\">[</span>chars<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"br0\">(</span>n <span class=\"sy1\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">return</span> t<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 3, "block": "<pre class=\"j highlighted_source\">   ccd =. <span class=\"nu0\">10</span> | <span class=\"nu0\">10</span> - <span class=\"nu0\">10</span> | [: +/ [: , <span class=\"nu0\">10</span> <span class=\"sy0\">(</span>#.^:<span class=\"nu0\">_1</span><span class=\"sy0\">)</span> <span class=\"sy0\">(</span><span class=\"nu0\">8</span> $ <span class=\"nu0\">1</span> <span class=\"nu0\">2</span><span class=\"sy0\">)</span> * <span class=\"st_h\">'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ*@#'</span> i. ]<br/>   ccd <span class=\"st_h\">'68389X10'</span><br/><span class=\"nu0\">5</span></pre>"}, {"lang": "Java", "loc": 43, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.List</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Cusip <span class=\"br0\">{</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aboolean+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Boolean</span></a> isCusip<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">7</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">char</span> c <span class=\"sy0\">=</span> s.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw4\">int</span> v<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">&gt;=</span> <span class=\"st0\">'0'</span> <span class=\"sy0\">&amp;&amp;</span> c <span class=\"sy0\">&lt;=</span> <span class=\"st0\">'9'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                v <span class=\"sy0\">=</span> c <span class=\"sy0\">-</span> <span class=\"nu0\">48</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">&gt;=</span> <span class=\"st0\">'A'</span> <span class=\"sy0\">&amp;&amp;</span> c <span class=\"sy0\">&lt;=</span> <span class=\"st0\">'Z'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                v <span class=\"sy0\">=</span> c <span class=\"sy0\">-</span> <span class=\"nu0\">64</span><span class=\"sy0\">;</span>  <span class=\"co1\">// lower case letters apparently invalid</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> <span class=\"st0\">'*'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                v <span class=\"sy0\">=</span> <span class=\"nu0\">36</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> <span class=\"st0\">'@'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                v <span class=\"sy0\">=</span> <span class=\"nu0\">37</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> <span class=\"st0\">'#'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                v <span class=\"sy0\">=</span> <span class=\"nu0\">38</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> v <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span>  <span class=\"co1\">// check if odd as using 0-based indexing</span><br/>            sum <span class=\"sy0\">+=</span> v <span class=\"sy0\">/</span> <span class=\"nu0\">10</span> <span class=\"sy0\">+</span> v <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> s.<span class=\"me1\">charAt</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">48</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span><span class=\"nu0\">10</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>sum <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> candidates <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Alist+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">List</span></a>.<span class=\"me1\">of</span><span class=\"br0\">(</span><br/>                <span class=\"st0\">\"037833100\"</span>,<br/>                <span class=\"st0\">\"17275R102\"</span>,<br/>                <span class=\"st0\">\"38259P508\"</span>,<br/>                <span class=\"st0\">\"594918104\"</span>,<br/>                <span class=\"st0\">\"68389X106\"</span>,<br/>                <span class=\"st0\">\"68389X105\"</span><br/>        <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> candidate <span class=\"sy0\">:</span> candidates<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s -&gt;\u00a0%s%n\"</span>, candidate, isCusip<span class=\"br0\">(</span>candidate<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"correct\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"incorrect\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 33, "block": "<pre class=\"text highlighted_source\">module CUSIP<br/>\u00a0<br/>function _lastdigitcusip(input::AbstractString)<br/>    input = uppercase(input)<br/>    s = 0<br/>\u00a0<br/>    for (i, c) in enumerate(input)<br/>        if isdigit(c)<br/>            v = Int(c) - 48<br/>        elseif isalpha(c)<br/>            v = Int(c) - 64 + 9<br/>        elseif c == '*'<br/>            v = 36<br/>        elseif c == '@'<br/>            v = 37<br/>        elseif c == '#'<br/>            v = 38<br/>        end<br/>\u00a0<br/>        if iseven(i); v *= 2 end<br/>        s += div(v, 10) + rem(v, 10)<br/>    end<br/>\u00a0<br/>    return Char(rem(10 - rem(s, 10), 10) + 48)<br/>end<br/>\u00a0<br/>checkdigit(input::AbstractString) = input[9] == _lastdigitcusip(input[1:8])<br/>\u00a0<br/>end  # module CUSIP<br/>\u00a0<br/>for code in (\"037833100\", \"17275R102\", \"38259P508\", \"594918104\", \"68389X106\", \"68389X105\")<br/>    println(\"$code is \", CUSIP.checkdigit(code)\u00a0? \"correct.\"\u00a0: \"not correct.\")<br/>end</pre>"}, {"lang": "Kotlin", "loc": 33, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.0</span><br/>\u00a0<br/>fun isCusip<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>s.<span class=\"me1\">length</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> c <span class=\"sy0\">=</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> v <span class=\"sy0\">=</span> when <span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            in <span class=\"st0\">'0'</span>..<span class=\"st0\">'9'</span>  -<span class=\"sy0\">&gt;</span> c.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span> - <span class=\"nu0\">48</span><br/>            in <span class=\"st0\">'A'</span>..<span class=\"st0\">'Z'</span>  -<span class=\"sy0\">&gt;</span> c.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span> - <span class=\"nu0\">64</span>  <span class=\"co1\">// lower case letters apparently invalid</span><br/>            <span class=\"st0\">'*'</span>          -<span class=\"sy0\">&gt;</span> <span class=\"nu0\">36</span><br/>            <span class=\"st0\">'@'</span>          -<span class=\"sy0\">&gt;</span> <span class=\"nu0\">37</span><br/>            <span class=\"st0\">'#'</span>          -<span class=\"sy0\">&gt;</span> <span class=\"nu0\">38</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a>         -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> v <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span>  <span class=\"co1\">// check if odd as using 0-based indexing</span><br/>        sum +<span class=\"sy0\">=</span> v / <span class=\"nu0\">10</span> + v <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> s<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span> - <span class=\"nu0\">48</span>  <span class=\"sy0\">==</span> <span class=\"br0\">(</span><span class=\"nu0\">10</span> - <span class=\"br0\">(</span>sum <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> candidates <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><br/>        <span class=\"st0\">\"037833100\"</span>,<br/>        <span class=\"st0\">\"17275R102\"</span>,<br/>        <span class=\"st0\">\"38259P508\"</span>,<br/>        <span class=\"st0\">\"594918104\"</span>,<br/>        <span class=\"st0\">\"68389X106\"</span>,<br/>        <span class=\"st0\">\"68389X105\"</span><br/>    <span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>candidate in candidates<span class=\"br0\">)</span> <br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"$candidate -&gt; ${if(isCusip(candidate)) \"</span>correct<span class=\"st0\">\" else \"</span>incorrect<span class=\"st0\">\"}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 44, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> checkDigit <span class=\"br0\">(</span>cusip<span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> <span class=\"sy0\">#</span>cusip <span class=\"sy0\">~=</span> <span class=\"nu0\">8</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"kw4\">false</span> <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">local</span> sum<span class=\"sy0\">,</span> c<span class=\"sy0\">,</span> v<span class=\"sy0\">,</span> p <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span> <span class=\"kw1\">do</span><br/>    c <span class=\"sy0\">=</span> cusip<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> c<span class=\"sy0\">:</span>match<span class=\"br0\">(</span><span class=\"st0\">\"%d\"</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      v <span class=\"sy0\">=</span> <span class=\"kw3\">tonumber</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><br/>    <span class=\"kw1\">elseif</span> c<span class=\"sy0\">:</span>match<span class=\"br0\">(</span><span class=\"st0\">\"%a\"</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      p <span class=\"sy0\">=</span> <span class=\"kw3\">string.byte</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">64</span><br/>      v <span class=\"sy0\">=</span> p <span class=\"sy0\">+</span> <span class=\"nu0\">9</span><br/>    <span class=\"kw1\">elseif</span> c <span class=\"sy0\">==</span> <span class=\"st0\">\"*\"</span> <span class=\"kw1\">then</span><br/>      v <span class=\"sy0\">=</span> <span class=\"nu0\">36</span><br/>    <span class=\"kw1\">elseif</span> c <span class=\"sy0\">==</span> <span class=\"st0\">\"@\"</span> <span class=\"kw1\">then</span><br/>      v <span class=\"sy0\">=</span> <span class=\"nu0\">37</span><br/>    <span class=\"kw1\">elseif</span> c <span class=\"sy0\">==</span> <span class=\"st0\">\"#\"</span> <span class=\"kw1\">then</span><br/>      v <span class=\"sy0\">=</span> <span class=\"nu0\">38</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> i <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>      v <span class=\"sy0\">=</span> v <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    sum <span class=\"sy0\">=</span> sum <span class=\"sy0\">+</span> <span class=\"kw3\">math.floor</span><span class=\"br0\">(</span>v <span class=\"sy0\">/</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> v <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"kw3\">tostring</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">10</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>sum <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">local</span> testCases <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>  <span class=\"st0\">\"037833100\"</span><span class=\"sy0\">,</span><br/>  <span class=\"st0\">\"17275R102\"</span><span class=\"sy0\">,</span><br/>  <span class=\"st0\">\"38259P508\"</span><span class=\"sy0\">,</span><br/>  <span class=\"st0\">\"594918104\"</span><span class=\"sy0\">,</span><br/>  <span class=\"st0\">\"68389X106\"</span><span class=\"sy0\">,</span><br/>  <span class=\"st0\">\"68389X105\"</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> _<span class=\"sy0\">,</span> CUSIP <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>testCases<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw3\">io.write</span><span class=\"br0\">(</span>CUSIP <span class=\"sy0\">..</span> <span class=\"st0\">\": \"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> checkDigit<span class=\"br0\">(</span>CUSIP<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> CUSIP<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"VALID\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">else</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"INVALID\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Nim", "loc": 41, "block": "<pre class=\"text highlighted_source\">import strutils<br/>\u00a0<br/>proc cusipCheck(cusip: string): bool =<br/>  if cusip.len\u00a0!= 9:<br/>    return false<br/>\u00a0<br/>  var <br/>    sum, v = 0<br/>  for i, c in cusip[0 ..&lt; ^1]:<br/>    if c.isDigit:<br/>      v = parseInt($c)<br/>    elif c.isUpperAscii:<br/>      v = ord(c) - ord('A') + 10<br/>    elif c == '*':<br/>      v = 36<br/>    elif c == '@':<br/>      v = 37<br/>    elif c == '#':<br/>      v = 38<br/>\u00a0<br/>    if i mod 2 == 1:<br/>      v *= 2<br/>\u00a0<br/>    sum += v div 10 + v mod 10<br/>  let check = (10 - (sum mod 10)) mod 10<br/>  return $check == $cusip[^1]<br/>\u00a0<br/>proc main =<br/>  let codes = [<br/>    \"037833100\",<br/>    \"17275R102\",<br/>    \"38259P508\",<br/>    \"594918104\",<br/>    \"68389X106\",<br/>    \"68389X105\"<br/>  ]<br/>\u00a0<br/>  for code in codes:<br/>    echo code, \": \", if cusipCheck(code): \"Valid\" else: \"Invalid\"<br/>\u00a0<br/>main()</pre>"}, {"lang": "Perl", "loc": 66, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$ALGORITHM_LETTER_START_VALUE</span> <span class=\"sy0\">=</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$ALGORITHM_TEN</span>                <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$CUSIP_CHECK_DIGIT_INDEX</span>      <span class=\"sy0\">=</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$CUSIP_DATA_LAST_INDEX</span>        <span class=\"sy0\">=</span> <span class=\"nu0\">7</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"sy0\">%</span><a href=\"http://perldoc.perl.org/functions/values.html\"><span class=\"kw3\">values</span></a> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><br/>    <span class=\"st_h\">'037833100'</span> <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'Apple Incorporated'</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'17275R102'</span> <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'Cisco Systems'</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'38259P508'</span> <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'Google Incorporated'</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'594918104'</span> <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'Microsoft Corporation'</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'68389X106'</span> <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'Oracle Corporation'</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'68389X105'</span> <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'Oracle Corporation'</span><span class=\"sy0\">,</span><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Character-value look-up table</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">%cv</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><br/>    <a href=\"http://perldoc.perl.org/functions/q.html\"><span class=\"kw3\">q</span></a><span class=\"br0\">[</span><span class=\"sy0\">*</span><span class=\"br0\">]</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">36</span><span class=\"sy0\">,</span><br/>    <a href=\"http://perldoc.perl.org/functions/q.html\"><span class=\"kw3\">q</span></a><span class=\"br0\">[</span><span class=\"sy0\">@</span><span class=\"br0\">]</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">37</span><span class=\"sy0\">,</span><br/>    <a href=\"http://perldoc.perl.org/functions/q.html\"><span class=\"kw3\">q</span></a><span class=\"br0\">[</span><span class=\"co1\">#] =&gt; 38,</span><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$inc</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"st_h\">'0'</span> <span class=\"sy0\">..</span> <span class=\"st_h\">'9'</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$cv</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"re0\">$inc</span><span class=\"sy0\">++;</span><br/><span class=\"br0\">}</span><br/><span class=\"re0\">$inc</span> <span class=\"sy0\">=</span> <span class=\"re0\">$ALGORITHM_LETTER_START_VALUE</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"st_h\">'A'</span> <span class=\"sy0\">..</span> <span class=\"st_h\">'Z'</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$cv</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"sy0\">++</span><span class=\"re0\">$inc</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span> <a href=\"http://perldoc.perl.org/functions/keys.html\"><span class=\"kw3\">keys</span></a> <span class=\"sy0\">%</span><a href=\"http://perldoc.perl.org/functions/values.html\"><span class=\"kw3\">values</span></a> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    say <span class=\"st0\">\"$_ $values{$_}\"</span> <span class=\"sy0\">.</span> cusip_check_digit<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> cusip_check_digit <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@cusip</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a> <a href=\"http://perldoc.perl.org/functions/m.html\"><span class=\"kw3\">m</span></a><span class=\"br0\">{</span><span class=\"br0\">}</span>xms<span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span>    <span class=\"co1\"># 9-digit CUSIP string to char array</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$sum</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$CUSIP_DATA_LAST_INDEX</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$v</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"re0\">$cusip</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=~</span> <a href=\"http://perldoc.perl.org/functions/m.html\"><span class=\"kw3\">m</span></a><span class=\"br0\">{</span><span class=\"re0\">\\A</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"sy0\">:</span>digit<span class=\"sy0\">:</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"sy0\">:</span>upper<span class=\"sy0\">:</span><span class=\"br0\">]</span><span class=\"sy0\">*@</span><span class=\"co1\">#] \\z}xms ) {</span><br/>            <span class=\"re0\">$v</span> <span class=\"sy0\">=</span> <span class=\"re0\">$cv</span><span class=\"br0\">{</span> <span class=\"re0\">$cusip</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"st_h\">'Invalid character found'</span><span class=\"sy0\">;</span>    <span class=\"co1\"># Return value on failure</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"re0\">$i</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$v</span> <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"re0\">$sum</span> <span class=\"sy0\">+=</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a><span class=\"br0\">(</span> <span class=\"re0\">$v</span> <span class=\"sy0\">/</span> <span class=\"re0\">$ALGORITHM_TEN</span> <span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"re0\">$v</span> <span class=\"sy0\">%</span> <span class=\"re0\">$ALGORITHM_TEN</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$check_digit</span> <span class=\"sy0\">=</span><br/>      <span class=\"br0\">(</span> <span class=\"re0\">$ALGORITHM_TEN</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span> <span class=\"re0\">$sum</span> <span class=\"sy0\">%</span> <span class=\"re0\">$ALGORITHM_TEN</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"re0\">$ALGORITHM_TEN</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"re0\">$check_digit</span> <span class=\"sy0\">==</span> <span class=\"re0\">$cusip</span><span class=\"br0\">[</span><span class=\"re0\">$CUSIP_CHECK_DIGIT_INDEX</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <a href=\"http://perldoc.perl.org/functions/q.html\"><span class=\"kw3\">q</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>    <span class=\"co1\"># Return empty string on success</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"st_h\">' (incorrect)'</span><span class=\"sy0\">;</span>    <span class=\"co1\"># Return value on failure</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 18, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> divmod <span class=\"br0\">(</span><span class=\"re0\">$v</span><span class=\"sy0\">,</span> <span class=\"re0\">$r</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$v</span> <span class=\"kw1\">div</span> <span class=\"re0\">$r</span><span class=\"sy0\">,</span> <span class=\"re0\">$v</span> mod <span class=\"re0\">$r</span> <span class=\"br0\">}</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">%chr</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>flat <span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"st_h\">'A'</span><span class=\"sy0\">..</span><span class=\"st_h\">'Z'</span><span class=\"sy0\">,</span> <span class=\"sy0\">&lt;*</span> <span class=\"sy0\">@</span> <span class=\"co1\">#&gt;) Z=&gt; 0..*;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> cuisp<span class=\"sy0\">-</span>check <span class=\"br0\">(</span><span class=\"re0\">$cuisp</span> <span class=\"kw1\">where</span> <span class=\"sy0\">*.</span><span class=\"kw3\">chars</span> <span class=\"sy0\">==</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$code</span><span class=\"sy0\">,</span> <span class=\"re0\">$chk</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">$cuisp</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$sum</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"re0\">$code</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"sy0\">.</span><span class=\"kw3\">kv</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$^k</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"re0\">%chr</span><span class=\"br0\">{</span><span class=\"re0\">$^v</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"re0\">&amp;divmod</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    so <span class=\"br0\">(</span><span class=\"nu0\">10</span> <span class=\"sy0\">-</span> <span class=\"re0\">$sum</span> mod <span class=\"nu0\">10</span><span class=\"br0\">)</span> mod <span class=\"nu0\">10</span> <span class=\"kw1\">eq</span> <span class=\"re0\">$chk</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># TESTING</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"$_: \"</span><span class=\"sy0\">,</span> <span class=\"re0\">$_</span><span class=\"sy0\">.</span><span class=\"re0\">&amp;cuisp</span><span class=\"sy0\">-</span>check <span class=\"kw1\">for</span> <span class=\"sy0\">&lt;</span><br/>037833100<br/>17275R102<br/>38259P508<br/><span class=\"nu0\">594918104</span><br/>68389X106<br/>68389X105<br/><span class=\"sy0\">&gt;</span></pre>"}, {"lang": "Phix", "loc": 40, "block": "<pre class=\"text highlighted_source\">sequence cch = {}<br/>\u00a0<br/>function CusipCheckDigit(string cusip)<br/>integer s = 0, c, v<br/>    if length(cch)=0 then<br/>        cch = repeat(-1,256)<br/>        for i='0' to '9' do<br/>            cch[i] = i-'0'<br/>        end for<br/>        for i='A' to 'Z' do<br/>            cch[i] = i-55<br/>        end for<br/>        cch['*'] = 36<br/>        cch['@'] = 37<br/>        cch['#'] = 38<br/>    end if<br/>    if length(cusip)!=9 or find('\\0',cusip) then return 0 end if<br/>    for i=1 to 8 do<br/>        c\u00a0:= cusip[i]<br/>        v\u00a0:= cch[c]<br/>        if v=-1 then return 0 end if<br/>        if remainder(i,2)=0 then<br/>            v *= 2<br/>        end if<br/>        s += floor(v/10)+mod(v,10)<br/>    end for<br/>    return cusip[9]=mod(10-mod(s,10),10)+'0'<br/>end function<br/>\u00a0<br/>sequence tests = {\"037833100\",  -- Apple Incorporated<br/>                  \"17275R102\",  -- Cisco Systems<br/>                  \"38259P508\",  -- Google Incorporated<br/>                  \"594918104\",  -- Microsoft Corporation<br/>                  \"68389X106\",  -- Oracle Corporation   (incorrect)<br/>                  \"68389X105\"}  -- Oracle Corporation<br/>\u00a0<br/>for i=1 to length(tests) do<br/>    string ti = tests[i]<br/>    printf(1,\"%s\u00a0:\u00a0%s\\n\",{ti,{\"invalid\",\"valid\"}[CusipCheckDigit(ti)+1]})<br/>end for</pre>"}, {"lang": "PicoLisp", "loc": 29, "block": "<pre class=\"text highlighted_source\">(de cusip (Str)<br/>   (let (Str (mapcar char (chop Str))  S 0)<br/>      (for (I . C) (head 8 Str)<br/>         (let V<br/>            (cond<br/>               ((&lt;= 48 C 57) (- C 48))<br/>               ((&lt;= 65 C 90) (+ 10 (- C 65)))<br/>               ((= C 42) 36)<br/>               ((= C 64) 37)<br/>               ((= C 35) 38) )<br/>            (or<br/>               (bit? 1 I)<br/>               (setq V (&gt;&gt; -1 V)) )<br/>            (inc<br/>               'S<br/>               (+ (/ V 10) (% V 10)) ) ) )<br/>      (=<br/>         (- (last Str) 48)<br/>         (% (- 10 (% S 10)) 10) ) ) )<br/>\u00a0<br/>(println<br/>   (mapcar<br/>      cusip<br/>      (quote<br/>         \"037833100\"<br/>         \"17275R102\"<br/>         \"38259P508\"<br/>         \"68389X106\"<br/>         \"68389X105\" ) ) )</pre>"}, {"lang": "Python", "loc": 43, "block": "<pre class=\"python highlighted_source\"><span class=\"co1\">#!/usr/bin/env python3</span><br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"kw3\">math</span><br/>\u00a0<br/><span class=\"kw1\">def</span> cusip_check<span class=\"br0\">(</span>cusip<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>cusip<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">9</span>:<br/>        <span class=\"kw1\">raise</span> <span class=\"kw2\">ValueError</span><span class=\"br0\">(</span><span class=\"st0\">'CUSIP must be 9 characters'</span><span class=\"br0\">)</span><br/>\u00a0<br/>    cusip <span class=\"sy0\">=</span> cusip.<span class=\"me1\">upper</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    total <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span>:<br/>        c <span class=\"sy0\">=</span> cusip<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>        <span class=\"kw1\">if</span> c.<span class=\"me1\">isdigit</span><span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>            v <span class=\"sy0\">=</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><br/>        <span class=\"kw1\">elif</span> c.<span class=\"me1\">isalpha</span><span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>            p <span class=\"sy0\">=</span> <span class=\"kw2\">ord</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> - <span class=\"kw2\">ord</span><span class=\"br0\">(</span><span class=\"st0\">'A'</span><span class=\"br0\">)</span> + <span class=\"nu0\">1</span><br/>            v <span class=\"sy0\">=</span> p + <span class=\"nu0\">9</span><br/>        <span class=\"kw1\">elif</span> c <span class=\"sy0\">==</span> <span class=\"st0\">'*'</span>:<br/>            v <span class=\"sy0\">=</span> <span class=\"nu0\">36</span><br/>        <span class=\"kw1\">elif</span> c <span class=\"sy0\">==</span> <span class=\"st0\">'@'</span>:<br/>            v <span class=\"sy0\">=</span> <span class=\"nu0\">37</span><br/>        <span class=\"kw1\">elif</span> c <span class=\"sy0\">==</span> <span class=\"st0\">'#'</span>:<br/>            v <span class=\"sy0\">=</span> <span class=\"nu0\">38</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> i\u00a0% <span class=\"nu0\">2</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span>:<br/>            v *<span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>\u00a0<br/>        total +<span class=\"sy0\">=</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span>v / <span class=\"nu0\">10</span><span class=\"br0\">)</span> + v\u00a0% <span class=\"nu0\">10</span><br/>    check <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">10</span> - <span class=\"br0\">(</span>total\u00a0% <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0% <span class=\"nu0\">10</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">str</span><span class=\"br0\">(</span>check<span class=\"br0\">)</span> <span class=\"sy0\">==</span> cusip<span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    codes <span class=\"sy0\">=</span> <span class=\"br0\">[</span><br/>            <span class=\"st0\">'037833100'</span><span class=\"sy0\">,</span><br/>            <span class=\"st0\">'17275R102'</span><span class=\"sy0\">,</span><br/>            <span class=\"st0\">'38259P508'</span><span class=\"sy0\">,</span><br/>            <span class=\"st0\">'594918104'</span><span class=\"sy0\">,</span><br/>            <span class=\"st0\">'68389X106'</span><span class=\"sy0\">,</span><br/>            <span class=\"st0\">'68389X105'</span><br/>            <span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"kw3\">code</span> <span class=\"kw1\">in</span> codes:<br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span>f<span class=\"st0\">'{code} -&gt; {cusip_check(code)}'</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 37, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(require srfi/14)<br/>\u00a0<br/>(define 0-char (char-&gt;integer #\\0))<br/>(define A-char (char-&gt;integer #\\A))<br/>\u00a0<br/>(define (cusip-value c)  <br/>  (cond<br/>    [(char-set-contains? char-set:digit c)<br/>     (- (char-&gt;integer c) 0-char)]<br/>    [(char-set-contains? char-set:upper-case c)<br/>     (+ 10 (- (char-&gt;integer c) A-char))]<br/>    [(char=? c #\\*) 36]<br/>    [(char=? c #\\@) 37]<br/>    [(char=? c #\\#) 38]))<br/>\u00a0<br/>(define (cusip-check-digit cusip)<br/>  (modulo<br/>   (- 10<br/>      (modulo<br/>       (for/sum<br/>        ((i (sequence-map add1 (in-range 8))) (c (in-string cusip)))<br/>         (let* ((v (cusip-value c)) (v\u2032 (if (even? i) (* v 2) v)))<br/>           (+ (quotient v\u2032 10) (modulo v\u2032 10)))) 10)) 10))<br/>\u00a0<br/>(define (CUSIP? s)<br/>  (char=? (string-ref s (sub1 (string-length s)))<br/>          (integer-&gt;char (+ 0-char (cusip-check-digit s)))))<br/>\u00a0<br/>(module+ test<br/>  (require rackunit)         <br/>  (check-true (CUSIP? \"037833100\"))<br/>  (check-true (CUSIP? \"17275R102\"))<br/>  (check-true (CUSIP? \"38259P508\"))<br/>  (check-true (CUSIP? \"594918104\"))<br/>  (check-false (CUSIP? \"68389X106\"))<br/>  (check-true (CUSIP? \"68389X105\")))</pre>"}, {"lang": "REXX", "loc": 32, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program validates that the  last digit (the check digit)  of a  CUSIP  is valid. */</span><br/>@<span class=\"sy0\">.</span>=<br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> @<span class=\"sy0\">.</span>1 <span class=\"sy0\">.</span><br/><span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>1==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> @<span class=\"sy0\">.</span>1==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;   @<span class=\"sy0\">.</span>1= 037833100       <span class=\"coMULTI\">/* Apple Incorporated            */</span><br/>                                  @<span class=\"sy0\">.</span>2= 17275R102       <span class=\"coMULTI\">/* Cisco Systems                 */</span><br/>                                  @<span class=\"sy0\">.</span>3= 38259P508       <span class=\"coMULTI\">/* Google Incorporated           */</span><br/>                                  @<span class=\"sy0\">.</span>4= <span class=\"nu0\">594918104</span>       <span class=\"coMULTI\">/* Microsoft Corporation         */</span><br/>                                  @<span class=\"sy0\">.</span>5= 68389X106       <span class=\"coMULTI\">/* Oracle Corporation (incorrect)*/</span><br/>                                  @<span class=\"sy0\">.</span>6= 68389X105       <span class=\"coMULTI\">/* Oracle Corporation            */</span><br/>                             <span class=\"kw3\">end</span><br/>\u00a0<br/>     <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">while</span> @<span class=\"sy0\">.</span>j<span class=\"sy0\">\\</span>=<span class=\"st0\">''</span>;   chkDig=CUSIPchk<span class=\"br0\">(</span>@<span class=\"sy0\">.</span>j<span class=\"br0\">)</span>     <span class=\"coMULTI\">/*calculate check digit from func*/</span><br/>     OK=<span class=\"kw6\">word</span><span class=\"br0\">(</span><span class=\"st0\">\"isn't is\"</span>, <span class=\"nu0\">1</span> + <span class=\"br0\">(</span>chkDig==<span class=\"kw6\">right</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>j,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"coMULTI\">/*validate  check digit with func*/</span><br/>     <span class=\"kw1\">say</span> <span class=\"st0\">'CUSIP '</span>    @<span class=\"sy0\">.</span>j    <span class=\"kw6\">right</span><span class=\"br0\">(</span>OK, <span class=\"nu0\">6</span><span class=\"br0\">)</span>     <span class=\"st0\">\"valid.\"</span>  <span class=\"coMULTI\">/*display the CUSIP and validity.*/</span><br/>     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>CUSIPchk: <span class=\"kw1\">procedure</span>;  <span class=\"kw1\">arg</span> x <span class=\"nu0\">9</span>;  $=<span class=\"nu0\">0</span>;                     abc= <span class=\"st0\">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span><br/>                                       <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"nu0\">8</span><br/>                                       y=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>x, k, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                                          <span class=\"kw1\">select</span><br/>                                          <span class=\"kw3\">when</span> <span class=\"kw6\">datatype</span><span class=\"br0\">(</span>y,<span class=\"st0\">'W'</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> #=y<br/>                                          <span class=\"kw3\">when</span> <span class=\"kw6\">datatype</span><span class=\"br0\">(</span>y,<span class=\"st0\">'U'</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> #=<span class=\"kw6\">pos</span><span class=\"br0\">(</span>y, abc<span class=\"br0\">)</span> + <span class=\"nu0\">9</span><br/>                                          <span class=\"kw3\">when</span>          y==<span class=\"st0\">'*'</span>  <span class=\"kw3\">then</span> #=<span class=\"nu0\">36</span><br/>                                          <span class=\"kw3\">when</span>          y==<span class=\"st0\">'@'</span>  <span class=\"kw3\">then</span> #=<span class=\"nu0\">37</span><br/>                                          <span class=\"kw3\">when</span>          y==<span class=\"st0\">'#'</span>  <span class=\"kw3\">then</span> #=<span class=\"nu0\">38</span><br/>                                          <span class=\"kw3\">otherwise</span>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>       <span class=\"coMULTI\">/*invalid character.*/</span><br/>                                          <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*select*/</span><br/>                                       <span class=\"kw1\">if</span> k<span class=\"sy0\">//</span><span class=\"nu0\">2</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> #=#+#       <span class=\"coMULTI\">/*K even?  Double it*/</span><br/>                                       $=$ + #%10 + #<span class=\"sy0\">//</span><span class=\"nu0\">10</span><br/>                                       <span class=\"kw3\">end</span>      <span class=\"coMULTI\">/*k*/</span><br/>           <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"nu0\">10</span>- $<span class=\"sy0\">//</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">//</span> <span class=\"nu0\">10</span></pre>"}, {"lang": "Ring", "loc": 59, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: CUSIP<br/>\u00a0<br/>inputstr = list(6)<br/>inputstr[1] = \"037833100\"<br/>inputstr[2] = \"17275R102\"<br/>inputstr[3] = \"38259P508\"<br/>inputstr[4] = \"594918104\"<br/>inputstr[5] = \"68389X106\"<br/>inputstr[6] = \"68389X105\"<br/>for n = 1 to len(inputstr)<br/>     cusip(inputstr[n])<br/>next<br/>\u00a0<br/>func cusip(inputstr) <br/>        if len(inputstr)\u00a0!= 9<br/>            see \" length is incorrect, invalid cusip\"<br/>            return<br/>        ok<br/>        v = 0<br/>        sum = 0<br/>        for i = 1 to 8<br/>             flag = 0<br/>             x = ascii(inputstr[i])<br/>             if x &gt;= ascii(\"0\") and x &lt;= ascii(\"9\")<br/>                v = x - ascii(\"0\")<br/>                flag = 1<br/>             ok<br/>             if x &gt;= ascii(\"A\") and x &lt;= ascii(\"Z\")<br/>                v = x - 64 <br/>                flag = 1<br/>             ok<br/>             if x = ascii(\"*\")<br/>                v= 36<br/>                flag = 1<br/>             ok<br/>             if x = ascii(\"@\")<br/>                v = 37<br/>                flag = 1<br/>             ok<br/>             if x = ascii(\"#\")<br/>                v = 38<br/>                flag = 1<br/>             ok<br/>             if flag = 0 <br/>                  see \" found a invalid character, invalid cusip\" + nl<br/>             ok<br/>             if (i\u00a0% 2) = 0 <br/>                 v = v * 2<br/>             ok<br/>             sum = sum + floor(v / 10) + v\u00a0% 10<br/>        next <br/>        sum = (10 - (sum\u00a0% 10))\u00a0% 10<br/>        if sum = (ascii(inputstr[9]) - ascii(\"0\"))<br/>           see inputstr + \" is valid\" + nl<br/>        else<br/>           see inputstr + \" is invalid\" + nl<br/>        ok<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 41, "block": "<pre class=\"ruby highlighted_source\">\u00a0<br/><span class=\"co1\">#!/usr/bin/env ruby</span><br/>\u00a0<br/><span class=\"kw1\">def</span> check_cusip<span class=\"br0\">(</span>cusip<span class=\"br0\">)</span><br/>  abort<span class=\"br0\">(</span><span class=\"st0\">'CUSIP must be 9 characters'</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> cusip.<span class=\"me1\">size</span>\u00a0!= <span class=\"nu0\">9</span><br/>\u00a0<br/>  sum = <span class=\"nu0\">0</span><br/>  cusip.<span class=\"kw3\">split</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span>.<span class=\"me1\">each_with_index</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>char, i<span class=\"sy0\">|</span><br/>    <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> i == cusip.<span class=\"me1\">size</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">case</span><br/>    <span class=\"kw1\">when</span> char.<span class=\"me1\">scan</span><span class=\"br0\">(</span><span class=\"sy0\">/</span>\\D<span class=\"sy0\">/</span><span class=\"br0\">)</span>.<span class=\"me1\">empty</span>?<br/>      v = char.<span class=\"me1\">to_i</span><br/>    <span class=\"kw1\">when</span> char.<span class=\"me1\">scan</span><span class=\"br0\">(</span><span class=\"sy0\">/</span>\\D<span class=\"sy0\">/</span><span class=\"br0\">)</span>.<span class=\"me1\">any</span>?<br/>      pos = char.<span class=\"me1\">upcase</span>.<span class=\"me1\">ord</span> <span class=\"sy0\">-</span> <span class=\"st0\">'A'</span>.<span class=\"me1\">ord</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>      v = pos <span class=\"sy0\">+</span> <span class=\"nu0\">9</span><br/>    <span class=\"kw1\">when</span> char == <span class=\"st0\">'*'</span><br/>      v = <span class=\"nu0\">36</span><br/>    <span class=\"kw1\">when</span> char == <span class=\"st0\">'@'</span><br/>      v = <span class=\"nu0\">37</span><br/>    <span class=\"kw1\">when</span> char == <span class=\"st0\">'#'</span><br/>      v = <span class=\"nu0\">38</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    v <span class=\"sy0\">*</span>= <span class=\"nu0\">2</span> <span class=\"kw1\">unless</span> <span class=\"br0\">(</span>i <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">zero</span>?<br/>    sum <span class=\"sy0\">+</span>= <span class=\"br0\">(</span>v<span class=\"sy0\">/</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>.<span class=\"me1\">to_i</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>v <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  check = <span class=\"br0\">(</span><span class=\"nu0\">10</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>sum <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><br/>  <span class=\"kw2\">return</span> <span class=\"st0\">'VALID'</span> <span class=\"kw1\">if</span> check.<span class=\"me1\">to_s</span> == cusip.<span class=\"kw3\">split</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span>.<span class=\"me1\">last</span><br/>  <span class=\"st0\">'INVALID'</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>CUSIPs = <span class=\"sy0\">%</span>w<span class=\"br0\">[</span><br/>  037833100 17275R102 38259P508 <span class=\"nu0\">594918104</span> 68389X106 68389X105<br/><span class=\"br0\">]</span><br/>\u00a0<br/>CUSIPs.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>cusip<span class=\"sy0\">|</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"#{cusip}: #{check_cusip(cusip)}\"</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Rust", "loc": 42, "block": "<pre class=\"text highlighted_source\">fn cusip_check(cusip: &amp;str) -&gt; bool {<br/>    if cusip.len()\u00a0!= 9 {<br/>        return false;<br/>    }<br/>\u00a0<br/>    let mut v = 0;<br/>    let capital_cusip = cusip.to_uppercase();<br/>    let char_indices = capital_cusip.as_str().char_indices().take(7);<br/>\u00a0<br/>    let total = char_indices.fold(0, |total, (i, c)| {<br/>        v = match c {<br/>            '*' =&gt; 36,<br/>            '@' =&gt; 37,<br/>            '#' =&gt; 38,<br/>            _ if c.is_digit(10) =&gt; c.to_digit(10).unwrap() as u8,<br/>            _ if c.is_alphabetic() =&gt; (c as u8) - b'A' + 1 + 9,<br/>            _ =&gt; v,<br/>        };<br/>\u00a0<br/>        if i\u00a0% 2\u00a0!= 0 {<br/>            v *= 2<br/>        }<br/>        total + (v / 10) + v\u00a0% 10<br/>    });<br/>\u00a0<br/>    let check = (10 - (total\u00a0% 10))\u00a0% 10;<br/>    (check.to_string().chars().nth(0).unwrap()) == cusip.chars().nth(cusip.len() - 1).unwrap()<br/>}<br/>\u00a0<br/>fn main() {<br/>    let codes = [<br/>        \"037833100\",<br/>        \"17275R102\",<br/>        \"38259P508\",<br/>        \"594918104\",<br/>        \"68389X106\",<br/>        \"68389X105\",<br/>    ];<br/>    for code in &amp;codes {<br/>        println!(\"{} -&gt; {}\", code, cusip_check(code))<br/>    }<br/>}</pre>"}, {"lang": "Scala", "loc": 28, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Cusip <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> candidates <span class=\"sy0\">=</span> Seq<span class=\"br0\">(</span><span class=\"st0\">\"037833100\"</span>, <span class=\"st0\">\"17275R102\"</span>, <span class=\"st0\">\"38259P508\"</span>, <span class=\"st0\">\"594918104\"</span>, <span class=\"st0\">\"68389X106\"</span>, <span class=\"st0\">\"68389X105\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>candidate <span class=\"sy0\">&lt;</span>- candidates<span class=\"br0\">)</span><br/>    printf<span class=\"br0\">(</span>f<span class=\"st0\">\"$candidate%s -&gt; ${if (isCusip(candidate)) \"</span>correct<span class=\"st0\">\" else \"</span>incorrect<span class=\"st0\">\"}%s%n\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> isCusip<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>s.<span class=\"me1\">length</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> c <span class=\"sy0\">=</span> s<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> v <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>c <span class=\"sy0\">&gt;=</span> <span class=\"st0\">'0'</span> <span class=\"sy0\">&amp;&amp;</span> c <span class=\"sy0\">&lt;=</span> <span class=\"st0\">'9'</span><span class=\"br0\">)</span> v <span class=\"sy0\">=</span> c - <span class=\"nu0\">48</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>c <span class=\"sy0\">&gt;=</span> <span class=\"st0\">'A'</span> <span class=\"sy0\">&amp;&amp;</span> c <span class=\"sy0\">&lt;=</span> <span class=\"st0\">'Z'</span><span class=\"br0\">)</span> v <span class=\"sy0\">=</span> c - <span class=\"nu0\">64</span> <span class=\"co1\">// lower case letters apparently invalid</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> <span class=\"st0\">'*'</span><span class=\"br0\">)</span> v <span class=\"sy0\">=</span> <span class=\"nu0\">36</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> <span class=\"st0\">'@'</span><span class=\"br0\">)</span> v <span class=\"sy0\">=</span> <span class=\"nu0\">37</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> <span class=\"st0\">'#'</span><span class=\"br0\">)</span> v <span class=\"sy0\">=</span> <span class=\"nu0\">38</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> v <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span> <span class=\"co1\">// check if odd as using 0-based indexing</span><br/>        sum +<span class=\"sy0\">=</span> v / <span class=\"nu0\">10</span> + v <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><br/>      <span class=\"br0\">}</span><br/>      s<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> - <span class=\"nu0\">48</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span><span class=\"nu0\">10</span> - <span class=\"br0\">(</span>sum <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "SNOBOL4", "loc": 50, "block": "<pre class=\"text highlighted_source\">#!/usr/local/bin/snobol4 -r<br/>*  cusip.sno<br/>*   -- Committee on Uniform Security Identification Procedures<br/>*  -r\u00a0: read data placed after the end label.<br/>*  Verify check digit and size of cusip code.<br/>\u00a0<br/>     define(\"cusipt()i\")                 \u00a0:(cusipt_end)<br/>cusipt<br/>     chars = &amp;digits &amp;ucase \"*@#\"<br/>     cusipt = table()<br/>     i = 0<br/>cusipt_1<br/>     chars pos(i) len(1) . c             \u00a0:f(return)<br/>     cusipt[c] = i<br/>     i = i + 1                           \u00a0:(cusipt_1)<br/>cusipt_end<br/>\u00a0<br/>     define(\"check_cusip(line)c,i\")      \u00a0:(check_cusip_end)<br/>check_cusip<br/>     eq(size(line), 9)                   \u00a0:f(freturn)<br/>     check_cusip = 0<br/>     i = 0<br/>check_cusip_1<br/>     line pos(i) len(1) . c<br/>     value = t[c]<br/>     value = eq(remdr(i, 2), 1) t[c] * 2<br/>     check_cusip = check_cusip + (value / 10) + remdr(value, 10)<br/>     i = lt(i, 7) i + 1                  \u00a0:s(check_cusip_1)<br/>     check_cusip = remdr(10 - remdr(check_cusip, 10), 10)<br/>     eq(substr(line, 9, 1), check_cusip) \u00a0:s(return)f(freturn)<br/>check_cusip_end<br/>\u00a0<br/>*** main ***<br/>     t = cusipt()<br/>\u00a0<br/>read line = input                        \u00a0:f(end)<br/>     check_cusip(line)                   \u00a0:f(bad_cusip)<br/>     output = line \" valid.\"             \u00a0:(read)<br/>bad_cusip<br/>     output =  line \" not valid.\"        \u00a0:(read)<br/>end<br/>037833100<br/>17275R102<br/>38259P508<br/>594918104<br/>68389X106<br/>68389X105<br/>68389X10<br/>68389X1059<br/>68389x105</pre>"}, {"lang": "Tcl", "loc": 38, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> ordinal-of-alpha <span class=\"br0\">{</span>c<span class=\"br0\">}</span> <span class=\"br0\">{</span>                     <span class=\"sy0\">;</span><span class=\"co1\">#  returns ordinal position of c in the alphabet (A=1, B=2...)</span><br/>    <span class=\"kw2\">lsearch</span> <span class=\"br0\">{</span>_ A B C D E F G H I J K L M N O P Q R S T U V W X Y Z<span class=\"br0\">}</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> toupper <span class=\"re0\">$c</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> Cusip-Check-Digit <span class=\"br0\">{</span>cusip<span class=\"br0\">}</span> <span class=\"br0\">{</span>                <span class=\"sy0\">;</span><span class=\"co1\"># algorithm Cusip-Check-Digit(cusip) is</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$cusip</span><span class=\"br0\">]</span> <span class=\"sy0\">!</span>= <span class=\"nu0\">8</span><span class=\"br0\">}</span> <span class=\"br0\">{</span>          <span class=\"sy0\">;</span><span class=\"co1\">#    Input: an 8-character CUSIP</span><br/>        <span class=\"kw1\">return</span> false<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">set</span> sum <span class=\"nu0\">0</span>                                   <span class=\"sy0\">;</span><span class=\"co1\">#    sum\u00a0:= 0</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">8</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span>          <span class=\"sy0\">;</span><span class=\"co1\">#    for 1 \u2264 i \u2264 8 do</span><br/>        <span class=\"kw1\">set</span> c <span class=\"br0\">[</span><span class=\"kw2\">string</span> index <span class=\"re0\">$cusip</span> <span class=\"re0\">$i</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span>        <span class=\"sy0\">;</span><span class=\"co1\">#       c\u00a0:= the ith character of cusip</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> is digit <span class=\"re0\">$c</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span>             <span class=\"sy0\">;</span><span class=\"co1\">#       if c is a digit then</span><br/>            <span class=\"kw1\">set</span> v <span class=\"re0\">$c</span>                            <span class=\"sy0\">;</span><span class=\"co1\">#          v\u00a0:= numeric value of the digit c</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> is alpha <span class=\"re0\">$c</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span>       <span class=\"sy0\">;</span><span class=\"co1\">#       else if c is a letter then</span><br/>            <span class=\"kw1\">set</span> p <span class=\"br0\">[</span>ordinal-of-alpha <span class=\"re0\">$c</span><span class=\"br0\">]</span>         <span class=\"sy0\">;</span><span class=\"co1\">#          p\u00a0:= ordinal position of c in the alphabet (A=1, B=2...)</span><br/>            <span class=\"kw1\">set</span> v <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$p</span> + <span class=\"nu0\">9</span><span class=\"br0\">}</span><span class=\"br0\">]</span>               <span class=\"sy0\">;</span><span class=\"co1\">#          v\u00a0:= p + 9</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"re0\">$c</span> eq <span class=\"st0\">\"*\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span>                  <span class=\"sy0\">;</span><span class=\"co1\">#       else if c = \"*\" then</span><br/>            <span class=\"kw1\">set</span> v <span class=\"nu0\">36</span>                            <span class=\"sy0\">;</span><span class=\"co1\">#          v\u00a0:= 36</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"re0\">$c</span> eq <span class=\"st0\">\"@\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span>                  <span class=\"sy0\">;</span><span class=\"co1\">#       else if c = \"@\" then</span><br/>            <span class=\"kw1\">set</span> v <span class=\"nu0\">37</span>                            <span class=\"sy0\">;</span><span class=\"co1\">#          v\u00a0:= 37</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"re0\">$c</span> eq <span class=\"st0\">\"#\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span>                  <span class=\"sy0\">;</span><span class=\"co1\">#       else if c = \"#\" then</span><br/>            <span class=\"kw1\">set</span> v <span class=\"nu0\">38</span>                            <span class=\"sy0\">;</span><span class=\"co1\">#          v\u00a0:= 38</span><br/>        <span class=\"br0\">}</span>                                       <span class=\"sy0\">;</span><span class=\"co1\">#       end if</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span>                      <span class=\"sy0\">;</span><span class=\"co1\">#       if i is even then</span><br/>            <span class=\"kw1\">set</span> v <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$v</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">]</span>               <span class=\"sy0\">;</span><span class=\"co1\">#          v\u00a0:= v \u00d7 2</span><br/>        <span class=\"br0\">}</span>                                       <span class=\"sy0\">;</span><span class=\"co1\">#       end if</span><br/>\u00a0<br/>        <span class=\"kw2\">incr</span> sum <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$v</span> / <span class=\"nu0\">10</span> + <span class=\"re0\">$v</span> <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">}</span><span class=\"br0\">]</span>     <span class=\"sy0\">;</span><span class=\"co1\">#       sum\u00a0:= sum + int ( v div 10 ) + v mod 10</span><br/>    <span class=\"br0\">}</span>                                           <span class=\"sy0\">;</span><span class=\"co1\">#    repeat</span><br/>\u00a0<br/>    <span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"nu0\">10</span> - <span class=\"br0\">(</span><span class=\"re0\">$sum</span> <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">}</span>              <span class=\"sy0\">;</span><span class=\"co1\">#    return (10 - (sum mod 10)) mod 10</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> check-cusip <span class=\"br0\">{</span>cusip<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> last  <span class=\"br0\">[</span><span class=\"kw2\">string</span> index <span class=\"re0\">$cusip</span> end<span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> cusip <span class=\"br0\">[</span><span class=\"kw2\">string</span> range <span class=\"re0\">$cusip</span> <span class=\"nu0\">0</span> end-<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$last</span> eq <span class=\"br0\">[</span>Cusip-Check-Digit <span class=\"re0\">$cusip</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "zkl", "loc": 8, "block": "<pre class=\"text highlighted_source\">fcn cusipCheckDigit(cusip){<br/>   var [const] vs=[0..9].chain([\"A\"..\"Z\"],T(\"*\",\"@\",\"#\")).pump(String);<br/>   try{<br/>      sum:=Walker.cycle(1,2).zipWith(fcn(n,c){ v:=vs.index(c)*n; v/10 + v%10 },<br/>           cusip[0,8]).reduce('+);<br/>      ((10 - sum%10)%10 == cusip[8].toInt()) and cusip.len()==9<br/>   }catch{ False }<br/>}</pre>"}]}