{"task": "Polymorphism", "blocks": [{"lang": "ActionScript", "loc": 39, "block": "<pre class=\"actionscript highlighted_source\">package<br/><span class=\"br0\">{</span><br/>    <span class=\"kw3\">public</span> <span class=\"kw2\">class</span> Point<br/>    <span class=\"br0\">{</span><br/>        protected <span class=\"kw2\">var</span> <span class=\"kw3\">_x</span>:<span class=\"kw3\">Number</span>;<br/>        protected <span class=\"kw2\">var</span> <span class=\"kw3\">_y</span>:<span class=\"kw3\">Number</span>;<br/>\u00a0<br/>        <span class=\"kw3\">public</span> <span class=\"kw2\">function</span> Point<span class=\"br0\">(</span>x:<span class=\"kw3\">Number</span> = <span class=\"nu0\">0</span>, y:<span class=\"kw3\">Number</span> = <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw3\">_x</span> = x;<br/>            <span class=\"kw3\">_y</span> = y;<br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw3\">public</span> <span class=\"kw2\">function</span> getX<span class=\"br0\">(</span><span class=\"br0\">)</span>:<span class=\"kw3\">Number</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw3\">_x</span>;<br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw3\">public</span> <span class=\"kw2\">function</span> setX<span class=\"br0\">(</span>x:<span class=\"kw3\">Number</span><span class=\"br0\">)</span>:<span class=\"kw3\">void</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw3\">_x</span> = x;<br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw3\">public</span> <span class=\"kw2\">function</span> getY<span class=\"br0\">(</span><span class=\"br0\">)</span>:<span class=\"kw3\">Number</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw3\">_y</span>;<br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw3\">public</span> <span class=\"kw2\">function</span> setY<span class=\"br0\">(</span>y:<span class=\"kw3\">Number</span><span class=\"br0\">)</span>:<span class=\"kw3\">void</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw3\">_x</span> = y;<br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw3\">public</span> <span class=\"kw2\">function</span> <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span>:<span class=\"kw3\">void</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw3\">trace</span><span class=\"br0\">(</span><span class=\"st0\">\"Point\"</span><span class=\"br0\">)</span>;<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ada", "loc": 17, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">package</span> Shapes <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">type</span> Point <span class=\"kw1\">is</span> <span class=\"kw3\">tagged</span> <span class=\"kw3\">private</span>;<br/>   <span class=\"kw3\">procedure</span> Print<span class=\"br0\">(</span>Item\u00a0: <span class=\"kw3\">in</span> Point<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">function</span> Setx<span class=\"br0\">(</span>Item\u00a0: <span class=\"kw3\">in</span> Point; Val\u00a0: Integer<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Point;<br/>   <span class=\"kw3\">function</span> Sety<span class=\"br0\">(</span>Item\u00a0: <span class=\"kw3\">in</span> Point; Val\u00a0: Integer<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Point;<br/>   <span class=\"kw3\">function</span> Getx<span class=\"br0\">(</span>Item\u00a0: <span class=\"kw3\">in</span> Point<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Integer;<br/>   <span class=\"kw3\">function</span> Gety<span class=\"br0\">(</span>Item\u00a0: <span class=\"kw3\">in</span> Point<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Integer;<br/>   <span class=\"kw3\">function</span> Create <span class=\"kw1\">return</span> Point;<br/>   <span class=\"kw3\">function</span> Create<span class=\"br0\">(</span>X\u00a0: Integer<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Point;<br/>   <span class=\"kw3\">function</span> Create<span class=\"br0\">(</span>X, Y\u00a0: Integer<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Point;<br/>\u00a0<br/><span class=\"kw3\">private</span><br/>   <span class=\"kw3\">type</span> Point <span class=\"kw1\">is</span> <span class=\"kw3\">tagged</span> <span class=\"kw3\">record</span><br/>      X\u00a0: Integer\u00a0:= <span class=\"nu0\">0</span>;<br/>      Y\u00a0: Integer\u00a0:= <span class=\"nu0\">0</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw3\">record</span>;<br/><span class=\"kw1\">end</span> Shapes;</pre>"}, {"lang": "Aikido", "loc": 28, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class Point (protected x=0.0, protected y=0.0) {<br/>    public function print {<br/>        println (\"Point\")<br/>    }<br/>\u00a0<br/>    public function getX { return x }<br/>    public function getY { return y }<br/>\u00a0<br/>    public function setX(nx) { x = nx }<br/>    public function setY(ny) { y = ny }<br/>}<br/>\u00a0<br/>class Circle (x=0.0, y=0.0, r=0.0) extends Point (x, y) {<br/>    public function print {<br/>        println (\"Circle\")<br/>    }<br/>\u00a0<br/>    public function getR { return r }<br/>    public function setR(nr) { r = nr }<br/>}<br/>\u00a0<br/>var p = new Point (1, 2)<br/>var c = new Circle (1, 2, 3)<br/>p.print()<br/>c.print()<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "ALGOL 68", "loc": 95, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># Algol 68 provides for polymorphic operators but not procedures             #</span><br/>\u00a0<br/><span class=\"coMULTI\"># define the CIRCLE and POINT modes                                          #</span><br/><span class=\"kw4\">MODE</span> POINT  <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span> <span class=\"kw3\">REAL</span> x<span class=\"sy1\">,</span> y    <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">MODE</span> CIRCLE <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span> <span class=\"kw3\">REAL</span> x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> r <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\"># PRINT operator                                                             #</span><br/><span class=\"kw4\">OP</span> PRINT <span class=\"sy1\">=</span> <span class=\"br0\">(</span> POINT  p <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"Point(\"</span><span class=\"sy1\">,</span> x <span class=\"kw6\">OF</span> p<span class=\"sy1\">,</span> <span class=\"st0\">\",\"</span><span class=\"sy1\">,</span> y <span class=\"kw6\">OF</span> p<span class=\"sy1\">,</span> <span class=\"st0\">\")\"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span> PRINT <span class=\"sy1\">=</span> <span class=\"br0\">(</span> CIRCLE c <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"Circle(\"</span><span class=\"sy1\">,</span> r <span class=\"kw6\">OF</span> c<span class=\"sy1\">,</span> <span class=\"st0\">\" @ \"</span><span class=\"sy1\">,</span> x <span class=\"kw6\">OF</span> c<span class=\"sy1\">,</span> <span class=\"st0\">\",\"</span><span class=\"sy1\">,</span> y <span class=\"kw6\">OF</span> c<span class=\"sy1\">,</span> <span class=\"st0\">\")\"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># getters                                                                    #</span><br/><span class=\"kw4\">OP</span> XCOORD <span class=\"sy1\">=</span> <span class=\"br0\">(</span> POINT p <span class=\"br0\">)</span><span class=\"kw3\">REAL</span><span class=\"sy1\">:</span> x <span class=\"kw6\">OF</span> p<span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span> YCOORD <span class=\"sy1\">=</span> <span class=\"br0\">(</span> POINT p <span class=\"br0\">)</span><span class=\"kw3\">REAL</span><span class=\"sy1\">:</span> y <span class=\"kw6\">OF</span> p<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">OP</span> XCOORD <span class=\"sy1\">=</span> <span class=\"br0\">(</span> CIRCLE c <span class=\"br0\">)</span><span class=\"kw3\">REAL</span><span class=\"sy1\">:</span> x <span class=\"kw6\">OF</span> c<span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span> YCOORD <span class=\"sy1\">=</span> <span class=\"br0\">(</span> CIRCLE c <span class=\"br0\">)</span><span class=\"kw3\">REAL</span><span class=\"sy1\">:</span> y <span class=\"kw6\">OF</span> c<span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span> RADIUS <span class=\"sy1\">=</span> <span class=\"br0\">(</span> CIRCLE c <span class=\"br0\">)</span><span class=\"kw3\">REAL</span><span class=\"sy1\">:</span> r <span class=\"kw6\">OF</span> c<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># setters                                                                    #</span><br/><span class=\"coMULTI\"># the setters are dyadic operators so need a priority - we make them lowest  #</span><br/><span class=\"coMULTI\"># priority, like PLUSAB etc.                                                 #</span><br/><span class=\"coMULTI\"># They could have the same names as the getters but this seems clearer?      #</span><br/><span class=\"kw4\">PRIO</span> SETXCOORD <span class=\"sy1\">=</span> 1<br/>   <span class=\"sy1\">,</span> SETYCOORD <span class=\"sy1\">=</span> 1<br/>   <span class=\"sy1\">,</span> SETRADIUS <span class=\"sy1\">=</span> 1<br/>   <span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># the setters return the POINT/CIRCLE being modified so we can write e.g.    #</span><br/><span class=\"coMULTI\"># \"PRINT ( p SETXCOORD 3 )\"                                                  #</span><br/><span class=\"kw4\">OP</span>   SETXCOORD <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">REF</span> POINT  p<span class=\"sy1\">,</span> <span class=\"kw3\">REAL</span> x <span class=\"br0\">)</span><span class=\"kw4\">REF</span> POINT<span class=\"sy1\">:</span>  <span class=\"br0\">(</span> x <span class=\"kw6\">OF</span> p <span class=\"sy1\">:=</span> x<span class=\"sy1\">;</span> p <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span>   SETYCOORD <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">REF</span> POINT  p<span class=\"sy1\">,</span> <span class=\"kw3\">REAL</span> y <span class=\"br0\">)</span><span class=\"kw4\">REF</span> POINT<span class=\"sy1\">:</span>  <span class=\"br0\">(</span> y <span class=\"kw6\">OF</span> p <span class=\"sy1\">:=</span> y<span class=\"sy1\">;</span> p <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">OP</span>   SETXCOORD <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">REF</span> CIRCLE c<span class=\"sy1\">,</span> <span class=\"kw3\">REAL</span> x <span class=\"br0\">)</span><span class=\"kw4\">REF</span> CIRCLE<span class=\"sy1\">:</span> <span class=\"br0\">(</span> x <span class=\"kw6\">OF</span> c <span class=\"sy1\">:=</span> x<span class=\"sy1\">;</span> c <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span>   SETYCOORD <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">REF</span> CIRCLE c<span class=\"sy1\">,</span> <span class=\"kw3\">REAL</span> y <span class=\"br0\">)</span><span class=\"kw4\">REF</span> CIRCLE<span class=\"sy1\">:</span> <span class=\"br0\">(</span> y <span class=\"kw6\">OF</span> c <span class=\"sy1\">:=</span> y<span class=\"sy1\">;</span> c <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span>   SETRADIUS <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">REF</span> CIRCLE c<span class=\"sy1\">,</span> <span class=\"kw3\">REAL</span> r <span class=\"br0\">)</span><span class=\"kw4\">REF</span> CIRCLE<span class=\"sy1\">:</span> <span class=\"br0\">(</span> r <span class=\"kw6\">OF</span> c <span class=\"sy1\">:=</span> r<span class=\"sy1\">;</span> c <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># operands of an operator are not automatically coerced from INT to REAL so  #</span><br/><span class=\"coMULTI\"># we also need these operators                                               #</span><br/><span class=\"kw4\">OP</span>   SETXCOORD <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">REF</span> POINT  p<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span>  x <span class=\"br0\">)</span><span class=\"kw4\">REF</span> POINT<span class=\"sy1\">:</span>  <span class=\"br0\">(</span> x <span class=\"kw6\">OF</span> p <span class=\"sy1\">:=</span> x<span class=\"sy1\">;</span> p <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span>   SETYCOORD <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">REF</span> POINT  p<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span>  y <span class=\"br0\">)</span><span class=\"kw4\">REF</span> POINT<span class=\"sy1\">:</span>  <span class=\"br0\">(</span> y <span class=\"kw6\">OF</span> p <span class=\"sy1\">:=</span> y<span class=\"sy1\">;</span> p <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">OP</span>   SETXCOORD <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">REF</span> CIRCLE c<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span>  x <span class=\"br0\">)</span><span class=\"kw4\">REF</span> CIRCLE<span class=\"sy1\">:</span> <span class=\"br0\">(</span> x <span class=\"kw6\">OF</span> c <span class=\"sy1\">:=</span> x<span class=\"sy1\">;</span> c <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span>   SETYCOORD <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">REF</span> CIRCLE c<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span>  y <span class=\"br0\">)</span><span class=\"kw4\">REF</span> CIRCLE<span class=\"sy1\">:</span> <span class=\"br0\">(</span> y <span class=\"kw6\">OF</span> c <span class=\"sy1\">:=</span> y<span class=\"sy1\">;</span> c <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span>   SETRADIUS <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">REF</span> CIRCLE c<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span>  r <span class=\"br0\">)</span><span class=\"kw4\">REF</span> CIRCLE<span class=\"sy1\">:</span> <span class=\"br0\">(</span> r <span class=\"kw6\">OF</span> c <span class=\"sy1\">:=</span> r<span class=\"sy1\">;</span> c <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># copy constructors                                                          #</span><br/><span class=\"coMULTI\"># A copy constructor is not needed as assignment will generate a copy        #</span><br/><span class=\"coMULTI\"># e.g.: \"POINT pa, pb; pa\u00a0:= ...; pb\u00a0:= pa; ...\" will make pb a copy of pa   #</span><br/>\u00a0<br/><span class=\"coMULTI\"># assignment                                                                 #</span><br/><span class=\"coMULTI\"># It is not possible to redefine the assignment \"operator\" in Algol 68 but   #</span><br/><span class=\"coMULTI\"># assignment is automatically provided so no code need be written for e.g.   #</span><br/><span class=\"coMULTI\"># \"CIRCLE c1\u00a0:= ....\"                                                        #</span><br/>\u00a0<br/><span class=\"coMULTI\"># destructors                                                                #</span><br/><span class=\"coMULTI\"># Algol 68 does not include destructors. A particular postlude could,        #</span><br/><span class=\"coMULTI\"># in theory be provided if specific cleanup was requried, but this would     #</span><br/><span class=\"coMULTI\"># occur at the end of the program, not at the end of the lifetime of the     #</span><br/><span class=\"coMULTI\"># object.                                                                    #</span><br/>\u00a0<br/><span class=\"coMULTI\"># default constructor                                                        #</span><br/><span class=\"coMULTI\"># Algol 68 automatically provides generators HEAP and LOC, which will        #</span><br/><span class=\"coMULTI\"># create new objects of the specified MODE, e.g. HEAP CIRCLE will create a   #</span><br/><span class=\"coMULTI\"># new CIRCLE. HEAP allocates apace on the heap, LOC allocates in on the      #</span><br/><span class=\"coMULTI\"># stack (so the new item disappears when the enclosing block procedure or    #</span><br/><span class=\"coMULTI\"># operator finishes)                                                         #</span><br/>\u00a0<br/><span class=\"coMULTI\"># a suitable \"display\" (value list enclosed in \"(\" and \")\") can be cast to   #</span><br/><span class=\"coMULTI\"># the relevent MODE, allowing us to write e.g.:                              #</span><br/><span class=\"coMULTI\"># \"POINT( 3.1, 2.2 )\" where we need a new item.                              #</span><br/>\u00a0<br/><span class=\"coMULTI\"># \"constructors\" with other than all the fields in the correct order could   #</span><br/><span class=\"coMULTI\"># be provided as procedures but each would need a distinct name              #</span><br/><span class=\"coMULTI\"># e.g.                                                                       #</span><br/><span class=\"kw4\">PROC</span> new circle at the origin <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">REAL</span> r <span class=\"br0\">)</span><span class=\"kw4\">REF</span> CIRCLE<span class=\"sy1\">:</span><br/>      <span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw4\">HEAP</span> CIRCLE SETRADIUS r <span class=\"br0\">)</span> SETXCOORD 0 <span class=\"br0\">)</span> SETYCOORD 0<span class=\"sy1\">;</span><br/><span class=\"kw4\">PROC</span> new point at the origin <span class=\"sy1\">=</span> <span class=\"kw4\">REF</span> POINT<span class=\"sy1\">:</span><br/>      <span class=\"br0\">(</span> <span class=\"kw4\">HEAP</span> POINT SETXCOORD 0 <span class=\"br0\">)</span> SETYCOORD 0<span class=\"sy1\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\"># examples of use                                                            #</span><br/>\u00a0<br/><span class=\"kw2\">BEGIN</span><br/>\u00a0<br/>    CIRCLE c1 <span class=\"sy1\">:=</span> CIRCLE<span class=\"br0\">(</span> <span class=\"re1\">1.1</span><span class=\"sy1\">,</span> <span class=\"re1\">2.4</span><span class=\"sy1\">,</span> <span class=\"re1\">4.1</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    POINT  p1 <span class=\"sy1\">:=</span> new point at the origin<span class=\"sy1\">;</span><br/>\u00a0<br/>    PRINT c1<span class=\"sy1\">;</span> <span class=\"kw22\">newline</span><span class=\"br0\">(</span> stand out <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\"># move c1 so it is centred on p1                                         #</span><br/>    <span class=\"br0\">(</span> c1 SETXCOORD XCOORD p1 <span class=\"br0\">)</span> SETYCOORD YCOORD p1<span class=\"sy1\">;</span><br/>\u00a0<br/>    PRINT c1<span class=\"sy1\">;</span> <span class=\"kw22\">newline</span><span class=\"br0\">(</span> stand out <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw2\">END</span></pre>"}, {"lang": "AutoHotkey", "loc": 73, "block": "<pre class=\"autohotkey highlighted_source\">MyPoint <span class=\"sy0\">:=</span> new Point<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>MyPoint<span class=\"sy0\">.</span>Print<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>MyCircle <span class=\"sy0\">:=</span> new Circle<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>MyCircle2 <span class=\"sy0\">:=</span> MyCircle<span class=\"sy0\">.</span>Copy<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>MyCircle<span class=\"sy0\">.</span>SetX<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>\t<span class=\"co1\">;Assignment method</span><br/>MyCircle<span class=\"sy0\">.</span>y <span class=\"sy0\">:=</span> <span class=\"nu0\">3</span>\t\t<span class=\"co1\">;Direct assignment</span><br/>MyCircle<span class=\"sy0\">.</span>Print<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>MyCircle2<span class=\"sy0\">.</span>Print<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>MyCircle<span class=\"sy0\">.</span>SetX<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> MyCircle<span class=\"sy0\">.</span>SetY<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> MyCircle<span class=\"sy0\">.</span>r <span class=\"sy0\">:=</span> <span class=\"nu0\">10000</span> <br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>\u00a0% MyCircle<span class=\"sy0\">.</span>__Class<br/>\t<span class=\"sy0\">.</span> <span class=\"st0\">\"`n`nx:`t\"</span> MyCircle<span class=\"sy0\">.</span>GetX<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<span class=\"sy0\">.</span> <span class=\"st0\">\"`ny:`t\"</span> MyCircle<span class=\"sy0\">.</span>y <br/>\t<span class=\"sy0\">.</span> <span class=\"st0\">\"`nr:`t\"</span> MyCircle<span class=\"sy0\">.</span>GetR<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/>class Point<br/><span class=\"br0\">{</span><br/>\tCopy<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> this<span class=\"sy0\">.</span>Clone<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">}</span><br/>\tGetX<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> this<span class=\"sy0\">.</span>x<br/>\t<span class=\"br0\">}</span><br/>\tGetY<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> this<span class=\"sy0\">.</span>y<br/>\t<span class=\"br0\">}</span><br/>\t__New<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\tthis<span class=\"sy0\">.</span>x <span class=\"sy0\">:=</span> x<br/>\t\tthis<span class=\"sy0\">.</span>y <span class=\"sy0\">:=</span> y<br/>\t<span class=\"br0\">}</span><br/>\tPrint<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>\u00a0% this<span class=\"sy0\">.</span>__Class <br/>\t\t\t<span class=\"sy0\">.</span> <span class=\"st0\">\"`n`nx:`t\"</span> this<span class=\"sy0\">.</span>x <br/>\t\t\t<span class=\"sy0\">.</span> <span class=\"st0\">\"`ny:`t\"</span> this<span class=\"sy0\">.</span>y<br/>\t<span class=\"br0\">}</span><br/>\tSetX<span class=\"br0\">(</span>aValue<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\tthis<span class=\"sy0\">.</span>x <span class=\"sy0\">:=</span> aValue<br/>\t<span class=\"br0\">}</span><br/>\tSetY<span class=\"br0\">(</span>aValue<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\tthis<span class=\"sy0\">.</span>y <span class=\"sy0\">:=</span> aValue<br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>class Circle extends Point<br/><span class=\"br0\">{</span><br/>\tGetR<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> this<span class=\"sy0\">.</span>r<br/>\t<span class=\"br0\">}</span><br/>\t__New<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> r<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\tthis<span class=\"sy0\">.</span>r <span class=\"sy0\">:=</span> r<br/>\t\tbase<span class=\"sy0\">.</span>__New<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><br/>\t<span class=\"br0\">}</span><br/>\tPrint<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>\u00a0% this<span class=\"sy0\">.</span>__Class <br/>\t\t\t<span class=\"sy0\">.</span> <span class=\"st0\">\"`n`nx:`t\"</span> this<span class=\"sy0\">.</span>x <br/>\t\t\t<span class=\"sy0\">.</span> <span class=\"st0\">\"`ny:`t\"</span> this<span class=\"sy0\">.</span>y <br/>\t\t\t<span class=\"sy0\">.</span> <span class=\"st0\">\"`nr:`t\"</span> this<span class=\"sy0\">.</span>r<br/>\t<span class=\"br0\">}</span><br/>\tSetR<span class=\"br0\">(</span>aValue<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\tthis<span class=\"sy0\">.</span>r <span class=\"sy0\">:=</span> aValue<br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "BASIC", "loc": 38, "block": "<pre class=\"text highlighted_source\">      INSTALL @lib$ + \"CLASSLIB\"<br/>\u00a0<br/>      REM Create parent class with void 'doprint' method:<br/>      DIM PrintableShape{doprint}<br/>      PROC_class(PrintableShape{})<br/>\u00a0<br/>      REM Create derived class for Point:<br/>      DIM Point{x#, y#, setxy, retx, rety, @constructor, @@destructor}<br/>      PROC_inherit(Point{}, PrintableShape{})<br/>      DEF Point.setxy (x,y)\u00a0: Point.x# = x\u00a0: Point.y# = y\u00a0: ENDPROC<br/>      DEF Point.retx = Point.x#<br/>      DEF Point.rety = Point.y#<br/>      DEF <a class=\"__cf_email__\" data-cfemail=\"e8b88781869cc6a88b87869b9c9a9d8b9c879a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> Point.x# = 1.23\u00a0: Point.y# = 4.56\u00a0: ENDPROC<br/>      DEF <a class=\"__cf_email__\" data-cfemail=\"5606393f38227816\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@destructor\u00a0: ENDPROC<br/>      DEF Point.doprint\u00a0: PRINT Point.x#, Point.y#\u00a0: ENDPROC<br/>      PROC_class(Point{})<br/>\u00a0<br/>      REM Create derived class for Circle:<br/>      DIM Circle{x#, y#, r#, setxy, setr, retx, rety, retr, @con, @@des}<br/>      PROC_inherit(Circle{}, PrintableShape{})<br/>      DEF Circle.setxy (x,y)\u00a0: Circle.x# = x\u00a0: Circle.y# = y\u00a0: ENDPROC<br/>      DEF Circle.setr (r)\u00a0: Circle.r# = r\u00a0: ENDPROC<br/>      DEF Circle.retx = Circle.x#<br/>      DEF Circle.rety = Circle.y#<br/>      DEF Circle.retr = Circle.r#<br/>      DEF <a class=\"__cf_email__\" data-cfemail=\"15567c677679703b55767a7b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> Circle.x# = 3.2\u00a0: Circle.y# = 6.5\u00a0: Circle.r# = 7\u00a0: ENDPROC<br/>      DEF <a class=\"__cf_email__\" data-cfemail=\"d89bb1aabbb4bdf698\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@des\u00a0: ENDPROC<br/>      DEF Circle.doprint\u00a0: PRINT Circle.x#, Circle.y#, Circle.r#\u00a0: ENDPROC<br/>      PROC_class(Circle{})<br/>\u00a0<br/>      REM Test the polymorphic 'doprint' function:<br/>      PROC_new(mypoint{}, Point{})<br/>      PROC(mypoint.doprint)<br/>      PROC_discard(mypoint{})<br/>      PROC_new(mycircle{}, Circle{})<br/>      PROC(mycircle.doprint)<br/>      PROC_discard(mycircle{})<br/>      END</pre>"}, {"lang": "BBC BASIC", "loc": 38, "block": "<pre class=\"text highlighted_source\">      INSTALL @lib$ + \"CLASSLIB\"<br/>\u00a0<br/>      REM Create parent class with void 'doprint' method:<br/>      DIM PrintableShape{doprint}<br/>      PROC_class(PrintableShape{})<br/>\u00a0<br/>      REM Create derived class for Point:<br/>      DIM Point{x#, y#, setxy, retx, rety, @constructor, @@destructor}<br/>      PROC_inherit(Point{}, PrintableShape{})<br/>      DEF Point.setxy (x,y)\u00a0: Point.x# = x\u00a0: Point.y# = y\u00a0: ENDPROC<br/>      DEF Point.retx = Point.x#<br/>      DEF Point.rety = Point.y#<br/>      DEF <a class=\"__cf_email__\" data-cfemail=\"e8b88781869cc6a88b87869b9c9a9d8b9c879a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> Point.x# = 1.23\u00a0: Point.y# = 4.56\u00a0: ENDPROC<br/>      DEF <a class=\"__cf_email__\" data-cfemail=\"5606393f38227816\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@destructor\u00a0: ENDPROC<br/>      DEF Point.doprint\u00a0: PRINT Point.x#, Point.y#\u00a0: ENDPROC<br/>      PROC_class(Point{})<br/>\u00a0<br/>      REM Create derived class for Circle:<br/>      DIM Circle{x#, y#, r#, setxy, setr, retx, rety, retr, @con, @@des}<br/>      PROC_inherit(Circle{}, PrintableShape{})<br/>      DEF Circle.setxy (x,y)\u00a0: Circle.x# = x\u00a0: Circle.y# = y\u00a0: ENDPROC<br/>      DEF Circle.setr (r)\u00a0: Circle.r# = r\u00a0: ENDPROC<br/>      DEF Circle.retx = Circle.x#<br/>      DEF Circle.rety = Circle.y#<br/>      DEF Circle.retr = Circle.r#<br/>      DEF <a class=\"__cf_email__\" data-cfemail=\"15567c677679703b55767a7b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> Circle.x# = 3.2\u00a0: Circle.y# = 6.5\u00a0: Circle.r# = 7\u00a0: ENDPROC<br/>      DEF <a class=\"__cf_email__\" data-cfemail=\"d89bb1aabbb4bdf698\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@des\u00a0: ENDPROC<br/>      DEF Circle.doprint\u00a0: PRINT Circle.x#, Circle.y#, Circle.r#\u00a0: ENDPROC<br/>      PROC_class(Circle{})<br/>\u00a0<br/>      REM Test the polymorphic 'doprint' function:<br/>      PROC_new(mypoint{}, Point{})<br/>      PROC(mypoint.doprint)<br/>      PROC_discard(mypoint{})<br/>      PROC_new(mycircle{}, Circle{})<br/>      PROC(mycircle.doprint)<br/>      PROC_discard(mycircle{})<br/>      END</pre>"}, {"lang": "C", "loc": 55, "block": "<pre class=\"cpp highlighted_source\"><span class=\"kw2\">class</span> Point<br/><span class=\"br0\">{</span><br/>  <span class=\"kw2\">protected</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">int</span> x, y<span class=\"sy4\">;</span><br/>  <span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    Point<span class=\"br0\">(</span><span class=\"kw4\">int</span> x0 <span class=\"sy1\">=</span> <span class=\"nu0\">0</span>, <span class=\"kw4\">int</span> y0 <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy4\">:</span> x<span class=\"br0\">(</span>x0<span class=\"br0\">)</span>, y<span class=\"br0\">(</span>y0<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    Point<span class=\"br0\">(</span><span class=\"kw4\">const</span> Point<span class=\"sy3\">&amp;</span> p<span class=\"br0\">)</span> <span class=\"sy4\">:</span> x<span class=\"br0\">(</span>p.<span class=\"me1\">x</span><span class=\"br0\">)</span>, y<span class=\"br0\">(</span>p.<span class=\"me1\">y</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw2\">virtual</span> ~Point<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw4\">const</span> Point<span class=\"sy3\">&amp;</span> operator<span class=\"sy1\">=</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> Point<span class=\"sy3\">&amp;</span> p<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw3\">this</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>p<span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>        x <span class=\"sy1\">=</span> p.<span class=\"me1\">x</span><span class=\"sy4\">;</span><br/>        y <span class=\"sy1\">=</span> p.<span class=\"me1\">y</span><span class=\"sy4\">;</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">return</span> <span class=\"sy2\">*</span><span class=\"kw3\">this</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> getX<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> x<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> getY<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> y<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> setX<span class=\"br0\">(</span><span class=\"kw4\">int</span> x0<span class=\"br0\">)</span> <span class=\"br0\">{</span> x <span class=\"sy1\">=</span> x0<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> setY<span class=\"br0\">(</span><span class=\"kw4\">int</span> y0<span class=\"br0\">)</span> <span class=\"br0\">{</span> y <span class=\"sy1\">=</span> y0<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> print<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"Point<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> Circle <span class=\"sy4\">:</span> <span class=\"kw2\">public</span> Point<br/><span class=\"br0\">{</span><br/>  <span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">int</span> r<span class=\"sy4\">;</span><br/>  <span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    Circle<span class=\"br0\">(</span>Point p, <span class=\"kw4\">int</span> r0 <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy4\">:</span> Point<span class=\"br0\">(</span>p<span class=\"br0\">)</span>, r<span class=\"br0\">(</span>r0<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    Circle<span class=\"br0\">(</span><span class=\"kw4\">int</span> x0 <span class=\"sy1\">=</span> <span class=\"nu0\">0</span>, <span class=\"kw4\">int</span> y0 <span class=\"sy1\">=</span> <span class=\"nu0\">0</span>, <span class=\"kw4\">int</span> r0 <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy4\">:</span> Point<span class=\"br0\">(</span>x0, y0<span class=\"br0\">)</span>, r<span class=\"br0\">(</span>r0<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw2\">virtual</span> ~Circle<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw4\">const</span> Circle<span class=\"sy3\">&amp;</span> operator<span class=\"sy1\">=</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> Circle<span class=\"sy3\">&amp;</span> c<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw3\">this</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>c<span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>        x <span class=\"sy1\">=</span> c.<span class=\"me1\">x</span><span class=\"sy4\">;</span><br/>        y <span class=\"sy1\">=</span> c.<span class=\"me1\">y</span><span class=\"sy4\">;</span><br/>        r <span class=\"sy1\">=</span> c.<span class=\"me1\">r</span><span class=\"sy4\">;</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">return</span> <span class=\"sy2\">*</span><span class=\"kw3\">this</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> getR<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> r<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> setR<span class=\"br0\">(</span><span class=\"kw4\">int</span> r0<span class=\"br0\">)</span> <span class=\"br0\">{</span> r <span class=\"sy1\">=</span> r0<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> print<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"Circle<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  Point<span class=\"sy2\">*</span> p <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> Point<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  Point<span class=\"sy2\">*</span> c <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> Circle<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  p<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>print<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  c<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>print<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>     <br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 55, "block": "<pre class=\"cpp highlighted_source\"><span class=\"kw2\">class</span> Point<br/><span class=\"br0\">{</span><br/>  <span class=\"kw2\">protected</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">int</span> x, y<span class=\"sy4\">;</span><br/>  <span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    Point<span class=\"br0\">(</span><span class=\"kw4\">int</span> x0 <span class=\"sy1\">=</span> <span class=\"nu0\">0</span>, <span class=\"kw4\">int</span> y0 <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy4\">:</span> x<span class=\"br0\">(</span>x0<span class=\"br0\">)</span>, y<span class=\"br0\">(</span>y0<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    Point<span class=\"br0\">(</span><span class=\"kw4\">const</span> Point<span class=\"sy3\">&amp;</span> p<span class=\"br0\">)</span> <span class=\"sy4\">:</span> x<span class=\"br0\">(</span>p.<span class=\"me1\">x</span><span class=\"br0\">)</span>, y<span class=\"br0\">(</span>p.<span class=\"me1\">y</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw2\">virtual</span> ~Point<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw4\">const</span> Point<span class=\"sy3\">&amp;</span> operator<span class=\"sy1\">=</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> Point<span class=\"sy3\">&amp;</span> p<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw3\">this</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>p<span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>        x <span class=\"sy1\">=</span> p.<span class=\"me1\">x</span><span class=\"sy4\">;</span><br/>        y <span class=\"sy1\">=</span> p.<span class=\"me1\">y</span><span class=\"sy4\">;</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">return</span> <span class=\"sy2\">*</span><span class=\"kw3\">this</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> getX<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> x<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> getY<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> y<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> setX<span class=\"br0\">(</span><span class=\"kw4\">int</span> x0<span class=\"br0\">)</span> <span class=\"br0\">{</span> x <span class=\"sy1\">=</span> x0<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> setY<span class=\"br0\">(</span><span class=\"kw4\">int</span> y0<span class=\"br0\">)</span> <span class=\"br0\">{</span> y <span class=\"sy1\">=</span> y0<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> print<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"Point<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> Circle <span class=\"sy4\">:</span> <span class=\"kw2\">public</span> Point<br/><span class=\"br0\">{</span><br/>  <span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">int</span> r<span class=\"sy4\">;</span><br/>  <span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    Circle<span class=\"br0\">(</span>Point p, <span class=\"kw4\">int</span> r0 <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy4\">:</span> Point<span class=\"br0\">(</span>p<span class=\"br0\">)</span>, r<span class=\"br0\">(</span>r0<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    Circle<span class=\"br0\">(</span><span class=\"kw4\">int</span> x0 <span class=\"sy1\">=</span> <span class=\"nu0\">0</span>, <span class=\"kw4\">int</span> y0 <span class=\"sy1\">=</span> <span class=\"nu0\">0</span>, <span class=\"kw4\">int</span> r0 <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy4\">:</span> Point<span class=\"br0\">(</span>x0, y0<span class=\"br0\">)</span>, r<span class=\"br0\">(</span>r0<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw2\">virtual</span> ~Circle<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw4\">const</span> Circle<span class=\"sy3\">&amp;</span> operator<span class=\"sy1\">=</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> Circle<span class=\"sy3\">&amp;</span> c<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw3\">this</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>c<span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>        x <span class=\"sy1\">=</span> c.<span class=\"me1\">x</span><span class=\"sy4\">;</span><br/>        y <span class=\"sy1\">=</span> c.<span class=\"me1\">y</span><span class=\"sy4\">;</span><br/>        r <span class=\"sy1\">=</span> c.<span class=\"me1\">r</span><span class=\"sy4\">;</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">return</span> <span class=\"sy2\">*</span><span class=\"kw3\">this</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> getR<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> r<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> setR<span class=\"br0\">(</span><span class=\"kw4\">int</span> r0<span class=\"br0\">)</span> <span class=\"br0\">{</span> r <span class=\"sy1\">=</span> r0<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">virtual</span> <span class=\"kw4\">void</span> print<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"Circle<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  Point<span class=\"sy2\">*</span> p <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> Point<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  Point<span class=\"sy2\">*</span> c <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> Circle<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  p<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>print<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  c<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>print<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>     <br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 32, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">class</span> Point<br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">protected</span> <span class=\"kw4\">int</span> x, y<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">public</span> Point<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw1\">this</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">public</span> Point<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw1\">this</span><span class=\"br0\">(</span>x,<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">public</span> Point<span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">this</span><span class=\"sy0\">.</span><span class=\"me1\">x</span> <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span> <span class=\"kw1\">this</span><span class=\"sy0\">.</span><span class=\"me1\">y</span> <span class=\"sy0\">=</span> y<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> X <span class=\"br0\">{</span> <span class=\"kw1\">get</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> x<span class=\"sy0\">;</span> <span class=\"br0\">}</span> <span class=\"kw1\">set</span> <span class=\"br0\">{</span> x <span class=\"sy0\">=</span> <span class=\"kw1\">value</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> Y <span class=\"br0\">{</span> <span class=\"kw1\">get</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> y<span class=\"sy0\">;</span> <span class=\"br0\">}</span> <span class=\"kw1\">set</span> <span class=\"br0\">{</span> y <span class=\"sy0\">=</span> <span class=\"kw1\">value</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">virtual</span> <span class=\"kw4\">void</span> print<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw5\">System</span><span class=\"sy0\">.</span><span class=\"me1\">Console</span><span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Point\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw4\">class</span> Circle <span class=\"sy0\">:</span> Point<br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">private</span> <span class=\"kw4\">int</span> r<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">public</span> Circle<span class=\"br0\">(</span>Point p<span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw1\">this</span><span class=\"br0\">(</span>p,<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span><br/>  <span class=\"kw1\">public</span> Circle<span class=\"br0\">(</span>Point p, <span class=\"kw4\">int</span> r<span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw1\">base</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">this</span><span class=\"sy0\">.</span><span class=\"me1\">r</span> <span class=\"sy0\">=</span> r<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>  <span class=\"kw1\">public</span> Circle<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw1\">this</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span><br/>  <span class=\"kw1\">public</span> Circle<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw1\">this</span><span class=\"br0\">(</span>x,<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span><br/>  <span class=\"kw1\">public</span> Circle<span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y<span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw1\">this</span><span class=\"br0\">(</span>x,y,<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span><br/>  <span class=\"kw1\">public</span> Circle<span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y, <span class=\"kw4\">int</span> r<span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw1\">base</span><span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">this</span><span class=\"sy0\">.</span><span class=\"me1\">r</span> <span class=\"sy0\">=</span> r<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> R <span class=\"br0\">{</span> <span class=\"kw1\">get</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> r<span class=\"sy0\">;</span> <span class=\"br0\">}</span> <span class=\"kw1\">set</span> <span class=\"br0\">{</span> r <span class=\"sy0\">=</span> <span class=\"kw1\">value</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">override</span> <span class=\"kw4\">void</span> print<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw5\">System</span><span class=\"sy0\">.</span><span class=\"me1\">Console</span><span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Circle\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"kw4\">String</span> args<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    Point p <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Point<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    Point c <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Circle<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    p<span class=\"sy0\">.</span><span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    c<span class=\"sy0\">.</span><span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ceylon", "loc": 53, "block": "<pre class=\"text highlighted_source\">import ceylon.language {<br/>    consolePrint = print<br/>}<br/>\u00a0<br/>shared void run() {<br/>\u00a0<br/>    class Point {<br/>\u00a0<br/>        shared variable Integer x;<br/>        shared variable Integer y;<br/>\u00a0<br/>        shared new(Integer x = 0, Integer y = 0) {<br/>            this.x = x;<br/>            this.y = y;<br/>        }<br/>\u00a0<br/>        shared new copy(Point p) {<br/>            this.x = p.x;<br/>            this.y = p.y;<br/>        }<br/>\u00a0<br/>        shared default void print() {<br/>            consolePrint(\"[Point ``x`` ``y``]\");<br/>        }<br/>    }<br/>\u00a0<br/>    class Circle extends Point {<br/>\u00a0<br/>        shared variable Integer r;<br/>\u00a0<br/>        shared new(Integer x = 0, Integer y = 0, Integer r = 0) extends Point(x, y) {<br/>            this.r = r;<br/>        }<br/>\u00a0<br/>        shared new copy(Circle c) extends Point.copy(c){<br/>            this.r = c.r;<br/>        }<br/>\u00a0<br/>        shared actual void print() {<br/>            consolePrint(\"[Circle ``x`` ``y`` ``r``]\");<br/>        }<br/>    }<br/>\u00a0<br/>    value shapes = [<br/>        Point(), Point(1), Point(1, 2), Point {y = 3;}, Point.copy(Point(4, 5)),<br/>        Circle(), Circle(1), Circle(2, 3), Circle(4, 5, 6), Circle {y = 7; r = 8;}, Circle.copy(Circle(9, 10, 11))<br/>    ];<br/>\u00a0<br/>    for(shape in shapes) {<br/>        shape.print();<br/>    }<br/>}<br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 18, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defprotocol Printable <br/>  <span class=\"br0\">(</span>print-it <span class=\"br0\">[</span>this<span class=\"br0\">]</span> <span class=\"st0\">\"Prints out the Printable.\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>deftype Point <span class=\"br0\">[</span>x y<span class=\"br0\">]</span><br/>  Printable<br/>  <span class=\"br0\">(</span>print-it <span class=\"br0\">[</span>this<span class=\"br0\">]</span> <span class=\"br0\">(</span>println <span class=\"br0\">(</span>str <span class=\"st0\">\"Point: \"</span> x <span class=\"st0\">\" \"</span> y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn create-point <br/>  <span class=\"st0\">\"Redundant constructor function.\"</span><br/>  <span class=\"br0\">[</span>x y<span class=\"br0\">]</span> <span class=\"br0\">(</span>Point<span class=\"sy0\">.</span> x y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>deftype Circle <span class=\"br0\">[</span>x y r<span class=\"br0\">]</span><br/>  Printable<br/>  <span class=\"br0\">(</span>print-it <span class=\"br0\">[</span>this<span class=\"br0\">]</span> <span class=\"br0\">(</span>println <span class=\"br0\">(</span>str <span class=\"st0\">\"Circle: \"</span> x <span class=\"st0\">\" \"</span> y <span class=\"st0\">\" \"</span> r<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn create-circle <br/>  <span class=\"st0\">\"Redundant consturctor function.\"</span><br/>  <span class=\"br0\">[</span>x y r<span class=\"br0\">]</span> <span class=\"br0\">(</span>Circle<span class=\"sy0\">.</span> x y r<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 23, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defclass point <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span>x <span class=\"sy0\">:</span><span class=\"me1\">initarg</span> <span class=\"sy0\">:</span><span class=\"me1\">x</span> <span class=\"sy0\">:</span><span class=\"me1\">initform</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span><span class=\"me1\">accessor</span> x<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>y <span class=\"sy0\">:</span><span class=\"me1\">initarg</span> <span class=\"sy0\">:</span><span class=\"me1\">y</span> <span class=\"sy0\">:</span><span class=\"me1\">initform</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span><span class=\"me1\">accessor</span> y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defclass circle <span class=\"br0\">(</span>point<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span>radius <span class=\"sy0\">:</span><span class=\"me1\">initarg</span> <span class=\"sy0\">:</span><span class=\"me1\">radius</span> <span class=\"sy0\">:</span><span class=\"me1\">initform</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span><span class=\"me1\">accessor</span> radius<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defgeneric shallow-copy <span class=\"br0\">(</span>object<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>defmethod shallow-copy <span class=\"br0\">(</span><span class=\"br0\">(</span>p point<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>make-instance 'point <span class=\"sy0\">:</span><span class=\"me1\">x</span> <span class=\"br0\">(</span>x p<span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"me1\">y</span> <span class=\"br0\">(</span>y p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>defmethod shallow-copy <span class=\"br0\">(</span><span class=\"br0\">(</span>c circle<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>make-instance 'circle <span class=\"sy0\">:</span><span class=\"me1\">x</span> <span class=\"br0\">(</span>x c<span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"me1\">y</span> <span class=\"br0\">(</span>y c<span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"me1\">radius</span> <span class=\"br0\">(</span>radius c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defgeneric print-shape <span class=\"br0\">(</span>shape<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>defmethod print-shape <span class=\"br0\">(</span><span class=\"br0\">(</span>p point<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">print</span> 'point<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>defmethod print-shape <span class=\"br0\">(</span><span class=\"br0\">(</span>c circle<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">print</span> 'circle<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>p <span class=\"br0\">(</span>make-instance 'point <span class=\"sy0\">:</span><span class=\"me1\">x</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>c <span class=\"br0\">(</span>make-instance 'circle <span class=\"sy0\">:</span><span class=\"me1\">radius</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>print-shape p<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>print-shape c<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 36, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">:</span> writeln<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Point <span class=\"br0\">{</span><br/>    <span class=\"kw4\">private</span> <span class=\"kw4\">int</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">;</span><br/>    <span class=\"kw2\">this</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> x_<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> y_<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> x <span class=\"sy0\">=</span> x_<span class=\"sy0\">;</span> y <span class=\"sy0\">=</span> y_<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">this</span><span class=\"br0\">(</span>Point p_<span class=\"br0\">)</span> <span class=\"br0\">{</span> x <span class=\"sy0\">=</span> p_.<span class=\"me1\">getX</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> y <span class=\"sy0\">=</span> p_.<span class=\"me1\">getY</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> getX<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> x<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> setX<span class=\"br0\">(</span><span class=\"kw4\">int</span> x_<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw2\">this</span>.<span class=\"me1\">x</span> <span class=\"sy0\">=</span> x_<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> getY<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> y<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> setY<span class=\"br0\">(</span><span class=\"kw4\">int</span> y_<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw2\">this</span>.<span class=\"me1\">y</span> <span class=\"sy0\">=</span> y_<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Circle <span class=\"sy0\">:</span> Point <span class=\"br0\">{</span><br/>    <span class=\"kw4\">private</span> <span class=\"kw4\">int</span> r<span class=\"sy0\">;</span><br/>    <span class=\"kw2\">this</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> x_<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> y_<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> r_<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">super</span><span class=\"br0\">(</span>x_<span class=\"sy0\">,</span> y_<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        r <span class=\"sy0\">=</span> r_<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">this</span><span class=\"br0\">(</span>Point p<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> r_<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">super</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        r <span class=\"sy0\">=</span> r_<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">this</span><span class=\"br0\">(</span>Circle c_<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">super</span><span class=\"br0\">(</span>c_.<span class=\"me1\">getX</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> c_.<span class=\"me1\">getY</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        r <span class=\"sy0\">=</span> c_.<span class=\"me1\">getR</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> getR<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> r<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> setR<span class=\"br0\">(</span><span class=\"kw4\">int</span> r0<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw2\">this</span>.<span class=\"me1\">r</span> <span class=\"sy0\">=</span> r0<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> p <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Point<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> c <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Circle<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 107, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">type</span><br/>  <span class=\"coMULTI\">{ TPoint }</span><br/>\u00a0<br/>  TMyPoint <span class=\"sy3\">=</span> <span class=\"kw1\">class</span><br/>  <span class=\"kw1\">private</span><br/>    FX<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>    FY<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">public</span><br/>    <span class=\"kw1\">constructor</span> Create<span class=\"sy1\">;</span> <span class=\"kw1\">overload</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">constructor</span> Create<span class=\"br0\">(</span>X0<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span> Y0<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"kw1\">overload</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">constructor</span> Create<span class=\"br0\">(</span>MyPoint<span class=\"sy1\">:</span> TMyPoint<span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"kw1\">overload</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">destructor</span> Destroy<span class=\"sy1\">;</span> <span class=\"kw1\">override</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">procedure</span> Print<span class=\"sy1\">;</span> <span class=\"kw1\">virtual</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">property</span> X<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span> <span class=\"kw1\">read</span> FX <span class=\"kw1\">write</span> FX<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">property</span> Y<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span> <span class=\"kw1\">read</span> FY <span class=\"kw1\">write</span> FY<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"coMULTI\">{ TCircle }</span><br/>\u00a0<br/>  TCircle <span class=\"sy3\">=</span> <span class=\"kw1\">class</span><span class=\"br0\">(</span>TMyPoint<span class=\"br0\">)</span><br/>  <span class=\"kw1\">private</span><br/>    FR<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">public</span><br/>    <span class=\"kw1\">constructor</span> Create<span class=\"br0\">(</span>X0<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span> Y0<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span> R0<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"kw1\">overload</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">constructor</span> Create<span class=\"br0\">(</span>MyPoint<span class=\"sy1\">:</span> TMyPoint<span class=\"sy1\">;</span> R0<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"kw1\">overload</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">constructor</span> Create<span class=\"br0\">(</span>Circle<span class=\"sy1\">:</span> TCircle<span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"kw1\">overload</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">destructor</span> Destroy<span class=\"sy1\">;</span> <span class=\"kw1\">override</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">procedure</span> Print<span class=\"sy1\">;</span> <span class=\"kw1\">override</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">property</span> R<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span> <span class=\"kw1\">read</span> FR <span class=\"kw1\">write</span> FR<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">implementation</span><br/>\u00a0<br/><span class=\"kw1\">uses</span> Dialogs<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">{ TCircle }</span><br/>\u00a0<br/><span class=\"kw1\">constructor</span> TCircle<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"br0\">(</span>X0<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span> Y0<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span> R0<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">inherited</span> Create<span class=\"br0\">(</span>X0<span class=\"sy1\">,</span> Y0<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  FR <span class=\"sy1\">:</span><span class=\"sy3\">=</span> R0<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">constructor</span> TCircle<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"br0\">(</span>MyPoint<span class=\"sy1\">:</span> TMyPoint<span class=\"sy1\">;</span> R0<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">inherited</span> Create<span class=\"br0\">(</span>MyPoint<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  FR <span class=\"sy1\">:</span><span class=\"sy3\">=</span> R0<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">constructor</span> TCircle<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"br0\">(</span>Circle<span class=\"sy1\">:</span> TCircle<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  Create<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"kw1\">not</span><span class=\"br0\">(</span>Circle <span class=\"sy3\">=</span> <span class=\"kw2\">Self</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>  <span class=\"kw1\">begin</span><br/>    FX <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Circle<span class=\"sy1\">.</span><span class=\"me1\">X</span><span class=\"sy1\">;</span><br/>    FY <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Circle<span class=\"sy1\">.</span><span class=\"me1\">Y</span><span class=\"sy1\">;</span><br/>    FR <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Circle<span class=\"sy1\">.</span><span class=\"me1\">R</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">destructor</span> TCircle<span class=\"sy1\">.</span><span class=\"me1\">Destroy</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">inherited</span> Destroy<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> TCircle<span class=\"sy1\">.</span><span class=\"me1\">Print</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>   ShowMessage<span class=\"br0\">(</span><span class=\"st0\">'Circle'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">{ TMyPoint }</span><br/>\u00a0<br/><span class=\"kw1\">constructor</span> TMyPoint<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">inherited</span> Create<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">constructor</span> TMyPoint<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"br0\">(</span>X0<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span> Y0<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  Create<span class=\"sy1\">;</span><br/>  FX <span class=\"sy1\">:</span><span class=\"sy3\">=</span> X0<span class=\"sy1\">;</span><br/>  FY <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Y0<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">constructor</span> TMyPoint<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"br0\">(</span>MyPoint<span class=\"sy1\">:</span> TMyPoint<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  Create<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"kw1\">not</span><span class=\"br0\">(</span>MyPoint <span class=\"sy3\">=</span> <span class=\"kw2\">Self</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>  <span class=\"kw1\">begin</span><br/>    FX <span class=\"sy1\">:</span><span class=\"sy3\">=</span> MyPoint<span class=\"sy1\">.</span><span class=\"me1\">X</span><span class=\"sy1\">;</span><br/>    FY <span class=\"sy1\">:</span><span class=\"sy3\">=</span> MyPoint<span class=\"sy1\">.</span><span class=\"me1\">Y</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">destructor</span> TMyPoint<span class=\"sy1\">.</span><span class=\"me1\">Destroy</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">inherited</span> Destroy<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> TMyPoint<span class=\"sy1\">.</span><span class=\"me1\">Print</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  ShowMessage<span class=\"br0\">(</span><span class=\"st0\">'MyPoint'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span></pre>"}, {"lang": "E", "loc": 23, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> makePoint<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> point <a href=\"http://wiki.erights.org/wiki/implements\"><span class=\"kw5\">implements</span></a> <a href=\"http://wiki.erights.org/wiki/pbc\"><span class=\"kw6\">pbc</span></a> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> __printOn<span class=\"br0\">(</span>out<span class=\"br0\">)</span> <span class=\"br0\">{</span> out.<a href=\"http://wiki.erights.org/wiki/print\"><span class=\"kw7\">print</span></a><span class=\"br0\">(</span><span class=\"st0\">`&lt;point $x,$y&gt;`</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> __optUncall<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> return <span class=\"br0\">[</span>makePoint<span class=\"sy0\">,</span> <span class=\"st0\">\"run\"</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>    <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> x<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> return x <span class=\"br0\">}</span><br/>    <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> y<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> return y <span class=\"br0\">}</span><br/>    <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> withX<span class=\"br0\">(</span>new<span class=\"br0\">)</span> <span class=\"br0\">{</span> return makePoint<span class=\"br0\">(</span>new<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> withY<span class=\"br0\">(</span>new<span class=\"br0\">)</span> <span class=\"br0\">{</span> return makePoint<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> new<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>  return point<br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> makeCircle<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> r<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> circle <a href=\"http://wiki.erights.org/wiki/extends\"><span class=\"kw5\">extends</span></a> makePoint<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <a href=\"http://wiki.erights.org/wiki/implements\"><span class=\"kw5\">implements</span></a> <a href=\"http://wiki.erights.org/wiki/pbc\"><span class=\"kw6\">pbc</span></a> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> __printOn<span class=\"br0\">(</span>out<span class=\"br0\">)</span> <span class=\"br0\">{</span> out.<a href=\"http://wiki.erights.org/wiki/print\"><span class=\"kw7\">print</span></a><span class=\"br0\">(</span><span class=\"st0\">`&lt;circle $x,$y r $r&gt;`</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> __optUncall<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> return <span class=\"br0\">[</span>makeCircle<span class=\"sy0\">,</span> <span class=\"st0\">\"run\"</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> r<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>    <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> r<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> return r <span class=\"br0\">}</span><br/>    <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> withX<span class=\"br0\">(</span>new<span class=\"br0\">)</span> <span class=\"br0\">{</span> return makeCircle<span class=\"br0\">(</span>new<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> r<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> withY<span class=\"br0\">(</span>new<span class=\"br0\">)</span> <span class=\"br0\">{</span> return makeCircle<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> new<span class=\"sy0\">,</span> r<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> withR<span class=\"br0\">(</span>new<span class=\"br0\">)</span> <span class=\"br0\">{</span> return makeCircle<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> new<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>  return circle<br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 44, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>struct Point <span class=\"br0\">(</span><span class=\"br0\">(</span>real:x <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>real:y <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>struct Circle <span class=\"br0\">(</span><span class=\"br0\">(</span>real:x <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>real:y <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>real:r <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>define<span class=\"sy0\">-</span>method <span class=\"br0\">(</span>print Point:p<span class=\"br0\">)</span> <span class=\"br0\">(</span>printf <span class=\"st0\">\"\ud83d\udccc [%d\u00a0%d]\"</span> p.x p.y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>define<span class=\"sy0\">-</span>method <span class=\"br0\">(</span>print Circle:c<span class=\"br0\">)</span> <span class=\"br0\">(</span>printf <span class=\"st0\">\"\u2b55\ufe0f center:[%d\u00a0%d] radius:%d\"</span> c.x c.y c.r<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>print <span class=\"br0\">(</span>Point <span class=\"nu0\">5</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    \u2192 \ud83d\udccc <span class=\"br0\">[</span><span class=\"nu0\">5</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span><br/><span class=\"br0\">(</span>print <span class=\"br0\">(</span>Circle <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    \u2192 \u2b55\ufe0f center:<span class=\"br0\">[</span><span class=\"nu0\">2</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span> radius:<span class=\"nu0\">4</span><br/>\u00a0<br/><span class=\"co1\">;; Accessors\u00a0:</span><br/><span class=\"co1\">;; (Point-x p), (Point-y p) or p.x, p.y</span><br/><span class=\"co1\">;; (Circle-x c), c.x , etc.</span><br/><span class=\"co1\">;; Setters\u00a0:</span><br/><span class=\"co1\">;; (set-Point-x! p value), (set-Circle-r!  c value)  etc.</span><br/>\u00a0<br/><span class=\"co1\">;; Constructors</span><br/><span class=\"co1\">;; (Point) (Point x) (Point x y)</span><br/><span class=\"co1\">;; (Circle) (circle x) (Circle x y) (Circle x y r)</span><br/>\u00a0<br/><span class=\"co1\">;;Copy</span><br/><span class=\"br0\">(</span>print <span class=\"br0\">(</span>copy <span class=\"br0\">(</span>Circle <span class=\"nu0\">3</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    \u2192  \u2b55\ufe0f center:<span class=\"br0\">[</span><span class=\"nu0\">3</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span> radius:<span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"co1\">;;Assignment (to a variable)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> my<span class=\"sy0\">-</span>point <span class=\"br0\">(</span>Point <span class=\"nu0\">7</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;Destructor\u00a0: none. Points and Circles are garbage collected.</span><br/>\u00a0<br/><span class=\"co1\">;;Type checking</span><br/><span class=\"br0\">(</span>Point <span class=\"st0\">\"here\"</span> <span class=\"st0\">\"there\"</span><span class=\"br0\">)</span><br/>    \ud83d\udca3 error: Real\u00a0: type<span class=\"sy0\">-</span>check failure\u00a0: here \u2192 'Point:x'<br/>\u00a0<br/><span class=\"co1\">;;Initializer procedure</span><br/><span class=\"br0\">(</span>struct Circle <span class=\"br0\">(</span><span class=\"br0\">(</span>x <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>y <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>r <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">d</span><span class=\"br0\">)</span> #:initialize circle<span class=\"sy0\">-</span>init<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>circle<span class=\"sy0\">-</span>init Circle:c<span class=\"br0\">)</span> <span class=\"br0\">(</span>set<span class=\"sy0\">-</span>Circle<span class=\"sy0\">-</span><span class=\"kw1\">d</span><span class=\"sy0\">!</span> c <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">2</span> PI c.r<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>define<span class=\"sy0\">-</span>method <span class=\"br0\">(</span>print Circle:c<span class=\"br0\">)</span> <br/>    <span class=\"br0\">(</span>printf <span class=\"st0\">\"\u2b55\ufe0f center:[%d\u00a0%d] radius:%d diameter:%d\"</span> c.x c.y c.r c.<span class=\"kw1\">d</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>print <span class=\"br0\">(</span>Circle <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    \u2192 \u2b55\ufe0f center:<span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> radius:<span class=\"nu0\">10</span> diameter:<span class=\"nu0\">62.83185307179586</span><br/>\u00a0</pre>"}, {"lang": "Eiffel", "loc": 64, "block": "<pre class=\"eiffel highlighted_source\"><span class=\"kw1\">class</span><br/>    POINT<br/><span class=\"kw1\">inherit</span><br/>    <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+any&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ANY</span></a><br/>        <span class=\"kw2\">redefine</span><br/>            out<br/>        <span class=\"kw2\">end</span><br/><span class=\"kw2\">create</span><br/>    make, make_origin<br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"co1\">-- Initialization</span><br/>\u00a0<br/>    make <span class=\"br0\">(</span>a_x, a_y<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><br/>            <span class=\"co1\">-- Create with values `a_x' and `a_y'</span><br/>        <span class=\"kw2\">do</span><br/>            set_x <span class=\"br0\">(</span>a_x<span class=\"br0\">)</span><br/>            set_y <span class=\"br0\">(</span>a_y<span class=\"br0\">)</span><br/>        <span class=\"kw2\">ensure</span><br/>            x_set<span class=\"sy0\">:</span> x <span class=\"sy0\">=</span> a_x<br/>            y_set<span class=\"sy0\">:</span> y <span class=\"sy0\">=</span> a_y<br/>        <span class=\"kw2\">end</span><br/>\u00a0<br/>    make_origin<br/>            <span class=\"co1\">-- Create at origin</span><br/>        <span class=\"kw2\">do</span><br/>        <span class=\"kw2\">ensure</span><br/>            x_set<span class=\"sy0\">:</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>            y_set<span class=\"sy0\">:</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"co1\">-- Access</span><br/>\u00a0<br/>    x<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a> assign set_x<br/>            <span class=\"co1\">-- Horizontal axis coordinate</span><br/>\u00a0<br/>    y<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a> assign set_y<br/>            <span class=\"co1\">-- Vertical axis coordinate</span><br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"co1\">-- Element change</span><br/>\u00a0<br/>    set_x <span class=\"br0\">(</span>a_x<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><br/>            <span class=\"co1\">-- Set `x' coordinate to `a_x'</span><br/>        <span class=\"kw2\">do</span><br/>            x <span class=\"sy0\">:=</span> a_x<br/>        <span class=\"kw2\">ensure</span><br/>            x_set<span class=\"sy0\">:</span> x <span class=\"sy0\">=</span> a_x<br/>        <span class=\"kw2\">end</span><br/>\u00a0<br/>    set_y <span class=\"br0\">(</span>a_y<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><br/>            <span class=\"co1\">-- Set `y' coordinate to `a_y'</span><br/>        <span class=\"kw2\">do</span><br/>            y <span class=\"sy0\">:=</span> a_y<br/>        <span class=\"kw2\">ensure</span><br/>            y_set<span class=\"sy0\">:</span> y <span class=\"sy0\">=</span> a_y<br/>        <span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"co1\">-- Output</span><br/>\u00a0<br/>    out<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+string&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">STRING</span></a><br/>            <span class=\"co1\">-- Display as string</span><br/>        <span class=\"kw2\">do</span><br/>            <span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> <span class=\"st0\">\"Point:   x = \"</span> <span class=\"sy0\">+</span> x.<span class=\"me1\">out</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"   y = \"</span> <span class=\"sy0\">+</span> y.<span class=\"me1\">out</span><br/>        <span class=\"kw2\">end</span><br/><span class=\"kw2\">end</span></pre>"}, {"lang": "Ela", "loc": 43, "block": "<pre class=\"text highlighted_source\">type Point = Point x y<br/>\u00a0<br/>instance Show Point where<br/>  show (Point x y) = \"Point \" ++ (show x) ++ \" \" ++ (show y)<br/>\u00a0<br/>instance Name Point where<br/>  getField nm (Point x y)<br/>    | nm == \"x\" = x<br/>    | nm == \"y\" = y<br/>    | else = fail \"Undefined name.\"<br/>  isField nm _ = nm == \"x\" || nm == \"y\"<br/>\u00a0<br/>pointX = flip Point 0<br/>\u00a0<br/>pointY = Point 0<br/>\u00a0<br/>pointEmpty = Point 0 0<br/>\u00a0<br/>type Circle = Circle x y z<br/>\u00a0<br/>instance Show Circle where<br/>  show (Circle x y z) = <br/>    \"Circle \" ++ (show x) ++ \" \" ++ (show y) ++ \" \" ++ (show z)<br/>\u00a0<br/>instance Name Circle where<br/>  getField nm (Circle x y z)<br/>    | nm == \"x\" = x<br/>    | nm == \"y\" = y<br/>    | nm == \"z\" = z<br/>    | else = fail \"Undefined name.\"<br/>  isField nm _ = nm == \"x\" || nm == \"y\" || nm == \"z\"<br/>\u00a0<br/>circleXZ = flip Circle 0<br/>\u00a0<br/>circleX x = Circle x 0 0<br/>\u00a0<br/>circleYZ = Circle 0<br/>\u00a0<br/>circleY y = Circle 0 y 0<br/>\u00a0<br/>circleZ = Circle 0 0<br/>\u00a0<br/>circleEmpty = Circle 0 0 0</pre>"}, {"lang": "Elena", "loc": 46, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>\u00a0<br/>class Point<br/>{<br/>    int prop X\u00a0:: _x.<br/>    int prop Y\u00a0:: _y.<br/>\u00a0<br/>    constructor new(IntNumber x, IntNumber y)<br/>    [<br/>        _x\u00a0:= x.<br/>        _y\u00a0:= y.        <br/>    ]<br/>\u00a0<br/>    constructor new<br/>        &lt;= new(0,0).<br/>\u00a0<br/>    print [ console printLine(\"Point\") ]        <br/>}<br/>\u00a0<br/>class Circle\u00a0:: Point<br/>{<br/>    int prop R\u00a0:: _r.<br/>\u00a0<br/>    constructor new<br/>        &lt;= new(0).<br/>\u00a0<br/>    constructor new(IntNumber r)<br/>        &lt;= new(0, 0, r).<br/>\u00a0<br/>    constructor new(IntNumber x, IntNumber y, IntNumber r)<br/>        &lt;= new(x, y);<br/>    [<br/>        _r\u00a0:= r.<br/>    ]<br/>\u00a0<br/>    print [ console printLine(\"Circle\") ]        <br/>}<br/>\u00a0<br/>program =<br/>[<br/>    var p\u00a0:= Point new.<br/>    var c\u00a0:= Circle new.<br/>\u00a0<br/>    p print.<br/>    c print.<br/>].</pre>"}, {"lang": "Factor", "loc": 13, "block": "<pre class=\"text highlighted_source\">QUALIFIED: io \u00a0! there already is print in io<br/>\u00a0<br/>GENERIC: print ( shape -- )<br/>\u00a0<br/>TUPLE: point x y\u00a0;<br/>C: &lt;point&gt; point \u00a0! shorthand constructor definition<br/>\u00a0<br/>M: point print drop \"Point\" io:print\u00a0;<br/>\u00a0<br/>TUPLE: circle radius x y\u00a0;<br/>C: &lt;circle&gt; circle<br/>\u00a0<br/>M: circle print drop \"Circle\" io:print\u00a0;</pre>"}, {"lang": "Forth", "loc": 89, "block": "<pre class=\"text highlighted_source\">include lib/memcell.4th<br/>include 4pp/lib/foos.4pp<br/>\u00a0<br/>:: Point                               ( xn n a--)<br/>   class<br/>     field:  x                         \\ x coordinate<br/>     field:  y                         \\ y coordinate<br/>     method: print                     \\ print routine<br/>     method: setx                      \\ set x coordinate<br/>     method: sety                      \\ set y coordinate<br/>     method: getx                      \\ get x coordinate<br/>     method: gety                      \\ get y coordinate<br/>   end-class {<br/>                                       \\ bind the methods immediately<br/>    \u00a0:method { this -&gt; x\u00a0! }\u00a0; defines setx<br/>    \u00a0:method { this -&gt; y\u00a0! }\u00a0; defines sety<br/>    \u00a0:method { this -&gt; x @ }\u00a0; defines getx<br/>    \u00a0:method { this -&gt; y @ }\u00a0; defines gety<br/>                                       \\ because we'll use them immediately<br/>    \u00a0:method {                         \\ e.g. in this print routine<br/>       .\" Point(\" this =&gt; getx 0 .r .\" ,\" this =&gt; gety 0 .r .\" )\" cr<br/>     }\u00a0; defines print                 \\ and this initialization<br/>                                       \\ object or argument count<br/>     dup <a class=\"__cf_email__\" data-cfemail=\"4c38353c290c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> this <a class=\"__cf_email__\" data-cfemail=\"bacec3cadffa\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> =            \\ if it is an object, a point<br/>     if                                \\ get the coordinates and set them<br/>       dup =&gt; getx this =&gt; setx<br/>           =&gt; gety this =&gt; sety<br/>     else                              \\ otherwise initialize it<br/>       0 dup this =&gt; setx this =&gt; sety<br/>       case                            \\ and check the argument count<br/>         1 of this =&gt; setx endof       \\ one argument\u00a0: x only<br/>         2 of this =&gt; setx             \\ two arguments: x and y<br/>              this =&gt; sety endof<br/>       endcase<br/>     then<br/>\u00a0<br/>     private{ x y }                    \\ make x and y private<br/>   }<br/>;<br/>\u00a0<br/>:: Circle                              ( xn n a --)<br/>   over &gt;r                             ( arg-count object-addr)<br/>   extends Point                       \\ save the argument count!!<br/>     field:  r                         \\ radius<br/>     method: getr                      \\ get radius<br/>     method: setr                      \\ set radius<br/>   end-extends r&gt; swap {               \\ retrieve count<br/>                                       \\ bind the methods immediately<br/>    \u00a0:method { this -&gt; r\u00a0! }\u00a0; defines setr<br/>    \u00a0:method { this -&gt; r @ }\u00a0; defines getr<br/>                                       \\ because we'll use them immediately<br/>    \u00a0:method {                         \\ e.g. in this print routine<br/>       .\" Circle(\" this =&gt; getx 0 .r .\" ,\"<br/>                   this =&gt; gety 0 .r .\" ,\"<br/>                   this =&gt; getr 0 .r .\" )\" cr<br/>     }\u00a0; defines print                 \\ and this initialization<br/>                                       \\ object or argument count<br/>     dup <a class=\"__cf_email__\" data-cfemail=\"5e2a272e3b1e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> this <a class=\"__cf_email__\" data-cfemail=\"ed99949d88ad\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> =            \\ if it is an object, a circle<br/>     if                                \\ get the coordinates and set them<br/>       dup =&gt; getx this =&gt; setx<br/>       dup =&gt; gety this =&gt; sety<br/>           =&gt; getr this =&gt; setr<br/>     else                              \\ otherwise initialize it<br/>       0 this =&gt; setr<br/>       case                            \\ and check the argument count<br/>         3 of this =&gt; setr             \\ three arguments: x, y and r<br/>              this =&gt; sety             \\ note the rest is already set<br/>              this =&gt; setx endof       \\ by \"Point\" and r was left on<br/>       endcase                         \\ the stack!<br/>     then<br/>\u00a0<br/>     private{ r }<br/>   }<br/>;<br/>\u00a0<br/>0 new Point Point1<br/>Point1 =&gt; print<br/>45 23 2 new Point Point2<br/>Point2 =&gt; print<br/>Point2 new Point Point3<br/>Point3 =&gt; print<br/>78 1 new Point Point4<br/>Point4 =&gt; print<br/>10 45 23 3 new Circle Circle1<br/>Circle1 =&gt; print<br/>Point2 new Circle Circle2<br/>Circle2 =&gt; print<br/>Circle1 new Circle Circle3<br/>Circle3 =&gt; print</pre>"}, {"lang": "Fortran", "loc": 132, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/><span class=\"kw1\">module</span> geom<br/>\u00a0<br/>  <span class=\"kw3\">type</span> point<br/>     <span class=\"kw3\">real</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span>, <span class=\"kw3\">private</span>  <span class=\"sy0\">::</span> <span class=\"me2\">x</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>     <span class=\"kw3\">real</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span>, <span class=\"kw3\">private</span>  <span class=\"sy0\">::</span> <span class=\"me2\">y</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>   <span class=\"kw1\">contains</span><br/>     <span class=\"kw1\">procedure</span>, <span class=\"kw3\">public</span> <span class=\"sy0\">::</span> <span class=\"me2\">get_x</span><br/>     <span class=\"kw1\">procedure</span>, <span class=\"kw3\">public</span> <span class=\"sy0\">::</span> <span class=\"me2\">get_y</span><br/>     <span class=\"kw1\">procedure</span>, <span class=\"kw3\">public</span> <span class=\"sy0\">::</span> <span class=\"me2\">set_x</span><br/>     <span class=\"kw1\">procedure</span>, <span class=\"kw3\">public</span> <span class=\"sy0\">::</span> <span class=\"me2\">set_y</span><br/>     <span class=\"kw1\">procedure</span>, <span class=\"kw3\">public</span> <span class=\"sy0\">::</span> <span class=\"me2\">print</span> <span class=\"sy0\">=</span>&gt; print_point<br/>     <span class=\"kw1\">procedure</span>, pass <span class=\"sy0\">::</span> <span class=\"me2\">copy_point</span><br/>     <span class=\"co1\">!overloaded assignment operator</span><br/>     generic, <span class=\"kw3\">public</span> <span class=\"sy0\">::</span> <span class=\"me2\">assignment</span><span class=\"br0\">(</span><span class=\"sy0\">=</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span>&gt; copy_point<br/>  <span class=\"kw1\">end</span> <span class=\"kw3\">type</span> point<br/>\u00a0<br/>  <span class=\"kw3\">type</span>, extends<span class=\"br0\">(</span>point<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">circle</span><br/>     <span class=\"kw3\">real</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span>, <span class=\"kw3\">private</span>  <span class=\"sy0\">::</span> <span class=\"me2\">r</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>   <span class=\"kw1\">contains</span><br/>     <span class=\"kw1\">procedure</span>, <span class=\"kw3\">public</span> <span class=\"sy0\">::</span> <span class=\"me2\">get_r</span><br/>     <span class=\"kw1\">procedure</span>, <span class=\"kw3\">public</span> <span class=\"sy0\">::</span> <span class=\"me2\">set_r</span><br/>     <span class=\"kw1\">procedure</span>, <span class=\"kw3\">public</span> <span class=\"sy0\">::</span> <span class=\"me2\">print</span> <span class=\"sy0\">=</span>&gt; print_circle<br/>     <span class=\"kw1\">procedure</span>, pass <span class=\"sy0\">::</span> <span class=\"me2\">copy_circle</span><br/>     <span class=\"co1\">!overloaded assignment operator</span><br/>     generic, <span class=\"kw3\">public</span> <span class=\"sy0\">::</span> <span class=\"me2\">assignment</span><span class=\"br0\">(</span><span class=\"sy0\">=</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span>&gt; copy_circle<br/>  <span class=\"kw1\">end</span> <span class=\"kw3\">type</span> circle<br/>\u00a0<br/>  <span class=\"co1\">! constructor interface</span><br/>  <span class=\"kw1\">interface</span> circle<br/>  <span class=\"kw1\">module</span> <span class=\"kw1\">procedure</span> circle_constructor<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">interface</span> circle<br/>  <span class=\"co1\">! constructor interface</span><br/>  <span class=\"kw1\">interface</span> point<br/>  <span class=\"kw1\">module</span> <span class=\"kw1\">procedure</span> point_constructor<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">interface</span> point<br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/>  <span class=\"kw3\">real</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"kw1\">function</span> get_x<span class=\"br0\">(</span>this<span class=\"br0\">)</span><br/>    class<span class=\"br0\">(</span>point<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">this</span><br/>    get_x <span class=\"sy0\">=</span> this<span class=\"sy0\">%</span>x<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> get_x<br/>\u00a0<br/>  <span class=\"kw3\">real</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"kw1\">function</span> get_y<span class=\"br0\">(</span>this<span class=\"br0\">)</span><br/>    class<span class=\"br0\">(</span>point<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">this</span><br/>    get_y <span class=\"sy0\">=</span> this<span class=\"sy0\">%</span>y<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> get_y<br/>\u00a0<br/>  <span class=\"kw1\">subroutine</span> set_x<span class=\"br0\">(</span>this, <span class=\"kw4\">val</span><span class=\"br0\">)</span><br/>    class<span class=\"br0\">(</span>point<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">inout</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">this</span><br/>    <span class=\"kw3\">real</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span>         <span class=\"sy0\">::</span> <span class=\"kw4\">val</span><br/>    this<span class=\"sy0\">%</span>x <span class=\"sy0\">=</span> <span class=\"kw4\">val</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> set_x<br/>\u00a0<br/>  <span class=\"kw1\">subroutine</span> set_y<span class=\"br0\">(</span>this, <span class=\"kw4\">val</span><span class=\"br0\">)</span><br/>    class<span class=\"br0\">(</span>point<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">inout</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">this</span><br/>    <span class=\"kw3\">real</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span>         <span class=\"sy0\">::</span> <span class=\"kw4\">val</span><br/>    this<span class=\"sy0\">%</span>y <span class=\"sy0\">=</span> <span class=\"kw4\">val</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> set_y<br/>\u00a0<br/>  <span class=\"kw1\">subroutine</span> print_point<span class=\"br0\">(</span>this<span class=\"br0\">)</span><br/>    class<span class=\"br0\">(</span>point<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">this</span><br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">'(2(a,f0.4),a)'</span><span class=\"br0\">)</span> <span class=\"st0\">'Point('</span>,this<span class=\"sy0\">%</span>x,<span class=\"st0\">', '</span>,this<span class=\"sy0\">%</span>y,<span class=\"st0\">')'</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> print_point<br/>\u00a0<br/>  <span class=\"kw3\">real</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"kw1\">function</span> get_r<span class=\"br0\">(</span>this<span class=\"br0\">)</span><br/>    class<span class=\"br0\">(</span>circle<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">this</span><br/>    get_r <span class=\"sy0\">=</span> this<span class=\"sy0\">%</span>r<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> get_r<br/>\u00a0<br/>  <span class=\"kw1\">subroutine</span> set_r<span class=\"br0\">(</span>this, <span class=\"kw4\">val</span><span class=\"br0\">)</span><br/>    class<span class=\"br0\">(</span>circle<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">inout</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">this</span><br/>    <span class=\"kw3\">real</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span>          <span class=\"sy0\">::</span> <span class=\"kw4\">val</span><br/>    this<span class=\"sy0\">%</span>r <span class=\"sy0\">=</span> <span class=\"kw4\">val</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> set_r<br/>\u00a0<br/>  <span class=\"kw1\">subroutine</span> print_circle<span class=\"br0\">(</span>this<span class=\"br0\">)</span><br/>    class<span class=\"br0\">(</span>circle<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">this</span><br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">'(3(a,f0.4),a)'</span><span class=\"br0\">)</span> <span class=\"st0\">'Circle('</span>,this<span class=\"sy0\">%</span>x,<span class=\"st0\">', '</span>,this<span class=\"sy0\">%</span>y,<span class=\"st0\">'; '</span>,this<span class=\"sy0\">%</span>r,<span class=\"st0\">')'</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> print_circle<br/>\u00a0<br/>  <span class=\"kw1\">subroutine</span> copy_point<span class=\"br0\">(</span>this, rhs<span class=\"br0\">)</span><br/>      class<span class=\"br0\">(</span>point<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">inout</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">this</span><br/>      <span class=\"kw3\">type</span><span class=\"br0\">(</span>point<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">rhs</span><br/>      this<span class=\"sy0\">%</span>x <span class=\"sy0\">=</span> rhs<span class=\"sy0\">%</span>x<br/>      this<span class=\"sy0\">%</span>y <span class=\"sy0\">=</span> rhs<span class=\"sy0\">%</span>y<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> copy_point<br/>\u00a0<br/>  <span class=\"kw1\">subroutine</span> copy_circle<span class=\"br0\">(</span>this, rhs<span class=\"br0\">)</span><br/>      class<span class=\"br0\">(</span>circle<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">inout</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">this</span><br/>      <span class=\"kw3\">type</span><span class=\"br0\">(</span>circle<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">rhs</span><br/>      this<span class=\"sy0\">%</span>x <span class=\"sy0\">=</span> rhs<span class=\"sy0\">%</span>x<br/>      this<span class=\"sy0\">%</span>y <span class=\"sy0\">=</span> rhs<span class=\"sy0\">%</span>y<br/>      this<span class=\"sy0\">%</span>r <span class=\"sy0\">=</span> rhs<span class=\"sy0\">%</span>r<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> copy_circle<br/>\u00a0<br/><span class=\"co1\">! non-default constructor to init private components</span><br/>  <span class=\"kw3\">type</span><span class=\"br0\">(</span>point<span class=\"br0\">)</span> <span class=\"kw1\">function</span> point_constructor<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span><br/>  <span class=\"kw3\">real</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">x</span>,y<br/>  point_constructor<span class=\"sy0\">%</span>x <span class=\"sy0\">=</span> x<br/>  point_constructor<span class=\"sy0\">%</span>y <span class=\"sy0\">=</span> y<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> point_constructor<br/><span class=\"co1\">! non-default constructor to init private components</span><br/>  <span class=\"kw3\">type</span><span class=\"br0\">(</span>circle<span class=\"br0\">)</span> <span class=\"kw1\">function</span> circle_constructor<span class=\"br0\">(</span>x,y,r<span class=\"br0\">)</span><br/>  <span class=\"kw3\">real</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">x</span>,y,r<br/>  circle_constructor<span class=\"sy0\">%</span>x <span class=\"sy0\">=</span> x<br/>  circle_constructor<span class=\"sy0\">%</span>y <span class=\"sy0\">=</span> y<br/>  circle_constructor<span class=\"sy0\">%</span>r <span class=\"sy0\">=</span> r<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> circle_constructor<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">module</span> geom<br/>\u00a0<br/><span class=\"kw1\">program</span> inh<br/>  <span class=\"kw3\">use</span> geom<br/>\u00a0<br/>  <span class=\"kw3\">type</span><span class=\"br0\">(</span>point<span class=\"br0\">)</span>  <span class=\"sy0\">::</span> <span class=\"me2\">p</span>, p_copy<br/>  <span class=\"kw3\">type</span><span class=\"br0\">(</span>circle<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">c</span>, c_copy<br/>\u00a0<br/>  p <span class=\"sy0\">=</span> point<span class=\"br0\">(</span>2.0d0, 3.0d0<span class=\"br0\">)</span><br/>  <span class=\"kw1\">call</span> p<span class=\"sy0\">%</span>print<br/>  p_copy <span class=\"sy0\">=</span> p<br/>  <span class=\"kw1\">call</span> p_copy<span class=\"sy0\">%</span>print<br/>\u00a0<br/>  c <span class=\"sy0\">=</span> circle<span class=\"br0\">(</span>3.0d0, 4.0d0, 5.0d0<span class=\"br0\">)</span><br/>  <span class=\"kw1\">call</span> c<span class=\"sy0\">%</span>print<br/>  c_copy <span class=\"sy0\">=</span> c<br/>  <span class=\"kw1\">call</span> c_copy<span class=\"sy0\">%</span>print<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> inh<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 15, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">type</span> Printable <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">abstract</span> <span class=\"kw1\">member</span> Print\u00a0: <span class=\"kw4\">unit</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw4\">unit</span><br/>\u00a0<br/><span class=\"kw1\">type</span> Point<span class=\"br0\">(</span>?x,\u00a0?y<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">member</span> t.<span class=\"me1\">x</span> <span class=\"sy0\">=</span> defaultArg x <span class=\"nu0\">0.0</span><br/>  <span class=\"kw1\">member</span> t.<span class=\"me1\">y</span> <span class=\"sy0\">=</span> defaultArg y <span class=\"nu0\">0.0</span><br/>  <span class=\"kw1\">interface</span> Printable <span class=\"kw1\">with</span><br/>     <span class=\"kw1\">member</span> t.<span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> printfn <span class=\"st0\">\"Point(x:%f, y:%f)\"</span> t.<span class=\"me1\">x</span> t.<span class=\"me1\">y</span><br/>\u00a0<br/><span class=\"kw1\">type</span> Circle<span class=\"br0\">(</span>?center,\u00a0?radius<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">member</span> t.<span class=\"me1\">center</span> <span class=\"sy0\">=</span> defaultArg center <span class=\"br0\">(</span><span class=\"kw1\">new</span> Point<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">member</span> t.<span class=\"me1\">radius</span> <span class=\"sy0\">=</span> defaultArg radius <span class=\"nu0\">1.0</span><br/>  <span class=\"kw1\">interface</span> Printable <span class=\"kw1\">with</span><br/>    <span class=\"kw1\">member</span> t.<span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>      printfn <span class=\"st0\">\"Circle(x:%f, y:%f, r:%f)\"</span> t.<span class=\"me1\">center</span>.<span class=\"me1\">x</span> t.<span class=\"me1\">center</span>.<span class=\"me1\">y</span> t.<span class=\"me1\">radius</span></pre>"}, {"lang": "Go", "loc": 81, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw1\">type</span> point <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    x<span class=\"sy1\">,</span> y <span class=\"kw4\">float64</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> circle <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> r <span class=\"kw4\">float64</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> printer <span class=\"kw4\">interface</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw3\">print</span><span class=\"sy1\">()</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>p <span class=\"sy3\">*</span>point<span class=\"sy1\">)</span> <span class=\"kw3\">print</span><span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>p<span class=\"sy3\">.</span>x<span class=\"sy1\">,</span> p<span class=\"sy3\">.</span>y<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>c <span class=\"sy3\">*</span>circle<span class=\"sy1\">)</span> <span class=\"kw3\">print</span><span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>c<span class=\"sy3\">.</span>x<span class=\"sy1\">,</span> c<span class=\"sy3\">.</span>y<span class=\"sy1\">,</span> c<span class=\"sy3\">.</span>r<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> <span class=\"nu2\">i</span> printer            <span class=\"co1\">// polymorphic variable</span><br/>    <span class=\"nu2\">i</span> <span class=\"sy2\">=</span> newPoint<span class=\"sy1\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">)</span>       <span class=\"co1\">// assign one type</span><br/>    <span class=\"nu2\">i</span><span class=\"sy3\">.</span><span class=\"kw3\">print</span><span class=\"sy1\">()</span>                <span class=\"co1\">// call polymorphic function</span><br/>    <span class=\"nu2\">i</span> <span class=\"sy2\">=</span> newCircle<span class=\"sy1\">(</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">12</span><span class=\"sy1\">,</span> <span class=\"nu0\">13</span><span class=\"sy1\">)</span> <span class=\"co1\">// assign different type to same variable</span><br/>    <span class=\"nu2\">i</span><span class=\"sy3\">.</span><span class=\"kw3\">print</span><span class=\"sy1\">()</span>                <span class=\"co1\">// same call accesses different method now.</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Above is a sort of polymorphism: both types implement the printer</span><br/><span class=\"co1\">// interface.  The print function can be called through a variable</span><br/><span class=\"co1\">// of type printer, without knowing the underlying type.</span><br/>\u00a0<br/><span class=\"co1\">// Below is other stuff the task asks for.  Note that none of it is</span><br/><span class=\"co1\">// needed for cases as simple as this task, and it is not idomatic</span><br/><span class=\"co1\">// to write any of these functions in these simple cases.</span><br/>\u00a0<br/><span class=\"co1\">// Accessors are not idiomatic in Go.  Instead, simply access struct</span><br/><span class=\"co1\">// fields directly.  To allow access from another package, you \"export\"</span><br/><span class=\"co1\">// the field by capitalizing the field name. </span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>p <span class=\"sy3\">*</span>point<span class=\"sy1\">)</span> getX<span class=\"sy1\">()</span> <span class=\"kw4\">float64</span>  <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> p<span class=\"sy3\">.</span>x <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>p <span class=\"sy3\">*</span>point<span class=\"sy1\">)</span> getY<span class=\"sy1\">()</span> <span class=\"kw4\">float64</span>  <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> p<span class=\"sy3\">.</span>y <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>p <span class=\"sy3\">*</span>point<span class=\"sy1\">)</span> setX<span class=\"sy1\">(</span>v <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span> p<span class=\"sy3\">.</span>x <span class=\"sy2\">=</span> v <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>p <span class=\"sy3\">*</span>point<span class=\"sy1\">)</span> setY<span class=\"sy1\">(</span>v <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span> p<span class=\"sy3\">.</span>y <span class=\"sy2\">=</span> v <span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>c <span class=\"sy3\">*</span>circle<span class=\"sy1\">)</span> getX<span class=\"sy1\">()</span> <span class=\"kw4\">float64</span>  <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> c<span class=\"sy3\">.</span>x <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>c <span class=\"sy3\">*</span>circle<span class=\"sy1\">)</span> getY<span class=\"sy1\">()</span> <span class=\"kw4\">float64</span>  <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> c<span class=\"sy3\">.</span>y <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>c <span class=\"sy3\">*</span>circle<span class=\"sy1\">)</span> getR<span class=\"sy1\">()</span> <span class=\"kw4\">float64</span>  <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> c<span class=\"sy3\">.</span>r <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>c <span class=\"sy3\">*</span>circle<span class=\"sy1\">)</span> setX<span class=\"sy1\">(</span>v <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span> c<span class=\"sy3\">.</span>x <span class=\"sy2\">=</span> v <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>c <span class=\"sy3\">*</span>circle<span class=\"sy1\">)</span> setY<span class=\"sy1\">(</span>v <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span> c<span class=\"sy3\">.</span>y <span class=\"sy2\">=</span> v <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>c <span class=\"sy3\">*</span>circle<span class=\"sy1\">)</span> setR<span class=\"sy1\">(</span>v <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span> c<span class=\"sy3\">.</span>r <span class=\"sy2\">=</span> v <span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Copy constructors, not idiomatic.  Structs are assignable so</span><br/><span class=\"co1\">// you can simply declare and assign them as needed.</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>p <span class=\"sy3\">*</span>point<span class=\"sy1\">)</span> clone<span class=\"sy1\">()</span> <span class=\"sy3\">*</span>point   <span class=\"sy1\">{</span> r <span class=\"sy2\">:=</span> <span class=\"sy3\">*</span>p<span class=\"sy1\">;</span> <span class=\"kw1\">return</span> &amp;r <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>c <span class=\"sy3\">*</span>circle<span class=\"sy1\">)</span> clone<span class=\"sy1\">()</span> <span class=\"sy3\">*</span>circle <span class=\"sy1\">{</span> r <span class=\"sy2\">:=</span> <span class=\"sy3\">*</span>c<span class=\"sy1\">;</span> <span class=\"kw1\">return</span> &amp;r <span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Assignment methods, not idiomatic.  Just use the assignment operator.</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>p <span class=\"sy3\">*</span>point<span class=\"sy1\">)</span> set<span class=\"sy1\">(</span>q <span class=\"sy3\">*</span>point<span class=\"sy1\">)</span>   <span class=\"sy1\">{</span> <span class=\"sy3\">*</span>p <span class=\"sy2\">=</span> <span class=\"sy3\">*</span>q <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>c <span class=\"sy3\">*</span>circle<span class=\"sy1\">)</span> set<span class=\"sy1\">(</span>d <span class=\"sy3\">*</span>circle<span class=\"sy1\">)</span> <span class=\"sy1\">{</span> <span class=\"sy3\">*</span>c <span class=\"sy2\">=</span> <span class=\"sy3\">*</span>d <span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Constructors are idiomatic only when construction involves something</span><br/><span class=\"co1\">// more than just assigning initial values.  By default, structs</span><br/><span class=\"co1\">// are created as \"zero values,\" that is, with all fields zero,</span><br/><span class=\"co1\">// empty, or nil.  The struct literal synax allows for all fields to</span><br/><span class=\"co1\">// initialized, or for any subset of fields to be initialized by name.</span><br/><span class=\"co1\">// These feautures take the place of trivial default constructors.</span><br/><span class=\"co1\">// When additional initialization is needed, it is conventional to</span><br/><span class=\"co1\">// name a function New, New&lt;Type&gt;, or within a package, new&lt;Type&gt;</span><br/><span class=\"co1\">// as shown here.</span><br/><span class=\"kw4\">func</span> newPoint<span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> y <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"sy3\">*</span>point <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> &amp;point<span class=\"sy1\">{</span>x<span class=\"sy1\">,</span> y<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> newCircle<span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> r <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"sy3\">*</span>circle <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> &amp;circle<span class=\"sy1\">{</span>x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> r<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Destructors are never used in Go.  Objects are garbage collected.</span></pre>"}, {"lang": "Groovy", "loc": 18, "block": "<pre class=\"groovy highlighted_source\">@Canonical<br/>@TupleConstructor<span class=\"br0\">(</span>force <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20true\"><span class=\"kw2\">true</span></a><span class=\"br0\">)</span><br/>@ToString<span class=\"br0\">(</span>includeNames <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20true\"><span class=\"kw2\">true</span></a><span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20class\"><span class=\"kw2\">class</span></a> <a href=\"http://www.google.de/search?as_q=Point&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Point</span></a> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?as_q=Point&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=Point&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Point</span></a> p<span class=\"br0\">)</span> <span class=\"br0\">{</span> x <span class=\"sy0\">=</span> p.<span class=\"me1\">x</span><span class=\"sy0\">;</span> y <span class=\"sy0\">=</span> p.<span class=\"me1\">y</span> <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20void\"><span class=\"kw4\">void</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20print\"><span class=\"kw8\">print</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.de/search?as_q=Number&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Number</span></a> x<br/>    <a href=\"http://www.google.de/search?as_q=Number&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Number</span></a> y<br/><span class=\"br0\">}</span><br/>\u00a0<br/>@Canonical<br/>@TupleConstructor<span class=\"br0\">(</span>force <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20true\"><span class=\"kw2\">true</span></a><span class=\"br0\">)</span><br/>@ToString<span class=\"br0\">(</span>includeNames <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20true\"><span class=\"kw2\">true</span></a>, includeSuper <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20true\"><span class=\"kw2\">true</span></a><span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20class\"><span class=\"kw2\">class</span></a> Circle <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20extends\"><span class=\"kw2\">extends</span></a> <a href=\"http://www.google.de/search?as_q=Point&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Point</span></a> <span class=\"br0\">{</span><br/>    Circle<span class=\"br0\">(</span>Circle c<span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20super\"><span class=\"kw2\">super</span></a><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span> r <span class=\"sy0\">=</span> c.<span class=\"me1\">r</span> <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20void\"><span class=\"kw4\">void</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20print\"><span class=\"kw8\">print</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.de/search?as_q=Number&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Number</span></a> r<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 31, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">data</span> Point <span class=\"sy0\">=</span> Point <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><br/><span class=\"kw1\">instance</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a> Point <span class=\"kw1\">where</span><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"br0\">(</span>Point x y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Point at \"</span><span class=\"sy0\">++</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> x<span class=\"br0\">)</span><span class=\"sy0\">++</span><span class=\"st0\">\",\"</span><span class=\"sy0\">++</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> y<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- Constructor that sets y to 0</span><br/>ponXAxis <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:flip\"><span class=\"kw3\">flip</span></a> Point <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"co1\">-- Constructor that sets x to 0</span><br/>ponYAxis <span class=\"sy0\">=</span> Point <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"co1\">-- Constructor that sets x and y to 0</span><br/>porigin <span class=\"sy0\">=</span> Point <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw1\">data</span> Circle <span class=\"sy0\">=</span> Circle <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><br/><span class=\"kw1\">instance</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a> Circle <span class=\"kw1\">where</span><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"br0\">(</span>Circle x y r<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Circle at \"</span><span class=\"sy0\">++</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> x<span class=\"br0\">)</span><span class=\"sy0\">++</span><span class=\"st0\">\",\"</span><span class=\"sy0\">++</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> y<span class=\"br0\">)</span><span class=\"sy0\">++</span><span class=\"st0\">\" with radius \"</span><span class=\"sy0\">++</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> r<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- Constructor that sets y to 0</span><br/>conXAxis <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:flip\"><span class=\"kw3\">flip</span></a> Circle <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"co1\">-- Constructor that sets x to 0</span><br/>conYAxis <span class=\"sy0\">=</span> Circle <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"co1\">-- Constructor that sets x and y to 0</span><br/>catOrigin <span class=\"sy0\">=</span> Circle <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"co1\">--Constructor that sets y and r to 0</span><br/>c0OnXAxis <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:flip\"><span class=\"kw3\">flip</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:flip\"><span class=\"kw3\">flip</span></a> Circle <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"co1\">--Constructor that sets x and r to 0</span><br/>c0OnYAxis <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:flip\"><span class=\"kw3\">flip</span></a> <span class=\"br0\">(</span>Circle <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span></pre>"}, {"lang": "Icon and Unicon", "loc": 64, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">class</span> Circle <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> r<span class=\"br0\">)</span><br/>  <span class=\"co1\"># make a new copy of this instance</span><br/>  <span class=\"kw1\">method</span> <span class=\"kw4\">copy</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> Circle <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> r<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\"># print a representation of this instance</span><br/>  <span class=\"kw1\">method</span> print <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"st0\">\"Circle (\"</span> <span class=\"sy0\">||</span> x <span class=\"sy0\">||</span> <span class=\"st0\">\", \"</span> <span class=\"sy0\">||</span> y <span class=\"sy0\">||</span> <span class=\"st0\">\", \"</span> <span class=\"sy0\">||</span> r <span class=\"sy0\">||</span> <span class=\"st0\">\")\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\"># called during instance construction, to pass in field values</span><br/>  <span class=\"kw1\">initially</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> r<span class=\"br0\">)</span><br/>    self<span class=\"sy0\">.</span><span class=\"me1\">x</span> <span class=\"sy0\">:=</span> <span class=\"kw1\">if</span> <span class=\"sy0\">/</span>x <span class=\"kw1\">then</span> <span class=\"nu0\">0</span> <span class=\"kw1\">else</span> x <span class=\"co1\"># set to 0 if argument not present</span><br/>    self<span class=\"sy0\">.</span><span class=\"me1\">y</span> <span class=\"sy0\">:=</span> <span class=\"kw1\">if</span> <span class=\"sy0\">/</span>y <span class=\"kw1\">then</span> <span class=\"nu0\">0</span> <span class=\"kw1\">else</span> y<br/>    self<span class=\"sy0\">.</span><span class=\"me1\">r</span> <span class=\"sy0\">:=</span> <span class=\"kw1\">if</span> <span class=\"sy0\">/</span>r <span class=\"kw1\">then</span> <span class=\"nu0\">0</span> <span class=\"kw1\">else</span> r<br/>\u00a0<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Point <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><br/>  <span class=\"co1\"># make a new copy of this instance</span><br/>  <span class=\"kw1\">method</span> <span class=\"kw4\">copy</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> Point <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\"># print a representation of this instance</span><br/>  <span class=\"kw1\">method</span> print <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"st0\">\"Point (\"</span> <span class=\"sy0\">||</span> x <span class=\"sy0\">||</span> <span class=\"st0\">\", \"</span> <span class=\"sy0\">||</span> y <span class=\"sy0\">||</span> <span class=\"st0\">\")\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\"># called during instance construction, to pass in field values</span><br/>  <span class=\"kw1\">initially</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><br/>    self<span class=\"sy0\">.</span><span class=\"me1\">x</span> <span class=\"sy0\">:=</span> <span class=\"kw1\">if</span> <span class=\"sy0\">/</span>x <span class=\"kw1\">then</span> <span class=\"nu0\">0</span> <span class=\"kw1\">else</span> x <span class=\"co1\"># set to 0 if argument not present</span><br/>    self<span class=\"sy0\">.</span><span class=\"me1\">y</span> <span class=\"sy0\">:=</span> <span class=\"kw1\">if</span> <span class=\"sy0\">/</span>y <span class=\"kw1\">then</span> <span class=\"nu0\">0</span> <span class=\"kw1\">else</span> y<br/>\u00a0<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  p1 <span class=\"sy0\">:=</span> Point <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  p2 <span class=\"sy0\">:=</span> Point <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  p3 <span class=\"sy0\">:=</span> Point <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  p4 <span class=\"sy0\">:=</span> p3<span class=\"sy0\">.</span><span class=\"kw4\">copy</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"st0\">\"Points:\"</span><span class=\"br0\">)</span><br/>  p1<span class=\"sy0\">.</span><span class=\"me1\">print</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  p2<span class=\"sy0\">.</span><span class=\"me1\">print</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  p3<span class=\"sy0\">.</span><span class=\"me1\">print</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  p4<span class=\"sy0\">.</span><span class=\"me1\">print</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"co1\"># demonstrate field mutator/accessor</span><br/>  p3<span class=\"sy0\">.</span><span class=\"me1\">x</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">3</span><br/>  <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"st0\">\"p3 value of x is: \"</span> <span class=\"sy0\">||</span> p3<span class=\"sy0\">.</span><span class=\"me1\">x</span><span class=\"br0\">)</span><br/>\u00a0<br/>  c1 <span class=\"sy0\">:=</span> Circle <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  c2 <span class=\"sy0\">:=</span> Circle <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  c3 <span class=\"sy0\">:=</span> Circle <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  c4 <span class=\"sy0\">:=</span> Circle <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"st0\">\"Circles:\"</span><span class=\"br0\">)</span><br/>  c1<span class=\"sy0\">.</span><span class=\"me1\">print</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  c2<span class=\"sy0\">.</span><span class=\"me1\">print</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  c3<span class=\"sy0\">.</span><span class=\"me1\">print</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  c4<span class=\"sy0\">.</span><span class=\"me1\">print</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Inform 7", "loc": 19, "block": "<pre class=\"text highlighted_source\">Space is a room.<br/>\u00a0<br/>A point is a kind of thing.<br/>A point has a number called X position.<br/>A point has a number called Y position.<br/>\u00a0<br/>A circle is a kind of point.<br/>A circle has a number called radius.<br/>\u00a0<br/>To print (P - point): say \"Point: [X position of P], [Y position of P].\"<br/>To print (C - circle): say \"Circle: [X position of C], [Y position of C] radius [radius of C].\"<br/>\u00a0<br/>The origin is a point with X position 0 and Y position 0.<br/>The circle of power is a circle with X position 100, Y position 25, radius 7.<br/>\u00a0<br/>When play begins:<br/>\tprint the origin;<br/>\tprint the circle of power;<br/>\tend the story.</pre>"}, {"lang": "J", "loc": 12, "block": "<pre class=\"j highlighted_source\">coclass <span class=\"st_h\">'Point'</span><br/>create=: monad define<br/>  <span class=\"st_h\">'X Y'</span>=:<span class=\"nu0\">2</span>{.<span class=\"kw2\">y</span><br/><span class=\"sy0\">)</span><br/>getX=: monad def <span class=\"st_h\">'X'</span><br/>getY=: monad def <span class=\"st_h\">'Y'</span><br/>setX=: monad def <span class=\"st_h\">'X=:y'</span><br/>setY=: monad def <span class=\"st_h\">'Y=:y'</span><br/>print=: monad define<br/>  smoutput <span class=\"st_h\">'Point '</span>,\":X,Y<br/><span class=\"sy0\">)</span><br/>destroy=: codestroy</pre>"}, {"lang": "Java", "loc": 35, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">class</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">protected</span> <span class=\"kw4\">int</span> x, y<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">this</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>   <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">this</span><span class=\"br0\">(</span>x, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>   <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">this</span>.<span class=\"me1\">x</span> <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span> <span class=\"kw1\">this</span>.<span class=\"me1\">y</span> <span class=\"sy0\">=</span> y<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>   <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> p<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">this</span><span class=\"br0\">(</span>p.<span class=\"me1\">x</span>, p.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>   <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> getX<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"kw1\">this</span>.<span class=\"me1\">x</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>   <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> getY<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"kw1\">this</span>.<span class=\"me1\">y</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>   <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> setX<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">this</span>.<span class=\"me1\">x</span> <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>   <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> setY<span class=\"br0\">(</span><span class=\"kw4\">int</span> y<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">this</span>.<span class=\"me1\">y</span> <span class=\"sy0\">=</span> y<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>   <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> print<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Point x: \"</span> <span class=\"sy0\">+</span> <span class=\"kw1\">this</span>.<span class=\"me1\">x</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" y: \"</span> <span class=\"sy0\">+</span> <span class=\"kw1\">this</span>.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Circle <span class=\"kw1\">extends</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">private</span> <span class=\"kw4\">int</span> r<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">public</span> Circle<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> p<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">this</span><span class=\"br0\">(</span>p, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>   <span class=\"kw1\">public</span> Circle<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> p, <span class=\"kw4\">int</span> r<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">super</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">this</span>.<span class=\"me1\">r</span> <span class=\"sy0\">=</span> r<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>   <span class=\"kw1\">public</span> Circle<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">this</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>   <span class=\"kw1\">public</span> Circle<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">this</span><span class=\"br0\">(</span>x, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>   <span class=\"kw1\">public</span> Circle<span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">this</span><span class=\"br0\">(</span>x, y, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>   <span class=\"kw1\">public</span> Circle<span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y, <span class=\"kw4\">int</span> r<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">super</span><span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">this</span>.<span class=\"me1\">r</span> <span class=\"sy0\">=</span> r<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>   <span class=\"kw1\">public</span> Circle<span class=\"br0\">(</span>Circle c<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">this</span><span class=\"br0\">(</span>c.<span class=\"me1\">x</span>, c.<span class=\"me1\">y</span>, c.<span class=\"me1\">r</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>   <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> getR<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"kw1\">this</span>.<span class=\"me1\">r</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>   <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> setR<span class=\"br0\">(</span><span class=\"kw4\">int</span> r<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">this</span>.<span class=\"me1\">r</span> <span class=\"sy0\">=</span> r<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>   <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> print<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Circle x: \"</span> <span class=\"sy0\">+</span> <span class=\"kw1\">this</span>.<span class=\"me1\">x</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" y: \"</span> <span class=\"sy0\">+</span> <span class=\"kw1\">this</span>.<span class=\"me1\">y</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" r: \"</span> <span class=\"sy0\">+</span> <span class=\"kw1\">this</span>.<span class=\"me1\">r</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> test <span class=\"br0\">{</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> args<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> p <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> c <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Circle<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    p.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    c.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>     <br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 63, "block": "<pre class=\"javascript highlighted_source\"><span class=\"coMULTI\">/* create new Point in one of these ways:<br/> *    var p = new Point(x,y);<br/> *    var p = new Point(a_point);<br/> * default value for x,y is 0<br/> */</span><br/><span class=\"kw1\">function</span> Point<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> arg1 <span class=\"sy0\">=</span> arguments<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">var</span> arg2 <span class=\"sy0\">=</span> arguments<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>arg1 <span class=\"kw1\">instanceof</span> Point<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">x</span> <span class=\"sy0\">=</span> arg1.<span class=\"me1\">x</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">y</span> <span class=\"sy0\">=</span> arg1.<span class=\"me1\">y</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"br0\">{</span> <br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">x</span> <span class=\"sy0\">=</span> arg1 <span class=\"sy0\">==</span> <span class=\"kw2\">null</span> <span class=\"sy0\">?</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span> arg1<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">y</span> <span class=\"sy0\">=</span> arg2 <span class=\"sy0\">==</span> <span class=\"kw2\">null</span> <span class=\"sy0\">?</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span> arg1<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <br/>\u00a0<br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">set_x</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>_x<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw1\">this</span>.<span class=\"me1\">x</span> <span class=\"sy0\">=</span> _x<span class=\"sy0\">;</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">set_y</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>_y<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw1\">this</span>.<span class=\"me1\">y</span> <span class=\"sy0\">=</span> _y<span class=\"sy0\">;</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>Point.<span class=\"kw1\">prototype</span>.<span class=\"me1\">print</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> out <span class=\"sy0\">=</span> <span class=\"st0\">\"Point(\"</span> <span class=\"sy0\">+</span> <span class=\"kw1\">this</span>.<span class=\"me1\">x</span> <span class=\"sy0\">+</span> <span class=\"st0\">\",\"</span> <span class=\"sy0\">+</span> <span class=\"kw1\">this</span>.<span class=\"me1\">y</span> <span class=\"sy0\">+</span> <span class=\"st0\">\")\"</span><span class=\"sy0\">;</span><br/>    print<span class=\"br0\">(</span>out<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* create new Circle in one of these ways:<br/> *    var c = new Circle(x,y,r);<br/> *    var c = new Circle(a_circle);<br/> *    var c = new Circle(a_point,r);<br/> * default value for x,y,r is 0<br/> */</span><br/><span class=\"kw1\">function</span> Circle<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> arg1 <span class=\"sy0\">=</span> arguments<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">var</span> arg2 <span class=\"sy0\">=</span> arguments<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">var</span> arg3 <span class=\"sy0\">=</span> arguments<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>arg1 <span class=\"kw1\">instanceof</span> Circle<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">x</span> <span class=\"sy0\">=</span> arg1.<span class=\"me1\">x</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">y</span> <span class=\"sy0\">=</span> arg1.<span class=\"me1\">y</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">r</span> <span class=\"sy0\">=</span> arg1.<span class=\"me1\">r</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>arg1 <span class=\"kw1\">instanceof</span> Point<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">x</span> <span class=\"sy0\">=</span> arg1.<span class=\"me1\">x</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">y</span> <span class=\"sy0\">=</span> arg1.<span class=\"me1\">y</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">r</span> <span class=\"sy0\">=</span> arg2 <span class=\"sy0\">==</span> <span class=\"kw2\">null</span> <span class=\"sy0\">?</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span> arg2<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"br0\">{</span> <br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">x</span> <span class=\"sy0\">=</span> arg1 <span class=\"sy0\">==</span> <span class=\"kw2\">null</span> <span class=\"sy0\">?</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span> arg1<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">y</span> <span class=\"sy0\">=</span> arg2 <span class=\"sy0\">==</span> <span class=\"kw2\">null</span> <span class=\"sy0\">?</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span> arg2<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">r</span> <span class=\"sy0\">=</span> arg3 <span class=\"sy0\">==</span> <span class=\"kw2\">null</span> <span class=\"sy0\">?</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span> arg3<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <br/>\u00a0<br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">set_x</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>_x<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw1\">this</span>.<span class=\"me1\">x</span> <span class=\"sy0\">=</span> _x<span class=\"sy0\">;</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">set_y</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>_y<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw1\">this</span>.<span class=\"me1\">y</span> <span class=\"sy0\">=</span> _y<span class=\"sy0\">;</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">set_r</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>_r<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw1\">this</span>.<span class=\"me1\">r</span> <span class=\"sy0\">=</span> _r<span class=\"sy0\">;</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>Circle.<span class=\"kw1\">prototype</span>.<span class=\"me1\">print</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> out <span class=\"sy0\">=</span> <span class=\"st0\">\"Circle(\"</span> <span class=\"sy0\">+</span> <span class=\"kw1\">this</span>.<span class=\"me1\">x</span> <span class=\"sy0\">+</span> <span class=\"st0\">\",\"</span> <span class=\"sy0\">+</span> <span class=\"kw1\">this</span>.<span class=\"me1\">y</span> <span class=\"sy0\">+</span> <span class=\"st0\">\",\"</span> <span class=\"sy0\">+</span> <span class=\"kw1\">this</span>.<span class=\"me1\">r</span> <span class=\"sy0\">+</span> <span class=\"st0\">\")\"</span><span class=\"sy0\">;</span><br/>    print<span class=\"br0\">(</span>out<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 16, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>def Point(x;y): {\"type\": \"Point\", \"x\": x, \"y\": y};<br/>def Point(x): Point(x;0);<br/>def Point: Point(0);<br/>\u00a0<br/>def Circle(x;y;r): {\"type\": \"Circle\", \"x\": x, \"y\": y, \"r\": r};<br/>def Circle(x;y): Circle(x;y;0);<br/>def Circle(x): Circle(x;0);<br/>def Circle: Circle(0);<br/>\u00a0<br/>def print:<br/>  if  .type == \"Circle\" then \"\\(.type)(\\(.x); \\(.y); \\(.r))\"<br/>  elif .type == \"Point\" then \"\\(.type)(\\(.x); \\(.y))\"<br/>  else empty<br/>  end;<br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 28, "block": "<pre class=\"text highlighted_source\">mutable struct Point<br/>\tx::Float64<br/>\ty::Float64<br/>end<br/>\u00a0<br/>Base.show(io::IO, p::Point) = print(io, \"Point($(p.x), $(p.y))\")<br/>\u00a0<br/>getx(p::Point) = p.x<br/>gety(p::Point) = p.y<br/>\u00a0<br/>setx(p::Point, x) = (p.x = x)<br/>sety(p::Point, y) = (p.y = y)<br/>\u00a0<br/>mutable struct Circle<br/>\tx::Float64<br/>\ty::Float64<br/>\tr::Float64<br/>end<br/>\u00a0<br/>getx(c::Circle) = c.x<br/>gety(c::Circle) = c.y<br/>getr(c::Circle) = c.r<br/>\u00a0<br/>setx(c::Circle, x) = (c.x = x)<br/>sety(c::Circle, y) = (c.y = y)<br/>setr(c::Circle, r) = (c.r = r)<br/>\u00a0<br/>Base.show(io::IO, c::Circle) = print(io, \"Circle($(c.x), $(c.y), $(c.r))\")</pre>"}, {"lang": "Kotlin", "loc": 56, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/>open <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Point<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> x<span class=\"sy0\">:</span> Int, <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> y<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    constructor<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/>    constructor<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">:</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">(</span>x, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/>    constructor<span class=\"br0\">(</span>p<span class=\"sy0\">:</span> Point<span class=\"br0\">)</span> <span class=\"sy0\">:</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">(</span>p.<span class=\"me1\">x</span>, p.<span class=\"me1\">y</span><span class=\"br0\">)</span><br/>\u00a0<br/>    open <a href=\"http://scala-lang.org\"><span class=\"kw1\">protected</span></a> fun finalize<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> println<span class=\"br0\">(</span><span class=\"st0\">\"Finalizing $this...\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Point at ($x, $y)\"</span><br/>\u00a0<br/>    open fun print<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> println<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Circle<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Int, y<span class=\"sy0\">:</span> Int, <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> r<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">:</span> Point<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    constructor<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/>    constructor<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">:</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">(</span>x, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/>    constructor<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Int, r<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">:</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">(</span>x, <span class=\"nu0\">0</span>, r<span class=\"br0\">)</span><br/>\u00a0<br/>    constructor<span class=\"br0\">(</span>c<span class=\"sy0\">:</span> Circle<span class=\"br0\">)</span> <span class=\"sy0\">:</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">(</span>c.<span class=\"me1\">x</span>, c.<span class=\"me1\">y</span>, c.<span class=\"me1\">r</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// for simplicity not calling super.finalize() below though this would normally be done in practice</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">protected</span></a> fun finalize<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> println<span class=\"br0\">(</span><span class=\"st0\">\"Finalizing $this...\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Circle at center ($x, $y), radius $r\"</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun print<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> println<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun createObjects<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> points <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span>Point<span class=\"br0\">(</span><span class=\"br0\">)</span>, Point<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, Point<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span>, Point<span class=\"br0\">(</span>Point<span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>point in points<span class=\"br0\">)</span> point.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> circles <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span>Circle<span class=\"br0\">(</span><span class=\"br0\">)</span>, Circle<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, Circle<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span>, Circle<span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">6</span><span class=\"br0\">)</span>, Circle<span class=\"br0\">(</span>Circle<span class=\"br0\">(</span><span class=\"nu0\">7</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>circle in circles<span class=\"br0\">)</span> circle.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    createObjects<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    System.<span class=\"me1\">gc</span><span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"co1\">// try and force garbage collection</span><br/>    Thread.<span class=\"me1\">sleep</span><span class=\"br0\">(</span><span class=\"nu0\">2000</span><span class=\"br0\">)</span> <span class=\"co1\">// allow time for finalizers to run</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> p <span class=\"sy0\">=</span> Point<span class=\"br0\">(</span><span class=\"nu0\">5</span>, <span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>    p.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    p.<span class=\"me1\">y</span> <span class=\"sy0\">=</span> <span class=\"nu0\">7</span>  <span class=\"co1\">// change y coordinate</span><br/>    p.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> c <span class=\"sy0\">=</span> Circle<span class=\"br0\">(</span><span class=\"nu0\">5</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>    c.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    c.<span class=\"me1\">r</span> <span class=\"sy0\">=</span> <span class=\"nu0\">8</span><br/>    c.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">// change radius</span><br/>    <span class=\"coMULTI\">/* note that finalizers for p and c are not called */</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 29, "block": "<pre class=\"lua highlighted_source\"><span class=\"co1\">-- Point</span><br/><span class=\"kw1\">local</span> Point <span class=\"sy0\">=</span> <span class=\"br0\">{</span>x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Point<span class=\"sy0\">:</span>new<span class=\"br0\">(</span>o<span class=\"br0\">)</span><br/>    o <span class=\"sy0\">=</span> o <span class=\"kw2\">or</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">setmetatable</span><span class=\"br0\">(</span>o<span class=\"sy0\">,</span> self<span class=\"br0\">)</span><br/>    self<span class=\"sy0\">.</span>__index <span class=\"sy0\">=</span> self<br/>    <span class=\"kw1\">return</span> o<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Point<span class=\"sy0\">:</span><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Point(\"</span> <span class=\"sy0\">..</span> self<span class=\"sy0\">.</span>x <span class=\"sy0\">..</span> <span class=\"st0\">\", \"</span> <span class=\"sy0\">..</span> self<span class=\"sy0\">.</span>y <span class=\"sy0\">..</span> <span class=\"st0\">\")\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Point<span class=\"sy0\">:</span>copy<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> Point<span class=\"sy0\">:</span>new<span class=\"br0\">{</span>x <span class=\"sy0\">=</span> self<span class=\"sy0\">.</span>x<span class=\"sy0\">,</span> y <span class=\"sy0\">=</span> self<span class=\"sy0\">.</span>y<span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Circle</span><br/><span class=\"kw1\">local</span> Circle <span class=\"sy0\">=</span> Point<span class=\"sy0\">:</span>new<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>Circle<span class=\"sy0\">.</span>r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Circle<span class=\"sy0\">:</span><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Circle(\"</span> <span class=\"sy0\">..</span> self<span class=\"sy0\">.</span>x <span class=\"sy0\">..</span> <span class=\"st0\">\", \"</span> <span class=\"sy0\">..</span> self<span class=\"sy0\">.</span>y <span class=\"sy0\">..</span> <span class=\"st0\">\", \"</span> <span class=\"sy0\">..</span> self<span class=\"sy0\">.</span>r <span class=\"sy0\">..</span> <span class=\"st0\">\")\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Circle<span class=\"sy0\">:</span>copy<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> Circle<span class=\"sy0\">:</span>new<span class=\"br0\">{</span>x <span class=\"sy0\">=</span> self<span class=\"sy0\">.</span>x<span class=\"sy0\">,</span> y <span class=\"sy0\">=</span> self<span class=\"sy0\">.</span>y<span class=\"sy0\">,</span> r <span class=\"sy0\">=</span> self<span class=\"sy0\">.</span>r<span class=\"br0\">}</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "M2000 Interpreter", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\\\\ block For This {}, or For object [, object2] { }, where object is a group, or a pointer to group, or an item from an array contains a group<br/>\\\\ This is \"this context\".<br/>For This {<br/>\\\\ any new definition here has a temporary use<br/>\\\\ can be nested, but if we use object then we can use dots to access members of it. If we use a second one then we have to use double dots (..x for second object, for access to x member)<br/>}<br/>\u00a0</pre>"}, {"lang": "NetRexx", "loc": 105, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>\u00a0<br/>options replace format comments java crossref savelog symbols <span class=\"kw2\">binary</span><br/>\u00a0<br/><span class=\"co1\">-- -----------------------------------------------------------------------------</span><br/><span class=\"kw1\">class</span> RCPolymorphism <span class=\"kw2\">public</span> <span class=\"kw2\">final</span><br/>\u00a0<br/>method main<span class=\"br0\">(</span>args = String<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">constant</span><br/>\u00a0<br/>  parry = <span class=\"br0\">[</span>Point                    -<br/>      Point<span class=\"br0\">(</span><span class=\"br0\">)</span>                       -<br/>    , Point<span class=\"br0\">(</span><span class=\"nu0\">1.0</span><span class=\"br0\">)</span>                    -<br/>    , Point<span class=\"br0\">(</span><span class=\"nu0\">1.0</span>, <span class=\"nu0\">2.0</span><span class=\"br0\">)</span>               -<br/>    , Point<span class=\"br0\">(</span>Point<span class=\"br0\">(</span><span class=\"nu0\">0.3</span>, <span class=\"nu0\">0.2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>        -<br/>    , Circle<span class=\"br0\">(</span><span class=\"br0\">)</span>                      -<br/>    , Circle<span class=\"br0\">(</span><span class=\"nu0\">2.0</span>, <span class=\"nu0\">2.0</span><span class=\"br0\">)</span>              -<br/>    , Circle<span class=\"br0\">(</span><span class=\"nu0\">5.0</span>, <span class=\"nu0\">6.0</span>, <span class=\"nu0\">7.0</span><span class=\"br0\">)</span>         -<br/>    , Circle<span class=\"br0\">(</span>Point<span class=\"br0\">(</span><span class=\"nu0\">8.0</span>, <span class=\"nu0\">9.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>       -<br/>    , Circle<span class=\"br0\">(</span>Point<span class=\"br0\">(</span><span class=\"nu0\">8.0</span>, <span class=\"nu0\">9.0</span><span class=\"br0\">)</span>, <span class=\"nu0\">4.0</span><span class=\"br0\">)</span>  -<br/>    , Circle<span class=\"br0\">(</span>Circle<span class=\"br0\">(</span><span class=\"nu0\">1.5</span>, <span class=\"nu0\">1.4</span>, <span class=\"nu0\">1.3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> -<br/>  <span class=\"br0\">]</span><br/>\u00a0<br/>  <span class=\"kw1\">loop</span> pp = <span class=\"nu0\">0</span> to parry.<span class=\"me0\">length</span> - <span class=\"nu0\">1</span><br/>    parry<span class=\"br0\">[</span>pp<span class=\"br0\">]</span>.<span class=\"me0\">print</span><br/>    <span class=\"kw3\">end</span> pp<br/>\u00a0<br/>  <span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- -----------------------------------------------------------------------------</span><br/><span class=\"kw1\">class</span> RCPolymorphism.<span class=\"me0\">Point</span> <span class=\"kw2\">public</span> <span class=\"kw2\">binary</span><br/>\u00a0<br/><span class=\"kw1\">properties</span> <span class=\"kw2\">private</span><br/>  x = double<br/>  y = double<br/>  className = Point.<span class=\"kw1\">class</span>.<span class=\"me0\">getSimpleName</span><br/>\u00a0<br/>method Point<span class=\"br0\">(</span>x_ = double <span class=\"nu0\">0.0</span>, y_ = double <span class=\"nu0\">0.0</span><span class=\"br0\">)</span><br/>  setX<span class=\"br0\">(</span>x_<span class=\"br0\">)</span><br/>  setY<span class=\"br0\">(</span>y_<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span><br/>\u00a0<br/>method Point<span class=\"br0\">(</span>p = Point<span class=\"br0\">)</span><br/>  this<span class=\"br0\">(</span>p.<span class=\"me0\">getX</span>, p.<span class=\"me0\">getY</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span><br/>\u00a0<br/>method display <span class=\"kw2\">public</span> <span class=\"kw2\">returns</span> String<br/>  hx = <span class=\"st0\">'@'</span>Rexx<span class=\"br0\">(</span>Integer.<span class=\"me0\">toHexString</span><span class=\"br0\">(</span><span class=\"kw6\">hashCode</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">8</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  str = Rexx<span class=\"br0\">(</span>className<span class=\"br0\">)</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"st0\">':'</span>hx<span class=\"st0\">': (x,y) = ('</span> <span class=\"sy0\">||</span> -<br/>        Rexx<span class=\"br0\">(</span>getX<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me0\">format</span><span class=\"br0\">(</span>null, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"st0\">','</span> -<br/>        Rexx<span class=\"br0\">(</span>getY<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me0\">format</span><span class=\"br0\">(</span>null, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"st0\">')'</span><br/>  <span class=\"kw1\">return</span> str<br/>\u00a0<br/>method getX <span class=\"kw2\">public</span> <span class=\"kw2\">returns</span> double<br/>  <span class=\"kw1\">return</span> x<br/>\u00a0<br/>method getY <span class=\"kw2\">public</span> <span class=\"kw2\">returns</span> double<br/>  <span class=\"kw1\">return</span> y<br/>\u00a0<br/>method setX<span class=\"br0\">(</span>x_ = double <span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <span class=\"kw2\">inheritable</span><br/>  x = x_<br/>  <span class=\"kw1\">return</span><br/>\u00a0<br/>method setY<span class=\"br0\">(</span>y_ = double <span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <span class=\"kw2\">inheritable</span><br/>  y = y_<br/>  <span class=\"kw1\">return</span><br/>\u00a0<br/>method print <span class=\"kw2\">inheritable</span><br/>  <span class=\"kw1\">say</span> display<br/>  <span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- -----------------------------------------------------------------------------</span><br/><span class=\"kw1\">class</span> RCPolymorphism.<span class=\"me0\">Circle</span> <span class=\"kw2\">public</span> <span class=\"kw2\">extends</span> RCPolymorphism.<span class=\"me0\">Point</span> <span class=\"kw2\">binary</span><br/>\u00a0<br/><span class=\"kw1\">properties</span> <span class=\"kw2\">private</span><br/>  r = double<br/>  className = Circle.<span class=\"kw1\">class</span>.<span class=\"me0\">getSimpleName</span><br/>\u00a0<br/>method Circle<span class=\"br0\">(</span>x_ = double <span class=\"nu0\">0.0</span>, y_ = double <span class=\"nu0\">0.0</span>, r_ = double <span class=\"nu0\">0.0</span><span class=\"br0\">)</span><br/>  <span class=\"kw4\">super</span><span class=\"br0\">(</span>x_, y_<span class=\"br0\">)</span><br/>  setR<span class=\"br0\">(</span>r_<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span><br/>\u00a0<br/>method Circle<span class=\"br0\">(</span>p_ = RCPolymorphism.<span class=\"me0\">Point</span>, r_ = double <span class=\"nu0\">0.0</span><span class=\"br0\">)</span><br/>  this<span class=\"br0\">(</span>p_.<span class=\"me0\">getX</span>, p_.<span class=\"me0\">getY</span>, r_<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span><br/>\u00a0<br/>method Circle<span class=\"br0\">(</span>c_ = Circle<span class=\"br0\">)</span><br/>  this<span class=\"br0\">(</span>c_.<span class=\"me0\">getX</span>, c_.<span class=\"me0\">getY</span>, c_.<span class=\"me0\">getR</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span><br/>\u00a0<br/>method getR <span class=\"kw2\">public</span> <span class=\"kw2\">returns</span> double<br/>  <span class=\"kw1\">return</span> r<br/>\u00a0<br/>method setR<span class=\"br0\">(</span>r_ = double <span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <span class=\"kw2\">inheritable</span><br/>  r = r_<br/>  <span class=\"kw1\">return</span><br/>\u00a0<br/>method display <span class=\"kw2\">public</span> <span class=\"kw2\">returns</span> String<br/>  hx = <span class=\"st0\">'@'</span>Rexx<span class=\"br0\">(</span>Integer.<span class=\"me0\">toHexString</span><span class=\"br0\">(</span><span class=\"kw6\">hashCode</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">8</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  str = Rexx<span class=\"br0\">(</span>className<span class=\"br0\">)</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"st0\">':'</span>hx<span class=\"st0\">': (x,y,r) = ('</span> <span class=\"sy0\">||</span> -<br/>        Rexx<span class=\"br0\">(</span>getX<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me0\">format</span><span class=\"br0\">(</span>null, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"st0\">','</span> -<br/>        Rexx<span class=\"br0\">(</span>getY<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me0\">format</span><span class=\"br0\">(</span>null, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"st0\">','</span> -<br/>        Rexx<span class=\"br0\">(</span>getR<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me0\">format</span><span class=\"br0\">(</span>null, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"st0\">')'</span><br/>  <span class=\"kw1\">return</span> str<br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 35, "block": "<pre class=\"text highlighted_source\">type<br/>  Point = object<br/>    x, y: float<br/>\u00a0<br/>  Circle = object<br/>    center: Point<br/>    radius: float<br/>\u00a0<br/># Constructors<br/>proc createPoint(x, y = 0.0): Point =<br/>  result.x = x<br/>  result.y = y<br/>\u00a0<br/>proc createCircle(x, y = 0.0, radius = 1.0): Circle =<br/>  result.center.x = x<br/>  result.center.y = y<br/>  result.radius = radius<br/>\u00a0<br/>var p1 = createPoint()<br/>echo \"p1: \", p1 # We use the default $ operator for printing<br/>var p2 = createPoint(3, 4.2)<br/>var p3 = createPoint(x = 2)<br/>var p4 = createPoint(y = 2.5)<br/>\u00a0<br/>p2 = p4<br/>p3 = createPoint()<br/>\u00a0<br/>var c1 = createCircle()<br/>echo \"c1: \", c1<br/>var c2 = createCircle(2, 0.5, 4.2)<br/>var c3 = createCircle(x = 2.1, y = 2)<br/>var c4 = createCircle(radius = 10)<br/>\u00a0<br/>c1.center.x = 12<br/>c1.radius = 5.2</pre>"}, {"lang": "Objeck", "loc": 84, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"kw1\">bundle</span> Default <span class=\"br0\">{</span><br/>  <span class=\"kw1\">class</span> Point <span class=\"br0\">{</span><br/>    @x <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"sy0\">;</span><br/>    @y <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    New<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>      @x <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>      @y <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    New<span class=\"br0\">(</span>x <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"sy0\">,</span> y <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>      @x <span class=\"sy0\">:=</span> x<span class=\"sy0\">;</span><br/>      @y <span class=\"sy0\">:=</span> y<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    New<span class=\"br0\">(</span>p <span class=\"sy0\">:</span> Point<span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>      @x <span class=\"sy0\">:=</span> p<span class=\"sy0\">-&gt;</span><span class=\"me1\">GetX</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      @y <span class=\"sy0\">:=</span> p<span class=\"sy0\">-&gt;</span><span class=\"me1\">GetY</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> <span class=\"sy0\">:</span> <span class=\"kw1\">public</span> <span class=\"sy0\">:</span> GetX<span class=\"br0\">(</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span> <span class=\"br0\">{</span> <br/>      <span class=\"kw1\">return</span> @x<span class=\"sy0\">;</span> <br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> <span class=\"sy0\">:</span> <span class=\"kw1\">public</span> <span class=\"sy0\">:</span> GetY<span class=\"br0\">(</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span> <span class=\"br0\">{</span> <br/>      <span class=\"kw1\">return</span> @y<span class=\"sy0\">;</span> <br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> <span class=\"sy0\">:</span> <span class=\"kw1\">public</span> <span class=\"sy0\">:</span> SetX<span class=\"br0\">(</span>x <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span> <br/>      @x <span class=\"sy0\">:=</span> x<span class=\"sy0\">;</span> <br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> <span class=\"sy0\">:</span> <span class=\"kw1\">public</span> <span class=\"sy0\">:</span> SetY<span class=\"br0\">(</span>y <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span> <br/>      @y <span class=\"sy0\">:=</span> y<span class=\"sy0\">;</span> <br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> <span class=\"sy0\">:</span> <span class=\"kw1\">public</span> <span class=\"sy0\">:</span> Print<span class=\"br0\">(</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span> <br/>      <span class=\"st0\">\"Point\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>  <span class=\"kw1\">class</span> Circle <span class=\"kw1\">from</span> Point <span class=\"br0\">{</span><br/>    @r <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    New<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      Parent<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      @r <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    New<span class=\"br0\">(</span>p <span class=\"sy0\">:</span> Point<span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>      Parent<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>      @r <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    New<span class=\"br0\">(</span>c <span class=\"sy0\">:</span> Circle<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      Parent<span class=\"br0\">(</span>c<span class=\"sy0\">-&gt;</span><span class=\"me1\">GetX</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> c<span class=\"sy0\">-&gt;</span><span class=\"me1\">GetY</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>      @r <span class=\"sy0\">:=</span> c<span class=\"sy0\">-&gt;</span><span class=\"me1\">GetR</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> <span class=\"sy0\">:</span> <span class=\"kw1\">public</span> <span class=\"sy0\">:</span> GetR<span class=\"br0\">(</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span> <span class=\"br0\">{</span> <br/>      <span class=\"kw1\">return</span> @r<span class=\"sy0\">;</span> <br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> <span class=\"sy0\">:</span> <span class=\"kw1\">public</span> <span class=\"sy0\">:</span> SetR<span class=\"br0\">(</span>r <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span> <br/>      @r <span class=\"sy0\">:=</span> r<span class=\"sy0\">;</span> <br/>    <span class=\"br0\">}</span>    <br/>\u00a0<br/>    <span class=\"kw1\">method</span> <span class=\"sy0\">:</span> <span class=\"kw1\">public</span> <span class=\"sy0\">:</span> Print<span class=\"br0\">(</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span> <br/>      <span class=\"st0\">\"Circle\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">class</span> Poly <span class=\"br0\">{</span><br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      p <span class=\"sy0\">:=</span> Point<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      c <span class=\"sy0\">:=</span> Circle<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      p<span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      c<span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Objective-C", "loc": 73, "block": "<pre class=\"objc highlighted_source\"><span class=\"co1\">#import &lt;Foundation/Foundation.h&gt;</span><br/>\u00a0<br/><span class=\"kw1\">@interface</span> RCPoint <span class=\"sy0\">:</span> <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSObject_Class/\"><span class=\"kw5\">NSObject</span></a> <span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> x, y;<br/><span class=\"br0\">}</span><br/><span class=\"sy0\">-</span><span class=\"br0\">(</span>instancetype<span class=\"br0\">)</span>initWithX<span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>x0;<br/><span class=\"sy0\">-</span><span class=\"br0\">(</span>instancetype<span class=\"br0\">)</span>initWithX<span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>x0 andY<span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>y0;<br/><span class=\"sy0\">-</span><span class=\"br0\">(</span>instancetype<span class=\"br0\">)</span>initWithPoint<span class=\"sy0\">:</span><span class=\"br0\">(</span>RCPoint <span class=\"sy0\">*</span><span class=\"br0\">)</span>p;<br/><span class=\"kw1\">@property</span> <span class=\"br0\">(</span>nonatomic<span class=\"br0\">)</span> <span class=\"kw4\">int</span> x;<br/><span class=\"kw1\">@property</span> <span class=\"br0\">(</span>nonatomic<span class=\"br0\">)</span> <span class=\"kw4\">int</span> y;<br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw1\">@implementation</span> RCPoint<br/><span class=\"kw1\">@synthesize</span> x, y;<br/><span class=\"sy0\">-</span><span class=\"br0\">(</span>instancetype<span class=\"br0\">)</span>initWithX<span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>x0 <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"br0\">[</span>self initWithX<span class=\"sy0\">:</span>x0 andY<span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>; <span class=\"br0\">}</span><br/><span class=\"sy0\">-</span><span class=\"br0\">(</span>instancetype<span class=\"br0\">)</span>initWithX<span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>x0 andY<span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>y0 <span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>self <span class=\"sy0\">=</span> <span class=\"br0\">[</span>super init<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    x <span class=\"sy0\">=</span> x0;<br/>    y <span class=\"sy0\">=</span> y0;<br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> self;<br/><span class=\"br0\">}</span><br/><span class=\"sy0\">-</span><span class=\"br0\">(</span>instancetype<span class=\"br0\">)</span>initWithPoint<span class=\"sy0\">:</span><span class=\"br0\">(</span>RCPoint <span class=\"sy0\">*</span><span class=\"br0\">)</span>p <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"br0\">[</span>self initWithX<span class=\"sy0\">:</span>p.x andY<span class=\"sy0\">:</span>p.y<span class=\"br0\">]</span>; <span class=\"br0\">}</span><br/><span class=\"sy0\">-</span><span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>description <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> stringWithFormat<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"&lt;RCPoint\u00a0%p x:\u00a0%d y:\u00a0%d&gt;\"</span>, self, x, y<span class=\"br0\">]</span>; <span class=\"br0\">}</span><br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw1\">@interface</span> RCCircle <span class=\"sy0\">:</span> RCPoint <span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> r;<br/><span class=\"br0\">}</span><br/><span class=\"sy0\">-</span><span class=\"br0\">(</span>instancetype<span class=\"br0\">)</span>initWithCenter<span class=\"sy0\">:</span><span class=\"br0\">(</span>RCPoint <span class=\"sy0\">*</span><span class=\"br0\">)</span>p andRadius<span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>r0;<br/><span class=\"sy0\">-</span><span class=\"br0\">(</span>instancetype<span class=\"br0\">)</span>initWithX<span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>x0 andY<span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>y0 andRadius<span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>r0;<br/><span class=\"sy0\">-</span><span class=\"br0\">(</span>instancetype<span class=\"br0\">)</span>initWithCircle<span class=\"sy0\">:</span><span class=\"br0\">(</span>RCCircle <span class=\"sy0\">*</span><span class=\"br0\">)</span>c;<br/><span class=\"kw1\">@property</span> <span class=\"br0\">(</span>nonatomic<span class=\"br0\">)</span> <span class=\"kw4\">int</span> r;<br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw1\">@implementation</span> RCCircle<br/><span class=\"kw1\">@synthesize</span> r;<br/><span class=\"sy0\">-</span><span class=\"br0\">(</span>instancetype<span class=\"br0\">)</span>initWithCenter<span class=\"sy0\">:</span><span class=\"br0\">(</span>RCPoint <span class=\"sy0\">*</span><span class=\"br0\">)</span>p andRadius<span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>r0 <span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>self <span class=\"sy0\">=</span> <span class=\"br0\">[</span>super initWithPoint<span class=\"sy0\">:</span>p<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    r <span class=\"sy0\">=</span> r0;<br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> self;<br/><span class=\"br0\">}</span><br/><span class=\"sy0\">-</span><span class=\"br0\">(</span>instancetype<span class=\"br0\">)</span>initWithX<span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>x0 andY<span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>y0 andRadius<span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>r0 <span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>self <span class=\"sy0\">=</span> <span class=\"br0\">[</span>super initWithX<span class=\"sy0\">:</span>x0 andY<span class=\"sy0\">:</span>y0<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    r <span class=\"sy0\">=</span> r0;<br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> self;<br/><span class=\"br0\">}</span><br/><span class=\"sy0\">-</span><span class=\"br0\">(</span>instancetype<span class=\"br0\">)</span>initWithCircle<span class=\"sy0\">:</span><span class=\"br0\">(</span>RCCircle <span class=\"sy0\">*</span><span class=\"br0\">)</span>c <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"br0\">[</span>self initWithX<span class=\"sy0\">:</span>c.x andY<span class=\"sy0\">:</span>c.y andRadius<span class=\"sy0\">:</span>c.r<span class=\"br0\">]</span>; <span class=\"br0\">}</span><br/><span class=\"sy0\">-</span><span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span>description <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> stringWithFormat<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"&lt;RCCircle\u00a0%p x:\u00a0%d y:\u00a0%d r:\u00a0%d&gt;\"</span>, self, x, y, r<span class=\"br0\">]</span>; <span class=\"br0\">}</span><br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  @autoreleasepool <span class=\"br0\">{</span><br/>\u00a0<br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"%@\"</span>, <span class=\"br0\">[</span><span class=\"br0\">[</span>RCPoint alloc<span class=\"br0\">]</span> init<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"%@\"</span>, <span class=\"br0\">[</span><span class=\"br0\">[</span>RCPoint alloc<span class=\"br0\">]</span> initWithX<span class=\"sy0\">:</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"%@\"</span>, <span class=\"br0\">[</span><span class=\"br0\">[</span>RCPoint alloc<span class=\"br0\">]</span> initWithX<span class=\"sy0\">:</span><span class=\"nu0\">3</span> andY<span class=\"sy0\">:</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"%@\"</span>, <span class=\"br0\">[</span><span class=\"br0\">[</span>RCCircle alloc<span class=\"br0\">]</span> init<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"%@\"</span>, <span class=\"br0\">[</span><span class=\"br0\">[</span>RCCircle alloc<span class=\"br0\">]</span> initWithX<span class=\"sy0\">:</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"%@\"</span>, <span class=\"br0\">[</span><span class=\"br0\">[</span>RCCircle alloc<span class=\"br0\">]</span> initWithX<span class=\"sy0\">:</span><span class=\"nu0\">3</span> andY<span class=\"sy0\">:</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"%@\"</span>, <span class=\"br0\">[</span><span class=\"br0\">[</span>RCCircle alloc<span class=\"br0\">]</span> initWithX<span class=\"sy0\">:</span><span class=\"nu0\">3</span> andY<span class=\"sy0\">:</span><span class=\"nu0\">4</span> andRadius<span class=\"sy0\">:</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>    RCPoint <span class=\"sy0\">*</span>p <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>RCPoint alloc<span class=\"br0\">]</span> initWithX<span class=\"sy0\">:</span><span class=\"nu0\">1</span> andY<span class=\"sy0\">:</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>;  <br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"%@\"</span>, <span class=\"br0\">[</span><span class=\"br0\">[</span>RCCircle alloc<span class=\"br0\">]</span> initWithPoint<span class=\"sy0\">:</span>p<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"%@\"</span>, <span class=\"br0\">[</span><span class=\"br0\">[</span>RCCircle alloc<span class=\"br0\">]</span> initWithCenter<span class=\"sy0\">:</span>p andRadius<span class=\"sy0\">:</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"%d\"</span>, p.x<span class=\"br0\">)</span>; <span class=\"co2\">// 1</span><br/>    p.x <span class=\"sy0\">=</span> <span class=\"nu0\">8</span>;<br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"%d\"</span>, p.x<span class=\"br0\">)</span>; <span class=\"co2\">// 8</span><br/>\u00a0<br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 33, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">class</span> point\u00a0?<span class=\"br0\">(</span>x<span class=\"sy0\">=</span><span class=\"nu0\">0.0</span><span class=\"br0\">)</span>\u00a0?<span class=\"br0\">(</span>y<span class=\"sy0\">=</span><span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co1\">(* extra () used to erase the optional parameters *)</span><br/>object <span class=\"br0\">(</span>self<span class=\"br0\">)</span><br/>  <span class=\"kw1\">val</span> <span class=\"kw1\">mutable</span> x <span class=\"sy0\">=</span> x<br/>  <span class=\"kw1\">val</span> <span class=\"kw1\">mutable</span> y <span class=\"sy0\">=</span> y <br/>\u00a0<br/>  <span class=\"kw1\">method</span> x <span class=\"sy0\">=</span> x<br/>  <span class=\"kw1\">method</span> y <span class=\"sy0\">=</span> y<br/>  <span class=\"kw1\">method</span> set_x x<span class=\"sy0\">'</span> <span class=\"sy0\">=</span> x <span class=\"sy0\">&lt;-</span> x<span class=\"sy0\">'</span><br/>  <span class=\"kw1\">method</span> set_y y<span class=\"sy0\">'</span> <span class=\"sy0\">=</span> y <span class=\"sy0\">&lt;-</span> y<span class=\"sy0\">'</span><br/>  <span class=\"kw1\">method</span> print <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>sprintf <span class=\"st0\">\"Point (%f,\u00a0%f)\"</span> x y<br/>  <span class=\"kw1\">method</span> copy <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"sy0\">&lt;</span> <span class=\"sy0\">&gt;</span><span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">class</span> circle\u00a0?<span class=\"br0\">(</span>r<span class=\"sy0\">=</span><span class=\"nu0\">1.0</span><span class=\"br0\">)</span>\u00a0?<span class=\"br0\">(</span>x<span class=\"sy0\">=</span><span class=\"nu0\">0.0</span><span class=\"br0\">)</span>\u00a0?<span class=\"br0\">(</span>y<span class=\"sy0\">=</span><span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>object <span class=\"br0\">(</span>self<span class=\"br0\">)</span><br/>  <span class=\"kw1\">inherit</span> point <span class=\"re1\">~x</span><span class=\"sy0\">:</span>x <span class=\"re1\">~y</span><span class=\"sy0\">:</span>y <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">val</span> <span class=\"kw1\">mutable</span> r <span class=\"sy0\">=</span> r<br/>\u00a0<br/>  <span class=\"kw1\">method</span> r <span class=\"sy0\">=</span> r<br/>  <span class=\"kw1\">method</span> set_r r<span class=\"sy0\">'</span> <span class=\"sy0\">=</span> r <span class=\"sy0\">&lt;-</span> r<span class=\"sy0\">'</span><br/>  <span class=\"kw1\">method</span> print <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>sprintf <span class=\"st0\">\"Circle (%f,\u00a0%f,\u00a0%f)\"</span> r x y<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">let</span> print x <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> x<span class=\"sy0\">#</span>print<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> p <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> point <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> c <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> circle <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>    print c<span class=\"sy0\">;</span><br/>    print p<span class=\"sy0\">;</span><br/>    c<span class=\"sy0\">#</span>set_x <span class=\"nu0\">10.0</span><span class=\"sy0\">;</span><br/>    print c<span class=\"sy0\">;</span><br/>    print <span class=\"br0\">(</span><span class=\"kw1\">new</span> point <span class=\"re1\">~y</span><span class=\"sy0\">:</span><span class=\"nu0\">2.1</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Oforth", "loc": 14, "block": "<pre class=\"text highlighted_source\">Object Class new: Point(x, y)<br/>Point method: initialize(x, y)  x\u00a0:= x y\u00a0:= y\u00a0;<br/>Point method: _x   @x\u00a0;<br/>Point method: _y   @y\u00a0;<br/>Point method: &lt;&lt;   \"(\" &lt;&lt; @x &lt;&lt; \", \" &lt;&lt; @y &lt;&lt; \")\" &lt;&lt;\u00a0;<br/>\u00a0<br/>Object Class new: Circle(x, y, r)<br/>Circle method: initialize(x, y, r)  x\u00a0:= x y\u00a0:= y r\u00a0:= r\u00a0;<br/>Circle method: _x  @x\u00a0;<br/>Circle method: _y  @y\u00a0;<br/>Circle method: _r  @r\u00a0;<br/>Circle method: &lt;&lt;  \"(\" &lt;&lt; @x &lt;&lt; \", \" &lt;&lt; @y &lt;&lt; \", \" &lt;&lt; @r &lt;&lt; \")\" &lt;&lt;\u00a0;<br/>\u00a0<br/>Circle classMethod: newFromPoint(aPoint, r)  self new(aPoint _x, aPoint _y, r)\u00a0;</pre>"}, {"lang": "ooRexx", "loc": 32, "block": "<pre class=\"oorexx highlighted_source\">\u00a0<br/>p = <span class=\"sy0\">.</span>point~new<span class=\"br0\">(</span><span class=\"nu0\">3</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>c = <span class=\"sy0\">.</span>circle~new<span class=\"br0\">(</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>\u00a0<br/>p~print<br/>c~print<br/>\u00a0<br/>::class point<br/>::method init<br/>  <span class=\"kw1\">expose</span> x y<br/>  <span class=\"kw1\">use</span> strict <span class=\"kw1\">arg</span> x = <span class=\"nu0\">0</span>, y = <span class=\"nu0\">0</span>   <span class=\"co1\">-- defaults to 0 for any non-specified coordinates</span><br/>\u00a0<br/>::<span class=\"kw1\">attribute</span> x<br/>::<span class=\"kw1\">attribute</span> y<br/>\u00a0<br/>::method print<br/>  <span class=\"kw1\">expose</span> x y<br/>  <span class=\"kw1\">say</span> <span class=\"st0\">\"A point at location (\"</span><span class=\"sy0\">||</span>x<span class=\"st0\">\",\"</span>y<span class=\"st0\">\")\"</span><br/>\u00a0<br/>::class circle subclass point<br/>::method init<br/>  <span class=\"kw1\">expose</span> radius<br/>  <span class=\"kw1\">use</span> strict <span class=\"kw1\">arg</span> x = <span class=\"nu0\">0</span>, y = <span class=\"nu0\">0</span>, radius = <span class=\"nu0\">0</span><br/>  self~init:super<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span>        <span class=\"co1\">-- call superclass constructor</span><br/>\u00a0<br/>::<span class=\"kw1\">attribute</span> radius<br/>\u00a0<br/>::method print<br/>  <span class=\"kw1\">expose</span> radius<br/>  <span class=\"kw1\">say</span> <span class=\"st0\">\"A circle of radius\"</span> radius <span class=\"st0\">\"centered at location (\"</span><span class=\"sy0\">||</span>self~x<span class=\"st0\">\",\"</span>self~y<span class=\"st0\">\")\"</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "OxygenBasic", "loc": 58, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>type tpoint  float xx,yy<br/>type tcircle float xx,yy,rr<br/>\u00a0<br/>'==========<br/>class point<br/>'==========<br/>'<br/>has tpoint<br/>'<br/>method constructor  (float x=0,y=0){this&lt;=x,y}<br/>method destructor   {}<br/>method V() as point {return @this}<br/>method V(tpoint*a)  {this&lt;=a.xx,a.yy}<br/>method V(point *a)  {this&lt;=a.xx,a.yy}<br/>method X() as float {return xx}<br/>method Y() as float {return yy}<br/>method X(float a)   {xx=a}<br/>method Y(float a)   {yy=a}<br/>method clear()      {this&lt;=.0,.0}<br/>method show() as string {return \"x=\" xx \", y=\" yy }<br/>'<br/>end class<br/>\u00a0<br/>\u00a0<br/>'===========<br/>class circle<br/>'===========<br/>'<br/>has point<br/>float rr<br/>'<br/>method constructor  (float x=.0,y=.0,r=1.0){this&lt;=x,y,r}<br/>method V(tcircle*a) {this&lt;=a.xx,a.yy,a.rr}<br/>method V(circle *a) {this&lt;=a.xx,a.yy,a.rr}<br/>method R() as float {return rr}<br/>method R(float a)   {rr=a}<br/>method clear()      {this&lt;=.0,.0,.0}<br/>method show() as string {return \"x=\" xx \", y=\" yy \", r=\" rr }<br/>'<br/>end class<br/>\u00a0<br/>'=====<br/>'TESTS<br/>'=====<br/>\u00a0<br/>new circle ca (r=.5)<br/>new circle cb (x=10,y=10)<br/>new circle cc (10,10,0.5)<br/>\u00a0<br/>cb.r=\"7.5\" 'will convert a string value<br/>\u00a0<br/>cb.y=20<br/>\u00a0<br/>print cb.show 'result x=10, y=20 ,r=7.5<br/>\u00a0<br/>del ca\u00a0: del cb\u00a0: del cc<br/>\u00a0</pre>"}, {"lang": "Oz", "loc": 38, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">class</span> <span class=\"re2\">Point</span><br/>   <span class=\"kw1\">feat</span><br/>      x<br/>      y<br/>\u00a0<br/>   <span class=\"kw1\">meth</span> <span class=\"re4\">init</span><span class=\"br0\">(</span>x:X<span class=\"sy0\">&lt;=</span>0<span class=\"sy0\">.</span>0 y:Y<span class=\"sy0\">&lt;=</span>0<span class=\"sy0\">.</span>0<span class=\"br0\">)</span><br/>      <span class=\"kw1\">self</span><span class=\"sy0\">.</span>x = X<br/>      <span class=\"kw1\">self</span><span class=\"sy0\">.</span>y = Y<br/>   <span class=\"kw1\">end</span><br/>\u00a0<br/>   <span class=\"kw1\">meth</span> <span class=\"re4\">print</span><br/>      <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo<br/>       <span class=\"st0\">\"Point(\"</span><span class=\"sy0\">#</span><br/>       <span class=\"st0\">\"x:\"</span><span class=\"sy0\">#</span>self<span class=\"sy0\">.</span>x<span class=\"sy0\">#</span><br/>       <span class=\"st0\">\", y:\"</span><span class=\"sy0\">#</span>self<span class=\"sy0\">.</span>y<span class=\"sy0\">#</span><br/>       <span class=\"st0\">\")\"</span><span class=\"br0\">}</span><br/>   <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">class</span> <span class=\"re2\">Circle</span><br/>   <span class=\"kw1\">feat</span><br/>      center<br/>      r<br/>\u00a0<br/>   <span class=\"kw1\">meth</span> <span class=\"re4\">init</span><span class=\"br0\">(</span>center:C<span class=\"sy0\">&lt;=</span><span class=\"br0\">{</span>New Point init<span class=\"br0\">}</span> r:R<span class=\"sy0\">&lt;=</span>1<span class=\"sy0\">.</span>0<span class=\"br0\">)</span><br/>      <span class=\"kw1\">self</span><span class=\"sy0\">.</span>center = C<br/>      <span class=\"kw1\">self</span><span class=\"sy0\">.</span>r = R<br/>   <span class=\"kw1\">end</span><br/>\u00a0<br/>   <span class=\"kw1\">meth</span> <span class=\"re4\">print</span><br/>      <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo<br/>       <span class=\"st0\">\"Circle(\"</span><span class=\"sy0\">#</span><br/>       <span class=\"st0\">\"x:\"</span><span class=\"sy0\">#</span>self<span class=\"sy0\">.</span>center<span class=\"sy0\">.</span>x<span class=\"sy0\">#</span><br/>       <span class=\"st0\">\", y:\"</span><span class=\"sy0\">#</span>self<span class=\"sy0\">.</span>center<span class=\"sy0\">.</span>y<span class=\"sy0\">#</span><br/>       <span class=\"st0\">\", r:\"</span><span class=\"sy0\">#</span>self<span class=\"sy0\">.</span>r<span class=\"sy0\">#</span><br/>       <span class=\"st0\">\")\"</span><span class=\"br0\">}</span><br/>   <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Pascal", "loc": 86, "block": "<pre class=\"perl highlighted_source\"><span class=\"br0\">{</span><br/>     <a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> Point<span class=\"sy0\">;</span><br/>     <span class=\"kw2\">use</span> Class<span class=\"sy0\">::</span><span class=\"me2\">Spiffy</span> <span class=\"sy0\">-</span>base<span class=\"sy0\">;</span><br/>     <span class=\"kw2\">use</span> Clone <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>clone<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>     <span class=\"kw2\">sub</span> _print <span class=\"br0\">{</span><br/>         <span class=\"kw1\">my</span> <span class=\"re0\">%self</span> <span class=\"sy0\">=</span> <span class=\"sy0\">%</span><span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$k</span><span class=\"sy0\">,</span><span class=\"re0\">$v</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/each.html\"><span class=\"kw3\">each</span></a> <span class=\"re0\">%self</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>             <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$k: $v<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>         <span class=\"br0\">}</span><br/>     <span class=\"br0\">}</span><br/>\u00a0<br/>     <span class=\"kw2\">sub</span> members <span class=\"br0\">{</span><br/>         <a href=\"http://perldoc.perl.org/functions/no.html\"><span class=\"kw3\">no</span></a> strict<span class=\"sy0\">;</span><br/>         <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span><br/>             <span class=\"nu0\">1</span> <span class=\"sy0\">==</span> <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a> <span class=\"kw1\">and</span> <a href=\"http://perldoc.perl.org/functions/defined.html\"><span class=\"kw3\">defined</span></a> <span class=\"sy0\">*</span><span class=\"co5\">$_</span><span class=\"br0\">{</span>CODE<span class=\"br0\">}</span><br/>         <span class=\"br0\">}</span> <a href=\"http://perldoc.perl.org/functions/keys.html\"><span class=\"kw3\">keys</span></a> <span class=\"sy0\">%</span><span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">{</span>__PACKAGE__<span class=\"sy0\">.</span><span class=\"st0\">\"<span class=\"es0\">\\:</span>:\"</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>     <span class=\"br0\">}</span><br/>\u00a0<br/>     <span class=\"kw2\">sub</span> <span class=\"kw2\">new</span> <span class=\"br0\">{</span><br/>         <span class=\"kw1\">my</span> <span class=\"re0\">$class</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">my</span> <span class=\"re0\">%param</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>         <span class=\"re0\">$param</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">for</span> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span><span class=\"sy0\">!</span><a href=\"http://perldoc.perl.org/functions/defined.html\"><span class=\"kw3\">defined</span></a> <span class=\"re0\">$param</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span><span class=\"br0\">}</span> members<span class=\"sy0\">;</span><br/>         <a href=\"http://perldoc.perl.org/functions/bless.html\"><span class=\"kw3\">bless</span></a> <span class=\"re0\">\\%param</span><span class=\"sy0\">,</span> <span class=\"re0\">$class</span><span class=\"sy0\">;</span><br/>     <span class=\"br0\">}</span><br/>\u00a0<br/>     <span class=\"kw2\">sub</span> copy_constructor <span class=\"br0\">{</span><br/>         clone <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>     <span class=\"br0\">}</span><br/>\u00a0<br/>     <span class=\"kw2\">sub</span> copy_assignment <span class=\"br0\">{</span><br/>         <span class=\"kw1\">my</span> <span class=\"re0\">$self</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">my</span> <span class=\"re0\">$from</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>         <span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"co5\">$_</span><span class=\"br0\">(</span><span class=\"re0\">$from</span><span class=\"sy0\">-&gt;</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"re0\">$from</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">members</span><span class=\"sy0\">;</span><br/>     <span class=\"br0\">}</span><br/>\u00a0<br/>     field <span class=\"st_h\">'x'</span><span class=\"sy0\">;</span><br/>     field <span class=\"st_h\">'y'</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">{</span><br/>     <a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> Circle<span class=\"sy0\">;</span><br/>     <span class=\"kw2\">use</span> base <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>Point<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     field <span class=\"st_h\">'r'</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">{</span><br/>     <a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> main<span class=\"sy0\">;</span><br/>     <span class=\"co5\">$_</span><span class=\"sy0\">-&gt;</span>_print<span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">for</span> <span class=\"br0\">(</span><br/>        Point<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"sy0\">,</span><br/>        Point<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        Point<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/y.html\"><span class=\"kw3\">y</span></a> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        Point<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/y.html\"><span class=\"kw3\">y</span></a> <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>     <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">my</span> <span class=\"re0\">$p1</span> <span class=\"sy0\">=</span> Point<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/y.html\"><span class=\"kw3\">y</span></a> <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>     <span class=\"kw1\">my</span> <span class=\"re0\">$p2</span> <span class=\"sy0\">=</span> <span class=\"re0\">$p1</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">copy_constructor</span><span class=\"sy0\">;</span><br/>     <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"we are really different objects, not just references \"</span><span class=\"sy0\">.</span><br/>           <span class=\"st0\">\"to the same instance<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">unless</span> <span class=\"re0\">\\$p1</span> <span class=\"kw1\">eq</span> <span class=\"re0\">\\$p2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>     <span class=\"co1\"># accessors autogenerated</span><br/>     <span class=\"re0\">$p1</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">x</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"re0\">$p1</span><span class=\"sy0\">-&gt;</span><a href=\"http://perldoc.perl.org/functions/y.html\"><span class=\"kw3\">y</span></a><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">$p1</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">x</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>     <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">$p1</span><span class=\"sy0\">-&gt;</span><a href=\"http://perldoc.perl.org/functions/y.html\"><span class=\"kw3\">y</span></a><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>     <span class=\"re0\">$p2</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">copy_assignment</span><span class=\"br0\">(</span><span class=\"re0\">$p1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">$p2</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">x</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>     <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">$p2</span><span class=\"sy0\">-&gt;</span><a href=\"http://perldoc.perl.org/functions/y.html\"><span class=\"kw3\">y</span></a><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>     <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"we now have the same values, but we are still \"</span><span class=\"sy0\">.</span><br/>           <span class=\"st0\">\"different objects<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">unless</span> <span class=\"re0\">\\$p1</span> <span class=\"kw1\">eq</span> <span class=\"re0\">\\$p2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>     <span class=\"co5\">$_</span><span class=\"sy0\">-&gt;</span>_print<span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">for</span> <span class=\"br0\">(</span><br/>        Circle<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"sy0\">,</span><br/>        Circle<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        Circle<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/y.html\"><span class=\"kw3\">y</span></a> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        Circle<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span>r <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        Circle<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/y.html\"><span class=\"kw3\">y</span></a> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        Circle<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> r <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        Circle<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/y.html\"><span class=\"kw3\">y</span></a> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> r <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        Circle<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/y.html\"><span class=\"kw3\">y</span></a> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> r <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>     <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>     <span class=\"kw1\">my</span> <span class=\"re0\">$c</span> <span class=\"sy0\">=</span> Circle<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span>r <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">$c</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">r</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span> <span class=\"co1\"># accessor autogenerated</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl", "loc": 86, "block": "<pre class=\"perl highlighted_source\"><span class=\"br0\">{</span><br/>     <a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> Point<span class=\"sy0\">;</span><br/>     <span class=\"kw2\">use</span> Class<span class=\"sy0\">::</span><span class=\"me2\">Spiffy</span> <span class=\"sy0\">-</span>base<span class=\"sy0\">;</span><br/>     <span class=\"kw2\">use</span> Clone <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>clone<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>     <span class=\"kw2\">sub</span> _print <span class=\"br0\">{</span><br/>         <span class=\"kw1\">my</span> <span class=\"re0\">%self</span> <span class=\"sy0\">=</span> <span class=\"sy0\">%</span><span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$k</span><span class=\"sy0\">,</span><span class=\"re0\">$v</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/each.html\"><span class=\"kw3\">each</span></a> <span class=\"re0\">%self</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>             <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$k: $v<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>         <span class=\"br0\">}</span><br/>     <span class=\"br0\">}</span><br/>\u00a0<br/>     <span class=\"kw2\">sub</span> members <span class=\"br0\">{</span><br/>         <a href=\"http://perldoc.perl.org/functions/no.html\"><span class=\"kw3\">no</span></a> strict<span class=\"sy0\">;</span><br/>         <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span><br/>             <span class=\"nu0\">1</span> <span class=\"sy0\">==</span> <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a> <span class=\"kw1\">and</span> <a href=\"http://perldoc.perl.org/functions/defined.html\"><span class=\"kw3\">defined</span></a> <span class=\"sy0\">*</span><span class=\"co5\">$_</span><span class=\"br0\">{</span>CODE<span class=\"br0\">}</span><br/>         <span class=\"br0\">}</span> <a href=\"http://perldoc.perl.org/functions/keys.html\"><span class=\"kw3\">keys</span></a> <span class=\"sy0\">%</span><span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">{</span>__PACKAGE__<span class=\"sy0\">.</span><span class=\"st0\">\"<span class=\"es0\">\\:</span>:\"</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>     <span class=\"br0\">}</span><br/>\u00a0<br/>     <span class=\"kw2\">sub</span> <span class=\"kw2\">new</span> <span class=\"br0\">{</span><br/>         <span class=\"kw1\">my</span> <span class=\"re0\">$class</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">my</span> <span class=\"re0\">%param</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>         <span class=\"re0\">$param</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">for</span> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span><span class=\"sy0\">!</span><a href=\"http://perldoc.perl.org/functions/defined.html\"><span class=\"kw3\">defined</span></a> <span class=\"re0\">$param</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span><span class=\"br0\">}</span> members<span class=\"sy0\">;</span><br/>         <a href=\"http://perldoc.perl.org/functions/bless.html\"><span class=\"kw3\">bless</span></a> <span class=\"re0\">\\%param</span><span class=\"sy0\">,</span> <span class=\"re0\">$class</span><span class=\"sy0\">;</span><br/>     <span class=\"br0\">}</span><br/>\u00a0<br/>     <span class=\"kw2\">sub</span> copy_constructor <span class=\"br0\">{</span><br/>         clone <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>     <span class=\"br0\">}</span><br/>\u00a0<br/>     <span class=\"kw2\">sub</span> copy_assignment <span class=\"br0\">{</span><br/>         <span class=\"kw1\">my</span> <span class=\"re0\">$self</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">my</span> <span class=\"re0\">$from</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>         <span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"co5\">$_</span><span class=\"br0\">(</span><span class=\"re0\">$from</span><span class=\"sy0\">-&gt;</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"re0\">$from</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">members</span><span class=\"sy0\">;</span><br/>     <span class=\"br0\">}</span><br/>\u00a0<br/>     field <span class=\"st_h\">'x'</span><span class=\"sy0\">;</span><br/>     field <span class=\"st_h\">'y'</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">{</span><br/>     <a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> Circle<span class=\"sy0\">;</span><br/>     <span class=\"kw2\">use</span> base <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>Point<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     field <span class=\"st_h\">'r'</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">{</span><br/>     <a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> main<span class=\"sy0\">;</span><br/>     <span class=\"co5\">$_</span><span class=\"sy0\">-&gt;</span>_print<span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">for</span> <span class=\"br0\">(</span><br/>        Point<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"sy0\">,</span><br/>        Point<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        Point<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/y.html\"><span class=\"kw3\">y</span></a> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        Point<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/y.html\"><span class=\"kw3\">y</span></a> <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>     <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">my</span> <span class=\"re0\">$p1</span> <span class=\"sy0\">=</span> Point<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/y.html\"><span class=\"kw3\">y</span></a> <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>     <span class=\"kw1\">my</span> <span class=\"re0\">$p2</span> <span class=\"sy0\">=</span> <span class=\"re0\">$p1</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">copy_constructor</span><span class=\"sy0\">;</span><br/>     <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"we are really different objects, not just references \"</span><span class=\"sy0\">.</span><br/>           <span class=\"st0\">\"to the same instance<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">unless</span> <span class=\"re0\">\\$p1</span> <span class=\"kw1\">eq</span> <span class=\"re0\">\\$p2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>     <span class=\"co1\"># accessors autogenerated</span><br/>     <span class=\"re0\">$p1</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">x</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"re0\">$p1</span><span class=\"sy0\">-&gt;</span><a href=\"http://perldoc.perl.org/functions/y.html\"><span class=\"kw3\">y</span></a><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">$p1</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">x</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>     <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">$p1</span><span class=\"sy0\">-&gt;</span><a href=\"http://perldoc.perl.org/functions/y.html\"><span class=\"kw3\">y</span></a><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>     <span class=\"re0\">$p2</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">copy_assignment</span><span class=\"br0\">(</span><span class=\"re0\">$p1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">$p2</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">x</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>     <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">$p2</span><span class=\"sy0\">-&gt;</span><a href=\"http://perldoc.perl.org/functions/y.html\"><span class=\"kw3\">y</span></a><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>     <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"we now have the same values, but we are still \"</span><span class=\"sy0\">.</span><br/>           <span class=\"st0\">\"different objects<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">unless</span> <span class=\"re0\">\\$p1</span> <span class=\"kw1\">eq</span> <span class=\"re0\">\\$p2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>     <span class=\"co5\">$_</span><span class=\"sy0\">-&gt;</span>_print<span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">for</span> <span class=\"br0\">(</span><br/>        Circle<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"sy0\">,</span><br/>        Circle<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        Circle<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/y.html\"><span class=\"kw3\">y</span></a> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        Circle<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span>r <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        Circle<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/y.html\"><span class=\"kw3\">y</span></a> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        Circle<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> r <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        Circle<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/y.html\"><span class=\"kw3\">y</span></a> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> r <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        Circle<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/y.html\"><span class=\"kw3\">y</span></a> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> r <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>     <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>     <span class=\"kw1\">my</span> <span class=\"re0\">$c</span> <span class=\"sy0\">=</span> Circle<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span>r <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">$c</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">r</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span> <span class=\"co1\"># accessor autogenerated</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 18, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">class</span> Point <span class=\"br0\">{</span><br/>    <span class=\"kw1\">has</span> Real <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"kw1\">x</span> <span class=\"kw1\">is</span> rw <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">has</span> Real <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">y</span> <span class=\"kw1\">is</span> rw <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">method</span> Str <span class=\"br0\">{</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">perl</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">class</span> Circle <span class=\"br0\">{</span><br/>    <span class=\"kw1\">has</span> Point <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">p</span> <span class=\"kw1\">is</span> rw <span class=\"sy0\">=</span> Point<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">has</span> Real <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">r</span> <span class=\"kw1\">is</span> rw <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">method</span> Str <span class=\"br0\">{</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">perl</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$c</span> <span class=\"sy0\">=</span> Circle<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span>p <span class=\"sy0\">=&gt;</span> Point<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"kw1\">x</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> y <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> r <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"re0\">$c</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$c</span><span class=\"sy0\">.</span><span class=\"me1\">p</span><span class=\"sy0\">.</span><span class=\"kw1\">x</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">10</span><span class=\"sy0\">..</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">pick</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$c</span><span class=\"sy0\">.</span><span class=\"me1\">p</span><span class=\"sy0\">.</span><span class=\"me1\">y</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">10</span><span class=\"sy0\">..</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">pick</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$c</span><span class=\"sy0\">.</span><span class=\"me1\">r</span>   <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">pick</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"re0\">$c</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 26, "block": "<pre class=\"text highlighted_source\">type point(object o)<br/>    return sequence(o) and length(o)=2 and atom(o[1]) and atom(o[2])<br/>end type<br/>\u00a0<br/>function new_point(atom x=0, atom y=0)<br/>    return {x,y}<br/>end function<br/>\u00a0<br/>type circle(object o)<br/>    return sequence(o) and length(o)=2 and point(o[1]) and atom(o[2])<br/>end type<br/>\u00a0<br/>function new_circle(object x=0, atom y=0, atom r=0)<br/>    if point(x) then<br/>        r = y           -- assume r got passed in y<br/>        return {x,r}    -- {point,r}<br/>    end if<br/>    return {{x,y},r}    -- {point,r}<br/>    -- (or {new_point(x,y),r} if you prefer)<br/>end function<br/>\u00a0<br/>point p = new_point(4,5)<br/>circle c1 = new_circle(p,6),<br/>       c2 = new_circle(4,5,6}<br/>?c1<br/>?c2</pre>"}, {"lang": "PHP", "loc": 73, "block": "<pre class=\"php highlighted_source\">\u00a0<br/><span class=\"kw2\">class</span> Point<br/><span class=\"br0\">{</span><br/>  <span class=\"kw2\">protected</span> <span class=\"re0\">$_x</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw2\">protected</span> <span class=\"re0\">$_y</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> __construct<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">switch</span><span class=\"br0\">(</span> <a href=\"http://www.php.net/func_num_args\"><span class=\"kw3\">func_num_args</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">case</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span><br/>        <span class=\"re0\">$point</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/func_get_arg\"><span class=\"kw3\">func_get_arg</span></a><span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">setFromPoint</span><span class=\"br0\">(</span> <span class=\"re0\">$point</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">case</span> <span class=\"nu0\">2</span><span class=\"sy0\">:</span><br/>        <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/func_get_arg\"><span class=\"kw3\">func_get_arg</span></a><span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$y</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/func_get_arg\"><span class=\"kw3\">func_get_arg</span></a><span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">setX</span><span class=\"br0\">(</span> <span class=\"re0\">$x</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">setY</span><span class=\"br0\">(</span> <span class=\"re0\">$y</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">default</span><span class=\"sy0\">:</span><br/>        <span class=\"kw1\">throw</span> <span class=\"kw2\">new</span> InvalidArgumentException<span class=\"br0\">(</span> <span class=\"st_h\">'expecting one (Point) argument or two (numeric x and y) arguments'</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> setFromPoint<span class=\"br0\">(</span> Point <span class=\"re0\">$point</span> <span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">setX</span><span class=\"br0\">(</span> <span class=\"re0\">$point</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">getX</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">setY</span><span class=\"br0\">(</span> <span class=\"re0\">$point</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">getY</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> getX<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span>_x<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> setX<span class=\"br0\">(</span> <span class=\"re0\">$x</span> <span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy0\">!</span><a href=\"http://www.php.net/is_numeric\"><span class=\"kw3\">is_numeric</span></a><span class=\"br0\">(</span> <span class=\"re0\">$x</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">throw</span> <span class=\"kw2\">new</span> InvalidArgumentException<span class=\"br0\">(</span> <span class=\"st_h\">'expecting numeric value'</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span>_x <span class=\"sy0\">=</span> <span class=\"br0\">(</span>float<span class=\"br0\">)</span> <span class=\"re0\">$x</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> getY<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span>_y<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> setY<span class=\"br0\">(</span> <span class=\"re0\">$y</span> <span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy0\">!</span><a href=\"http://www.php.net/is_numeric\"><span class=\"kw3\">is_numeric</span></a><span class=\"br0\">(</span> <span class=\"re0\">$y</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">throw</span> <span class=\"kw2\">new</span> InvalidArgumentException<span class=\"br0\">(</span> <span class=\"st_h\">'expecting numeric value'</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span>_y <span class=\"sy0\">=</span> <span class=\"br0\">(</span>float<span class=\"br0\">)</span> <span class=\"re0\">$y</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> output<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">echo</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span>__toString<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> __toString<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"st_h\">'Point [x:'</span> <span class=\"sy0\">.</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span>_x <span class=\"sy0\">.</span> <span class=\"st_h\">',y:'</span> <span class=\"sy0\">.</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span>_y <span class=\"sy0\">.</span> <span class=\"st_h\">']'</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "PicoLisp", "loc": 19, "block": "<pre class=\"text highlighted_source\">(class +Point)<br/># x y<br/>\u00a0<br/>(dm T (X Y)<br/>   (=: x (or X 0))<br/>   (=: y (or Y 0)) )<br/>\u00a0<br/>(dm print&gt; ()<br/>   (prinl \"Point \" (: x) \",\" (: y)) )<br/>\u00a0<br/>(class +Circle +Point)<br/># r<br/>\u00a0<br/>(dm T (X Y R)<br/>   (super X Y)<br/>   (=: r (or R 0)) )<br/>\u00a0<br/>(dm print&gt; ()<br/>   (prinl \"Circle \" (: x) \",\" (: y) \",\" (: r)) )</pre>"}, {"lang": "Pop11", "loc": 19, "block": "<pre class=\"text highlighted_source\">uses objectclass;<br/>define\u00a0:class Point;<br/>    slot x = 0;<br/>    slot y = 0;<br/>enddefine;<br/>\u00a0<br/>define\u00a0:class Circle;<br/>    slot x = 0;<br/>    slot y = 0;<br/>    slot r = 1;<br/>enddefine;<br/>\u00a0<br/>define\u00a0:method print(p\u00a0: Point);<br/>    printf('Point(' &gt;&lt; x(p) &gt;&lt; ', ' &gt;&lt; y(p) &gt;&lt; ')\\n');<br/>enddefine;<br/>\u00a0<br/>define\u00a0:method print(p\u00a0: Circle);<br/>    printf('Circle(' &gt;&lt; x(p) &gt;&lt; ', ' &gt;&lt; y(p) &gt;&lt; ', ' &gt;&lt; r(p) &gt;&lt; ')\\n');<br/>enddefine;</pre>"}, {"lang": "PureBasic", "loc": 59, "block": "<pre class=\"purebasic highlighted_source\">Class MyPoint<br/>\u00a0<br/>  BeginProtect<br/>    x.i<br/>    y.i<br/>  EndProtect<br/>\u00a0<br/>  Public Method GetX<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    MethodReturn This<span class=\"sy0\">\\</span>X<br/>  EndMethod<br/>\u00a0<br/>  Public Method GetY<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    MethodReturn This<span class=\"sy0\">\\</span>Y<br/>  EndMethod<br/>\u00a0<br/>  Public Method SetX<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    This<span class=\"sy0\">\\</span>X<span class=\"sy0\">=</span>n<br/>  EndMethod<br/>\u00a0<br/>  Public Method SetY<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    This<span class=\"sy0\">\\</span>Y<span class=\"sy0\">=</span>n<br/>  EndMethod<br/>\u00a0<br/>  Public Method <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Point\"</span><span class=\"br0\">)</span><br/>  EndMethod<br/>\u00a0<br/>  Public Method Init<span class=\"br0\">(</span>x<span class=\"sy0\">=</span><span class=\"nu0\">0</span>,y<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    This<span class=\"sy0\">\\</span>x<span class=\"sy0\">=</span>x<br/>    This<span class=\"sy0\">\\</span>y<span class=\"sy0\">=</span>y<br/>  EndMethod<br/>EndClass<br/>\u00a0<br/>Class <span class=\"kw2\">Circle</span> <span class=\"kw1\">Extends</span> MyPoint<br/>\u00a0<br/>  Protect  Radie.i<br/>\u00a0<br/>  Public Method Circel<span class=\"br0\">(</span>x<span class=\"sy0\">=</span><span class=\"nu0\">0</span>, y<span class=\"sy0\">=</span><span class=\"nu0\">0</span>, r<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    This<span class=\"sy0\">\\</span>X  <span class=\"sy0\">=</span> x<br/>    This<span class=\"sy0\">\\</span>y  <span class=\"sy0\">=</span> y<br/>    This<span class=\"sy0\">\\</span>Radie<span class=\"sy0\">=</span>r<br/>  EndMethod<br/>\u00a0<br/>  Public Method GetRadie<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    MethodReturn This<span class=\"sy0\">\\</span>Radie<br/>  EndMethod<br/>\u00a0<br/>  Public Method SetRadie<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    This<span class=\"sy0\">\\</span>Radie <span class=\"sy0\">=</span> n<br/>  EndMethod<br/>\u00a0<br/>  Public Method <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Circle: \"</span><span class=\"sy0\">+</span> _<br/>    <span class=\"st0\">\" X= \"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>This<span class=\"sy0\">\\</span>X<span class=\"br0\">)</span><span class=\"sy0\">+</span> _<br/>    <span class=\"st0\">\" Y= \"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>This<span class=\"sy0\">\\</span>Y<span class=\"br0\">)</span><span class=\"sy0\">+</span> _<br/>    <span class=\"st0\">\" R= \"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>This<span class=\"sy0\">\\</span>Radie<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  EndMethod<br/>\u00a0<br/>EndClass</pre>"}, {"lang": "Python", "loc": 14, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">class</span> Point<span class=\"br0\">(</span><span class=\"kw2\">object</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">def</span> <span class=\"kw4\">__init__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"sy0\">,</span> x<span class=\"sy0\">=</span><span class=\"nu0\">0.0</span><span class=\"sy0\">,</span> y<span class=\"sy0\">=</span><span class=\"nu0\">0.0</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw2\">self</span>.<span class=\"me1\">x</span> <span class=\"sy0\">=</span> x<br/>        <span class=\"kw2\">self</span>.<span class=\"me1\">y</span> <span class=\"sy0\">=</span> y<br/>    <span class=\"kw1\">def</span> <span class=\"kw4\">__repr__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">return</span> <span class=\"st0\">'&lt;Point 0x%x x:\u00a0%f y:\u00a0%f&gt;'</span>\u00a0% <span class=\"br0\">(</span><span class=\"kw2\">id</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">self</span>.<span class=\"me1\">x</span><span class=\"sy0\">,</span> <span class=\"kw2\">self</span>.<span class=\"me1\">y</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Circle<span class=\"br0\">(</span><span class=\"kw2\">object</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">def</span> <span class=\"kw4\">__init__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"sy0\">,</span> center<span class=\"sy0\">=</span><span class=\"kw2\">None</span><span class=\"sy0\">,</span> radius<span class=\"sy0\">=</span><span class=\"nu0\">1.0</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw2\">self</span>.<span class=\"me1\">center</span> <span class=\"sy0\">=</span> center <span class=\"kw1\">or</span> Point<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">self</span>.<span class=\"me1\">radius</span> <span class=\"sy0\">=</span> radius<br/>    <span class=\"kw1\">def</span> <span class=\"kw4\">__repr__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">return</span> <span class=\"st0\">'&lt;Circle 0x%x x:\u00a0%f y:\u00a0%f radius:\u00a0%f&gt;'</span>\u00a0% <span class=\"br0\">(</span><br/>            <span class=\"kw2\">id</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">self</span>.<span class=\"me1\">center</span>.<span class=\"me1\">x</span><span class=\"sy0\">,</span> <span class=\"kw2\">self</span>.<span class=\"me1\">center</span>.<span class=\"me1\">y</span><span class=\"sy0\">,</span> <span class=\"kw2\">self</span>.<span class=\"me1\">radius</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 39, "block": "<pre class=\"text highlighted_source\">setClass(\"point\",<br/>   representation(<br/>      x=\"numeric\",<br/>      y=\"numeric\"),<br/>   prototype(<br/>      x=0,<br/>      y=0))<br/>\u00a0<br/># Instantiate class with some arguments<br/>p1 &lt;- new(\"point\", x=3)   <br/># Access some values<br/><a class=\"__cf_email__\" data-cfemail=\"b0c081f0c8\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>    # 3<br/># Define a print method<br/>setMethod(\"print\", signature(\"point\"),<br/>   function(x, ...)<br/>   {<br/>      cat(\"This is a point, with location, (\", <a class=\"__cf_email__\" data-cfemail=\"91e9d1e9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, \",\", <a class=\"__cf_email__\" data-cfemail=\"166e566f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, \").\\n\") <br/>   })<br/>print(p1)<br/>\u00a0<br/># Define a circle class<br/>setClass(\"circle\",<br/>   representation(<br/>      centre=\"point\",<br/>      r=\"numeric\"),<br/>   prototype(<br/>      centre=new(\"point\"),<br/>      r=1))<br/>circS4 &lt;- new(\"circle\", r=5.5)<br/># Access some values<br/><a class=\"__cf_email__\" data-cfemail=\"27444e554474136755\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>    # 5.5<br/><a class=\"__cf_email__\" data-cfemail=\"dfbcb6adbc8ceb9fbcbab1abadba\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@x   # 0<br/># Define a print method<br/>setMethod(\"print\", signature(\"circle\"),<br/>   function(x, ...)<br/>   {<br/>      cat(\"This is a circle, with radius\", <a class=\"__cf_email__\" data-cfemail=\"dea69eac\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, \"and centre (\", <a class=\"__cf_email__\" data-cfemail=\"027a4261676c767067\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@x, \",\", <a class=\"__cf_email__\" data-cfemail=\"f28ab291979c868097\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@y, \").\\n\")<br/>   })<br/>print(circS4)</pre>"}, {"lang": "Racket", "loc": 16, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(define point%<br/>  (class* object% (writable&lt;%&gt;) (super-new) (init-field [x 0] [y 0])<br/>    (define/public (copy) (new point% [x x] [y y]))<br/>    (define/public (show) (format \"&lt;point% ~a ~a&gt;\" x y))<br/>    (define/public (custom-write out) (write (show) out))<br/>    (define/public (custom-display out) (display (show) out))))<br/>\u00a0<br/>(define circle%<br/>  (class point% (super-new) (inherit-field x y) (init-field [r 0])<br/>    (define/override (copy) (new circle% [x x] [y y] [r r]))<br/>    (define/override (show) (format \"&lt;circle% ~a ~a&gt;\" (super show) r))<br/>    (define/override (custom-write out) (write (show) out))<br/>    (define/override (custom-display out) (display (show) out))))<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 23, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> Point<br/>  attr_accessor <span class=\"re3\">:x</span>,:y<br/>  <span class=\"kw1\">def</span> initialize<span class=\"br0\">(</span>x=<span class=\"nu0\">0</span>, y=<span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">self</span>.<span class=\"me1\">x</span> = x<br/>    <span class=\"kw2\">self</span>.<span class=\"me1\">y</span> = y<br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">def</span> to_s<br/>    <span class=\"st0\">\"Point at #{x},#{y}\"</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\"># When defining Circle class as the sub-class of the Point class:</span><br/><span class=\"kw1\">class</span> Circle <span class=\"sy0\">&lt;</span> Point<br/>  attr_accessor <span class=\"re3\">:r</span><br/>  <span class=\"kw1\">def</span> initialize<span class=\"br0\">(</span>x=<span class=\"nu0\">0</span>, y=<span class=\"nu0\">0</span>, r=<span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">self</span>.<span class=\"me1\">x</span> = x<br/>    <span class=\"kw2\">self</span>.<span class=\"me1\">y</span> = y<br/>    <span class=\"kw2\">self</span>.<span class=\"me1\">r</span> = r<br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">def</span> to_s<br/>    <span class=\"st0\">\"Circle at #{x},#{y} with radius #{r}\"</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Scala", "loc": 36, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> PointCircle <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Point<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, y<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> copy<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">x</span>, y<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Point <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Point<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> toString <span class=\"sy0\">=</span> s<span class=\"st0\">\"Point x: $x,  y: $y\"</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Point <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> apply<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, y<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Point <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Point<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Circle<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, y<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, r<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> Point<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> copy<span class=\"br0\">(</span>r<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Circle <span class=\"sy0\">=</span> Circle<span class=\"br0\">(</span>x, y, r<span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> toString <span class=\"sy0\">=</span> s<span class=\"st0\">\"Circle x: $x,  y: $y,  r: $r\"</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> p <span class=\"sy0\">=</span> Point<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> c <span class=\"sy0\">=</span> Circle<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span><span class=\"st0\">\"Instantiated \"</span>, p<span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span><span class=\"st0\">\"Instantiated \"</span>, c<span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> q <span class=\"sy0\">=</span> Point<span class=\"br0\">(</span><span class=\"nu0\">5</span>, <span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span><span class=\"st0\">\"Instantiated \"</span>, q<span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r <span class=\"sy0\">=</span> q.<span class=\"me1\">copy</span><span class=\"br0\">(</span>y <span class=\"sy0\">=</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"co1\">// change y coordinate</span><br/>  println<span class=\"br0\">(</span>r, <span class=\"st0\">\" changed y coordinate\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> d <span class=\"sy0\">=</span> Circle<span class=\"br0\">(</span><span class=\"nu0\">5</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span><span class=\"st0\">\"Instantiated \"</span>, d<span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> e <span class=\"sy0\">=</span> d.<span class=\"me1\">copy</span><span class=\"br0\">(</span>r <span class=\"sy0\">=</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"co1\">// change radius</span><br/>  println<span class=\"br0\">(</span>e, <span class=\"st0\">\" changed radius\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Seed7", "loc": 60, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const type: GraphicObj is new interface;<br/>\u00a0<br/>const proc: print (in GraphicObj: aGraphicObj) is DYNAMIC;<br/>\u00a0<br/>\u00a0<br/>const type: Point is new struct<br/>    var integer: x is 0;<br/>    var integer: y is 0;<br/>  end struct;<br/>\u00a0<br/>type_implements_interface(Point, GraphicObj);<br/>\u00a0<br/>const func Point: Point (in integer: x, in integer: y) is func<br/>  result<br/>    var Point: newPoint is Point.value;<br/>  begin<br/>    newPoint.x\u00a0:= x;<br/>    newPoint.y\u00a0:= y;<br/>  end func;<br/>\u00a0<br/>const proc: print (in Point: aPoint) is func<br/>  begin<br/>    writeln(\"Point(\" &lt;&amp; aPoint.x &lt;&amp; \", \" &lt;&amp; aPoint.y &lt;&amp; \")\");<br/>  end func;<br/>\u00a0<br/>\u00a0<br/>const type: Circle is sub Point struct<br/>    var integer: r is 0;<br/>  end struct;<br/>\u00a0<br/>type_implements_interface(Circle, GraphicObj);<br/>\u00a0<br/>const func Circle: Circle (in integer: x, in integer: y, in integer: r) is func<br/>  result<br/>    var Circle: newCircle is Circle.value;<br/>  begin<br/>    newCircle.x\u00a0:= x;<br/>    newCircle.y\u00a0:= y;<br/>    newCircle.r\u00a0:= r;<br/>  end func;<br/>\u00a0<br/>const proc: print (in Circle: aCircle) is func<br/>  begin<br/>    writeln(\"Circle(\" &lt;&amp; aCircle.x &lt;&amp; \", \" &lt;&amp; aCircle.y &lt;&amp; \", \" &lt;&amp; aCircle.r &lt;&amp; \")\");<br/>  end func;<br/>\u00a0<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var Point: pnt is Point(1, 2);<br/>    var Circle: circ is Circle(3, 4, 5);<br/>    var GraphicObj: graph is Point.value;<br/>  begin<br/>    graph\u00a0:= pnt;<br/>    print(graph);<br/>    graph\u00a0:= circ;<br/>    print(graph);<br/>  end func;</pre>"}, {"lang": "Self", "loc": 21, "block": "<pre class=\"text highlighted_source\">traits point = (|<br/>  parent* = traits clonable. <br/>  printString = ('Point(', x asString, ':', y asString, ')').<br/>  |)<br/>\u00a0<br/>point = (| <br/>  parent* = traits point. <br/>  x &lt;- 0. <br/>  y &lt;- 0<br/>  |)<br/>\u00a0<br/>traits circle = (| <br/>  parent* = traits clonable. <br/>  printString = ('Circle(', center asString, ',', r asString, ')').<br/>  |)<br/>\u00a0<br/>circle = (| <br/>  parent* = traits circle. <br/>  center &lt;- point copy. <br/>  r &lt;- 0<br/>  |)</pre>"}, {"lang": "Sidef", "loc": 15, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> Point<span class=\"br0\">(</span>x=<span class=\"nu0\">0</span>, y=<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Circle<span class=\"br0\">(</span>x=<span class=\"nu0\">0</span>, y=<span class=\"nu0\">0</span>, r=<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/><span class=\"br0\">}</span><br/>\u00a0<br/>func pp<span class=\"br0\">(</span>Point obj<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    say <span class=\"st0\">\"Point at #{obj.x},#{obj.y}\"</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>func pp<span class=\"br0\">(</span>Circle obj<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    say <span class=\"st0\">\"Circle at #{obj.x},#{obj.y} with radius #{obj.r}\"</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "SIMPOL", "loc": 73, "block": "<pre class=\"text highlighted_source\">type mypoint(mypoint) embed export<br/>  embed<br/>  integer x<br/>  integer y<br/>\u00a0<br/>  reference  <br/>  function copy<br/>  function print<br/>end type<br/>\u00a0<br/>\u00a0<br/>function mypoint.new(mypoint me, integer x=0, integer y=0)<br/>  me.x = x<br/>  me.y = y<br/>end function me<br/>\u00a0<br/>\u00a0<br/>function mypoint.copy(mypoint me)<br/>  mypoint p<br/>\u00a0<br/>  p <a class=\"__cf_email__\" data-cfemail=\"2b166b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> mypoint.new(me.x, me.y)<br/>end function p<br/>\u00a0<br/>\u00a0<br/>function mypoint.print(mypoint me)<br/>end function \"mypoint\"<br/>\u00a0<br/>\u00a0<br/>type circle(mypoint) embed export<br/>  reference<br/>  mypoint midpoint resolve<br/>\u00a0<br/>  embed<br/>  integer radius<br/>\u00a0<br/>  reference<br/>  function copy<br/>  function print<br/>end type<br/>\u00a0<br/>\u00a0<br/>function circle.new(circle me, integer x=0, integer y=0, integer radius=0, mypoint midpoint)<br/>  if midpoint <a class=\"__cf_email__\" data-cfemail=\"d6eb96\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>= .nul<br/>    me.midpoint <a class=\"__cf_email__\" data-cfemail=\"97aad7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> mypoint.new(x, y)<br/>  else<br/>    me.x = midpoint.x<br/>    me.y = midpoint.y<br/>  end if<br/>\u00a0<br/>  me.radius = radius<br/>end function me<br/>\u00a0<br/>\u00a0<br/>function circle.copy(circle me)<br/>  circle c<br/>\u00a0<br/>  c <a class=\"__cf_email__\" data-cfemail=\"e5d8a5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> circle.new(radius=me.radius, midpoint=me.midpoint)<br/>end function c<br/>\u00a0<br/>\u00a0<br/>function circle.print(circle me)<br/>end function \"circle\"<br/>\u00a0<br/>\u00a0<br/>function main()<br/>  type(mypoint) p, c<br/>  string result<br/>\u00a0<br/>  p <a class=\"__cf_email__\" data-cfemail=\"83bec3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> mypoint.new()<br/>  c <a class=\"__cf_email__\" data-cfemail=\"96abd6\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> circle.new()<br/>\u00a0<br/>  result = p.print() + \"{d}{a}\" + c.print() + \"{d}{a}\"<br/>end function result</pre>"}, {"lang": "Smalltalk", "loc": 75, "block": "<pre class=\"smalltalk highlighted_source\">!<span class=\"re0\">Object</span> subclass: <span class=\"re1\">#Point</span><br/>  instanceVariableNames: <span class=\"st0\">'x y'</span><br/>  classVariableNames: <span class=\"st0\">''</span><br/>  poolDictionaries: <span class=\"st0\">''</span><br/>  category: <span class=\"st0\">'polymorphism'</span>\u00a0!<br/>\u00a0<br/>!<span class=\"re0\">Point</span> class methodsFor: <span class=\"st0\">'instance creation'</span>!<br/>new<br/>  ^self newBasic <span class=\"re6\">x</span> <span class=\"sy0\">:=</span> <span class=\"re5\">0</span>; <span class=\"re6\">y</span> <span class=\"sy0\">:=</span> <span class=\"re5\">0</span>\u00a0!\u00a0!<br/>\u00a0<br/>!<span class=\"re0\">Point</span> class methodsFor: <span class=\"st0\">'instance creation'</span>!<br/>x: <span class=\"re5\">x</span> y: <span class=\"re5\">y</span><br/>  ^self newBasic <span class=\"re6\">x</span> <span class=\"sy0\">:=</span> <span class=\"re5\">x</span>; <span class=\"re6\">y</span> <span class=\"sy0\">:=</span> <span class=\"re5\">y</span>\u00a0!\u00a0!<br/>\u00a0<br/>!<span class=\"re0\">Point</span> methodsFor: <span class=\"st0\">'member access'</span>!<br/>x<br/>  ^x\u00a0!\u00a0!<br/>\u00a0<br/>!<span class=\"re0\">Point</span> methodsFor: <span class=\"st0\">'member access'</span>!<br/>y<br/>  ^y\u00a0!\u00a0!<br/>\u00a0<br/>!<span class=\"re0\">Point</span> methodsFor: <span class=\"st0\">'member access'</span>!<br/>x: <span class=\"re5\">x</span><br/>  ^self <span class=\"re6\">x</span> <span class=\"sy0\">:=</span> <span class=\"re5\">x</span>\u00a0!\u00a0!<br/>\u00a0<br/>!<span class=\"re0\">Point</span> methodsFor: <span class=\"st0\">'member access'</span>!<br/>y: <span class=\"re5\">y</span><br/>  ^self <span class=\"re6\">y</span> <span class=\"sy0\">:=</span> <span class=\"re5\">y</span>\u00a0!\u00a0!<br/>\u00a0<br/>!<span class=\"re0\">Point</span> methodsFor: <span class=\"st0\">'member access'</span>!<br/>x: <span class=\"re5\">x</span> y: <span class=\"re5\">y</span><br/>  ^self <span class=\"re6\">x</span> <span class=\"sy0\">:=</span> <span class=\"re5\">x</span>; <span class=\"re6\">y</span> <span class=\"sy0\">:=</span> <span class=\"re5\">y</span>\u00a0!\u00a0!<br/>\u00a0<br/>!<span class=\"re0\">Point</span> methodsFor: <span class=\"st0\">'polymorphism test'</span>!<br/>print<br/>  <span class=\"re0\">Transcript</span> show: <span class=\"re5\">x</span>; space; show: <span class=\"re5\">y</span>\u00a0!\u00a0!<br/>\u00a0<br/>!<span class=\"re0\">Object</span> subclass: <span class=\"re1\">#Circle</span><br/>  instanceVariableNames: <span class=\"st0\">'center r'</span><br/>  classVariableNames: <span class=\"st0\">''</span><br/>  poolDictionaries: <span class=\"st0\">''</span><br/>  category: <span class=\"st0\">'polymorphism'</span>\u00a0!<br/>\u00a0<br/>!<span class=\"re0\">Circle</span> class methodsFor: <span class=\"st0\">'instance creation'</span>!<br/>new<br/>  ^self newBasic <span class=\"re6\">center</span> <span class=\"sy0\">:=</span> <span class=\"re0\">Point</span> new; <span class=\"re6\">r</span> <span class=\"sy0\">:=</span> <span class=\"re5\">0</span>\u00a0!\u00a0!<br/>\u00a0<br/>!<span class=\"re0\">Circle</span> class methodsFor: <span class=\"st0\">'instance creation'</span>!<br/>radius: <span class=\"re5\">radius</span><br/>  ^self newBasic <span class=\"re6\">center</span> <span class=\"sy0\">:=</span> <span class=\"re0\">Point</span> new; <span class=\"re6\">r</span> <span class=\"sy0\">:=</span> <span class=\"re5\">radius</span>\u00a0!\u00a0!<br/>\u00a0<br/>!<span class=\"re0\">Circle</span> class methodsFor: <span class=\"st0\">'instance creation'</span>!<br/>at: <span class=\"re5\">point</span> radius: <span class=\"re5\">r</span><br/>  ^self newBasic <span class=\"re6\">center</span> <span class=\"sy0\">:=</span> <span class=\"re5\">point</span>; <span class=\"re6\">r</span> <span class=\"sy0\">:=</span> <span class=\"re5\">r</span>\u00a0!\u00a0!<br/>\u00a0<br/>!<span class=\"re0\">Circle</span> methodsFor: <span class=\"st0\">'member access'</span>!<br/>center<br/>  ^center\u00a0!\u00a0!<br/>\u00a0<br/>!<span class=\"re0\">Circle</span> methodsFor: <span class=\"st0\">'member access'</span>!<br/>x: <span class=\"re5\">x</span> y: <span class=\"re5\">y</span><br/>  ^self center x: <span class=\"re5\">x</span> y: <span class=\"re5\">y</span>\u00a0!\u00a0!<br/>\u00a0<br/>!<span class=\"re0\">Circle</span> methodsFor: <span class=\"st0\">'member access'</span>!<br/>radius<br/>  ^r\u00a0!\u00a0!<br/>\u00a0<br/>!<span class=\"re0\">Circle</span> methodsFor: <span class=\"st0\">'member access'</span>!<br/>radius: <span class=\"re5\">radius</span><br/>  ^self <span class=\"re6\">r</span> <span class=\"sy0\">:=</span> <span class=\"re5\">radius</span>\u00a0!\u00a0!<br/>\u00a0<br/>!<span class=\"re0\">Circle</span> methodsFor: <span class=\"st0\">'polymorphism test'</span>!<br/>print<br/>  <span class=\"re0\">Transcript</span> show: <span class=\"re5\">center</span>; space; show: <span class=\"re5\">radius</span>\u00a0!\u00a0!</pre>"}, {"lang": "Swift", "loc": 46, "block": "<pre class=\"text highlighted_source\">class RCPoint\u00a0: Printable {<br/>  var x: Int<br/>  var y: Int<br/>  init(x: Int = 0, y: Int = 0) {<br/>    self.x = x<br/>    self.y = y<br/>  }<br/>  convenience init(p: RCPoint) {<br/>    self.init(x:p.x, y:p.y)<br/>  }<br/>  var description: String {<br/>  return \"&lt;RCPoint x: \\(self.x) y: \\(self.y)&gt;\"<br/>  }<br/>}<br/>\u00a0<br/>class RCCircle\u00a0: RCPoint {<br/>  var r: Int<br/>  init(p: RCPoint, r: Int = 0) {<br/>    self.r = r<br/>    super.init(x:p.x, y:p.y)<br/>  }<br/>  init(x: Int = 0, y: Int = 0, r: Int = 0) {<br/>    self.r = r<br/>    super.init(x:x, y:y)<br/>  }<br/>  convenience init(c: RCCircle) {<br/>    self.init(x:c.x, y:c.y, r:c.r)<br/>  }<br/>  override var description: String {<br/>    return \"&lt;RCCircle x: \\(x) y: \\(y) r: \\(r)&gt;\"<br/>  }<br/>}<br/>\u00a0<br/>println(RCPoint())<br/>println(RCPoint(x:3))<br/>println(RCPoint(x:3, y:4))<br/>println(RCCircle())<br/>println(RCCircle(x:3))<br/>println(RCCircle(x:3, y:4))<br/>println(RCCircle(x:3, y:4, r:7))<br/>let p = RCPoint(x:1, y:2)<br/>println(RCCircle(p:p))<br/>println(RCCircle(p:p, r:7))<br/>println(p.x) // 1<br/>p.x = 8<br/>println(p.x) // 8</pre>"}, {"lang": "Tcl", "loc": 53, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require TclOO<br/>oo::<span class=\"me1\">class</span> create Point <span class=\"br0\">{</span><br/>    <span class=\"kw1\">variable</span> X Y<br/>    constructor <span class=\"br0\">{</span>x y<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> X <span class=\"re0\">$x</span><br/>        <span class=\"kw1\">set</span> Y <span class=\"re0\">$y</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> x args <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> X <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$args</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> y args <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> Y <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$args</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> print <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">puts</span> <span class=\"st0\">\"Point($X,$Y)\"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> copy <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> copy <span class=\"br0\">[</span>oo::<span class=\"me1\">copy</span> <span class=\"br0\">[</span>self<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>        <span class=\"re0\">$copy</span> x <span class=\"re0\">$X</span><br/>        <span class=\"re0\">$copy</span> y <span class=\"re0\">$Y</span><br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$copy</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>oo::<span class=\"me1\">class</span> create Circle <span class=\"br0\">{</span><br/>    superclass Point<br/>    <span class=\"kw1\">variable</span> R<br/>    constructor <span class=\"br0\">{</span>x y radius<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        next <span class=\"re0\">$x</span> <span class=\"re0\">$y</span><br/>        <span class=\"kw1\">set</span> R <span class=\"re0\">$radius</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> radius args <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> R <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$args</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> print <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">puts</span> <span class=\"st0\">\"Circle([my x],[my y],$R)\"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> copy <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> copy <span class=\"br0\">[</span>next<span class=\"br0\">]</span><br/>        <span class=\"re0\">$copy</span> radius <span class=\"re0\">$R</span><br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$copy</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\"># No destructors: unneeded by these classes</span><br/>\u00a0<br/><span class=\"kw1\">set</span> p <span class=\"br0\">[</span>Point  new <span class=\"nu0\">1.0</span> <span class=\"nu0\">2.0</span><span class=\"br0\">]</span><br/><span class=\"kw1\">set</span> c <span class=\"br0\">[</span>Circle new <span class=\"nu0\">3.0</span> <span class=\"nu0\">4.0</span> <span class=\"nu0\">5.0</span><span class=\"br0\">]</span><br/><span class=\"kw1\">set</span> cCopy <span class=\"br0\">[</span><span class=\"re0\">$c</span> copy<span class=\"br0\">]</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"$p is at ([$p x],[$p y])\"</span><br/><span class=\"re0\">$c</span> radius <span class=\"nu0\">1.5</span><br/><span class=\"kw1\">set</span> objects <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$p</span> <span class=\"re0\">$c</span> <span class=\"re0\">$cCopy</span><span class=\"br0\">]</span><br/><span class=\"kw1\">foreach</span> o <span class=\"re0\">$objects</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$o</span> print<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Wollok", "loc": 45, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class Point {<br/>   var x<br/>   var y<br/>   new(ax, ay) {<br/>       this.x = ax<br/>       this.y = ay<br/>   }<br/>   new(point) {<br/>        this(point.x, point.y)<br/>   }<br/>   method getX() { return x }<br/>   method setX(newX) { x = newX }<br/>\u00a0<br/>   method getY() { return y }<br/>   method setY(newY) { y = newY }<br/>\u00a0<br/>   method print() {<br/>       console.println(\"Point\")<br/>   }<br/>}<br/>\u00a0<br/>class Circle extends Point {<br/>   var r<br/>\u00a0<br/>   new() { this(0,0,0) }<br/>   new(point, aR) { super(point)\u00a0; r = aR }<br/>   new(aX, aY, aR) { super(aX, aY); r = aR }<br/>\u00a0<br/>   method getR() { return r }<br/>   method setR(newR) { r = newR }<br/>\u00a0<br/>   method print() {<br/>       console.println(\"Circle\")<br/>   }<br/>\u00a0<br/>}<br/>\u00a0<br/>program polymorphism {<br/>    val p = new Point()<br/>    val c = new Circle()<br/>    p.print()<br/>    c.print()<br/>}<br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 27, "block": "<pre class=\"text highlighted_source\">class Point{var x,y;<br/>   fcn init(xyOrPoint=0,_=0){<br/>      if(Point.isInstanceOf(xyOrPoint)) set(xyOrPoint); <br/>      else x,y=vm.arglist.apply(\"toFloat\")}<br/>   fcn set(p){x=p.x;y=p.y}<br/>   fcn toString{\"(%d,%d)\".fmt(x,y)}<br/>}<br/>class Circle{var center, radius;<br/>   fcn init(a=0.0,b=0.0,r=1.0){<br/>      switch [arglist]{<br/>         case(Circle){ center=Point(a.center); radius=a.radius }<br/>\t case(Point) { center=Point(a); radius=b.toFloat(); }<br/>\t else { center=Point(a,b); radius=r.toFloat(); }<br/>      }<br/>   }<br/>   fcn copy{self(self)}<br/>   fcn toString{\"(%s,%d)\".fmt(center.toString(),radius)}<br/>}<br/>   // see if various constructors work<br/>Point(); Point(1); Point(1,2), Point(Point());<br/>Circle(); Circle(1); Circle(1,2); Circle(1,2,3);<br/>Circle(Point()); Circle(Point(),1);<br/>Circle(Circle());<br/>\u00a0<br/>c:=Circle(1,2,3);<br/>c.println(); c.center.println();<br/>c.copy().println();</pre>"}]}