{"task": "EKG_sequence_convergence", "blocks": [{"lang": "C", "loc": 75, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define TRUE 1</span><br/><span class=\"co2\">#define FALSE 0</span><br/><span class=\"co2\">#define LIMIT 100</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">int</span> bool<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> compareInts<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>a<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> aa <span class=\"sy0\">=</span> <span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span>a<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> bb <span class=\"sy0\">=</span> <span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span>b<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> aa <span class=\"sy0\">-</span> bb<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>bool contains<span class=\"br0\">(</span><span class=\"kw4\">int</span> a<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> b<span class=\"sy0\">,</span> <span class=\"kw4\">size_t</span> len<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> len<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> b<span class=\"br0\">)</span> <span class=\"kw1\">return</span> TRUE<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> FALSE<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> gcd<span class=\"br0\">(</span><span class=\"kw4\">int</span> a<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>a <span class=\"sy0\">!=</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a <span class=\"sy0\">&gt;</span> b<span class=\"br0\">)</span><br/>            a <span class=\"sy0\">-=</span> b<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span><br/>            b <span class=\"sy0\">-=</span> a<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> a<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>bool areSame<span class=\"br0\">(</span><span class=\"kw4\">int</span> s<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> t<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">size_t</span> len<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/qsort.html\"><span class=\"kw3\">qsort</span></a><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> len<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> compareInts<span class=\"br0\">)</span><span class=\"sy0\">;</span>    <br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/qsort.html\"><span class=\"kw3\">qsort</span></a><span class=\"br0\">(</span>t<span class=\"sy0\">,</span> len<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> compareInts<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> len<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> t<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> FALSE<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> TRUE<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> s<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> i<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> starts<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> ekg<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">[</span>LIMIT<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>s <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> s <span class=\"sy0\">&lt;</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        ekg<span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        ekg<span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> starts<span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>n <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;</span> LIMIT<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"co1\">// a potential sequence member cannot already have been used</span><br/>                <span class=\"co1\">// and must have a factor in common with previous member</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>contains<span class=\"br0\">(</span>ekg<span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> gcd<span class=\"br0\">(</span>ekg<span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"br0\">[</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    ekg<span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>                    <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"EKG(%2d): [\"</span><span class=\"sy0\">,</span> starts<span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">30</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d \"</span><span class=\"sy0\">,</span> ekg<span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\b</span>]<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// now compare EKG5 and EKG7 for convergence</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> LIMIT<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ekg<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> ekg<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> areSame<span class=\"br0\">(</span>ekg<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> ekg<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>EKG(5) and EKG(7) converge at term\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>EKG5(5) and EKG(7) do not converge within\u00a0%d terms<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> LIMIT<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Go", "loc": 72, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"sort\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> contains<span class=\"sy1\">(</span>a <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> b <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> j <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> a <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> j <span class=\"sy3\">==</span> b <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> gcd<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> a <span class=\"sy2\">!=</span> b <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> a &gt; b <span class=\"sy1\">{</span><br/>            a <span class=\"sy2\">-=</span> b<br/>        <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>            b <span class=\"sy2\">-=</span> a<br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> a<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> areSame<span class=\"sy1\">(</span>s<span class=\"sy1\">,</span> t <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    le <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> le <span class=\"sy2\">!=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>t<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>    <span class=\"sy1\">}</span><br/>    sort<span class=\"sy3\">.</span>Ints<span class=\"sy1\">(</span>s<span class=\"sy1\">)</span><br/>    sort<span class=\"sy3\">.</span>Ints<span class=\"sy1\">(</span>t<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; le<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> s<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">!=</span> t<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">const</span> limit <span class=\"sy2\">=</span> <span class=\"nu0\">100</span><br/>    starts <span class=\"sy2\">:=</span> <span class=\"sy1\">[</span><span class=\"nu0\">5</span><span class=\"sy1\">]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"sy1\">}</span><br/>    <span class=\"kw1\">var</span> ekg <span class=\"sy1\">[</span><span class=\"nu0\">5</span><span class=\"sy1\">][</span>limit<span class=\"sy1\">]</span><span class=\"kw4\">int</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> s<span class=\"sy1\">,</span> start <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> starts <span class=\"sy1\">{</span><br/>        ekg<span class=\"sy1\">[</span>s<span class=\"sy1\">][</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu0\">1</span><br/>        ekg<span class=\"sy1\">[</span>s<span class=\"sy1\">][</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> start<br/>        <span class=\"kw1\">for</span> n <span class=\"sy2\">:=</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span> n &lt; limit<span class=\"sy1\">;</span> n<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span> <span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>                <span class=\"co1\">// a potential sequence member cannot already have been used</span><br/>                <span class=\"co1\">// and must have a factor in common with previous member</span><br/>                <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>contains<span class=\"sy1\">(</span>ekg<span class=\"sy1\">[</span>s<span class=\"sy1\">][:</span>n<span class=\"sy1\">],</span> <span class=\"nu2\">i</span><span class=\"sy1\">)</span> &amp;&amp; gcd<span class=\"sy1\">(</span>ekg<span class=\"sy1\">[</span>s<span class=\"sy1\">][</span>n<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">],</span> <span class=\"nu2\">i</span><span class=\"sy1\">)</span> &gt; <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>                    ekg<span class=\"sy1\">[</span>s<span class=\"sy1\">][</span>n<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu2\">i</span><br/>                    <span class=\"kw1\">break</span><br/>                <span class=\"sy1\">}</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"EKG(%2d):\u00a0%v<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> start<span class=\"sy1\">,</span> ekg<span class=\"sy1\">[</span>s<span class=\"sy1\">][:</span><span class=\"nu0\">30</span><span class=\"sy1\">])</span><br/>    <span class=\"sy1\">}</span>   <br/>\u00a0<br/>    <span class=\"co1\">// now compare EKG5 and EKG7 for convergence</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; limit<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> ekg<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">][</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy3\">==</span> ekg<span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">][</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> &amp;&amp; areSame<span class=\"sy1\">(</span>ekg<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">][:</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> ekg<span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">][:</span><span class=\"nu2\">i</span><span class=\"sy1\">])</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>EKG(5) and EKG(7) converge at term\"</span><span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>            <span class=\"kw1\">return</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>EKG5(5) and EKG(7) do not converge within\"</span><span class=\"sy1\">,</span> limit<span class=\"sy1\">,</span> <span class=\"st0\">\"terms\"</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Kotlin", "loc": 49, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// Version 1.2.60</span><br/>\u00a0<br/>fun gcd<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> Int, b<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> aa <span class=\"sy0\">=</span> a<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> bb <span class=\"sy0\">=</span> b<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>aa <span class=\"sy0\">!=</span> bb<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>aa <span class=\"sy0\">&gt;</span> bb<span class=\"br0\">)</span><br/>            aa -<span class=\"sy0\">=</span> bb<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a><br/>            bb -<span class=\"sy0\">=</span> aa<br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> aa<br/><span class=\"br0\">}</span><br/>\u00a0<br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> LIMIT <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> starts <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ekg <span class=\"sy0\">=</span> Array<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> IntArray<span class=\"br0\">(</span>LIMIT<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>s, start<span class=\"br0\">)</span> in starts.<span class=\"me1\">withIndex</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        ekg<span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        ekg<span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> start<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>n in <span class=\"nu0\">2</span> until LIMIT<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"co1\">// a potential sequence member cannot already have been used</span><br/>                <span class=\"co1\">// and must have a factor in common with previous member</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>ekg<span class=\"br0\">[</span>s<span class=\"br0\">]</span>.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">0</span> until n<span class=\"br0\">)</span>.<span class=\"me1\">contains</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span><br/>                    gcd<span class=\"br0\">(</span>ekg<span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"br0\">[</span>n - <span class=\"nu0\">1</span><span class=\"br0\">]</span>, i<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        ekg<span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<br/>                        break<br/>                <span class=\"br0\">}</span><br/>                i++<br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        System.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"EKG(%2d):\u00a0%s<span class=\"es1\">\\n</span>\"</span>, start, ekg<span class=\"br0\">[</span>s<span class=\"br0\">]</span>.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">0</span> until <span class=\"nu0\">30</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span>   <br/>\u00a0<br/>    <span class=\"co1\">// now compare EKG5 and EKG7 for convergence</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">2</span> until LIMIT<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>ekg<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> ekg<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span><br/>        ekg<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">0</span> until i<span class=\"br0\">)</span>.<span class=\"me1\">sorted</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> ekg<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">0</span> until i<span class=\"br0\">)</span>.<span class=\"me1\">sorted</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>EKG(5) and EKG(7) converge at term ${i + 1}\"</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>EKG5(5) and EKG(7) do not converge within $LIMIT terms\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 24, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> infix<span class=\"sy0\">:&lt;</span>shares<span class=\"sy0\">-</span>divisors<span class=\"sy0\">-</span>with<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"re0\">$^a</span> gcd <span class=\"re0\">$^b</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> next<span class=\"sy0\">-</span>EKG <span class=\"br0\">(</span> <span class=\"sy0\">*</span><span class=\"re0\">@s</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw3\">first</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">@s</span> \u220c <span class=\"re0\">$_</span>  <span class=\"kw1\">and</span>  <span class=\"re0\">@s</span><span class=\"sy0\">.</span><span class=\"me1\">tail</span> shares<span class=\"sy0\">-</span>divisors<span class=\"sy0\">-</span>with <span class=\"re0\">$_</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">..*;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> EKG <span class=\"br0\">(</span> Int <span class=\"re0\">$start</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span>  <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$start</span><span class=\"sy0\">,</span> <span class=\"re0\">&amp;next</span><span class=\"sy0\">-</span>EKG \u2026 <span class=\"sy0\">*</span>  <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> converge<span class=\"sy0\">-</span>at <span class=\"br0\">(</span> <span class=\"re0\">@ints</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@ekgs</span> <span class=\"sy0\">=</span> <span class=\"re0\">@ints</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"re0\">&amp;EKG</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">..</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">first</span><span class=\"sy0\">:</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$i</span> <span class=\"br0\">{</span><br/>        <span class=\"br0\">[</span><span class=\"sy0\">==</span><span class=\"br0\">]</span>  <span class=\"re0\">@ekgs</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"br0\">(</span>     <span class=\"sy0\">*.</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span>     <span class=\"br0\">)</span> <span class=\"kw1\">and</span><br/>        <span class=\"br0\">[</span><span class=\"sy0\">===</span><span class=\"br0\">]</span> <span class=\"re0\">@ekgs</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"br0\">(</span> <span class=\"sy0\">*.</span><span class=\"me1\">head</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Set</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st0\">\"EKG($_): \"</span><span class=\"sy0\">,</span> <span class=\"sy0\">.</span><span class=\"re0\">&amp;EKG</span><span class=\"sy0\">.</span><span class=\"me1\">head</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">@ints</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"EKGs of (@ints[]) converge at term {$_+1}\"</span> with converge<span class=\"sy0\">-</span>at<span class=\"br0\">(</span><span class=\"re0\">@ints</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Python", "loc": 34, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">itertools</span> <span class=\"kw1\">import</span> count<span class=\"sy0\">,</span> islice<span class=\"sy0\">,</span> takewhile<br/><span class=\"kw1\">from</span> <span class=\"kw3\">math</span> <span class=\"kw1\">import</span> gcd<br/>\u00a0<br/><span class=\"kw1\">def</span> EKG_gen<span class=\"br0\">(</span>start<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\"\"\"<span class=\"es0\">\\</span><br/>    Generate the next term of the EKG together with the minimum cache of <br/>    numbers left in its production; (the \"state\" of the generator).<br/>    Using math.gcd<br/>    \"\"\"</span><br/>    c <span class=\"sy0\">=</span> count<span class=\"br0\">(</span>start + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    last<span class=\"sy0\">,</span> so_far <span class=\"sy0\">=</span> start<span class=\"sy0\">,</span> <span class=\"kw2\">list</span><span class=\"br0\">(</span><span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> start<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">yield</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">yield</span> last<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">while</span> <span class=\"kw2\">True</span>:<br/>        <span class=\"kw1\">for</span> index<span class=\"sy0\">,</span> sf <span class=\"kw1\">in</span> <span class=\"kw2\">enumerate</span><span class=\"br0\">(</span>so_far<span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">if</span> gcd<span class=\"br0\">(</span>last<span class=\"sy0\">,</span> sf<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span>:<br/>                last <span class=\"sy0\">=</span> so_far.<span class=\"me1\">pop</span><span class=\"br0\">(</span>index<span class=\"br0\">)</span><br/>                <span class=\"kw1\">yield</span> last<span class=\"sy0\">,</span> so_far<span class=\"br0\">[</span>::<span class=\"br0\">]</span><br/>                <span class=\"kw1\">break</span><br/>        <span class=\"kw1\">else</span>:<br/>            so_far.<span class=\"me1\">append</span><span class=\"br0\">(</span>next<span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> find_convergence<span class=\"br0\">(</span>ekgs<span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\"Returns the convergence point or zero if not found within the limit\"</span><br/>    ekg <span class=\"sy0\">=</span> <span class=\"br0\">[</span>EKG_gen<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> ekgs<span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> e <span class=\"kw1\">in</span> ekg:<br/>        next<span class=\"br0\">(</span>e<span class=\"br0\">)</span>    <span class=\"co1\"># skip initial 1 in each sequence</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">2</span> + <span class=\"kw2\">len</span><span class=\"br0\">(</span><span class=\"kw2\">list</span><span class=\"br0\">(</span>takewhile<span class=\"br0\">(</span><span class=\"kw1\">lambda</span> state: <span class=\"kw1\">not</span> <span class=\"kw2\">all</span><span class=\"br0\">(</span>state<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> s <span class=\"kw1\">for</span>  s <span class=\"kw1\">in</span> state<span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                                  <span class=\"kw2\">zip</span><span class=\"br0\">(</span>*ekg<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    <span class=\"kw1\">for</span> start <span class=\"kw1\">in</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span>:<br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span>f<span class=\"st0\">\"EKG({start}):\"</span><span class=\"sy0\">,</span> <span class=\"kw2\">str</span><span class=\"br0\">(</span><span class=\"br0\">[</span>n<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> islice<span class=\"br0\">(</span>EKG_gen<span class=\"br0\">(</span>start<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>: -<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span>f<span class=\"st0\">\"<span class=\"es0\">\\n</span>EKG(5) and EKG(7) converge at term {find_convergence(ekgs=(5,7))}!\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "REXX", "loc": 39, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program can  generate and display several  EKG  sequences  (with various starts).*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> nums start                             <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">if</span>  nums==<span class=\"st0\">''</span> <span class=\"sy0\">|</span>  nums==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span>  nums= <span class=\"nu0\">50</span>        <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">if</span> start= <span class=\"st0\">''</span> <span class=\"sy0\">|</span> start= <span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> start=<span class=\"nu0\">2</span> <span class=\"nu0\">5</span> <span class=\"nu0\">7</span> <span class=\"nu0\">9</span> <span class=\"nu0\">10</span> <span class=\"coMULTI\">/* \"      \"         \"   \"   \"     \"    */</span><br/>\u00a0<br/>     <span class=\"kw1\">do</span> s=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>start<span class=\"br0\">)</span>;   $=              <span class=\"coMULTI\">/*step through the specified  STARTs.  */</span><br/>     second= <span class=\"kw6\">word</span><span class=\"br0\">(</span>start, s<span class=\"br0\">)</span>;     <span class=\"kw1\">say</span>             <span class=\"coMULTI\">/*obtain the second integer in the seq.*/</span><br/>\u00a0<br/>         <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> nums<br/>         <span class=\"kw1\">if</span> j<span class=\"sy0\">&lt;</span><span class=\"nu0\">3</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>; #=<span class=\"nu0\">1</span>;  <span class=\"kw1\">if</span> j==<span class=\"nu0\">2</span>  <span class=\"kw3\">then</span> #=second;  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*handle 1st &amp; 2nd number*/</span><br/>                 <span class=\"kw3\">else</span> #= ekg<span class=\"br0\">(</span>#<span class=\"br0\">)</span><br/>         $= $ <span class=\"kw6\">right</span><span class=\"br0\">(</span>#,  <span class=\"kw6\">max</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"kw6\">length</span><span class=\"br0\">(</span>#<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span>     <span class=\"coMULTI\">/*append the EKG integer to the $ list.*/</span><br/>         <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span>                             <span class=\"coMULTI\">/* [\u2191] the RIGHT BIF aligns the numbers*/</span><br/>     <span class=\"kw1\">say</span> <span class=\"st0\">'(start'</span>  <span class=\"kw6\">right</span><span class=\"br0\">(</span>second,  <span class=\"kw6\">max</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"kw6\">length</span><span class=\"br0\">(</span>second<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"st0\">\"):\"</span>$      <span class=\"coMULTI\">/*display EKG seq.*/</span><br/>     <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*s*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>add_:   <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span> z<span class=\"sy0\">//</span>j == <span class=\"nu0\">0</span>;    z=z%j;    _=_ j;    w=w+<span class=\"nu0\">1</span>;    <span class=\"kw3\">end</span>;         <span class=\"kw1\">return</span> <span class=\"kw6\">strip</span><span class=\"br0\">(</span>_<span class=\"br0\">)</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>ekg: <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> $; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x <span class=\"nu0\">1</span> z,,_<br/>     w=<span class=\"nu0\">0</span>                                                        <span class=\"coMULTI\">/*W:  number of factors.*/</span><br/>             <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">to</span> <span class=\"nu0\">11</span>  <span class=\"kw2\">by</span> <span class=\"nu0\">2</span>;     j=k;  <span class=\"kw1\">if</span> j==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> j=<span class=\"nu0\">2</span>   <span class=\"coMULTI\">/*divide by low primes. */</span><br/>             <span class=\"kw1\">if</span> j==<span class=\"nu0\">9</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>;   <span class=\"kw1\">call</span> add_                 <span class=\"coMULTI\">/*skip \u00f7 9; add to list.*/</span><br/>             <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>                                                                <span class=\"coMULTI\">/*\u2193 skips multiples of 3*/</span><br/>             <span class=\"kw1\">do</span> y=<span class=\"nu0\">0</span>  <span class=\"kw2\">by</span> <span class=\"nu0\">2</span>;  j= j + <span class=\"nu0\">2</span> + y<span class=\"sy0\">//</span><span class=\"nu0\">4</span>                     <span class=\"coMULTI\">/*increment J by 2 or 4.*/</span><br/>             <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span>  j  <span class=\"st0\">''</span>  -<span class=\"nu0\">1</span>  r;  <span class=\"kw1\">if</span> r==<span class=\"nu0\">5</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>    <span class=\"coMULTI\">/*divisible by five\u00a0?   */</span><br/>             <span class=\"kw1\">if</span> j<span class=\"sy0\">*</span>j<span class=\"sy0\">&gt;</span>x <span class=\"sy0\">|</span> j<span class=\"sy0\">&gt;</span>z  <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span>                         <span class=\"coMULTI\">/*passed the sqrt(x)\u00a0?  */</span><br/>             _= add_<span class=\"br0\">(</span><span class=\"br0\">)</span>                                          <span class=\"coMULTI\">/*add a factor to list. */</span><br/>             <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*y*/</span><br/>     j=z;                    <span class=\"kw1\">if</span> z<span class=\"sy0\">\\</span>==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> _= add_<span class=\"br0\">(</span><span class=\"br0\">)</span>           <span class=\"coMULTI\">/*Z\u00ac=1? Then add\u2500\u2500\u25balist.*/</span><br/>     <span class=\"kw1\">if</span> _=<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> _=x                                          <span class=\"coMULTI\">/*Null? Then use prime. */</span><br/>                 <span class=\"kw1\">do</span>   j=<span class=\"nu0\">3</span>;                          done=<span class=\"nu0\">1</span><br/>                   <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> w<br/>                   <span class=\"kw1\">if</span> j <span class=\"sy0\">//</span> <span class=\"kw6\">word</span><span class=\"br0\">(</span>_, k<span class=\"br0\">)</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  done=<span class=\"nu0\">0</span>;  <span class=\"kw1\">leave</span>;  <span class=\"kw3\">end</span><br/>                   <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>                 <span class=\"kw1\">if</span> done  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>                 <span class=\"kw1\">if</span> <span class=\"kw6\">wordpos</span><span class=\"br0\">(</span>j, $<span class=\"br0\">)</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> j             <span class=\"coMULTI\">/*return an EKG integer.*/</span><br/>                 <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*j*/</span></pre>"}, {"lang": "zkl", "loc": 9, "block": "<pre class=\"text highlighted_source\">fcn ekgW(N){\t// --&gt; iterator<br/>   Walker.tweak(fcn(rp,buf,w){<br/>      foreach n in (w){<br/>\t if(rp.value.gcd(n)&gt;1)<br/>\t    { rp.set(n); w.push(buf.xplode()); buf.clear(); return(n); }<br/>\t buf.append(n);  // save small numbers not used yet<br/>      }<br/>   }.fp(Ref(N),List(),Walker.chain([2..N-1],[N+1..]))).push(1,N)<br/>}</pre>"}]}