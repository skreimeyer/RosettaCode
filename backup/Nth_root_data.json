{"task": "Nth_root", "blocks": [{"lang": "360 Assembly", "loc": 59, "block": "<pre class=\"text highlighted_source\">*        Nth root - x**(1/n)       - 29/07/2018<br/>NTHROOT  CSECT<br/>         USING  NTHROOT,R13        base register<br/>         B      72(R15)            skip savearea<br/>         DC     17F'0'             savearea<br/>         SAVE   (14,12)            save previous context<br/>         ST     R13,4(R15)         link backward<br/>         ST     R15,8(R13)         link forward<br/>         LR     R13,R15            set addressability<br/>         BAL    R14,ROOTN          call rootn(x,n)<br/>         LE     F0,XN              xn=rootn(x,n)<br/>         LA     R0,6               decimals=6<br/>         BAL    R14,FORMATF        edit xn<br/>         MVC    PG(13),0(R1)       output xn<br/>         XPRNT  PG,L'PG            print buffer<br/>         L      R13,4(0,R13)       restore previous savearea pointer<br/>         RETURN (14,12),RC=0       restore registers from calling sav<br/>ROOTN    MVC    ZN,=E'0'           zn=0  ----------------------------<br/>         MVC    ZN,N               n<br/>         MVI    ZN,X'46'           zn=unnormalize(n)<br/>         LE     F0,ZN              zn<br/>         AE     F0,=E'0'           normalized         <br/>         STE    F0,ZN              zn=normalize(n)<br/>         LE     F6,=E'0'           xm=0<br/>         LE     F0,X               x<br/>         DE     F0,ZN              /zn<br/>         STE    F0,XN              xn=x/zn<br/>WHILEA   LE     F0,XN              xn<br/>         SER    F0,F6              xn-xm<br/>         LPER   F0,F0              abs((xn-xm)<br/>         DE     F0,XN              /xn<br/>         CE     F0,EPSILON         while abs((xn-xm)/xn)&gt;epsilon<br/>         BNH    EWHILEA            ~<br/>         LE     F6,XN                xm=xn<br/>         LE     F0,ZN                zn<br/>         SE     F0,=E'1'             zn-1<br/>         MER    F0,F6                f0=(zn-1)*xm<br/>         L      R2,N                 n<br/>         BCTR   R2,0                 n-1        <br/>         LE     F2,=E'1'             xm<br/>POW      MER    F2,F6                *xm<br/>         BCT    R2,POW               f2=xm**(n-1)   <br/>         LE     F4,X                 x<br/>         DER    F4,F2                x/xm**(n-1)<br/>         AER    F0,F4                (zn-1)*xm+x/xm**(n-1)<br/>         DE     F0,ZN                /zn<br/>         STE    F0,XN                xn=((zn-1)*xm+x/xm**(n-1))/zn<br/>         B      WHILEA             endwhile<br/>EWHILEA  LE     F0,XN              xn<br/>         BR     R14                return ---------------------------<br/>         COPY   FORMATF            format a float<br/>X        DC     E'2'               x  &lt;== input<br/>N        DC     F'2'               n  &lt;== input<br/>EPSILON  DC     E'1E-6'            imprecision<br/>XN       DS     E                  xn\u00a0:: output<br/>ZN       DS     E                  zn=float(n)<br/>PG       DC     CL80' '            buffer<br/>         REGEQU <br/>         END    NTHROOT </pre>"}, {"lang": "Ada", "loc": 29, "block": "<pre class=\"ada highlighted_source\">\u00a0<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;  <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Test_Nth_Root <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">generic</span><br/>      <span class=\"kw3\">type</span> Real <span class=\"kw1\">is</span> <span class=\"kw3\">digits</span> &lt;&gt;;<br/>   <span class=\"kw3\">function</span> Nth_Root <span class=\"br0\">(</span>Value\u00a0: Real; N\u00a0: Positive<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Real;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Nth_Root <span class=\"br0\">(</span>Value\u00a0: Real; N\u00a0: Positive<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Real <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">type</span> Index <span class=\"kw1\">is</span> <span class=\"kw2\">mod</span> <span class=\"nu0\">2</span>;<br/>      X\u00a0: <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Index<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Real\u00a0:= <span class=\"br0\">(</span>Value, Value<span class=\"br0\">)</span>;<br/>      K\u00a0: Index\u00a0:= <span class=\"nu0\">0</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">loop</span><br/>         X <span class=\"br0\">(</span>K + <span class=\"nu0\">1</span><span class=\"br0\">)</span>\u00a0:= <span class=\"br0\">(</span> <span class=\"br0\">(</span>Real <span class=\"br0\">(</span>N<span class=\"br0\">)</span> - <span class=\"nu0\">1.0</span><span class=\"br0\">)</span> * X <span class=\"br0\">(</span>K<span class=\"br0\">)</span> + Value / X <span class=\"br0\">(</span>K<span class=\"br0\">)</span> ** <span class=\"br0\">(</span>N-<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> / Real <span class=\"br0\">(</span>N<span class=\"br0\">)</span>;<br/>         <span class=\"kw3\">exit</span> <span class=\"kw3\">when</span> X <span class=\"br0\">(</span>K + <span class=\"nu0\">1</span><span class=\"br0\">)</span> &gt;= X <span class=\"br0\">(</span>K<span class=\"br0\">)</span>;<br/>         K\u00a0:= K + <span class=\"nu0\">1</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> X <span class=\"br0\">(</span>K + <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Nth_Root;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Long_Nth_Root <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Nth_Root <span class=\"br0\">(</span>Long_Float<span class=\"br0\">)</span>;<br/><span class=\"kw1\">begin</span><br/>   Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"1024.0 10th  =\"</span> &amp; Long_Float'Image <span class=\"br0\">(</span>Long_Nth_Root <span class=\"br0\">(</span><span class=\"nu0\">1024.0</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"  27.0 3rd   =\"</span> &amp; Long_Float'Image <span class=\"br0\">(</span>Long_Nth_Root <span class=\"br0\">(</span><span class=\"nu0\">27.0</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"   2.0 2nd   =\"</span> &amp; Long_Float'Image <span class=\"br0\">(</span>Long_Nth_Root <span class=\"br0\">(</span><span class=\"nu0\">2.0</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"5642.0 125th =\"</span> &amp; Long_Float'Image <span class=\"br0\">(</span>Long_Nth_Root <span class=\"br0\">(</span><span class=\"nu0\">5642.0</span>, <span class=\"nu0\">125</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Test_Nth_Root;<br/>\u00a0</pre>"}, {"lang": "ALGOL 68", "loc": 25, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw3\">REAL</span> default p <span class=\"sy1\">=</span> <span class=\"re1\">0.001</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> nth root <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> n<span class=\"sy1\">,</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> a<span class=\"sy1\">,</span> p<span class=\"br0\">)</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span><span class=\"sy1\">:</span><br/><span class=\"br0\">(</span><br/>  <span class=\"br0\">[</span>2<span class=\"br0\">]</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> x <span class=\"sy1\">:=</span> <span class=\"br0\">(</span>a<span class=\"sy1\">,</span> a<span class=\"sy1\">/</span>n<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw2\">WHILE</span> <span class=\"kw8\">ABS</span><span class=\"br0\">(</span>x<span class=\"br0\">[</span>2<span class=\"br0\">]</span> <span class=\"sy1\">-</span> x<span class=\"br0\">[</span>1<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">&gt;</span> p <span class=\"kw2\">DO</span><br/>    x <span class=\"sy1\">:=</span> <span class=\"br0\">(</span>x<span class=\"br0\">[</span>2<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n<span class=\"sy1\">-</span>1<span class=\"br0\">)</span><span class=\"sy1\">*</span>x<span class=\"br0\">[</span>2<span class=\"br0\">]</span> <span class=\"sy1\">+</span> a<span class=\"sy1\">/</span>x<span class=\"br0\">[</span>2<span class=\"br0\">]</span><span class=\"sy1\">**</span><span class=\"br0\">(</span>n<span class=\"sy1\">-</span>1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">/</span>n <span class=\"br0\">)</span><br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  x<span class=\"br0\">[</span>2<span class=\"br0\">]</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PRIO</span> ROOT <span class=\"sy1\">=</span> 8<span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span> ROOT <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> n<span class=\"sy1\">,</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> a<span class=\"br0\">)</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span><span class=\"sy1\">:</span> nth root<span class=\"br0\">(</span>n<span class=\"sy1\">,</span> a<span class=\"sy1\">,</span> default p<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span> ROOT <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> n<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> a<span class=\"br0\">)</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span><span class=\"sy1\">:</span> nth root<span class=\"br0\">(</span>n<span class=\"sy1\">,</span> a<span class=\"sy1\">,</span> default p<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>main<span class=\"sy1\">:</span><br/><span class=\"br0\">(</span><br/>  <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$2<span class=\"br0\">(</span><span class=\"st0\">\" \"</span>gl<span class=\"br0\">)</span>$<span class=\"sy1\">,</span><br/>         nth root<span class=\"br0\">(</span>10<span class=\"sy1\">,</span> <span class=\"kw4\">LONG</span> <span class=\"re1\">7131.5</span> <span class=\"sy1\">**</span> 10<span class=\"sy1\">,</span> default p<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>         nth root<span class=\"br0\">(</span>5<span class=\"sy1\">,</span> 34<span class=\"sy1\">,</span> default p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$2<span class=\"br0\">(</span><span class=\"st0\">\" \"</span>gl<span class=\"br0\">)</span>$<span class=\"sy1\">,</span><br/>         10 ROOT <span class=\"br0\">(</span> <span class=\"kw4\">LONG</span> <span class=\"re1\">7131.5</span> <span class=\"sy1\">**</span> 10 <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>         5 ROOT 34<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "AutoHotkey", "loc": 19, "block": "<pre class=\"autohotkey highlighted_source\">p <span class=\"sy0\">:=</span> <span class=\"nu0\">0.000001</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>\u00a0% nthRoot<span class=\"br0\">(</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">7131.5</span><span class=\"sy0\">**</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> p<span class=\"br0\">)</span> <span class=\"st0\">\"`n\"</span><br/>        <span class=\"sy0\">.</span> nthRoot<span class=\"br0\">(</span>  <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">34.0</span>      <span class=\"sy0\">,</span> p<span class=\"br0\">)</span> <span class=\"st0\">\"`n\"</span><br/>        <span class=\"sy0\">.</span> nthRoot<span class=\"br0\">(</span>  <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span>         <span class=\"sy0\">,</span> p<span class=\"br0\">)</span> <span class=\"st0\">\"`n\"</span><br/>        <span class=\"sy0\">.</span> nthRoot<span class=\"br0\">(</span><span class=\"nu0\">0.5</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span>         <span class=\"sy0\">,</span> p<span class=\"br0\">)</span> <span class=\"st0\">\"`n\"</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/>nthRoot<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> A<span class=\"sy0\">,</span> p<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">; http://en.wikipedia.org/wiki/Nth_root_algorithm</span><br/><span class=\"co1\">;---------------------------------------------------------------------------</span><br/>    x1 <span class=\"sy0\">:=</span> A<br/>    x2 <span class=\"sy0\">:=</span> A <span class=\"sy0\">/</span> n<br/>    <span class=\"kw1\">While</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Abs</span></a><span class=\"br0\">(</span>x1 <span class=\"sy0\">-</span> x2<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> p <span class=\"br0\">{</span><br/>        x1 <span class=\"sy0\">:=</span> x2<br/>        x2 <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>x2<span class=\"sy0\">+</span>A<span class=\"sy0\">/</span>x2<span class=\"sy0\">**</span><span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>n<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">Return</span><span class=\"sy0\">,</span> x2<br/><span class=\"br0\">}</span></pre>"}, {"lang": "AutoIt", "loc": 26, "block": "<pre class=\"autoit highlighted_source\"><span class=\"co0\">;AutoIt Version: 3.2.10.0</span><br/><span class=\"re0\">$A</span><span class=\"sy0\">=</span><span class=\"nu0\">4913</span><br/><span class=\"re0\">$n</span><span class=\"sy0\">=</span><span class=\"nu0\">3</span><br/><span class=\"re0\">$x</span><span class=\"sy0\">=</span><span class=\"nu0\">20</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm\"><span class=\"kw3\">ConsoleWrite</span></a> <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">&amp;</span> <span class=\"st0\">\" root of \"</span><span class=\"sy0\">&amp;</span> <span class=\"re0\">$A</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" is \"</span> <span class=\"sy0\">&amp;</span>nth_root_it<span class=\"br0\">(</span><span class=\"re0\">$A</span><span class=\"sy0\">,</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm\"><span class=\"kw3\">ConsoleWrite</span></a> <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">&amp;</span> <span class=\"st0\">\" root of \"</span><span class=\"sy0\">&amp;</span> <span class=\"re0\">$A</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" is \"</span> <span class=\"sy0\">&amp;</span>nth_root_rec<span class=\"br0\">(</span><span class=\"re0\">$A</span><span class=\"sy0\">,</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co0\">;Iterative</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> nth_root_it<span class=\"br0\">(</span><span class=\"re0\">$A</span><span class=\"sy0\">,</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><br/>   <span class=\"re0\">$x0</span><span class=\"sy0\">=</span><span class=\"st0\">\"0\"</span><br/>   <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">While</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringCompare.htm\"><span class=\"kw3\">StringCompare</span></a><span class=\"br0\">(</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/String.htm\"><span class=\"kw3\">string</span></a><span class=\"br0\">(</span><span class=\"re0\">$x0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/String.htm\"><span class=\"kw3\">string</span></a><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <a href=\"http://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm\"><span class=\"kw3\">ConsoleWrite</span></a> <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">&amp;</span><a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@CRLF</span></span></a><span class=\"br0\">)</span><br/>      <span class=\"re0\">$x0</span><span class=\"sy0\">=</span><span class=\"re0\">$x</span><br/>      <span class=\"re0\">$x</span><span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"re0\">$A</span><span class=\"sy0\">/</span><span class=\"re0\">$x</span><span class=\"sy0\">^</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"re0\">$n</span><br/>   <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">WEnd</span></a><br/>   <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <span class=\"re0\">$x</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a><br/>\u00a0<br/><span class=\"co0\">;Recursive</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> nth_root_rec<span class=\"br0\">(</span><span class=\"re0\">$A</span><span class=\"sy0\">,</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><br/>   <a href=\"http://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm\"><span class=\"kw3\">ConsoleWrite</span></a> <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">&amp;</span><a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@CRLF</span></span></a><span class=\"br0\">)</span><br/>   <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$x</span><span class=\"sy0\">==</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"re0\">$A</span><span class=\"sy0\">/</span><span class=\"re0\">$x</span><span class=\"sy0\">^</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"re0\">$n</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a><br/>      <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <span class=\"re0\">$x</span><br/>   <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndIf</span></a><br/>   <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> nth_root_rec<span class=\"br0\">(</span><span class=\"re0\">$A</span><span class=\"sy0\">,</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"re0\">$A</span><span class=\"sy0\">/</span><span class=\"re0\">$x</span><span class=\"sy0\">^</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a></pre>"}, {"lang": "AWK", "loc": 24, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\">#!/usr/bin/awk -f</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\"># test</span><br/>\t<span class=\"kw5\">print</span> nthroot<span class=\"br0\">(</span><span class=\"nu0\">8</span>,<span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>\t<span class=\"kw5\">print</span> nthroot<span class=\"br0\">(</span><span class=\"nu0\">16</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t<span class=\"kw5\">print</span> nthroot<span class=\"br0\">(</span><span class=\"nu0\">16</span>,<span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>\t<span class=\"kw5\">print</span> nthroot<span class=\"br0\">(</span><span class=\"nu0\">125</span>,<span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>\t<span class=\"kw5\">print</span> nthroot<span class=\"br0\">(</span><span class=\"nu0\">3</span>,<span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>\t<span class=\"kw5\">print</span> nthroot<span class=\"br0\">(</span><span class=\"nu0\">3</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw6\">function</span> nthroot<span class=\"br0\">(</span>y,n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        eps = 1e<span class=\"sy3\">-</span>15;   <span class=\"co1\"># relative accuracy</span><br/>        x   = <span class=\"nu0\">1</span>; <br/>\t<span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>\t\td  = <span class=\"br0\">(</span> y <span class=\"sy3\">/</span> <span class=\"br0\">(</span> x<span class=\"sy3\">^</span><span class=\"br0\">(</span>n<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy3\">-</span> x <span class=\"br0\">)</span> <span class=\"sy3\">/</span> n\u00a0;<br/>\t\tx <span class=\"sy3\">+</span>= d; <br/>\t\te = eps<span class=\"sy3\">*</span>x;   <span class=\"co1\"># absolute accuracy\t</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span> d <span class=\"sy2\">&lt;</span> <span class=\"sy3\">-</span>e  <span class=\"sy1\">||</span> d <span class=\"sy2\">&gt;</span> e <span class=\"br0\">)</span><br/>\u00a0<br/>\t<span class=\"kw6\">return</span> x<br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BASIC", "loc": 11, "block": "<pre class=\"qbasic highlighted_source\"><span class=\"kw1\">FUNCTION</span> RootX <span class=\"br0\">(</span>tBase <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckdouble.shtml\"><span class=\"kw3\">DOUBLE</span></a><span class=\"sy0\">,</span> tExp <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckdouble.shtml\"><span class=\"kw3\">DOUBLE</span></a><span class=\"sy0\">,</span> diffLimit <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckdouble.shtml\"><span class=\"kw3\">DOUBLE</span></a><span class=\"br0\">)</span> <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckdouble.shtml\"><span class=\"kw3\">DOUBLE</span></a><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> tmp1 <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckdouble.shtml\"><span class=\"kw3\">DOUBLE</span></a><span class=\"sy0\">,</span> tmp2 <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckdouble.shtml\"><span class=\"kw3\">DOUBLE</span></a><br/>    <span class=\"co1\">' Initial guess:</span><br/>    tmp1 <span class=\"sy0\">=</span> tBase <span class=\"sy0\">/</span> tExp<br/>    <span class=\"kw1\">DO</span><br/>        tmp2 <span class=\"sy0\">=</span> tmp1<br/>        <span class=\"co1\">' 1# tells compiler that \"1\" is a double, not an integer</span><br/>        tmp1 <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>tExp <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>#<span class=\"br0\">)</span> <span class=\"sy0\">*</span> tmp2<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>tBase <span class=\"sy0\">/</span> <span class=\"br0\">(</span>tmp2 <span class=\"sy0\">^</span> <span class=\"br0\">(</span>tExp <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>#<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> tExp<br/>    <span class=\"kw1\">LOOP</span> <span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qckabs.shtml\"><span class=\"kw3\">ABS</span></a><span class=\"br0\">(</span>tmp1 <span class=\"sy0\">-</span> tmp2<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> diffLimit<span class=\"br0\">)</span><br/>    RootX <span class=\"sy0\">=</span> tmp1<br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span></pre>"}, {"lang": "BBC BASIC", "loc": 13, "block": "<pre class=\"text highlighted_source\">      *FLOAT 64<br/>      @% = &amp;D0D<br/>      PRINT \"Cube root of 5 is \"; FNroot(3, 5, 0)<br/>      PRINT \"125th root of 5643 is \"; FNroot(125, 5643, 0)<br/>      END<br/>\u00a0<br/>      DEF FNroot(n%, a, d)<br/>      LOCAL x0, x1\u00a0: x0 = a / n%\u00a0: REM Initial guess<br/>      REPEAT<br/>        x1 = ((n% - 1)*x0 + a/x0^(n%-1)) / n%<br/>        SWAP x0, x1<br/>      UNTIL ABS (x0 - x1) &lt;= d<br/>      = x0</pre>"}, {"lang": "bc", "loc": 30, "block": "<pre class=\"text highlighted_source\">/* Take the nth root of 'a' (a positive real number).<br/> * 'n' must be an integer.<br/> * Result will have 'd' digits after the decimal point.<br/> */<br/>define r(a, n, d) {<br/>    auto e, o, x, y, z<br/>\u00a0<br/>    if (n == 0) return(1)<br/>    if (a == 0) return(0)<br/>\u00a0<br/>    o = scale<br/>    scale = d<br/>    e = 1 / 10 ^ d <br/>\u00a0<br/>    if (n &lt; 0) {<br/>        n = -n<br/>        a = 1 / a<br/>    }<br/>\u00a0<br/>    x = 1<br/>    while (1) {<br/>        y = ((n - 1) * x + a / x ^ (n - 1)) / n<br/>        z = x - y<br/>        if (z &lt; 0) z = -z<br/>        if (z &lt; e) break<br/>        x = y<br/>    }<br/>    scale = o<br/>    return(y)<br/>}</pre>"}, {"lang": "Bracmat", "loc": 29, "block": "<pre class=\"text highlighted_source\">( ( root<br/>  =   n a d x0 x1 d2 rnd 10-d<br/>    .   ( rnd       { For 'rounding' rational numbers = keep number of digits within bounds. }<br/>        =   N r<br/>          .  \u00a0!arg:(?N.?r)<br/>            &amp; div$(!N*!r+1/2.1)*!r^-1<br/>        )<br/>      &amp;\u00a0!arg:(?n,?a,?d)<br/>      &amp;\u00a0!a*!n^-1:?x0<br/>      &amp; 10^(-1*!d):?10-d<br/>      &amp;   whl<br/>        ' (   ( rnd$(((!n+-1)*!x0+!a*!x0^(1+-1*!n))*!n^-1.10^!d)<br/>              .\u00a0!x0<br/>              )<br/>           \u00a0: (?x0.?x1)<br/>          &amp; (!x0+-1*!x1)^2:~&lt;!10-d   { Exit loop when required precision is reached. }<br/>          )<br/>      &amp; flt$(!x0,!d)      { Convert rational number to floating point representation. }<br/>  )<br/>&amp; ( show<br/>  =   N A precision<br/>    .  \u00a0!arg:(?N,?A,?precision)<br/>      &amp; out$(str$(!A \"^(\"\u00a0!N^-1 \")=\" root$(!N,!A,!precision)))<br/>  )<br/>&amp; show$(10,1024,20)<br/>&amp; show$(3,27,20)<br/>&amp; show$(2,2,100)<br/>&amp; show$(125,5642,20)<br/>)</pre>"}, {"lang": "C", "loc": 35, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;float.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">double</span> pow_ <span class=\"br0\">(</span><span class=\"kw4\">double</span> x<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">double</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> e<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        r <span class=\"sy0\">*=</span> x<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> r<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">double</span> root <span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">double</span> d<span class=\"sy0\">,</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span>n<span class=\"sy0\">&amp;</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu16\">0.0</span> <span class=\"sy0\">/</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* NaN */</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        d <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x <span class=\"sy0\">/</span> pow_<span class=\"br0\">(</span>r<span class=\"sy0\">,</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> r<span class=\"br0\">)</span> <span class=\"sy0\">/</span> n<span class=\"sy0\">;</span><br/>        r <span class=\"sy0\">+=</span> d<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>d <span class=\"sy0\">&gt;=</span> DBL_EPSILON <span class=\"sy0\">*</span> <span class=\"nu0\">10</span> <span class=\"sy0\">||</span> d <span class=\"sy0\">&lt;=</span> <span class=\"sy0\">-</span>DBL_EPSILON <span class=\"sy0\">*</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> r<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">15</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">double</span> x <span class=\"sy0\">=</span> pow_<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu16\">3.14159</span><span class=\"sy0\">,</span> <span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"root(%d,\u00a0%g) =\u00a0%g<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> root<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 23, "block": "<pre class=\"csharp highlighted_source\">\u00a0<br/><span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>NthRoot<span class=\"br0\">(</span><span class=\"nu0\">81</span>,<span class=\"nu0\">2</span>,<span class=\"sy0\">.</span>001<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>NthRoot<span class=\"br0\">(</span><span class=\"nu0\">1000</span>,<span class=\"nu0\">3</span>,<span class=\"sy0\">.</span>001<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> NthRoot<span class=\"br0\">(</span><span class=\"kw4\">double</span> A,<span class=\"kw4\">int</span> n,  <span class=\"kw4\">double</span> p<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">double</span> _n<span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span> n<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> x <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>\t\t<br/>\tx<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> A<span class=\"sy0\">;</span><br/>\tx<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> A<span class=\"sy0\">/</span>_n<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>Math<span class=\"sy0\">.</span><span class=\"me1\">Abs</span><span class=\"br0\">(</span>x<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span>x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> p<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\tx<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> x<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\tx<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span>_n<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>_n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>A<span class=\"sy0\">/</span>Math<span class=\"sy0\">.</span><span class=\"me1\">Pow</span><span class=\"br0\">(</span>x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>,_n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> x<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C++", "loc": 13, "block": "<pre class=\"cpp highlighted_source\"><span class=\"kw4\">double</span> NthRoot<span class=\"br0\">(</span><span class=\"kw4\">double</span> m_nValue, <span class=\"kw4\">double</span> index, <span class=\"kw4\">double</span> guess, <span class=\"kw4\">double</span> pc<span class=\"br0\">)</span><br/>   <span class=\"br0\">{</span><br/>       <span class=\"kw4\">double</span> result <span class=\"sy1\">=</span> guess<span class=\"sy4\">;</span><br/>       <span class=\"kw4\">double</span> result_next<span class=\"sy4\">;</span><br/>       <span class=\"kw1\">do</span><br/>       <span class=\"br0\">{</span><br/>           result_next <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"nu16\">1.0</span><span class=\"sy2\">/</span>index<span class=\"br0\">)</span><span class=\"sy2\">*</span><span class=\"br0\">(</span><span class=\"br0\">(</span>index<span class=\"sy2\">-</span><span class=\"nu16\">1.0</span><span class=\"br0\">)</span><span class=\"sy2\">*</span>result<span class=\"sy2\">+</span><span class=\"br0\">(</span>m_nValue<span class=\"br0\">)</span><span class=\"sy2\">/</span><span class=\"br0\">(</span><span class=\"kw3\">pow</span><span class=\"br0\">(</span>result,<span class=\"br0\">(</span>index<span class=\"sy2\">-</span><span class=\"nu16\">1.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>           result <span class=\"sy1\">=</span> result_next<span class=\"sy4\">;</span><br/>           pc<span class=\"sy2\">--</span><span class=\"sy4\">;</span><br/>       <span class=\"br0\">}</span><span class=\"kw1\">while</span><span class=\"br0\">(</span>pc<span class=\"sy1\">&gt;</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>       <span class=\"kw1\">return</span> result<span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 26, "block": "<pre class=\"clojure highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">ns</span> test<span class=\"sy0\">-</span>project<span class=\"sy0\">-</span>intellij<span class=\"sy0\">.</span>core<br/>  <span class=\"br0\">(</span>:<span class=\"kw1\">gen-class</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; define abs &amp; power to avoid needing to bring in the clojure Math library</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> abs <span class=\"br0\">[</span>x<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" Absolute value\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> x <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> x<span class=\"br0\">)</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> power <span class=\"br0\">[</span>x n<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" x to power n, where n = 0, 1, 2, ... \"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"kw1\">repeat</span> n x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> calc<span class=\"sy0\">-</span>delta <span class=\"br0\">[</span>A x n<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" nth rooth algorithm delta calculation \"</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> A <span class=\"br0\">(</span>power x <span class=\"br0\">(</span><span class=\"sy0\">-</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> x<span class=\"br0\">)</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> nth<span class=\"sy0\">-</span>root<br/>  <span class=\"st0\">\" nth root of algorithm: A = numer, n = root\"</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span>A n<span class=\"br0\">]</span> <span class=\"br0\">(</span>nth<span class=\"sy0\">-</span>root A n <span class=\"nu0\">0.5</span> <span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"co1\">; Takes only two arguments A, n and calls version which takes A, n, guess-prev, guess-current</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span>A n guess<span class=\"sy0\">-</span>prev guess<span class=\"sy0\">-</span>current<span class=\"br0\">]</span> <span class=\"co1\">; version take takes in four arguments (A, n, guess-prev, guess-current)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>abs <span class=\"br0\">(</span><span class=\"sy0\">-</span> guess<span class=\"sy0\">-</span>prev guess<span class=\"sy0\">-</span>current<span class=\"br0\">)</span><span class=\"br0\">)</span> 1e<span class=\"sy0\">-</span>6<span class=\"br0\">)</span><br/>     guess<span class=\"sy0\">-</span>current<br/>     <span class=\"br0\">(</span><span class=\"kw1\">recur</span> A n guess<span class=\"sy0\">-</span>current <span class=\"br0\">(</span><span class=\"sy0\">+</span> guess<span class=\"sy0\">-</span>current <span class=\"br0\">(</span>calc<span class=\"sy0\">-</span>delta A guess<span class=\"sy0\">-</span>current n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; iterate answer using tail recursion</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "CoffeeScript", "loc": 28, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/>nth_root = <span class=\"br0\">(</span>A<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> precision=<span class=\"nu0\">0.0000000000001</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  x = <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">while</span> <span class=\"kw4\">true</span><br/>    x_new = <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">/</span> n<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> x <span class=\"sy0\">+</span> A <span class=\"sy0\">/</span> Math.<span class=\"me1\">pow</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> x_new <span class=\"kw1\">if</span> Math.<span class=\"me1\">abs</span><span class=\"br0\">(</span>x_new <span class=\"sy0\">-</span> x<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> precision<br/>    x = x_new<br/>\u00a0<br/><span class=\"co1\"># tests</span><br/>do <span class=\"sy0\">-&gt;</span> <br/>  tests = <span class=\"br0\">[</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">16</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">32</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">343</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">1024</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">1000000000</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">1000000000</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">]</span><br/>  <span class=\"kw1\">for</span> test <span class=\"kw1\">in</span> tests<br/>    <span class=\"br0\">[</span>x<span class=\"sy0\">,</span> n<span class=\"br0\">]</span> = test<br/>    root = nth_root x<span class=\"sy0\">,</span> n<br/>    console.<span class=\"me1\">log</span> <span class=\"st0\">\"#{x} root #{n} = #{root} (root^#{n} = #{Math.pow root, n})\"</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 9, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> nth-root <span class=\"br0\">(</span>n a <span class=\"sy0\">&amp;</span>optional <span class=\"br0\">(</span>epsilon <span class=\"sy0\">.</span>0001<span class=\"br0\">)</span> <span class=\"br0\">(</span>guess <span class=\"br0\">(</span><span class=\"nu0\">1</span>- n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>assert <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> a <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>flet <span class=\"br0\">(</span><span class=\"br0\">(</span>next <span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>* <span class=\"br0\">(</span><span class=\"nu0\">1</span>- n<span class=\"br0\">)</span> x<span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span>/ a <span class=\"br0\">(</span><span class=\"kw1\">expt</span> x <span class=\"br0\">(</span><span class=\"nu0\">1</span>- n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">do</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>xi guess xi+<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>xi+<span class=\"nu0\">1</span> <span class=\"br0\">(</span>next xi<span class=\"br0\">)</span> <span class=\"br0\">(</span>next xi<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span><span class=\"kw1\">abs</span> <span class=\"br0\">(</span>- xi+<span class=\"nu0\">1</span> xi<span class=\"br0\">)</span><span class=\"br0\">)</span> epsilon<span class=\"br0\">)</span> xi+<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 13, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">math</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">real</span> nthroot<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">real</span> A<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">real</span> p<span class=\"sy0\">=</span><span class=\"nu16\">0.001</span><span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">real</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> x <span class=\"sy0\">=</span> <span class=\"br0\">[</span>A<span class=\"sy0\">,</span> A <span class=\"sy0\">/</span> n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>abs<span class=\"br0\">(</span>x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> x<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> p<span class=\"br0\">)</span><br/>        x <span class=\"sy0\">=</span> <span class=\"br0\">[</span>x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> A <span class=\"sy0\">/</span> <span class=\"br0\">(</span>x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">^^</span> <span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    writeln<span class=\"br0\">(</span>nthroot<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu16\">7131.5</span> <span class=\"sy0\">^^</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>nthroot<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">64</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 17, "block": "<pre class=\"delphi highlighted_source\">\u00a0<br/><span class=\"kw1\">USES</span><br/>   Math<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> NthRoot<span class=\"br0\">(</span>A<span class=\"sy1\">,</span> Precision<span class=\"sy1\">:</span> <span class=\"kw4\">Double</span><span class=\"sy1\">;</span> n<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Double</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>   x_p<span class=\"sy1\">,</span> X<span class=\"sy1\">:</span> <span class=\"kw4\">Double</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>   x_p <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">Sqrt</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">while</span> <span class=\"kw3\">Abs</span><span class=\"br0\">(</span>A <span class=\"sy3\">-</span> <span class=\"kw3\">Power</span><span class=\"br0\">(</span>x_p<span class=\"sy1\">,</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span> &gt; Precision <span class=\"kw1\">do</span><br/>   <span class=\"kw1\">begin</span><br/>      x <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy3\">/</span>n<span class=\"br0\">)</span> <span class=\"sy3\">*</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>n<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy3\">*</span> x_p<span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"br0\">(</span>A<span class=\"sy3\">/</span><span class=\"br0\">(</span><span class=\"kw3\">Power</span><span class=\"br0\">(</span>x_p<span class=\"sy1\">,</span> n <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      x_p <span class=\"sy1\">:</span><span class=\"sy3\">=</span> x<span class=\"sy1\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>   Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> x_p<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0</pre>"}, {"lang": "E", "loc": 12, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> nthroot<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://wiki.erights.org/wiki/require\"><span class=\"kw6\">require</span></a><span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> x <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> np <span class=\"sy0\">:=</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>  <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> iter<span class=\"br0\">(</span>g<span class=\"br0\">)</span> <span class=\"br0\">{</span> return <span class=\"br0\">(</span>np<span class=\"sy0\">*</span>g <span class=\"sy0\">+</span> x<span class=\"sy0\">/</span>g<span class=\"sy0\">**</span>np<span class=\"br0\">)</span> <span class=\"sy0\">/</span> n <span class=\"br0\">}</span><br/>  <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> g1 <span class=\"sy0\">:=</span> x<br/>  <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> g2 <span class=\"sy0\">:=</span> iter<span class=\"br0\">(</span>g1<span class=\"br0\">)</span><br/>  <a href=\"http://wiki.erights.org/wiki/while\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>g1 <span class=\"sy0\">&lt;=&gt;</span> g2<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    g1 <span class=\"sy0\">:=</span> iter<span class=\"br0\">(</span>g1<span class=\"br0\">)</span><br/>    g2 <span class=\"sy0\">:=</span> iter<span class=\"br0\">(</span>iter<span class=\"br0\">(</span>g2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>  return g1<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 13, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  def nth_root(n, x, precision \\\\ 1.0e-5) do<br/>    f = fn(prev) -&gt; ((n - 1) * prev + x /\u00a0:math.pow(prev, (n-1))) / n end<br/>    fixed_point(f, x, precision, f.(x))<br/>  end<br/>\u00a0<br/>  defp fixed_point(_, guess, tolerance, next) when abs(guess - next) &lt; tolerance, do: next<br/>  defp fixed_point(f, _, tolerance, next), do: fixed_point(f, next, tolerance, f.(next))<br/>end<br/>\u00a0<br/>Enum.each([{2, 2}, {4, 81}, {10, 1024}, {1/2, 7}], fn {n, x} -&gt;<br/>  IO.puts \"#{n} root of #{x} is #{RC.nth_root(n, x)}\"<br/>end)</pre>"}, {"lang": "Erlang", "loc": 6, "block": "<pre class=\"erlang highlighted_source\"><span class=\"re3\">fixed_point</span><span class=\"br0\">(</span><span class=\"re5\">F</span><span class=\"sy1\">,</span> <span class=\"re5\">Guess</span><span class=\"sy1\">,</span> <span class=\"re5\">Tolerance</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">fixed_point</span><span class=\"br0\">(</span><span class=\"re5\">F</span><span class=\"sy1\">,</span> <span class=\"re5\">Guess</span><span class=\"sy1\">,</span> <span class=\"re5\">Tolerance</span><span class=\"sy1\">,</span> <span class=\"re5\">F</span><span class=\"br0\">(</span><span class=\"re5\">Guess</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"re3\">fixed_point</span><span class=\"br0\">(</span><span class=\"re5\">_</span><span class=\"sy1\">,</span> <span class=\"re5\">Guess</span><span class=\"sy1\">,</span> <span class=\"re5\">Tolerance</span><span class=\"sy1\">,</span> <span class=\"re5\">Next</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"kw3\">abs</span><span class=\"br0\">(</span><span class=\"re5\">Guess</span> <span class=\"sy3\">-</span> <span class=\"re5\">Next</span><span class=\"br0\">)</span> <span class=\"sy3\">&lt;</span> <span class=\"re5\">Tolerance</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Next</span><span class=\"sy1\">;</span><br/><span class=\"re3\">fixed_point</span><span class=\"br0\">(</span><span class=\"re5\">F</span><span class=\"sy1\">,</span> <span class=\"re5\">_</span><span class=\"sy1\">,</span> <span class=\"re5\">Tolerance</span><span class=\"sy1\">,</span> <span class=\"re5\">Next</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">fixed_point</span><span class=\"br0\">(</span><span class=\"re5\">F</span><span class=\"sy1\">,</span> <span class=\"re5\">Next</span><span class=\"sy1\">,</span> <span class=\"re5\">Tolerance</span><span class=\"sy1\">,</span> <span class=\"re5\">F</span><span class=\"br0\">(</span><span class=\"re5\">Next</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Excel", "loc": 1, "block": "<pre class=\"text highlighted_source\">=A1^(1/B1)</pre>"}, {"lang": "F#", "loc": 23, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"kw1\">let</span> nthroot n A <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> f x <span class=\"sy0\">=</span><br/>        <span class=\"kw1\">let</span> m <span class=\"sy0\">=</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>.<br/>        <span class=\"kw1\">let</span> x<span class=\"st0\">' = (m * x + A/x**m) / n<br/>        match abs(x'</span> <span class=\"sy0\">-</span> x<span class=\"br0\">)</span> <span class=\"kw1\">with</span><br/>        | t <span class=\"kw1\">when</span> t <span class=\"sy0\">&lt;</span> <span class=\"kw3\">abs</span><span class=\"br0\">(</span>x <span class=\"sy0\">*</span> 1e<span class=\"sy0\">-</span>9<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> x<span class=\"st0\">'<br/>        | _ -&gt; f x'</span><br/>    f <span class=\"br0\">(</span>A <span class=\"sy0\">/</span> <span class=\"kw4\">double</span> n<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>EntryPoint<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> main args <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">if</span> args.<span class=\"me1\">Length</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">2</span> <span class=\"kw1\">then</span><br/>        eprintfn <span class=\"st0\">\"usage: nthroot n A\"</span><br/>        exit <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">let</span> <span class=\"br0\">(</span>b, n<span class=\"br0\">)</span> <span class=\"sy0\">=</span> System.<span class=\"me1\">Double</span>.<span class=\"me1\">TryParse</span><span class=\"br0\">(</span>args.<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">let</span> <span class=\"br0\">(</span>b<span class=\"st0\">', A) = System.Double.TryParse(args.[1])<br/>    if (not b) || (not b'</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        eprintfn <span class=\"st0\">\"error: parameter must be a number\"</span><br/>        exit <span class=\"nu0\">1</span><br/>    printf <span class=\"st0\">\"%A\"</span> <span class=\"br0\">(</span>nthroot n A<span class=\"br0\">)</span><br/>    <span class=\"nu0\">0</span><br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 11, "block": "<pre class=\"text highlighted_source\">: th-root { F: a F: n -- a^1/n }<br/>  a<br/>  begin<br/>    a fover n 1e f- f** f/<br/>      fover n 1e f- f*<br/>    f+ n f/<br/>    fswap fover 1e-5 f~<br/>  until\u00a0;<br/>\u00a0<br/>34e 5e th-root f.   \\ 2.02439745849989<br/>34e 5e 1/f f** f.   \\ 2.02439745849989</pre>"}, {"lang": "Fortran", "loc": 42, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> NthRootTest<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>  print <span class=\"sy0\">*</span>, nthroot<span class=\"br0\">(</span><span class=\"nu0\">10</span>, <span class=\"nu0\">7131.5</span><span class=\"sy0\">**</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>  print <span class=\"sy0\">*</span>, nthroot<span class=\"br0\">(</span><span class=\"nu0\">5</span>, <span class=\"nu0\">34.0</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> nthroot<span class=\"br0\">(</span>n, A, p<span class=\"br0\">)</span><br/>    <span class=\"kw3\">real</span> <span class=\"sy0\">::</span> <span class=\"me2\">nthroot</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span>        <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>    <span class=\"kw3\">real</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span>           <span class=\"sy0\">::</span> <span class=\"me2\">A</span><br/>    <span class=\"kw3\">real</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span>, <span class=\"kw3\">optional</span> <span class=\"sy0\">::</span> <span class=\"me2\">p</span><br/>\u00a0<br/>    <span class=\"kw3\">real</span> <span class=\"sy0\">::</span> <span class=\"me2\">rp</span>, x<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> A &lt; <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>       <span class=\"kw1\">stop</span> <span class=\"st0\">\"A &lt; 0\"</span>       <span class=\"co1\">! we handle only real positive numbers</span><br/>    <span class=\"kw1\">elseif</span> <span class=\"br0\">(</span> A <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>       nthroot <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>       <span class=\"kw1\">return</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"kw4\">present</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>       rp <span class=\"sy0\">=</span> p<br/>    <span class=\"kw1\">else</span><br/>       rp <span class=\"sy0\">=</span> <span class=\"nu0\">0.001</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>    x<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> A<br/>    x<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> A<span class=\"sy0\">/</span>n   <span class=\"co1\">! starting \"guessed\" value...</span><br/>\u00a0<br/>    <span class=\"kw1\">do</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span> <span class=\"kw4\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> x<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> &gt; rp <span class=\"br0\">)</span><br/>       x<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> x<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>       x<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>x<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> A<span class=\"sy0\">/</span><span class=\"br0\">(</span>x<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">**</span> <span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"kw3\">real</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/>    nthroot <span class=\"sy0\">=</span> x<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> nthroot<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> NthRootTest</pre>"}, {"lang": "FutureBasic", "loc": 24, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>include \"ConsoleWindow\"<br/>\u00a0<br/>def tab 8<br/>\u00a0<br/>local fn NthRoot( root as long, a as long, precision as double ) as double<br/>dim as double x0, x1<br/>\u00a0<br/>x0 = a\u00a0: x1 = a /root<br/>while ( abs( x1 - x0 ) &gt; precision )<br/>x0 = x1<br/>x1 = ( ( root -1.0 ) * x1 + a / x1 ^ ( root -1.0 ) ) /root<br/>wend<br/>end fn = x1<br/>\u00a0<br/>print \" 125th Root of 5643 Precision .001\",   using \"#.###############\";  fn NthRoot( 125, 5642, 0.001   )<br/>print \" 125th Root of 5643 Precision .001\",   using \"#.###############\";  fn NthRoot( 125, 5642, 0.001   )<br/>print \" 125th Root of 5643 Precision .00001\", using \"#.###############\";  fn NthRoot( 125, 5642, 0.00001 )<br/>print \"  Cube Root of   27 Precision .00001\", using \"#.###############\";  fn NthRoot(   3,   27, 0.00001 )<br/>print \"Square Root of    2 Precision .00001\", using \"#.###############\";  fn NthRoot(   2,    2, 0.00001 )<br/>print \"Square Root of    2 Precision .00001\", using \"#.###############\";  sqr(2)  // Processor floating point calc deviation<br/>print \"  10th Root of 1024 Precision .00001\", using \"#.###############\";  fn NthRoot(  10, 1024, 0.00001 )<br/>print \"   5th Root of   34 Precision .00001\", using \"#.###############\";  fn NthRoot(   5,   34, 0.00001 )<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 19, "block": "<pre class=\"go highlighted_source\"><span class=\"kw4\">func</span> root<span class=\"sy1\">(</span>a <span class=\"kw4\">float64</span><span class=\"sy1\">,</span> n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>    n1 <span class=\"sy2\">:=</span> n <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><br/>    n1f<span class=\"sy1\">,</span> rn <span class=\"sy2\">:=</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>n1<span class=\"sy1\">),</span> <span class=\"nu0\">1</span><span class=\"sy3\">/</span><span class=\"kw4\">float64</span><span class=\"sy1\">(</span>n<span class=\"sy1\">)</span><br/>    x<span class=\"sy1\">,</span> x0 <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy3\">.</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy3\">.</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>        potx<span class=\"sy1\">,</span> t2 <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy3\">/</span>x<span class=\"sy1\">,</span> a<br/>        <span class=\"kw1\">for</span> b <span class=\"sy2\">:=</span> n1<span class=\"sy1\">;</span> b &gt; <span class=\"nu0\">0</span><span class=\"sy1\">;</span> b &gt;&gt;<span class=\"sy2\">=</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> b&amp;<span class=\"nu0\">1</span> <span class=\"sy3\">==</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>                t2 <span class=\"sy2\">*=</span> potx<br/>            <span class=\"sy1\">}</span><br/>            potx <span class=\"sy2\">*=</span> potx<br/>        <span class=\"sy1\">}</span><br/>        x0<span class=\"sy1\">,</span> x <span class=\"sy2\">=</span> x<span class=\"sy1\">,</span> rn<span class=\"sy3\">*</span><span class=\"sy1\">(</span>n1f<span class=\"sy3\">*</span>x<span class=\"sy3\">+</span>t2<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">if</span> math<span class=\"sy3\">.</span>Abs<span class=\"sy1\">(</span>x<span class=\"sy3\">-</span>x0<span class=\"sy1\">)</span><span class=\"sy3\">*</span><span class=\"nu1\">1e15</span> &lt; x <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">break</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> x<br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 14, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20import\"><span class=\"kw2\">import</span></a> <span class=\"co2\">static</span> Constants.<span class=\"me1\">tolerance</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20import\"><span class=\"kw2\">import</span></a> <span class=\"co2\">static</span> java.<span class=\"me1\">math</span>.<span class=\"me1\">RoundingMode</span>.<span class=\"me1\">HALF_UP</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> root<span class=\"br0\">(</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20double\"><span class=\"kw4\">double</span></a> base, <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20double\"><span class=\"kw4\">double</span></a> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20double\"><span class=\"kw4\">double</span></a> xOld <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20double\"><span class=\"kw4\">double</span></a> xNew <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20while\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20true\"><span class=\"kw2\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        xNew <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> xOld <span class=\"sy0\">+</span> base/<span class=\"br0\">(</span>xOld<span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>/n<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>xNew <span class=\"sy0\">-</span> xOld<span class=\"br0\">)</span>.<span class=\"me1\">abs</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> tolerance<span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20break\"><span class=\"kw2\">break</span></a> <span class=\"br0\">}</span><br/>        xOld <span class=\"sy0\">=</span> xNew<br/>    <span class=\"br0\">}</span><br/>    <span class=\"br0\">(</span>xNew <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as\"><span class=\"kw2\">as</span></a> <a href=\"http://www.google.de/search?as_q=BigDecimal&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">BigDecimal</span></a><span class=\"br0\">)</span>.<span class=\"me1\">setScale</span><span class=\"br0\">(</span><span class=\"nu0\">7</span>, HALF_UP<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Haskell", "loc": 1, "block": "<pre class=\"haskell highlighted_source\">n `nthRoot` x <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fst\"><span class=\"kw3\">fst</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:until\"><span class=\"kw3\">until</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:uncurry\"><span class=\"kw3\">uncurry</span></a><span class=\"br0\">(</span><span class=\"sy0\">==</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>\\<span class=\"br0\">(</span><span class=\"sy0\">_,</span>x0<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>x0<span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>x0<span class=\"sy0\">+</span>x<span class=\"sy0\">/</span>x0<span class=\"sy0\">**</span><span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span>x<span class=\"sy0\">/</span>n<span class=\"br0\">)</span></pre>"}, {"lang": "HicEst", "loc": 19, "block": "<pre class=\"hicest highlighted_source\"><span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>Messagebox<span class=\"br0\">)</span> NthRoot<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">34</span><span class=\"br0\">)</span><br/><span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>Messagebox<span class=\"br0\">)</span> NthRoot<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy1\">,</span> <span class=\"nu0\">7131.5</span><span class=\"sy1\">^</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> NthRoot<span class=\"br0\">(</span>n<span class=\"sy1\">,</span> A<span class=\"br0\">)</span><br/>   <span class=\"kw1\">REAL</span> <span class=\"sy1\">::</span> prec <span class=\"sy1\">=</span> <span class=\"nu0\">0.001</span><br/>\u00a0<br/>   <span class=\"kw1\">IF</span><span class=\"br0\">(</span> <span class=\"br0\">(</span>n <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy1\">*</span> <span class=\"br0\">(</span>A <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>       NthRoot <span class=\"sy1\">=</span> A <span class=\"sy1\">/</span> n<br/>       <span class=\"kw1\">DO</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">/</span>prec<br/>         x <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">*</span>NthRoot <span class=\"sy1\">+</span> A<span class=\"sy1\">/</span><span class=\"br0\">(</span>NthRoot<span class=\"sy1\">^</span><span class=\"br0\">(</span>n<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">/</span> n<br/>         <span class=\"kw1\">IF</span><span class=\"br0\">(</span> <span class=\"kw1\">ABS</span><span class=\"br0\">(</span>x <span class=\"sy1\">-</span> NthRoot<span class=\"br0\">)</span> <span class=\"sy1\">&lt;=</span> prec <span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>             <span class=\"kw1\">RETURN</span><br/>         <span class=\"kw1\">ENDIF</span><br/>         NthRoot <span class=\"sy1\">=</span> x<br/>       <span class=\"kw1\">ENDDO</span><br/>   <span class=\"kw1\">ENDIF</span><br/>\u00a0<br/>   <span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>Messagebox<span class=\"sy1\">,</span> Name<span class=\"br0\">)</span> <span class=\"st0\">'Cannot solve problem for:'</span><span class=\"sy1\">,</span> prec<span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> A<br/><span class=\"kw1\">END</span></pre>"}, {"lang": "Icon and Unicon", "loc": 23, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   showroot<span class=\"br0\">(</span><span class=\"nu0\">125</span><span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>   showroot<span class=\"br0\">(</span><span class=\"nu0\">27</span><span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>   showroot<span class=\"br0\">(</span><span class=\"nu0\">1024</span><span class=\"sy1\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>   showroot<span class=\"br0\">(</span><span class=\"nu0\">39.0625</span><span class=\"sy1\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>   showroot<span class=\"br0\">(</span><span class=\"nu0\">7131.5</span><span class=\"sy1\">^</span><span class=\"nu0\">10</span><span class=\"sy1\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> showroot<span class=\"br0\">(</span>a<span class=\"sy1\">,</span>n<span class=\"br0\">)</span><br/>   printf<span class=\"br0\">(</span><span class=\"st0\">\"%i-th root of\u00a0%i =\u00a0%i<span class=\"es0\">\\n</span>\"</span><span class=\"sy1\">,</span>n<span class=\"sy1\">,</span>a<span class=\"sy1\">,</span>root<span class=\"br0\">(</span>a<span class=\"sy1\">,</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> root<span class=\"br0\">(</span>a<span class=\"sy1\">,</span>n<span class=\"sy1\">,</span>p<span class=\"br0\">)</span> <span class=\"co1\">#: finds the n-th root of the number a to precision p</span><br/>   <span class=\"kw1\">if</span> n <span class=\"sy1\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy1\">|</span> <span class=\"kw4\">type</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy1\">!==</span> <span class=\"st0\">\"integer\"</span> <span class=\"kw1\">then</span> <span class=\"kw4\">runerr</span><span class=\"br0\">(</span><span class=\"nu0\">101</span><span class=\"sy1\">,</span>n<span class=\"br0\">)</span>     <br/>   <span class=\"kw1\">if</span> a <span class=\"sy1\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw4\">runerr</span><span class=\"br0\">(</span><span class=\"nu0\">205</span><span class=\"sy1\">,</span>a<span class=\"br0\">)</span>   <br/>   <span class=\"sy1\">/</span>p <span class=\"sy1\">:=</span> 1e<span class=\"sy1\">-</span>14                  <span class=\"co1\"># precision</span><br/>   xn <span class=\"sy1\">:=</span> a <span class=\"sy1\">/</span> <span class=\"kw4\">real</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>            <span class=\"co1\"># initial guess</span><br/>   <span class=\"kw1\">while</span> <span class=\"kw4\">abs</span><span class=\"br0\">(</span>a <span class=\"sy1\">-</span> xn<span class=\"sy1\">^</span>n<span class=\"br0\">)</span> <span class=\"sy1\">&gt;</span> p <span class=\"kw1\">do</span>       <br/>      xn <span class=\"sy1\">:=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"sy1\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">*</span> <span class=\"br0\">(</span>xi <span class=\"sy1\">:=</span> xn<span class=\"br0\">)</span> <span class=\"sy1\">+</span> a <span class=\"sy1\">/</span> <span class=\"br0\">(</span>xi <span class=\"sy1\">^</span> <span class=\"br0\">(</span>n<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">/</span> <span class=\"kw4\">real</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>   <span class=\"kw1\">return</span> xn<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">link</span> printf</pre>"}, {"lang": "J", "loc": 5, "block": "<pre class=\"j highlighted_source\">   <span class=\"st_h\">'`N X NP'</span> =.  <span class=\"sy0\">(</span><span class=\"nu0\">0</span> { [<span class=\"sy0\">)</span>`<span class=\"sy0\">(</span><span class=\"nu0\">1</span> { [<span class=\"sy0\">)</span>`<span class=\"sy0\">(</span><span class=\"nu0\">2</span> { [<span class=\"sy0\">)</span><br/>   iter      =.  N\u00a0%~ <span class=\"sy0\">(</span>NP * ]<span class=\"sy0\">)</span> + X\u00a0% ] ^ NP<br/>   nth_root  =:  <span class=\"sy0\">(</span>, , <span class=\"nu0\">_1</span>+[<span class=\"sy0\">)</span> iter^:<span class=\"nu0\">_</span> f. ]<br/>   <span class=\"nu0\">10</span> nth_root <span class=\"nu0\">7131.5</span>^<span class=\"nu0\">10</span><br/><span class=\"nu0\">7131.5</span></pre>"}, {"lang": "Java", "loc": 18, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> nthroot<span class=\"br0\">(</span><span class=\"kw4\">int</span> n, <span class=\"kw4\">double</span> A<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> nthroot<span class=\"br0\">(</span>n, A, .001<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> nthroot<span class=\"br0\">(</span><span class=\"kw4\">int</span> n, <span class=\"kw4\">double</span> A, <span class=\"kw4\">double</span> p<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>A <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">err</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"A &lt; 0\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"co1\">// we handle only real positive numbers</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>A <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw4\">double</span> x_prev <span class=\"sy0\">=</span> A<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">double</span> x <span class=\"sy0\">=</span> A <span class=\"sy0\">/</span> n<span class=\"sy0\">;</span>  <span class=\"co1\">// starting \"guessed\" value...</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">abs</span><span class=\"br0\">(</span>x <span class=\"sy0\">-</span> x_prev<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> p<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tx_prev <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span><br/>\t\tx <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1.0</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> x <span class=\"sy0\">+</span> A <span class=\"sy0\">/</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">pow</span><span class=\"br0\">(</span>x, n <span class=\"sy0\">-</span> <span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> n<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> x<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 11, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> nthRoot<span class=\"br0\">(</span>num<span class=\"sy0\">,</span> nArg<span class=\"sy0\">,</span> precArg<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">var</span> n <span class=\"sy0\">=</span> nArg <span class=\"sy0\">||</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">var</span> prec <span class=\"sy0\">=</span> precArg <span class=\"sy0\">||</span> <span class=\"nu0\">12</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">var</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"co1\">// Initial guess.</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>prec<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    x <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span>n <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>x <span class=\"sy0\">+</span> <span class=\"br0\">(</span>num <span class=\"sy0\">/</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">pow</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> x<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 31, "block": "<pre class=\"text highlighted_source\"># An iterative algorithm for finding: self ^ (1/n) to the given<br/># absolute precision if \"precision\" &gt; 0, or to within the precision <br/># allowed by IEEE 754 64-bit numbers.<br/>\u00a0<br/># The following implementation handles underflow caused by poor estimates.<br/>def iterative_nth_root(n; precision):<br/>  def abs: if . &lt; 0 then -. else . end;<br/>  def sq: .*.;<br/>  def pow(p): . as $in | reduce range(0;p) as $i (1; . * $in);<br/>    def _iterate: # state: [A, x1, x2, prevdelta]<br/>      .[0] as $A | .[1] as $x1 | .[2] as $x2 | .[3] as $prevdelta<br/>      | ( $x2 | pow(n-1)) as $power<br/>      | if $power &lt;= 2.155094094640383e-309<br/>        then  [$A, $x1, ($x1 + $x2)/2, n] | _iterate<br/>\telse (((n-1)*$x2 + ($A/$power))/n) as $x1<br/>\t| (($x1 - $x2)|abs) as $delta<br/>        | if (precision == 0 and $delta == $prevdelta and $delta &lt; 1e-15) <br/>             or (precision &gt; 0 and $delta &lt;= precision) or $delta == 0 then $x1<br/>          else [$A, $x2, $x1, $delta] | _iterate<br/>          end<br/>        end<br/>   \u00a0;<br/>    if n == 1 then .<br/>    elif . == 0 then 0<br/>    elif . &lt; 0 then error(\"iterative_nth_root: input \\(.) &lt; 0\")<br/>    elif n\u00a0!= (n|floor) then error(\"iterative_nth_root: argument \\(n) is not an integer\")<br/>    elif n == 0 then error(\"iterative_nth_root(0): domain error\")<br/>    elif n &lt; 0 then 1/iterative_nth_root(-n; precision)<br/>    else [., ., (./n), n, 0]  | _iterate<br/>    end<br/>;</pre>"}, {"lang": "Julia", "loc": 17, "block": "<pre class=\"text highlighted_source\">function nthroot(n::Integer, r::Real)<br/>    r &lt; 0 || n == 0 &amp;&amp; throw(DomainError())<br/>    n &lt; 0 &amp;&amp; return 1 / nthroot(-n, r)<br/>    r &gt; 0 || return 0<br/>    x = r / n<br/>    prevdx = r<br/>    while true<br/>        y = x ^ (n - 1)<br/>        dx = (r - y * x) / (n * y)<br/>        abs(dx) \u2265 abs(prevdx) &amp;&amp; return x<br/>        x += dx<br/>        prevdx = dx<br/>    end<br/>end<br/>\u00a0<br/>@show nthroot.(-5:2:5, 5.0)<br/>@show nthroot.(-5:2:5, 5.0) - 5.0 .^ (1 ./ (-5:2:5))</pre>"}, {"lang": "Kotlin", "loc": 21, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun nthRoot<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Double, n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Double <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> IllegalArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"n must be more than 1\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>x <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> IllegalArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"x must be positive\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> np <span class=\"sy0\">=</span> n - <span class=\"nu0\">1</span><br/>    fun iter<span class=\"br0\">(</span>g<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>np <span class=\"sy0\">*</span> g + x / Math.<span class=\"me1\">pow</span><span class=\"br0\">(</span>g, np.<span class=\"me1\">toDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> / n<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> g1 <span class=\"sy0\">=</span> x<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> g2 <span class=\"sy0\">=</span> iter<span class=\"br0\">(</span>g1<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>g1 <span class=\"sy0\">!=</span> g2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        g1 <span class=\"sy0\">=</span> iter<span class=\"br0\">(</span>g1<span class=\"br0\">)</span><br/>        g2 <span class=\"sy0\">=</span> iter<span class=\"br0\">(</span>iter<span class=\"br0\">(</span>g2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> g1<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> numbers <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><span class=\"nu0\">1728.0</span> to <span class=\"nu0\">3</span>, <span class=\"nu0\">1024.0</span> to <span class=\"nu0\">10</span>, <span class=\"nu0\">2.0</span> to <span class=\"nu0\">2</span><span class=\"br0\">)</span> <br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>number in numbers<span class=\"br0\">)</span>  <br/>       println<span class=\"br0\">(</span><span class=\"st0\">\"${number.first} ^ 1/${number.second}<span class=\"es1\">\\t</span> = ${nthRoot(number.first, number.second)}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 24, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/><span class=\"kw1\">print</span> <span class=\"st0\">\"First estimate is: \"</span><span class=\"sy0\">,</span>        <span class=\"kw2\">using</span><span class=\"br0\">(</span> <span class=\"st0\">\"#.###############\"</span><span class=\"sy0\">,</span>  NthRoot<span class=\"br0\">(</span> <span class=\"nu0\">125</span><span class=\"sy0\">,</span> <span class=\"nu0\">5642</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.001</span>  <span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">print</span> <span class=\"st0\">\"    ... and better is: \"</span><span class=\"sy0\">,</span>    <span class=\"kw2\">using</span><span class=\"br0\">(</span> <span class=\"st0\">\"#.###############\"</span><span class=\"sy0\">,</span>  NthRoot<span class=\"br0\">(</span> <span class=\"nu0\">125</span><span class=\"sy0\">,</span> <span class=\"nu0\">5642</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.00001</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"125'th root of 5642 by LB's exponentiation operator is \"</span>; <span class=\"kw2\">using</span><span class=\"br0\">(</span> <span class=\"st0\">\"#.###############\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">5642</span>^<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">/</span><span class=\"nu0\">125</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">print</span> <span class=\"st0\">\"27^(1 / 3)\"</span><span class=\"sy0\">,</span>                 <span class=\"kw2\">using</span><span class=\"br0\">(</span> <span class=\"st0\">\"#.###############\"</span><span class=\"sy0\">,</span>  NthRoot<span class=\"br0\">(</span>   <span class=\"nu0\">3</span><span class=\"sy0\">,</span>   <span class=\"nu0\">27</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.00001</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"2^(1 / 2)\"</span><span class=\"sy0\">,</span>                  <span class=\"kw2\">using</span><span class=\"br0\">(</span> <span class=\"st0\">\"#.###############\"</span><span class=\"sy0\">,</span>  NthRoot<span class=\"br0\">(</span>   <span class=\"nu0\">2</span><span class=\"sy0\">,</span>    <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.00001</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"1024^(1 /10)\"</span><span class=\"sy0\">,</span>               <span class=\"kw2\">using</span><span class=\"br0\">(</span> <span class=\"st0\">\"#.###############\"</span><span class=\"sy0\">,</span>  NthRoot<span class=\"br0\">(</span>  <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">1024</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.00001</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">wait</span><br/>\u00a0<br/><span class=\"kw1\">function</span> NthRoot<span class=\"br0\">(</span> n<span class=\"sy0\">,</span> A<span class=\"sy0\">,</span> p<span class=\"br0\">)</span><br/>  x<span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span>A<br/>  x<span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span>A <span class=\"sy0\">/</span>n<br/>  <span class=\"kw1\">while</span> <span class=\"kw2\">abs</span><span class=\"br0\">(</span> x<span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span>x<span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span>p<br/>    x<span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span>x<span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    x<span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> n <span class=\"sy0\">-</span><span class=\"nu0\">1.0</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span>x<span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span>A <span class=\"sy0\">/</span>x<span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>^<span class=\"br0\">(</span> n <span class=\"sy0\">-</span><span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span>n<br/>  <span class=\"kw1\">wend</span><br/>  NthRoot <span class=\"sy0\">=</span>x<span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">end</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Lingo", "loc": 3, "block": "<pre class=\"text highlighted_source\">on nthRoot (x, root)<br/>  return power(x, 1.0/root)<br/>end</pre>"}, {"lang": "Logo", "loc": 11, "block": "<pre class=\"text highlighted_source\">to about\u00a0:a\u00a0:b<br/>  output and [:a -\u00a0:b &lt; 1e-5] [:a -\u00a0:b &gt; -1e-5]<br/>end<br/>\u00a0<br/>to root\u00a0:n\u00a0:a [:guess\u00a0:a]<br/>  localmake \"next ((:n-1) *\u00a0:guess +\u00a0:a / power\u00a0:guess (:n-1)) / n<br/>  if about\u00a0:guess\u00a0:next [output\u00a0:next]<br/>  output (root\u00a0:n\u00a0:a\u00a0:next)<br/>end<br/>\u00a0<br/>show root 5 34  \u00a0; 2.02439745849989</pre>"}, {"lang": "Lua", "loc": 5, "block": "<pre class=\"lua highlighted_source\">\u00a0<br/><span class=\"kw1\">function</span> nroot<span class=\"br0\">(</span>root<span class=\"sy0\">,</span> num<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> num<span class=\"sy0\">^</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span>root<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "M2000 Interpreter", "loc": 1, "block": "<pre> \nFlush empty stack\nOver 2 copy 2nd as new top (so 2nd now is 3rd)\nOver 2,2 repeat Over 2 two times.\nShift 2 send top to 2nd, and 2nd to top (1st) (there is a SHFITBACK to revesre action)\nDrop drop top\nNumber get top if is number, else raise error\nRead, read a variable form top. \nFunctions parameters works with a read too\n     Function Root {\n             Read a, n%, d as double=1.e-4\n      ......\n      }\nbecause we can send any type and number if function, interpreter can make conversions if we declare that,\nor if it not possible (no conversion done to a numeric variable if a string is in top of stack) we get an error.\nAlso if we send less values, and we didn't initialize variable before, we get error too.  \nHere we need to flush stack for other parameters if from an error anyone put more arguments. \n(interpreter never count before call a user function, except for calling events by using event object,\nso there there is a signature to follow)\n\n\nn% is double inside.\n</pre>"}, {"lang": "Maple", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>root(1728, 3);<br/>\u00a0<br/>root(1024, 10);<br/>\u00a0<br/>root(2.0, 2);<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\">Root[A,n]</pre>"}, {"lang": "MATLAB", "loc": 13, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> answer = nthRoot<span class=\"br0\">(</span>number,root<span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/format.html\"><span class=\"kw2\">format</span></a> long<br/>\u00a0<br/>    answer = number / root;<br/>    guess = number;<br/>\u00a0<br/>    <span class=\"kw1\">while</span> not<span class=\"br0\">(</span>guess == answer<span class=\"br0\">)</span><br/>       guess = answer;<br/>       answer = <span class=\"br0\">(</span><span class=\"nu0\">1</span>/root<span class=\"br0\">)</span>*<span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>root - <span class=\"nu0\">1</span><span class=\"br0\">)</span>*guess<span class=\"br0\">)</span> + <span class=\"br0\">(</span> number/<span class=\"br0\">(</span>guess^<span class=\"br0\">(</span>root - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span>; <br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Maxima", "loc": 13, "block": "<pre class=\"text highlighted_source\">nth_root(a, n)\u00a0:= block(<br/>   [x, y, d, p: fpprec],<br/>   fpprec: p + 10,<br/>   x: bfloat(a),<br/>   eps: 10.0b0^-p,<br/>   y: do (<br/>      d: bfloat((a / x^(n - 1) - x) / n),<br/>      if abs(d) &lt; eps * x then return(x),<br/>      x: x + d<br/>   ),<br/>   fpprec: p,<br/>   bfloat(y)<br/>)$</pre>"}, {"lang": "Metafont", "loc": 17, "block": "<pre class=\"text highlighted_source\">vardef mnthroot(expr n, A) =<br/>  x0\u00a0:= A / n;<br/>  m\u00a0:= n - 1;<br/>  forever:<br/>    x1\u00a0:= (m*x0 + A/(x0 ** m)) / n;<br/>    exitif abs(x1 - x0) &lt; abs(x0 * 0.0001);<br/>    x0\u00a0:= x1;<br/>  endfor;<br/>  x1<br/>enddef;<br/>\u00a0<br/>primarydef n nthroot A = mnthroot(n, A) enddef;<br/>\u00a0<br/>show 5 nthroot 34; \u00a0% 2.0244<br/>show 0.5 nthroot 7;\u00a0% 49.00528<br/>\u00a0<br/>bye</pre>"}, {"lang": "\u041c\u041a-61/52", "loc": 1, "block": "<pre class=\"text highlighted_source\">1/x\t&lt;-&gt;\tx^y\t\u0421/\u041f</pre>"}, {"lang": "NetRexx", "loc": 81, "block": "<pre class=\"netrexx highlighted_source\">\u00a0<br/><span class=\"coMULTI\">/*NetRexx program to calculate the  Nth root of  X,  with  DIGS  accuracy. */</span><br/><span class=\"kw1\">class</span> nth_root<br/>\u00a0<br/>  method main<span class=\"br0\">(</span>args=String<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">static</span><br/>    <span class=\"kw1\">if</span> args.<span class=\"me0\">length</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"kw3\">then</span><br/>      <span class=\"kw1\">do</span><br/>\t<span class=\"kw1\">say</span> <span class=\"st0\">\"at least 2 arguments expected\"</span><br/>\t<span class=\"kw1\">exit</span><br/>      <span class=\"kw3\">end</span><br/>    x = args<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    root = args<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> args.<span class=\"me0\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">2</span> <span class=\"kw3\">then</span> digs = args<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> root==<span class=\"st0\">''</span> <span class=\"kw3\">then</span> root=<span class=\"nu0\">2</span><br/>    <span class=\"kw1\">if</span> digs = null, digs = <span class=\"st0\">''</span> <span class=\"kw3\">then</span> digs=<span class=\"nu0\">20</span><br/>    <span class=\"kw1\">numeric</span> digits digs<br/>    <span class=\"kw1\">say</span> <span class=\"st0\">'     x\t= '</span> x<br/>    <span class=\"kw1\">say</span> <span class=\"st0\">'  root\t= '</span> root<br/>    <span class=\"kw1\">say</span> <span class=\"st0\">'digits\t= '</span> digs<br/>    <span class=\"kw1\">say</span> <span class=\"st0\">'answer\t= '</span> root<span class=\"br0\">(</span>x,root,digs<span class=\"br0\">)</span><br/>\u00a0<br/>  method root<span class=\"br0\">(</span>x,r,digs<span class=\"br0\">)</span> <span class=\"kw2\">static</span> <span class=\"co1\">--procedure; parse arg x,R 1 oldR  /*assign 2nd arg--&gt;r and rOrig.  */</span><br/>    <span class=\"coMULTI\">/*this subroutine will use the   */</span><br/>    <span class=\"coMULTI\">/*digits from the calling prog.  */</span><br/>    <span class=\"coMULTI\">/*The default digits is  9.      */</span><br/>    R = r<br/>    oldR = r<br/>    <span class=\"kw1\">if</span> r=<span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">say</span><br/>      <span class=\"kw1\">say</span> <span class=\"st0\">'*** error! ***'</span><br/>      <span class=\"kw1\">say</span> <span class=\"st0\">\"a root of zero can't be specified.\"</span><br/>      <span class=\"kw1\">say</span><br/>      <span class=\"kw1\">return</span> <span class=\"st0\">'[n/a]'</span><br/>    <span class=\"kw3\">end</span><br/>\u00a0<br/>    R=R.<span class=\"kw6\">abs</span><span class=\"br0\">(</span><span class=\"br0\">)</span>                              <span class=\"coMULTI\">/*use absolute value of root.    */</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> x<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span>R<span class=\"sy0\">//</span><span class=\"nu0\">2</span>==<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">say</span><br/>      <span class=\"kw1\">say</span> <span class=\"st0\">'*** error! ***'</span><br/>      <span class=\"kw1\">say</span> <span class=\"st0\">\"an even root can't be calculated for a\"</span> -<br/>      <span class=\"st0\">'negative number,'</span><br/>      <span class=\"kw1\">say</span> <span class=\"st0\">'the result would be complex.'</span><br/>      <span class=\"kw1\">say</span><br/>      <span class=\"kw1\">return</span> <span class=\"st0\">'[n/a]'</span><br/>    <span class=\"kw3\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> x=<span class=\"nu0\">0</span> <span class=\"sy0\">|</span> r=<span class=\"nu0\">1</span> <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> x<span class=\"sy0\">/</span><span class=\"nu0\">1</span>           <span class=\"coMULTI\">/*handle couple of special cases.*/</span><br/>    Rm1=R-<span class=\"nu0\">1</span>                                <span class=\"coMULTI\">/*just a fast version of  ROOT-1 */</span><br/>    oldDigs=digs                           <span class=\"coMULTI\">/*get the current number of digs.*/</span><br/>    dm=oldDigs+<span class=\"nu0\">5</span>                           <span class=\"coMULTI\">/*we need a little guard room.   */</span><br/>    ax=x.<span class=\"kw6\">abs</span><span class=\"br0\">(</span><span class=\"br0\">)</span>                             <span class=\"coMULTI\">/*the absolute value of  X.      */</span><br/>    g=<span class=\"br0\">(</span>ax+<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>r<span class=\"sy0\">**</span>r                          <span class=\"coMULTI\">/*take a good stab at 1st guess. */</span><br/> <span class=\"co1\">--   numeric fuzz 3                         /*fuzz digits for higher roots.  */</span><br/>    d=<span class=\"nu0\">5</span>                                    <span class=\"coMULTI\">/*start with only five digits.   */</span><br/>    <span class=\"coMULTI\">/*each calc doubles precision.   */</span><br/>\u00a0<br/>    <span class=\"kw1\">loop</span> forever<br/>\u00a0<br/>      d=d+d<br/>      <span class=\"kw1\">if</span> d<span class=\"sy0\">&gt;</span>dm <span class=\"kw3\">then</span> d = dm                        <span class=\"coMULTI\">/*double the digits, but not&gt;DM. */</span><br/>      <span class=\"kw1\">numeric</span> digits d                     <span class=\"coMULTI\">/*tell REXX to use   D   digits. */</span><br/>      old=<span class=\"nu0\">0</span>                                <span class=\"coMULTI\">/*assume some kind of old guess. */</span><br/>\u00a0<br/>      <span class=\"kw1\">loop</span> forever<br/>\t_=<span class=\"br0\">(</span>Rm1<span class=\"sy0\">*</span>g<span class=\"sy0\">**</span>R+ax<span class=\"br0\">)</span><span class=\"sy0\">/</span>R<span class=\"sy0\">/</span>g<span class=\"sy0\">**</span>rm1           <span class=\"coMULTI\">/*this is the nitty-gritty stuff.*/</span><br/>\t<span class=\"kw1\">if</span> _=g <span class=\"sy0\">|</span> _=old <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span>          <span class=\"coMULTI\">/*computed close to this before? */</span><br/>\told=g                              <span class=\"coMULTI\">/*now, keep calculation for OLD. */</span><br/>\tg=_                                <span class=\"coMULTI\">/*set calculation to guesstimate.*/</span><br/>      <span class=\"kw3\">end</span><br/>\u00a0<br/>      <span class=\"kw1\">if</span> d==dm <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span>                  <span class=\"coMULTI\">/*found the root for DM digits\u00a0? */</span><br/>    <span class=\"kw3\">end</span><br/>\u00a0<br/>    _=g<span class=\"sy0\">*</span>x.<span class=\"kw6\">sign</span><span class=\"br0\">(</span><span class=\"br0\">)</span>                           <span class=\"coMULTI\">/*correct the sign (maybe).      */</span><br/>    <span class=\"kw1\">if</span> oldR<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> _=<span class=\"nu0\">1</span><span class=\"sy0\">/</span>_            <span class=\"coMULTI\">/*root &lt; 0\u00a0?    Reciprocal it is.*/</span><br/>    <span class=\"kw1\">numeric</span> digits oldDigs                 <span class=\"coMULTI\">/*re-instate the original digits.*/</span><br/>    <span class=\"kw1\">return</span> _<span class=\"sy0\">/</span><span class=\"nu0\">1</span>                             <span class=\"coMULTI\">/*normalize the number to digs.  */</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "NewLISP", "loc": 11, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#define\"><span class=\"kw1\">define</span></a> <span class=\"br0\">(</span>nth<span class=\"sy1\">-</span>root n a<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#let\"><span class=\"kw1\">let</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>x1 a<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>x2 <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#div\"><span class=\"kw1\">div</span></a> a n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#until\"><span class=\"kw1\">until</span></a> <span class=\"br0\">(</span><span class=\"sy1\">=</span> x1 x2<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#setq\"><span class=\"kw1\">setq</span></a> x1 x2<br/>\t    x2 <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#div\"><span class=\"kw1\">div</span></a><br/>\t\t<span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#add\"><span class=\"kw1\">add</span></a><br/>\t\t <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#mul\"><span class=\"kw1\">mul</span></a> x1 <span class=\"br0\">(</span><span class=\"sy1\">-</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#div\"><span class=\"kw1\">div</span></a> a <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#pow\"><span class=\"kw1\">pow</span></a> x1 <span class=\"br0\">(</span><span class=\"sy1\">-</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\tn<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    x2<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Nim", "loc": 13, "block": "<pre class=\"text highlighted_source\">import math<br/>\u00a0<br/>proc nthroot(a, n): float =<br/>  var n = float(n)<br/>  result = a<br/>  var x = a / n<br/>  while abs(result-x) &gt; 10e-15:<br/>    x = result<br/>    result = (1.0/n) * (((n-1)*x) + (a / pow(x, n-1)))<br/>\u00a0<br/>echo nthroot(34.0, 5)<br/>echo nthroot(42.0, 10)<br/>echo nthroot(5.0, 2)</pre>"}, {"lang": "Objeck", "loc": 18, "block": "<pre class=\"objeck highlighted_source\"><span class=\"kw1\">class</span> NthRoot <span class=\"br0\">{</span><br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    NthRoot<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">34</span><span class=\"sy0\">,</span> .001<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> NthRoot<span class=\"br0\">(</span>n <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"sy0\">,</span> A<span class=\"sy0\">:</span> <span class=\"kw2\">Float</span><span class=\"sy0\">,</span> p <span class=\"sy0\">:</span> <span class=\"kw2\">Float</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Float</span> <span class=\"br0\">{</span><br/>    x <span class=\"sy0\">:=</span> Float<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    x<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> A<span class=\"sy0\">;</span><br/>    x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> A <span class=\"sy0\">/</span> n<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> x<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Abs</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> p<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      x<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1.0</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> A <span class=\"sy0\">/</span> x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Power</span><span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> n<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 12, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> nthroot <span class=\"re1\">~n</span> <span class=\"re1\">~a</span>\u00a0?<span class=\"br0\">(</span>tol<span class=\"sy0\">=</span><span class=\"nu0\">0.001</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>   <span class=\"kw1\">let</span> nf <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> n <span class=\"kw1\">in</span> <span class=\"kw1\">let</span> nf1 <span class=\"sy0\">=</span> nf <span class=\"sy0\">-.</span> <span class=\"nu0\">1.0</span> <span class=\"kw1\">in</span><br/>   <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> iter x <span class=\"sy0\">=</span><br/>      <span class=\"kw1\">let</span> x<span class=\"sy0\">'</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>nf1 <span class=\"sy0\">*.</span> x <span class=\"sy0\">+.</span> a <span class=\"sy0\">/.</span> <span class=\"br0\">(</span>x <span class=\"sy0\">**</span> nf1<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/.</span> nf <span class=\"kw1\">in</span><br/>      <span class=\"kw1\">if</span> tol <span class=\"sy0\">&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALabs_float\"><span class=\"kw3\">abs_float</span></a> <span class=\"br0\">(</span>x <span class=\"sy0\">-.</span> x<span class=\"sy0\">'</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> x<span class=\"sy0\">'</span> <span class=\"kw1\">else</span> iter x<span class=\"sy0\">'</span> <span class=\"kw1\">in</span><br/>   iter <span class=\"nu0\">1.0</span><br/><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"%g\\n\"</span> <span class=\"br0\">(</span>nthroot <span class=\"nu0\">10</span> <span class=\"br0\">(</span><span class=\"nu0\">7131.5</span> <span class=\"sy0\">**</span> <span class=\"nu0\">10.0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"%g\\n\"</span> <span class=\"br0\">(</span>nthroot <span class=\"nu0\">5</span> <span class=\"nu0\">34.0</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">;;</span></pre>"}, {"lang": "Octave", "loc": 3, "block": "<pre class=\"octave highlighted_source\">\u00a0<br/>  r <span class=\"sy3\">=</span> A<span class=\"sy2\">.^</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">./</span>n<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Oforth", "loc": 2, "block": "<pre class=\"text highlighted_source\">Float method: nthroot(n)<br/>   1.0 doWhile: [ self over n 1 - pow / over - n / tuck + swap 0.0 &lt;&gt; ]\u00a0;</pre>"}, {"lang": "Oz", "loc": 19, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">NthRoot</span> NInt A<span class=\"br0\">}</span><br/>     N = <span class=\"br0\">{</span>Int<span class=\"sy0\">.</span>toFloat NInt<span class=\"br0\">}</span><br/>\u00a0<br/>     <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Next</span> X<span class=\"br0\">}</span><br/>        <span class=\"br0\">(</span> <span class=\"br0\">(</span>N<span class=\"sy0\">-</span>1<span class=\"sy0\">.</span>0<span class=\"br0\">)</span><span class=\"sy0\">*</span>X <span class=\"sy0\">+</span> A <span class=\"sy0\">/</span> <span class=\"br0\">{</span>Pow X N<span class=\"sy0\">-</span>1<span class=\"sy0\">.</span>0<span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy0\">/</span> N<br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">in</span><br/>     <span class=\"br0\">{</span>Until Value<span class=\"sy0\">.</span><span class=\"st0\">'=='</span> Next A<span class=\"sy0\">/</span>N<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Until</span> P F X<span class=\"br0\">}</span><br/>     <span class=\"kw1\">case</span> <span class=\"br0\">{</span>F X<span class=\"br0\">}</span><br/>     <span class=\"kw1\">of</span> NX <span class=\"kw1\">andthen</span> <span class=\"br0\">{</span>P NX X<span class=\"br0\">}</span> <span class=\"kw1\">then</span> X<br/>     <span class=\"re5\"><span class=\"br0\">[</span><span class=\"br0\">]</span></span> NX <span class=\"kw1\">then</span> <span class=\"br0\">{</span>Until P F NX<span class=\"br0\">}</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>Show <span class=\"br0\">{</span>NthRoot 2 2<span class=\"sy0\">.</span>0<span class=\"br0\">}</span><span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\">root<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>A<span class=\"br0\">)</span><span class=\"sy0\">=</span>A<span class=\"sy0\">^</span><span class=\"br0\">(</span><span class=\"nu1\">1</span><span class=\"sy0\">/</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Pascal", "loc": 14, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> nthroot <span class=\"br0\">(</span><span class=\"co5\">$$</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span> <span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$A</span> <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$x0</span> <span class=\"sy0\">=</span> <span class=\"re0\">$A</span> <span class=\"sy0\">/</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$m</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1.0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$x1</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$m</span> <span class=\"sy0\">*</span> <span class=\"re0\">$x0</span> <span class=\"sy0\">+</span> <span class=\"re0\">$A</span> <span class=\"co2\">/ ($x0 ** $m)) /</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$x1</span> <span class=\"kw1\">if</span> <a href=\"http://perldoc.perl.org/functions/abs.html\"><span class=\"kw3\">abs</span></a><span class=\"br0\">(</span><span class=\"re0\">$x1</span> <span class=\"sy0\">-</span> <span class=\"re0\">$x0</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <a href=\"http://perldoc.perl.org/functions/abs.html\"><span class=\"kw3\">abs</span></a><span class=\"br0\">(</span><span class=\"re0\">$x0</span> <span class=\"sy0\">*</span> 1e<span class=\"sy0\">-</span>9<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$x0</span> <span class=\"sy0\">=</span> <span class=\"re0\">$x1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl", "loc": 14, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> nthroot <span class=\"br0\">(</span><span class=\"co5\">$$</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span> <span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$A</span> <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$x0</span> <span class=\"sy0\">=</span> <span class=\"re0\">$A</span> <span class=\"sy0\">/</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$m</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1.0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$x1</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$m</span> <span class=\"sy0\">*</span> <span class=\"re0\">$x0</span> <span class=\"sy0\">+</span> <span class=\"re0\">$A</span> <span class=\"co2\">/ ($x0 ** $m)) /</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$x1</span> <span class=\"kw1\">if</span> <a href=\"http://perldoc.perl.org/functions/abs.html\"><span class=\"kw3\">abs</span></a><span class=\"br0\">(</span><span class=\"re0\">$x1</span> <span class=\"sy0\">-</span> <span class=\"re0\">$x0</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <a href=\"http://perldoc.perl.org/functions/abs.html\"><span class=\"kw3\">abs</span></a><span class=\"br0\">(</span><span class=\"re0\">$x0</span> <span class=\"sy0\">*</span> 1e<span class=\"sy0\">-</span>9<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$x0</span> <span class=\"sy0\">=</span> <span class=\"re0\">$x1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 11, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> nth<span class=\"sy0\">-</span>root <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$A</span><span class=\"sy0\">,</span> <span class=\"re0\">$p</span><span class=\"sy0\">=</span>1e<span class=\"sy0\">-</span>9<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$x0</span> <span class=\"sy0\">=</span> <span class=\"re0\">$A</span> <span class=\"sy0\">/</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">loop</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$x1</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"re0\">$x0</span> <span class=\"sy0\">+</span> <span class=\"re0\">$A</span> <span class=\"co2\">/ ($x0 ** ($n-1))) /</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$x1</span> <span class=\"kw1\">if</span> <span class=\"kw3\">abs</span><span class=\"br0\">(</span><span class=\"re0\">$x1</span><span class=\"sy0\">-</span><span class=\"re0\">$x0</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"kw3\">abs</span><span class=\"br0\">(</span><span class=\"re0\">$x0</span> <span class=\"sy0\">*</span> <span class=\"re0\">$p</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$x0</span> <span class=\"sy0\">=</span> <span class=\"re0\">$x1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> nth<span class=\"sy0\">-</span>root<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 33, "block": "<pre class=\"text highlighted_source\">function pow_(atom x, integer e)<br/>    atom r = 1<br/>    for i=1 to e do<br/>        r *= x<br/>    end for<br/>    return r<br/>end function<br/>\u00a0<br/>function nth_root(atom y,n)<br/>atom eps = 1e-15   -- relative accuracy<br/>atom x = 1<br/>    while 1 do<br/>--      atom d = ( y / power(x,n-1) - x ) / n<br/>        atom d = ( y / pow_(x,n-1) - x ) / n<br/>        x += d<br/>        atom e = eps*x   -- absolute accuracy       <br/>        if d &gt; -e and d &lt; e then exit end if<br/>    end while <br/>    return {y,n,x,power(y,1/n)}<br/>end function<br/>\u00a0<br/>?nth_root(1024,10)<br/>?nth_root(27,3)<br/>?nth_root(2,2)<br/>?nth_root(5642,125)<br/>--?nth_root(7,0.5)  -- needs power(), not pow_()<br/>?nth_root(4913,3)<br/>?nth_root(8,3)<br/>?nth_root(16,2)<br/>?nth_root(16,4)<br/>?nth_root(125,3)<br/>?nth_root(1000000000,3)<br/>?nth_root(1000000000,9)</pre>"}, {"lang": "PHP", "loc": 11, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">function</span> nthroot<span class=\"br0\">(</span><span class=\"re0\">$number</span><span class=\"sy0\">,</span> <span class=\"re0\">$root</span><span class=\"sy0\">,</span> <span class=\"re0\">$p</span> <span class=\"sy0\">=</span> P<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"re0\">$x</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$number</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$x</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$number</span><span class=\"sy0\">/</span><span class=\"re0\">$root</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span><a href=\"http://www.php.net/abs\"><span class=\"kw3\">abs</span></a><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">-</span><span class=\"re0\">$x</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$p</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"re0\">$x</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$x</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$x</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$root</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"re0\">$x</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"re0\">$number</span><span class=\"sy0\">/</span><a href=\"http://www.php.net/pow\"><span class=\"kw3\">pow</span></a><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$root</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"re0\">$root</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$x</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PicoLisp", "loc": 17, "block": "<pre class=\"text highlighted_source\">(load \"@lib/math.l\")<br/>\u00a0<br/>(de nthRoot (N A)<br/>   (let (X1 A  X2 (*/ A N))<br/>      (until (= X1 X2)<br/>         (setq<br/>            X1 X2<br/>            X2 (*/<br/>               (+<br/>                  (* X1 (dec N))<br/>                  (*/ A 1.0 (pow X1 (* (dec N) 1.0))) )<br/>               N ) ) )<br/>      X2 ) )<br/>\u00a0<br/>(prinl (format (nthRoot 2  2.0) *Scl))<br/>(prinl (format (nthRoot 3 12.3) *Scl))<br/>(prinl (format (nthRoot 4 45.6) *Scl))</pre>"}, {"lang": "PL/I", "loc": 13, "block": "<pre class=\"text highlighted_source\">/* Finds the N-th root of the number A */<br/>root: procedure (A, N) returns (float);<br/>   declare A float, N fixed binary;<br/>   declare (xi, xip1) float;<br/>\u00a0<br/>   xi = 1; /* An initial guess */<br/>   do forever;<br/>      xip1 = ((n-1)*xi + A/xi**(n-1) ) / n;<br/>      if abs(xip1-xi) &lt; 1e-5 then leave;<br/>      xi = xip1;<br/>   end;<br/>   return (xi);<br/>end root;</pre>"}, {"lang": "PowerShell", "loc": 39, "block": "<pre class=\"powershell highlighted_source\"><span class=\"co1\">#NoTeS: This sample code does not validate inputs</span><br/><span class=\"co1\">#\tThus, if there are errors the 'scary' red-text</span><br/><span class=\"co1\">#\terror messages will appear.</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\">#\tThis code will not work properly in floating point values of n,</span><br/><span class=\"co1\">#\tand negative values of A.</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\">#\tSupports negative values of n by reciprocating the root.</span><br/>\u00a0<br/><span class=\"re0\">$epsilon</span><span class=\"sy0\">=</span>1E<span class=\"sy0\">-</span>10\t\t<span class=\"co1\">#Sample Epsilon (Precision)</span><br/>\u00a0<br/><span class=\"kw3\">function</span> power<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span><span class=\"re0\">$e</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\t<span class=\"co1\">#As I said in the comment</span><br/>\t<span class=\"re0\">$ret</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>\t<span class=\"kw3\">for</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span>;$i <span class=\"kw4\">-le</span> <span class=\"re0\">$e</span>;$i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$ret</span><span class=\"sy0\">*=</span><span class=\"re0\">$x</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw3\">return</span> <span class=\"re0\">$ret</span><br/><span class=\"br0\">}</span><br/><span class=\"kw3\">function</span> root<span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\t\t\t\t\t<span class=\"co1\">#The main Function</span><br/>\t<span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">+</span><span class=\"re0\">$n</span> <span class=\"kw4\">-lt</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"re0\">$tmp</span><span class=\"sy0\">=-</span><span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"kw3\">else</span> <span class=\"br0\">{</span><span class=\"re0\">$tmp</span><span class=\"sy0\">=</span><span class=\"re0\">$n</span><span class=\"br0\">}</span>\t<span class=\"co1\">#This checks if n is negative.</span><br/>\t<span class=\"re0\">$ans</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>\u00a0<br/>\t<span class=\"kw3\">do</span><span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$d</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>power <span class=\"re0\">$ans</span> <span class=\"br0\">(</span><span class=\"re0\">$tmp</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"re0\">$ans</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"re0\">$tmp</span><br/>\t\t<span class=\"re0\">$ans</span><span class=\"sy0\">+=</span><span class=\"re0\">$d</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw3\">while</span> <span class=\"br0\">(</span><span class=\"re0\">$d</span> <span class=\"kw4\">-lt</span> <span class=\"sy0\">-</span><span class=\"re0\">$epsilon</span> <span class=\"kw4\">-or</span> <span class=\"re0\">$d</span> <span class=\"kw4\">-gt</span> <span class=\"re0\">$epsilon</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t<span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">+</span><span class=\"re0\">$n</span> <span class=\"kw4\">-lt</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"kw3\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"re0\">$ans</span><span class=\"br0\">}</span> <span class=\"kw3\">else</span> <span class=\"br0\">{</span><span class=\"kw3\">return</span> <span class=\"re0\">$ans</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">#Sample Inputs</span><br/>root <span class=\"nu0\">625</span> <span class=\"nu0\">2</span><br/>root <span class=\"nu0\">2401</span> <span class=\"nu0\">4</span><br/>root <span class=\"nu0\">2</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><br/>root 1.23456789E<span class=\"sy0\">-</span>20 <span class=\"nu0\">34</span><br/>root 9.87654321E20 <span class=\"nu0\">10</span>\t<span class=\"co1\">#Quite slow here, I admit...</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"br0\">(</span>root <span class=\"nu0\">5</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span>\t<span class=\"co1\">#Extra: Computes the golden ratio</span><br/><span class=\"br0\">(</span><span class=\"br0\">(</span>root <span class=\"nu0\">5</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span></pre>"}, {"lang": "PureBasic", "loc": 19, "block": "<pre class=\"purebasic highlighted_source\">#Def_p<span class=\"sy0\">=</span><span class=\"nu0\">0.001</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.d Nth_root<span class=\"br0\">(</span>n.i, A.d, p.d<span class=\"sy0\">=</span>#Def_p<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> <span class=\"kw1\">Dim</span> x.d<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <br/>  x<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>A: x<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>A<span class=\"sy0\">/</span>n<br/>  <span class=\"kw1\">While</span> <span class=\"kw2\">Abs</span><span class=\"br0\">(</span>x<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">-</span>x<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;</span>p<br/>    x<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>x<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    x<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>x<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>A<span class=\"sy0\">/</span><span class=\"kw2\">Pow</span><span class=\"br0\">(</span>x<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,n<span class=\"sy0\">-</span><span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>n<br/>  <span class=\"kw1\">Wend</span><br/>  <span class=\"kw1\">ProcedureReturn</span> x<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"co1\">;//////////////////////////////</span><br/><span class=\"kw1\">Debug</span> <span class=\"st0\">\"125'th root of 5642 is\"</span><br/><span class=\"kw1\">Debug</span> <span class=\"kw2\">Pow</span><span class=\"br0\">(</span><span class=\"nu0\">5642</span>,<span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">125</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Debug</span> <span class=\"st0\">\"First estimate is:\"</span><br/><span class=\"kw1\">Debug</span> Nth_root<span class=\"br0\">(</span><span class=\"nu0\">125</span>,<span class=\"nu0\">5642</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Debug</span> <span class=\"st0\">\"And better:\"</span><br/><span class=\"kw1\">Debug</span> Nth_root<span class=\"br0\">(</span><span class=\"nu0\">125</span>,<span class=\"nu0\">5642</span>,<span class=\"nu0\">0.00001</span><span class=\"br0\">)</span></pre>"}, {"lang": "Python", "loc": 13, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">decimal</span> <span class=\"kw1\">import</span> Decimal<span class=\"sy0\">,</span> getcontext<br/>\u00a0<br/><span class=\"kw1\">def</span> nthroot <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> A<span class=\"sy0\">,</span> precision<span class=\"br0\">)</span>:<br/>    getcontext<span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">prec</span> <span class=\"sy0\">=</span> precision<br/>\u00a0<br/>    n <span class=\"sy0\">=</span> Decimal<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    x_0 <span class=\"sy0\">=</span> A / n <span class=\"co1\">#step 1: make a while guess.</span><br/>    x_1 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>     <span class=\"co1\">#need it to exist before step 2</span><br/>    <span class=\"kw1\">while</span> <span class=\"kw2\">True</span>:<br/>        <span class=\"co1\">#step 2:</span><br/>        x_0<span class=\"sy0\">,</span> x_1 <span class=\"sy0\">=</span> x_1<span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> / n<span class=\"br0\">)</span>*<span class=\"br0\">(</span><span class=\"br0\">(</span>n - <span class=\"nu0\">1</span><span class=\"br0\">)</span>*x_0 + <span class=\"br0\">(</span>A / <span class=\"br0\">(</span>x_0 ** <span class=\"br0\">(</span>n - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> x_0 <span class=\"sy0\">==</span> x_1:<br/>            <span class=\"kw1\">return</span> x_1</pre>"}, {"lang": "R", "loc": 12, "block": "<pre class=\"text highlighted_source\">nthroot &lt;- function(A, n, tol=sqrt(.Machine$double.eps))<br/>{<br/>   ifelse(A &lt; 1, x0 &lt;- A * n, x0 &lt;- A / n)<br/>   repeat<br/>   {<br/>      x1 &lt;- ((n-1)*x0 + A / x0^(n-1))/n<br/>      if(abs(x1 - x0) &gt; tol) x0 &lt;- x1 else break<br/>   }<br/>   x1<br/>}<br/>nthroot(7131.5^10, 10)   # 7131.5<br/>nthroot(7, 0.5)          # 49</pre>"}, {"lang": "Racket", "loc": 15, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>\u00a0<br/>(define (nth-root number root (tolerance 0.001))<br/>  (define (acceptable? next current)<br/>    (&lt; (abs (- next current)) tolerance))<br/>\u00a0<br/>  (define (improve current)<br/>    (/ (+ (* (- root 1) current) (/ number (expt current (- root 1)))) root))<br/>\u00a0<br/>  (define (loop current)<br/>    (define next-guess (improve current))<br/>    (if (acceptable? next-guess current)<br/>        next-guess<br/>        (loop next-guess)))<br/>  (loop 1.0))</pre>"}, {"lang": "REXX", "loc": 38, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program calculates the  Nth root  of  X,  with  DIGS  (decimal digits) accuracy. */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x root digs <span class=\"sy0\">.</span>                          <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">if</span>    x==<span class=\"st0\">''</span> <span class=\"sy0\">|</span>    x==<span class=\"st0\">\",\"</span>   <span class=\"kw3\">then</span>    x= <span class=\"nu0\">2</span>           <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">if</span> root==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> root==<span class=\"st0\">\",\"</span>   <span class=\"kw3\">then</span> root= <span class=\"nu0\">2</span>           <span class=\"coMULTI\">/* \"       \"        \"   \"   \"      \"   */</span><br/><span class=\"kw1\">if</span> digs==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> digs==<span class=\"st0\">\",\"</span>   <span class=\"kw3\">then</span> digs=<span class=\"nu0\">65</span>           <span class=\"coMULTI\">/* \"       \"        \"   \"   \"      \"   */</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> digs                              <span class=\"coMULTI\">/*set the  decimal digits  to   DIGS.  */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'       x = '</span>    x                           <span class=\"coMULTI\">/*echo the value of   X.               */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'    root = '</span>    root                        <span class=\"coMULTI\">/*  \"   \"    \"    \"   ROOT.            */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'  digits = '</span>    digs                        <span class=\"coMULTI\">/*  \"   \"    \"    \"   DIGS.            */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'  answer = '</span>    root<span class=\"br0\">(</span>x, root<span class=\"br0\">)</span>               <span class=\"coMULTI\">/*show the value of   ANSWER.          */</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>root: <span class=\"kw1\">procedure</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x <span class=\"nu0\">1</span> Ox, r <span class=\"nu0\">1</span> Or             <span class=\"coMULTI\">/*arg1 \u2500\u2500\u25ba x &amp; Ox, 2nd \u2500\u2500\u25ba r &amp; Or*/</span><br/>      <span class=\"kw1\">if</span> r==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> r=<span class=\"nu0\">2</span>                               <span class=\"coMULTI\">/*Was root specified?  Assume \u221a. */</span><br/>      <span class=\"kw1\">if</span> r=<span class=\"nu0\">0</span>    <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"st0\">'[n/a]'</span>                    <span class=\"coMULTI\">/*oops-ay!  Can't do zeroth root.*/</span><br/>      complex= x<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span> <span class=\"sy0\">&amp;</span> R<span class=\"sy0\">//</span><span class=\"nu0\">2</span>==<span class=\"nu0\">0</span>                           <span class=\"coMULTI\">/*will the result be complex?    */</span><br/>      oDigs=<span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span>                                   <span class=\"coMULTI\">/*get the current number of digs.*/</span><br/>      <span class=\"kw1\">if</span> x=<span class=\"nu0\">0</span> <span class=\"sy0\">|</span> r=<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> x<span class=\"sy0\">/</span><span class=\"nu0\">1</span>                    <span class=\"coMULTI\">/*handle couple of special cases.*/</span><br/>      dm=oDigs+<span class=\"nu0\">5</span>                                       <span class=\"coMULTI\">/*we need a little guard room.   */</span><br/>      r=<span class=\"kw6\">abs</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span>;   x=<span class=\"kw6\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>                             <span class=\"coMULTI\">/*the absolute values of R and X.*/</span><br/>      rm=r-<span class=\"nu0\">1</span>                                           <span class=\"coMULTI\">/*just a fast version of  ROOT -1*/</span><br/>      <span class=\"kw1\">numeric</span> <span class=\"kw2\">form</span>                                     <span class=\"coMULTI\">/*take a good guess at the root\u2500\u2510*/</span><br/>      <span class=\"kw1\">parse</span> <span class=\"kw2\">value</span> <span class=\"kw6\">format</span><span class=\"br0\">(</span>x,<span class=\"nu0\">2</span>,<span class=\"nu0\">1</span>,,<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"st0\">'E0'</span> <span class=\"kw2\">with</span>\u00a0? <span class=\"st0\">'E'</span> _ <span class=\"sy0\">.</span> <span class=\"coMULTI\">/* \u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518*/</span><br/>      g= <span class=\"br0\">(</span>? <span class=\"sy0\">/</span> r<span class=\"st0\">'E'</span>_\u00a0% r<span class=\"br0\">)</span>  +  <span class=\"br0\">(</span>x<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>                     <span class=\"coMULTI\">/*kinda uses a crude \"logarithm\".*/</span><br/>      d=<span class=\"nu0\">5</span>                                              <span class=\"coMULTI\">/*start with five decimal digits.*/</span><br/>           <span class=\"kw1\">do</span> <span class=\"kw2\">until</span> d==dm;   d=<span class=\"kw6\">min</span><span class=\"br0\">(</span>d+d,dm<span class=\"br0\">)</span>             <span class=\"coMULTI\">/*each time,  precision doubles. */</span><br/>           <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> d                            <span class=\"coMULTI\">/*tell REXX to use   D   digits. */</span><br/>           old=-<span class=\"nu0\">1</span>                                      <span class=\"coMULTI\">/*assume some kind of old guess. */</span><br/>                  <span class=\"kw1\">do</span> <span class=\"kw2\">until</span> old=g;   old=g              <span class=\"coMULTI\">/*where da rubber meets da road\u2500\u2510*/</span><br/>                  g=<span class=\"kw6\">format</span><span class=\"br0\">(</span><span class=\"br0\">(</span>rm<span class=\"sy0\">*</span>g<span class=\"sy0\">**</span>r+x<span class=\"br0\">)</span><span class=\"sy0\">/</span>r<span class=\"sy0\">/</span>g<span class=\"sy0\">**</span>rm,, d-<span class=\"nu0\">2</span><span class=\"br0\">)</span>  <span class=\"coMULTI\">/* \u25c4\u2500\u2500\u2500\u2500\u2500\u2500 the root computation\u2500\u2518*/</span><br/>                  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*until old=g*/</span>                <span class=\"coMULTI\">/*maybe until the cows come home.*/</span><br/>           <span class=\"kw3\">end</span>          <span class=\"coMULTI\">/*until d==dm*/</span>                <span class=\"coMULTI\">/*and wait for more cows to come.*/</span><br/>\u00a0<br/>      <span class=\"kw1\">if</span> g=<span class=\"nu0\">0</span>        <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>                      <span class=\"coMULTI\">/*in case the jillionth root = 0.*/</span><br/>      <span class=\"kw1\">if</span> Or<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span>       <span class=\"kw3\">then</span> g=<span class=\"nu0\">1</span><span class=\"sy0\">/</span>g                         <span class=\"coMULTI\">/*root &lt; 0\u00a0?   Reciprocal it is! */</span><br/>      <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>complex   <span class=\"kw3\">then</span> g=g<span class=\"sy0\">*</span><span class=\"kw6\">sign</span><span class=\"br0\">(</span>Ox<span class=\"br0\">)</span>                  <span class=\"coMULTI\">/*adjust the sign  (maybe).      */</span><br/>      <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> oDigs                             <span class=\"coMULTI\">/*reinstate the original digits. */</span><br/>      <span class=\"kw1\">return</span> <span class=\"br0\">(</span>g<span class=\"sy0\">/</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"sy0\">||</span>  <span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">'j'</span>, complex<span class=\"br0\">)</span>             <span class=\"coMULTI\">/*normalize # to digs, append j\u00a0?*/</span></pre>"}, {"lang": "Ring", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>decimals(12)<br/>see \"cube root of 5 is\u00a0: \" + root(3, 5, 0) + nl<br/>\u00a0<br/>func root n, a, d<br/>y = 0 x = a / n<br/>while fabs (x - y) &gt; d<br/>      y = ((n - 1)*x + a/pow(x,(n-1))) / n<br/>      temp = x<br/>      x = y<br/>      y = temp <br/>end<br/>return x<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 10, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> nthroot<span class=\"br0\">(</span>n, a, precision = 1e<span class=\"sy0\">-</span>5<span class=\"br0\">)</span><br/>  x = <span class=\"kw3\">Float</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>  <span class=\"kw1\">begin</span><br/>    prev = x<br/>    x = <span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> prev <span class=\"sy0\">+</span> a <span class=\"sy0\">/</span> <span class=\"br0\">(</span>prev <span class=\"sy0\">**</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> n<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>prev <span class=\"sy0\">-</span> x<span class=\"br0\">)</span>.<span class=\"me1\">abs</span> <span class=\"sy0\">&gt;</span> precision<br/>  x <br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">p</span> nthroot<span class=\"br0\">(</span><span class=\"nu0\">5</span>,<span class=\"nu0\">34</span><span class=\"br0\">)</span>  <span class=\"co1\"># =&gt; 2.02439745849989</span></pre>"}, {"lang": "Run BASIC", "loc": 21, "block": "<pre class=\"text highlighted_source\">print \"Root 125th Root of 5643 Precision .001   \";using( \"#.###############\",  NthRoot( 125, 5642, 0.001  ))<br/>print \"125th Root of 5643 Precision .001   \";using( \"#.###############\",  NthRoot( 125, 5642, 0.001  ))<br/>print \"125th Root of 5643 Precision .00001 \";using( \"#.###############\",  NthRoot( 125, 5642, 0.00001))<br/>print \"  3rd Root of   27 Precision .00001 \";using( \"#.###############\",  NthRoot(   3,   27, 0.00001))<br/>print \"  2nd Root of    2 Precision .00001 \";using( \"#.###############\",  NthRoot(   2,    2, 0.00001))<br/>print \" 10th Root of 1024 Precision .00001 \";using( \"#.###############\",  NthRoot(  10, 1024, 0.00001))<br/>\u00a0<br/>wait<br/>\u00a0<br/>function NthRoot( root, A, precision)<br/>  x0 = A<br/>  x1 = A /root<br/>  while abs( x1 -x0) &gt;precision<br/>    x0 = x1<br/>    x1 = x1 / 1.0                                ' force float<br/>    x1 = (( root -1.0) *x1 +A /x1^( root -1.0)) /root<br/>  wend<br/>  NthRoot =x1<br/>end function<br/>\u00a0<br/>end</pre>"}, {"lang": "Sather", "loc": 16, "block": "<pre class=\"text highlighted_source\">class MATH is<br/>  nthroot(n:INT, a:FLT):FLT<br/>    pre n &gt; 0<br/>  is  <br/>    x0\u00a0::= a / n.flt;<br/>    m \u00a0::= n - 1;<br/>    loop<br/>      x1\u00a0::= (m.flt * x0 + a/(x0^(m.flt))) / n.flt;<br/>      if (x1 - x0).abs &lt; (x0 * 1.0e-9).abs then<br/>        return x1;<br/>      end;<br/>      x0\u00a0:= x1;<br/>    end;<br/>  end;<br/>\u00a0<br/>end;</pre>"}, {"lang": "Scala", "loc": 18, "block": "<pre class=\"scala highlighted_source\">\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> NthRoot <span class=\"br0\">{</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span>nthroot<span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> nthroot1<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int, a<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span><span class=\"sy0\">:</span> Double <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> loop<span class=\"br0\">(</span>x0<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span> <span class=\"sy0\">:</span> Double <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x1 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>1.0d/n <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> x0 + a/math.<span class=\"me1\">pow</span><span class=\"br0\">(</span>x0, n-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>x0 <span class=\"sy0\">&lt;=</span> x1<span class=\"br0\">)</span> x0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> loop<span class=\"br0\">(</span>x1<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span> <br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> loop<span class=\"br0\">(</span>a/<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Scheme", "loc": 18, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>root number degree tolerance<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>good<span class=\"sy0\">-</span>enough? next guess<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span><span class=\"kw1\">abs</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> next guess<span class=\"br0\">)</span><span class=\"br0\">)</span> tolerance<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>improve guess<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> degree <span class=\"nu0\">1</span><span class=\"br0\">)</span> guess<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> number <span class=\"br0\">(</span><span class=\"kw1\">expt</span> guess <span class=\"br0\">(</span><span class=\"sy0\">-</span> degree <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> degree<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>root guess<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>next <span class=\"br0\">(</span>improve guess<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>good<span class=\"sy0\">-</span>enough? next guess<span class=\"br0\">)</span><br/>          guess<br/>          <span class=\"br0\">(</span><span class=\"sy0\">*</span>root next<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">*</span>root <span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span>root <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">2</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"nu0\">10</span> <span class=\"nu0\">0.1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span>root <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">2</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"nu0\">10</span> <span class=\"nu0\">0.01</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span>root <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">2</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"nu0\">10</span> <span class=\"nu0\">0.001</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 13, "block": "<pre class=\"text highlighted_source\">const func float: nthRoot (in integer: n, in float: a) is func<br/>  result<br/>    var float: x1 is 0.0;<br/>  local<br/>    var float: x0 is 0.0;<br/>  begin <br/>    x0\u00a0:= a;<br/>    x1\u00a0:= a / flt(n);<br/>    while abs(x1 - x0) &gt;= abs(x0 * 1.0E-9) do<br/>      x0\u00a0:= x1;<br/>      x1\u00a0:= (flt(pred(n)) * x0 + a / x0 ** pred(n)) / flt(n);<br/>    end while;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 11, "block": "<pre class=\"ruby highlighted_source\">func nthroot<span class=\"br0\">(</span>n, a, precision=1e<span class=\"sy0\">-</span>5<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  var x    = <span class=\"nu0\">1</span>.<span class=\"kw3\">float</span><br/>  var prev = <span class=\"nu0\">0</span>.<span class=\"kw3\">float</span><br/>  <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>prev<span class=\"sy0\">-</span>x<span class=\"br0\">)</span>.<span class=\"me1\">abs</span> <span class=\"sy0\">&gt;</span> precision<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    prev = x;<br/>    x = <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>prev <span class=\"sy0\">+</span> a<span class=\"sy0\">/</span><span class=\"br0\">(</span>prev<span class=\"sy0\">**</span><span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> n<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw2\">return</span> x<br/><span class=\"br0\">}</span><br/>\u00a0<br/>say nthroot<span class=\"br0\">(</span><span class=\"nu0\">5</span>, <span class=\"nu0\">34</span><span class=\"br0\">)</span>  <span class=\"co1\"># =&gt; 2.024397458501034082599817835297912829678314204</span></pre>"}, {"lang": "Smalltalk", "loc": 13, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re0\">Number</span> extend <span class=\"br0\">[</span><br/>    <span class=\"re5\">nthRoot</span>: <span class=\"re5\">n</span> <span class=\"br0\">[</span><br/>\t|<span class=\"re3\">x0 m x1</span>|<br/>\t<span class=\"re6\">x0</span> <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"kw1\">self</span> / <span class=\"re5\">n</span><span class=\"br0\">)</span> asFloatD.<br/>\t<span class=\"re5\">m</span> <span class=\"sy0\">:=</span> <span class=\"re5\">n</span> - <span class=\"re5\">1</span>.<br/>\t<span class=\"br0\">[</span><span class=\"kw1\">true</span><span class=\"br0\">]</span> whileTrue: <span class=\"br0\">[</span><br/>\t    <span class=\"re5\">x1</span> <span class=\"sy0\">:=</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"re5\">m</span> * <span class=\"re5\">x0</span><span class=\"br0\">)</span> + <span class=\"br0\">(</span><span class=\"kw1\">self</span>/<span class=\"br0\">(</span><span class=\"re5\">x0</span> raisedTo: <span class=\"re5\">m</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> / <span class=\"re5\">n</span>.<br/>\t    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re5\">x1</span> - <span class=\"re5\">x0</span><span class=\"br0\">)</span> abs<span class=\"br0\">)</span> &lt; <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re5\">x0</span> * <span class=\"re5\">1e</span>-<span class=\"re5\">9</span><span class=\"br0\">)</span> abs<span class=\"br0\">)</span><br/>\t\tifTrue: <span class=\"br0\">[</span> ^ x1 <span class=\"br0\">]</span>.<br/>\t    <span class=\"re5\">x0</span> <span class=\"sy0\">:=</span> <span class=\"re5\">x1</span><br/>\t<span class=\"br0\">]</span><br/>    <span class=\"br0\">]</span><br/><span class=\"br0\">]</span>.</pre>"}, {"lang": "SPL", "loc": 14, "block": "<pre class=\"text highlighted_source\">nthr(n,r) &lt;= n^(1/r)<br/>\u00a0<br/>nthroot(n,r)=<br/>  a = n/r<br/>  g = n<br/>  &gt; g!=a<br/>    g = a<br/>    a = (1/r)*(((r-1)*g)+(n/(g^(r-1))))<br/>  &lt;<br/>  &lt;= a<br/>.<br/>\u00a0<br/>#.output(nthr(2,2))<br/>#.output(nthroot(2,2))</pre>"}, {"lang": "Tcl", "loc": 3, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> nthroot <span class=\"br0\">{</span>n A<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">expr</span> <span class=\"br0\">{</span>pow<span class=\"br0\">(</span><span class=\"re0\">$A</span>, <span class=\"nu0\">1.0</span>/<span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ursala", "loc": 8, "block": "<pre class=\"text highlighted_source\">#import nat<br/>#import flo<br/>\u00a0<br/>nthroot =<br/>\u00a0<br/>-+<br/>   (\"n\",\"n-1\"). \"A\". (\"x\". div\\\"n\" plus/times(\"n-1\",\"x\") div(\"A\",pow(\"x\",\"n-1\")))^== 1.,<br/>   float^~/~&amp; predecessor+-</pre>"}, {"lang": "XPL0", "loc": 21, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\stdlib;<br/>\u00a0<br/>func real NRoot(A, N);  \\Return the Nth root of A<br/>real A, N;<br/>real X, X0, Y;<br/>int  I;<br/>[X:= 1.0;               \\initial guess<br/>repeat  X0:= X;<br/>        Y:= 1.0;<br/>        for I:= 1 to fix(N)-1 do Y:= Y*X0;<br/>        X:= ((N-1.0)*X0 + A/Y) / N;<br/>until   abs(X-X0) &lt; 1.0E-15;            \\(until X=X0 doesn't always work)<br/>return X;<br/>];<br/>\u00a0<br/>[Format(5, 15);<br/>RlOut(0, NRoot( 2., 2.));  CrLf(0);<br/>RlOut(0, Power( 2., 0.5)); CrLf(0);     \\for comparison<br/>RlOut(0, NRoot(27., 3.));  CrLf(0);<br/>RlOut(0, NRoot(1024.,10.)); CrLf(0);<br/>]</pre>"}, {"lang": "zkl", "loc": 11, "block": "<pre class=\"text highlighted_source\">fcn nthroot(nth,a,precision=1.0e-5){<br/>   x:=prev:=a=a.toFloat(); n1:=nth-1;<br/>   do{<br/>      prev=x;<br/>      x=( prev*n1 + a/prev.pow(n1) ) / nth;<br/>   }    <br/>   while( not prev.closeTo(x,precision) );<br/>   x <br/>}<br/>\u00a0<br/>nthroot(5,34)\u00a0: \"%.20f\".fmt(_).println()  # =&gt; 2.02439745849988828041</pre>"}]}