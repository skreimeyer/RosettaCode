{"task": "Function_frequency", "blocks": [{"lang": "ACL2", "loc": 63, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>in-package <span class=\"st0\">\"ACL2\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>set-state-ok t<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> read-all-objects <span class=\"br0\">(</span>limit channel state<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>mv-<span class=\"kw1\">let</span> <span class=\"br0\">(</span>eof obj state<span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>read-object channel state<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> eof <span class=\"br0\">(</span>zp limit<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>mv <span class=\"kw1\">nil</span> state<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>mv-<span class=\"kw1\">let</span> <span class=\"br0\">(</span>so-far state<span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span>read-all-objects <span class=\"br0\">(</span>- limit <span class=\"nu0\">1</span><span class=\"br0\">)</span> channel state<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>mv <span class=\"br0\">(</span><span class=\"kw1\">cons</span> obj so-far<span class=\"br0\">)</span> state<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> list-starters <span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>endp xs<span class=\"br0\">)</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">consp</span> <span class=\"br0\">(</span>first xs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">append</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">symbolp</span> <span class=\"br0\">(</span>first <span class=\"br0\">(</span>first xs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                      <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span>first <span class=\"br0\">(</span>first xs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                      <span class=\"kw1\">nil</span><span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span>list-starters <span class=\"br0\">(</span>rest <span class=\"br0\">(</span>first xs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span>list-starters <span class=\"br0\">(</span>rest xs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>t <span class=\"br0\">(</span>list-starters <span class=\"br0\">(</span>rest xs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> invoked-functions <span class=\"br0\">(</span>filename state<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>mv-<span class=\"kw1\">let</span> <span class=\"br0\">(</span>channel state<span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>open-input-channel filename <span class=\"sy0\">:</span><span class=\"me1\">object</span> state<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>mv-<span class=\"kw1\">let</span> <span class=\"br0\">(</span>code state<span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span>read-all-objects <span class=\"nu0\">1000</span> channel state<span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>mv <span class=\"br0\">(</span>list-starters code<span class=\"br0\">)</span> state<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> increment-for <span class=\"br0\">(</span>key alist<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>endp alist<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> key <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">equal</span> key <span class=\"br0\">(</span><span class=\"kw1\">car</span> <span class=\"br0\">(</span>first alist<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> key <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"br0\">(</span>first alist<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span>rest alist<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>t <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>first alist<span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span>increment-for key <span class=\"br0\">(</span>rest alist<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> symbol-freq-table <span class=\"br0\">(</span>symbols<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>endp symbols<span class=\"br0\">)</span><br/>       <span class=\"kw1\">nil</span><br/>       <span class=\"br0\">(</span>increment-for <span class=\"br0\">(</span>first symbols<span class=\"br0\">)</span><br/>                      <span class=\"br0\">(</span>symbol-freq-table <span class=\"br0\">(</span>rest symbols<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> insert-freq-table <span class=\"br0\">(</span>pair alist<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>endp alist<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">list</span> pair<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> pair<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"br0\">(</span>first alist<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">cons</span> pair alist<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>t <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>first alist<span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span>insert-freq-table pair <span class=\"br0\">(</span>rest alist<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> isort-freq-table <span class=\"br0\">(</span>alist<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>endp alist<span class=\"br0\">)</span><br/>       <span class=\"kw1\">nil</span><br/>       <span class=\"br0\">(</span>insert-freq-table <span class=\"br0\">(</span>first alist<span class=\"br0\">)</span><br/>                          <span class=\"br0\">(</span>isort-freq-table <span class=\"br0\">(</span>rest alist<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> main <span class=\"br0\">(</span>state<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>mv-<span class=\"kw1\">let</span> <span class=\"br0\">(</span>fns state<span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>invoked-functions <span class=\"st0\">\"function-freq.lisp\"</span> state<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>mv <span class=\"br0\">(</span>take <span class=\"nu0\">10</span> <span class=\"br0\">(</span>isort-freq-table<br/>                    <span class=\"br0\">(</span>symbol-freq-table fns<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> state<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "AWK", "loc": 162, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f FUNCTION_FREQUENCY.AWK filename(s).AWK</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\"># sorting:</span><br/><span class=\"co1\">#   PROCINFO[\"sorted_in\"] is used by GAWK</span><br/><span class=\"co1\">#   SORTTYPE is used by Thompson Automation's TAWK</span><br/><span class=\"co1\">#</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/><span class=\"co1\"># create array of keywords to be ignored by lexer</span><br/>    asplit<span class=\"br0\">(</span><span class=\"st0\">\"BEGIN:END:atan2:break:close:continue:cos:delete:\"</span> \\<br/>           <span class=\"st0\">\"do:else:exit:exp:for:getline:gsub:if:in:index:int:\"</span>  \\<br/>           <span class=\"st0\">\"length:log:match:next:print:printf:rand:return:sin:\"</span> \\<br/>           <span class=\"st0\">\"split:sprintf:sqrt:srand:strftime:sub:substr:system:tolower:toupper:while\"</span>,<br/>           keywords,<span class=\"st0\">\":\"</span><span class=\"br0\">)</span><br/><span class=\"co1\"># build the symbol-state table</span><br/>    <span class=\"kw4\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"00:00:00:00:00:00:00:00:00:00:\"</span> \\<br/>          <span class=\"st0\">\"20:10:10:12:12:11:07:00:00:00:\"</span> \\<br/>          <span class=\"st0\">\"08:08:08:08:08:33:08:00:00:00:\"</span> \\<br/>          <span class=\"st0\">\"08:44:08:36:08:08:08:00:00:00:\"</span> \\<br/>          <span class=\"st0\">\"08:44:45:42:42:41:08\"</span>,machine,<span class=\"st0\">\":\"</span><span class=\"br0\">)</span><br/><span class=\"co1\"># parse the input</span><br/>    state = <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>;;<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      symb = lex<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\"># get next symbol</span><br/>      nextstate = <span class=\"kw4\">substr</span><span class=\"br0\">(</span>machine<span class=\"br0\">[</span>state symb<span class=\"br0\">]</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      act = <span class=\"kw4\">substr</span><span class=\"br0\">(</span>machine<span class=\"br0\">[</span>state symb<span class=\"br0\">]</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"co1\"># perform required action</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>act <span class=\"sy2\">==</span> <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># do nothing</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>act <span class=\"sy2\">==</span> <span class=\"st0\">\"1\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># found a function call</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy1\">!</span><span class=\"br0\">(</span>inarray<span class=\"br0\">(</span>tok,names<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          names<span class=\"br0\">[</span><span class=\"sy3\">++</span>nnames<span class=\"br0\">]</span> = tok<br/>        <span class=\"br0\">}</span><br/>        <span class=\"sy3\">++</span>xnames<span class=\"br0\">[</span>tok<span class=\"br0\">]</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>act <span class=\"sy2\">==</span> <span class=\"st0\">\"2\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># found a variable or array</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tok <span class=\"kw1\">in</span> Local<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          tok = tok <span class=\"st0\">\"(\"</span> funcname <span class=\"st0\">\")\"</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy1\">!</span><span class=\"br0\">(</span>inarray<span class=\"br0\">(</span>tok,names<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            names<span class=\"br0\">[</span><span class=\"sy3\">++</span>nnames<span class=\"br0\">]</span> = tok<br/>          <span class=\"br0\">}</span><br/>          <span class=\"sy3\">++</span>xnames<span class=\"br0\">[</span>tok<span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>          tok = tok <span class=\"st0\">\"()\"</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy1\">!</span><span class=\"br0\">(</span>inarray<span class=\"br0\">(</span>tok,names<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            names<span class=\"br0\">[</span><span class=\"sy3\">++</span>nnames<span class=\"br0\">]</span> = tok<br/>          <span class=\"br0\">}</span><br/>          <span class=\"sy3\">++</span>xnames<span class=\"br0\">[</span>tok<span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>act <span class=\"sy2\">==</span> <span class=\"st0\">\"3\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># found a function definition</span><br/>        funcname = tok<br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>act <span class=\"sy2\">==</span> <span class=\"st0\">\"4\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># found a left brace</span><br/>        braces<span class=\"sy3\">++</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>act <span class=\"sy2\">==</span> <span class=\"st0\">\"5\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># found a right brace</span><br/>        braces<span class=\"sy3\">--</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>braces <span class=\"sy2\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          delete Local<br/>          funcname = <span class=\"st0\">\"\"</span><br/>          nextstate = <span class=\"nu0\">1</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>act <span class=\"sy2\">==</span> <span class=\"st0\">\"6\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># found a local variable declaration</span><br/>        Local<span class=\"br0\">[</span>tok<span class=\"br0\">]</span> = <span class=\"nu0\">1</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>act <span class=\"sy2\">==</span> <span class=\"st0\">\"7\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># found end of file</span><br/>        <span class=\"kw1\">break</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>act <span class=\"sy2\">==</span> <span class=\"st0\">\"8\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># found an error</span><br/>        <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"error: FILENAME=%s, FNR=%d<span class=\"es0\">\\n</span>\"</span>,<span class=\"kw3\">FILENAME</span>,<span class=\"kw3\">FNR</span><span class=\"br0\">)</span><br/>        exit<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>      state = nextstate <span class=\"co1\"># finished with current token</span><br/>    <span class=\"br0\">}</span><br/><span class=\"co1\"># format function names</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;=</span>nnames; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">index</span><span class=\"br0\">(</span>names<span class=\"br0\">[</span>i<span class=\"br0\">]</span>,<span class=\"st0\">\"(\"</span><span class=\"br0\">)</span> <span class=\"sy2\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        tmp_arr<span class=\"br0\">[</span>xnames<span class=\"br0\">[</span>names<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>names<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span> = <span class=\"st0\">\"\"</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"co1\"># print function names</span><br/>    PROCINFO<span class=\"br0\">[</span><span class=\"st0\">\"sorted_in\"</span><span class=\"br0\">]</span> = <span class=\"st0\">\"@ind_num_desc\"</span>\u00a0; SORTTYPE = <span class=\"nu0\">9</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"kw1\">in</span> tmp_arr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      PROCINFO<span class=\"br0\">[</span><span class=\"st0\">\"sorted_in\"</span><span class=\"br0\">]</span> = <span class=\"st0\">\"@ind_str_asc\"</span>\u00a0; SORTTYPE = <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"kw1\">in</span> tmp_arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy3\">++</span>shown <span class=\"sy2\">&lt;=</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d\u00a0%s<span class=\"es0\">\\n</span>\"</span>,i,j<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> asplit<span class=\"br0\">(</span>str,arr,<span class=\"kw3\">fs</span>,  i,n,temp_asplit<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    n = <span class=\"kw4\">split</span><span class=\"br0\">(</span>str,temp_asplit,<span class=\"kw3\">fs</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;=</span>n; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      arr<span class=\"br0\">[</span>temp_asplit<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy3\">++</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> inarray<span class=\"br0\">(</span>val,arr,  j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"kw1\">in</span> arr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>arr<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy2\">==</span> val<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw6\">return</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw6\">return</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> lex<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>;;<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tok <span class=\"sy2\">==</span> <span class=\"st0\">\"(eof)\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw6\">return</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw4\">length</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span> <span class=\"sy2\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw5\">getline</span> line <span class=\"sy2\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          tok = <span class=\"st0\">\"(eof)\"</span><br/>          <span class=\"kw6\">return</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw4\">sub</span><span class=\"br0\">(</span><span class=\"sy3\">/^</span><span class=\"br0\">[</span> \\t<span class=\"br0\">]</span><span class=\"sy3\">+/</span>,<span class=\"st0\">\"\"</span>,line<span class=\"br0\">)</span>           <span class=\"co1\"># remove white space,</span><br/>      <span class=\"kw4\">sub</span><span class=\"br0\">(</span><span class=\"sy3\">/^</span><span class=\"st0\">\"([^\"</span><span class=\"br0\">]</span>|\\\\<span class=\"st0\">\")*\"</span><span class=\"sy3\">/</span>,<span class=\"st0\">\"\"</span>,line<span class=\"br0\">)</span>    <span class=\"co1\"># quoted strings,</span><br/>      <span class=\"kw4\">sub</span><span class=\"br0\">(</span><span class=\"sy3\">/^</span>\\<span class=\"sy3\">/</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"sy3\">^</span>\\<span class=\"sy3\">/</span><span class=\"br0\">]</span>|\\\\\\<span class=\"sy3\">/</span><span class=\"br0\">)</span><span class=\"sy3\">+</span>\\<span class=\"sy3\">//</span>,<span class=\"st0\">\"\"</span>,line<span class=\"br0\">)</span> <span class=\"co1\"># regular expressions,</span><br/>      <span class=\"kw4\">sub</span><span class=\"br0\">(</span><span class=\"sy3\">/^</span><span class=\"co1\">#.*/,\"\",line)              # and comments</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>line <span class=\"sy4\">~</span> <span class=\"sy3\">/^</span>function <span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        tok = <span class=\"st0\">\"function\"</span><br/>        line = <span class=\"kw4\">substr</span><span class=\"br0\">(</span>line,<span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>        <span class=\"kw6\">return</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>line <span class=\"sy4\">~</span> <span class=\"sy3\">/^</span><span class=\"br0\">{</span><span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        tok = <span class=\"st0\">\"{\"</span><br/>        line = <span class=\"kw4\">substr</span><span class=\"br0\">(</span>line,<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <span class=\"kw6\">return</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>line <span class=\"sy4\">~</span> <span class=\"sy3\">/^</span><span class=\"br0\">}</span><span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        tok = <span class=\"st0\">\"}\"</span><br/>        line = <span class=\"kw4\">substr</span><span class=\"br0\">(</span>line,<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <span class=\"kw6\">return</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">match</span><span class=\"br0\">(</span>line,<span class=\"sy3\">/^</span><span class=\"br0\">[</span>A<span class=\"sy3\">-</span>Za<span class=\"sy3\">-</span>z_<span class=\"br0\">]</span><span class=\"br0\">[</span>A<span class=\"sy3\">-</span>Za<span class=\"sy3\">-</span>z_0<span class=\"sy3\">-</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy3\">*</span>\\<span class=\"br0\">[</span><span class=\"sy3\">/</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        tok = <span class=\"kw4\">substr</span><span class=\"br0\">(</span>line,<span class=\"nu0\">1</span>,RLENGTH<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        line = <span class=\"kw4\">substr</span><span class=\"br0\">(</span>line,<span class=\"kw3\">RLENGTH</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw6\">return</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">match</span><span class=\"br0\">(</span>line,<span class=\"sy3\">/^</span><span class=\"br0\">[</span>A<span class=\"sy3\">-</span>Za<span class=\"sy3\">-</span>z_<span class=\"br0\">]</span><span class=\"br0\">[</span>A<span class=\"sy3\">-</span>Za<span class=\"sy3\">-</span>z_0<span class=\"sy3\">-</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy3\">*</span>\\<span class=\"br0\">(</span><span class=\"sy3\">/</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        tok = <span class=\"kw4\">substr</span><span class=\"br0\">(</span>line,<span class=\"nu0\">1</span>,RLENGTH<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        line = <span class=\"kw4\">substr</span><span class=\"br0\">(</span>line,<span class=\"kw3\">RLENGTH</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy1\">!</span><span class=\"br0\">(</span>tok <span class=\"kw1\">in</span> keywords<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw6\">return</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">match</span><span class=\"br0\">(</span>line,<span class=\"sy3\">/^</span><span class=\"br0\">[</span>A<span class=\"sy3\">-</span>Za<span class=\"sy3\">-</span>z_<span class=\"br0\">]</span><span class=\"br0\">[</span>A<span class=\"sy3\">-</span>Za<span class=\"sy3\">-</span>z_0<span class=\"sy3\">-</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy3\">*/</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        tok = <span class=\"kw4\">substr</span><span class=\"br0\">(</span>line,<span class=\"nu0\">1</span>,<span class=\"kw3\">RLENGTH</span><span class=\"br0\">)</span><br/>        line = <span class=\"kw4\">substr</span><span class=\"br0\">(</span>line,<span class=\"kw3\">RLENGTH</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy1\">!</span><span class=\"br0\">(</span>tok <span class=\"kw1\">in</span> keywords<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw6\">return</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">match</span><span class=\"br0\">(</span>line,<span class=\"sy3\">/^</span><span class=\"br0\">[</span><span class=\"sy3\">^</span>A<span class=\"sy3\">-</span>Za<span class=\"sy3\">-</span>z_<span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"sy3\">/</span><span class=\"br0\">)</span><br/>        tok = <span class=\"kw4\">substr</span><span class=\"br0\">(</span>line,<span class=\"nu0\">1</span>,<span class=\"kw3\">RLENGTH</span><span class=\"br0\">)</span><br/>        line = <span class=\"kw4\">substr</span><span class=\"br0\">(</span>line,<span class=\"kw3\">RLENGTH</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 47, "block": "<pre class=\"text highlighted_source\">      INSTALL @lib$+\"SORTLIB\"<br/>      Sort% = FN_sortinit(1,0)\u00a0: REM Descending<br/>\u00a0<br/>      Valid$ = \"<a class=\"__cf_email__\" data-cfemail=\"7444454647404142434c4d34353637303132333c3d3e3f38393a3b24252627202122232c2d2e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>_`abcdefghijklmnopqrstuvwxyz\"<br/>      DIM func$(1000), cnt%(1000)<br/>      nFunc% = 0<br/>\u00a0<br/>      file% = OPENIN(\"*.bbc\")<br/>      WHILE NOT EOF#file%<br/>        ll% = BGET#file%<br/>        no% = BGET#file% + 256*BGET#file%<br/>        INPUT #file%, l$<br/>\u00a0<br/>        i% = 1<br/>        REPEAT<br/>          j% = INSTR(l$, CHR$&amp;A4, i%)\u00a0: REM Token for 'FN'<br/>          k% = INSTR(l$, CHR$&amp;F2, i%)\u00a0: REM Token for 'PROC'<br/>          IF k% IF j%=0 OR j%&gt;k% THEN<br/>            i% = k%<br/>            f$ = \"PROC\"<br/>          ELSE<br/>            i% = j%<br/>            f$ = \"FN\"<br/>          ENDIF<br/>          IF i% THEN<br/>            REPEAT<br/>              i% += 1<br/>              f$ += MID$(l$, i%, 1)<br/>            UNTIL INSTR(Valid$, MID$(l$, i%+1, 1)) = 0<br/>            FOR j% = 0 TO nFunc%-1<br/>              IF f$ = func$(j%) EXIT FOR<br/>            NEXT<br/>            IF j% &gt;= nFunc% nFunc% += 1<br/>            func$(j%) = f$<br/>            cnt%(j%) += 1<br/>          ENDIF<br/>        UNTIL i%=0<br/>      ENDWHILE<br/>      CLOSE #file%<br/>\u00a0<br/>      C% = nFunc%<br/>      CALL Sort%, cnt%(0), func$(0)<br/>\u00a0<br/>      IF C% &gt; 10 C% = 10<br/>      FOR i% = 0 TO C%-1<br/>        PRINT func$(i%) \" (\"\u00a0; cnt%(i%) \")\"<br/>      NEXT</pre>"}, {"lang": "C", "loc": 252, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#define _POSIX_SOURCE</span><br/><span class=\"co2\">#include &lt;ctype.h&gt;</span><br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;errno.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/><span class=\"co2\">#include &lt;stddef.h&gt;</span><br/><span class=\"co2\">#include &lt;sys/mman.h&gt;</span><br/><span class=\"co2\">#include &lt;sys/types.h&gt;</span><br/><span class=\"co2\">#include &lt;sys/stat.h&gt;</span><br/><span class=\"co2\">#include &lt;unistd.h&gt;</span><br/><span class=\"kw4\">struct</span> functionInfo <span class=\"br0\">{</span><br/>    <span class=\"kw4\">char</span><span class=\"sy0\">*</span> name<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> timesCalled<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> marked<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">void</span> addToList<span class=\"br0\">(</span><span class=\"kw4\">struct</span> functionInfo<span class=\"sy0\">**</span> list<span class=\"sy0\">,</span> <span class=\"kw4\">struct</span> functionInfo toAdd<span class=\"sy0\">,</span> \\<br/>               <span class=\"kw4\">size_t</span><span class=\"sy0\">*</span> numElements<span class=\"sy0\">,</span> <span class=\"kw4\">size_t</span><span class=\"sy0\">*</span> allocatedSize<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span> keywords<span class=\"br0\">[</span><span class=\"nu0\">32</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\"auto\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"break\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"case\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"char\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"const\"</span><span class=\"sy0\">,</span> \\<br/>                                       <span class=\"st0\">\"continue\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"default\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"do\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"double\"</span><span class=\"sy0\">,</span> \\<br/>                                       <span class=\"st0\">\"else\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"enum\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"extern\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"float\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"for\"</span><span class=\"sy0\">,</span> \\<br/>                                       <span class=\"st0\">\"goto\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"if\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"int\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"long\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"register\"</span><span class=\"sy0\">,</span> \\<br/>                                       <span class=\"st0\">\"return\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"short\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"signed\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sizeof\"</span><span class=\"sy0\">,</span> \\<br/>                                       <span class=\"st0\">\"static\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"struct\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"switch\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"typedef\"</span><span class=\"sy0\">,</span> \\<br/>                                       <span class=\"st0\">\"union\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"unsigned\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"void\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"volatile\"</span><span class=\"sy0\">,</span> \\<br/>                                       <span class=\"st0\">\"while\"</span><br/>                                      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>    <span class=\"coMULTI\">/* If the \"function\" being called is actually a keyword, then ignore it */</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">32</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcmp.html\"><span class=\"kw3\">strcmp</span></a><span class=\"br0\">(</span>toAdd.<span class=\"me1\">name</span><span class=\"sy0\">,</span> keywords<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!*</span>list<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"sy0\">*</span>allocatedSize <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>        <span class=\"sy0\">*</span>list <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/calloc.html\"><span class=\"kw3\">calloc</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span>allocatedSize<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">struct</span> functionInfo<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!*</span>list<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Failed to allocate\u00a0%lu elements of\u00a0%lu bytes each.<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> \\<br/>                   <span class=\"sy0\">*</span>allocatedSize<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">struct</span> functionInfo<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/abort.html\"><span class=\"kw3\">abort</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"br0\">(</span><span class=\"sy0\">*</span>list<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">name</span> <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>toAdd.<span class=\"me1\">name</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>list<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">name</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Failed to allocate\u00a0%lu bytes.<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>toAdd.<span class=\"me1\">name</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/abort.html\"><span class=\"kw3\">abort</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcpy.html\"><span class=\"kw3\">strcpy</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>list<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">name</span><span class=\"sy0\">,</span> toAdd.<span class=\"me1\">name</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">(</span><span class=\"sy0\">*</span>list<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">timesCalled</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">(</span><span class=\"sy0\">*</span>list<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">marked</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"sy0\">*</span>numElements <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">char</span> found <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"sy0\">*</span>numElements<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcmp.html\"><span class=\"kw3\">strcmp</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>list<span class=\"br0\">)</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">name</span><span class=\"sy0\">,</span> toAdd.<span class=\"me1\">name</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                found <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">(</span><span class=\"sy0\">*</span>list<span class=\"br0\">)</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">timesCalled</span><span class=\"sy0\">++;</span><br/>                <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>found<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">struct</span> functionInfo<span class=\"sy0\">*</span> newList <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/calloc.html\"><span class=\"kw3\">calloc</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>allocatedSize<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> \\<br/>                                                  <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">struct</span> functionInfo<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>newList<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Failed to allocate\u00a0%lu elements of\u00a0%lu bytes each.<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> \\<br/>                       <span class=\"br0\">(</span><span class=\"sy0\">*</span>allocatedSize<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">struct</span> functionInfo<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/abort.html\"><span class=\"kw3\">abort</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memcpy.html\"><span class=\"kw3\">memcpy</span></a><span class=\"br0\">(</span>newList<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>list<span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>allocatedSize<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">struct</span> functionInfo<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span>list<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"sy0\">*</span>allocatedSize <span class=\"sy0\">+=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>            <span class=\"sy0\">*</span>list <span class=\"sy0\">=</span> newList<span class=\"sy0\">;</span><br/>            <span class=\"br0\">(</span><span class=\"sy0\">*</span>list<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy0\">*</span>numElements<span class=\"br0\">]</span>.<span class=\"me1\">name</span> <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>toAdd.<span class=\"me1\">name</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>list<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy0\">*</span>numElements<span class=\"br0\">]</span>.<span class=\"me1\">name</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Failed to allocate\u00a0%lu bytes.<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>toAdd.<span class=\"me1\">name</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/abort.html\"><span class=\"kw3\">abort</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcpy.html\"><span class=\"kw3\">strcpy</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>list<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy0\">*</span>numElements<span class=\"br0\">]</span>.<span class=\"me1\">name</span><span class=\"sy0\">,</span> toAdd.<span class=\"me1\">name</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">(</span><span class=\"sy0\">*</span>list<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy0\">*</span>numElements<span class=\"br0\">]</span>.<span class=\"me1\">timesCalled</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">(</span><span class=\"sy0\">*</span>list<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy0\">*</span>numElements<span class=\"br0\">]</span>.<span class=\"me1\">marked</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">(</span><span class=\"sy0\">*</span>numElements<span class=\"br0\">)</span><span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw4\">void</span> printList<span class=\"br0\">(</span><span class=\"kw4\">struct</span> functionInfo<span class=\"sy0\">**</span> list<span class=\"sy0\">,</span> <span class=\"kw4\">size_t</span> numElements<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">char</span> maxSet <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">size_t</span> maxIndex <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span><span class=\"nu0\">10</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        maxSet <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">size_t</span> j<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j<span class=\"sy0\">&lt;</span>numElements<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>maxSet <span class=\"sy0\">||</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>list<span class=\"br0\">)</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">timesCalled</span> <span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>list<span class=\"br0\">)</span><span class=\"br0\">[</span>maxIndex<span class=\"br0\">]</span>.<span class=\"me1\">timesCalled</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>list<span class=\"br0\">)</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">marked</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    maxSet <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                    maxIndex <span class=\"sy0\">=</span> j<span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"br0\">(</span><span class=\"sy0\">*</span>list<span class=\"br0\">)</span><span class=\"br0\">[</span>maxIndex<span class=\"br0\">]</span>.<span class=\"me1\">marked</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s() called\u00a0%d times.<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>list<span class=\"br0\">)</span><span class=\"br0\">[</span>maxIndex<span class=\"br0\">]</span>.<span class=\"me1\">name</span><span class=\"sy0\">,</span> \\<br/>               <span class=\"br0\">(</span><span class=\"sy0\">*</span>list<span class=\"br0\">)</span><span class=\"br0\">[</span>maxIndex<span class=\"br0\">]</span>.<span class=\"me1\">timesCalled</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw4\">void</span> freeList<span class=\"br0\">(</span><span class=\"kw4\">struct</span> functionInfo<span class=\"sy0\">**</span> list<span class=\"sy0\">,</span> <span class=\"kw4\">size_t</span> numElements<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">size_t</span> i<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>numElements<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>list<span class=\"br0\">)</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">name</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span>list<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw4\">char</span><span class=\"sy0\">*</span> extractFunctionName<span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"sy0\">*</span> readHead<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">char</span><span class=\"sy0\">*</span> identifier <span class=\"sy0\">=</span> readHead<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/isalpha.html\"><span class=\"kw3\">isalpha</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span>identifier<span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"sy0\">*</span>identifier <span class=\"sy0\">==</span> <span class=\"st0\">'_'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/isalnum.html\"><span class=\"kw3\">isalnum</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span>identifier<span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"sy0\">*</span>identifier <span class=\"sy0\">==</span> <span class=\"st0\">'_'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            identifier<span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"coMULTI\">/* Search forward for spaces and then an open parenthesis<br/>     * but do not include this in the function name.<br/>     */</span><br/>    <span class=\"kw4\">char</span><span class=\"sy0\">*</span> toParen <span class=\"sy0\">=</span> identifier<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>toParen <span class=\"sy0\">==</span> readHead<span class=\"br0\">)</span> <span class=\"kw1\">return</span> NULL<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/isspace.html\"><span class=\"kw3\">isspace</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span>toParen<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        toParen<span class=\"sy0\">++;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>toParen <span class=\"sy0\">!=</span> <span class=\"st0\">'('</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> NULL<span class=\"sy0\">;</span><br/>    <span class=\"coMULTI\">/* Copy the found function name to the output string */</span><br/>    ptrdiff_t size <span class=\"sy0\">=</span> <span class=\"br0\">(</span>ptrdiff_t<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">(</span>ptrdiff_t<span class=\"br0\">)</span>identifier<span class=\"br0\">)</span> \\<br/>                     <span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>ptrdiff_t<span class=\"br0\">)</span>readHead<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span><span class=\"sy0\">*</span> <span class=\"kw4\">const</span> name <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>size<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>name<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Failed to allocate\u00a0%lu bytes.<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> size<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/abort.html\"><span class=\"kw3\">abort</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    name<span class=\"br0\">[</span>size<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memcpy.html\"><span class=\"kw3\">memcpy</span></a><span class=\"br0\">(</span>name<span class=\"sy0\">,</span> readHead<span class=\"sy0\">,</span> size<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"coMULTI\">/* Function names can't be blank */</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcmp.html\"><span class=\"kw3\">strcmp</span></a><span class=\"br0\">(</span>name<span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> name<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>name<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> NULL<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> <span class=\"kw4\">char</span><span class=\"sy0\">**</span> argv<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>argc<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        errno <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        FILE<span class=\"sy0\">*</span> file <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fopen.html\"><span class=\"kw3\">fopen</span></a><span class=\"br0\">(</span>argv<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"r\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>errno <span class=\"sy0\">||</span> <span class=\"sy0\">!</span>file<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"fopen() failed with error code <span class=\"es1\">\\\"</span>%s<span class=\"es1\">\\\"</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> \\<br/>                   <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strerror.html\"><span class=\"kw3\">strerror</span></a><span class=\"br0\">(</span>errno<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/abort.html\"><span class=\"kw3\">abort</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw4\">char</span> comment <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"co2\">#define DOUBLEQUOTE 1</span><br/><span class=\"co2\">#define SINGLEQUOTE 2</span><br/>        <span class=\"kw4\">int</span> string <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">struct</span> functionInfo<span class=\"sy0\">*</span> functions <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">struct</span> functionInfo toAdd<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">size_t</span> numElements <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">size_t</span> allocatedSize <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">struct</span> stat metaData<span class=\"sy0\">;</span><br/>        errno <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>fstat<span class=\"br0\">(</span>fileno<span class=\"br0\">(</span>file<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>metaData<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"fstat() returned error <span class=\"es1\">\\\"</span>%s<span class=\"es1\">\\\"</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strerror.html\"><span class=\"kw3\">strerror</span></a><span class=\"br0\">(</span>errno<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/abort.html\"><span class=\"kw3\">abort</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw4\">char</span><span class=\"sy0\">*</span> mmappedSource <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>mmap<span class=\"br0\">(</span>NULL<span class=\"sy0\">,</span> metaData.<span class=\"me1\">st_size</span><span class=\"sy0\">,</span> PROT_READ<span class=\"sy0\">,</span> \\<br/>                                          MAP_PRIVATE<span class=\"sy0\">,</span> fileno<span class=\"br0\">(</span>file<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>errno<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"mmap() failed with error <span class=\"es1\">\\\"</span>%s<span class=\"es1\">\\\"</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strerror.html\"><span class=\"kw3\">strerror</span></a><span class=\"br0\">(</span>errno<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/abort.html\"><span class=\"kw3\">abort</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>mmappedSource<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"mmap() returned NULL.<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/abort.html\"><span class=\"kw3\">abort</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw4\">char</span><span class=\"sy0\">*</span> readHead <span class=\"sy0\">=</span> mmappedSource<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>readHead <span class=\"sy0\">&lt;</span> mmappedSource <span class=\"sy0\">+</span> metaData.<span class=\"me1\">st_size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>readHead<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"coMULTI\">/* Ignore comments inside strings */</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>string<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>readHead <span class=\"sy0\">==</span> <span class=\"st0\">'/'</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strncmp.html\"><span class=\"kw3\">strncmp</span></a><span class=\"br0\">(</span>readHead<span class=\"sy0\">,</span> <span class=\"st0\">\"/*\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        comment <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>readHead <span class=\"sy0\">==</span> <span class=\"st0\">'*'</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strncmp.html\"><span class=\"kw3\">strncmp</span></a><span class=\"br0\">(</span>readHead<span class=\"sy0\">,</span> <span class=\"st0\">\"*/\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        comment <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"coMULTI\">/* Ignore strings inside comments */</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>comment<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>readHead <span class=\"sy0\">==</span> <span class=\"st0\">'\"'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>string<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            string <span class=\"sy0\">=</span> DOUBLEQUOTE<span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>string <span class=\"sy0\">==</span> DOUBLEQUOTE<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            <span class=\"coMULTI\">/* Only toggle string mode if the quote character<br/>                             * is not escaped<br/>                             */</span><br/>                            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strncmp.html\"><span class=\"kw3\">strncmp</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span>readHead<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\\\</span><span class=\"es1\">\\\"</span>\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                                string <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                            <span class=\"br0\">}</span><br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>readHead <span class=\"sy0\">==</span> <span class=\"st0\">'<span class=\"es1\">\\'</span>'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>string<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            string <span class=\"sy0\">=</span> SINGLEQUOTE<span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>string <span class=\"sy0\">==</span> SINGLEQUOTE<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strncmp.html\"><span class=\"kw3\">strncmp</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span>readHead<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\\\</span><span class=\"es1\">\\'</span>\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                                string <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                            <span class=\"br0\">}</span><br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"coMULTI\">/* Look for identifiers outside of any comment or string */</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>comment <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>string<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw4\">char</span><span class=\"sy0\">*</span> name <span class=\"sy0\">=</span> extractFunctionName<span class=\"br0\">(</span>readHead<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"coMULTI\">/* Don't read part of an identifier on the next iteration */</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>name<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        toAdd.<span class=\"me1\">name</span> <span class=\"sy0\">=</span> name<span class=\"sy0\">;</span><br/>                        addToList<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>functions<span class=\"sy0\">,</span> toAdd<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>numElements<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>allocatedSize<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        readHead <span class=\"sy0\">+=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>name<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>name<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                readHead<span class=\"sy0\">++;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        errno <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        munmap<span class=\"br0\">(</span>mmappedSource<span class=\"sy0\">,</span> metaData.<span class=\"me1\">st_size</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>errno<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"munmap() returned error <span class=\"es1\">\\\"</span>%s<span class=\"es1\">\\\"</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strerror.html\"><span class=\"kw3\">strerror</span></a><span class=\"br0\">(</span>errno<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/abort.html\"><span class=\"kw3\">abort</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        errno <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>file<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>errno<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"fclose() returned error <span class=\"es1\">\\\"</span>%s<span class=\"es1\">\\\"</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strerror.html\"><span class=\"kw3\">strerror</span></a><span class=\"br0\">(</span>errno<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/abort.html\"><span class=\"kw3\">abort</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        printList<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>functions<span class=\"sy0\">,</span> numElements<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        freeList<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>functions<span class=\"sy0\">,</span> numElements<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Common Lisp", "loc": 34, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> mapc-tree <span class=\"br0\">(</span>fn tree<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Apply FN to all elements in TREE.\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">consp</span> tree<span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>mapc-tree fn <span class=\"br0\">(</span><span class=\"kw1\">car</span> tree<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>mapc-tree fn <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> tree<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>t <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> fn tree<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> count-source <span class=\"br0\">(</span>source<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Load and count all function-bound symbols in a SOURCE file.\"</span><br/>  <span class=\"br0\">(</span>load source<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>with-open-file <span class=\"br0\">(</span>s source<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>table <span class=\"br0\">(</span>make-hash-table<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>loop for data <span class=\"sy0\">=</span> <span class=\"br0\">(</span>read s <span class=\"kw1\">nil</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><br/>         while data<br/>         <span class=\"kw1\">do</span> <span class=\"br0\">(</span>mapc-tree<br/>             <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"kw1\">symbolp</span> x<span class=\"br0\">)</span> <span class=\"br0\">(</span>fboundp x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span>incf <span class=\"br0\">(</span>gethash x table <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             data<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      table<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> hash-to-alist <span class=\"br0\">(</span>table<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Convert a hashtable to an alist.\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>alist<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>maphash <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>k v<span class=\"br0\">)</span> <span class=\"br0\">(</span>push <span class=\"br0\">(</span><span class=\"kw1\">cons</span> k v<span class=\"br0\">)</span> alist<span class=\"br0\">)</span><span class=\"br0\">)</span> table<span class=\"br0\">)</span><br/>    alist<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> take <span class=\"br0\">(</span>n <span class=\"kw1\">list</span><span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Take at most N elements from LIST.\"</span><br/>  <span class=\"br0\">(</span>loop repeat n for x in <span class=\"kw1\">list</span> collect x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> top-<span class=\"nu0\">10</span> <span class=\"br0\">(</span>table<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Get the top 10 from the source counts TABLE.\"</span><br/>  <span class=\"br0\">(</span>take <span class=\"nu0\">10</span> <span class=\"br0\">(</span>sort <span class=\"br0\">(</span>hash-to-alist table<span class=\"br0\">)</span> '<span class=\"sy0\">&gt;</span> <span class=\"sy0\">:</span><span class=\"me1\">key</span> '<span class=\"kw1\">cdr</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Erlang", "loc": 33, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> function_frequency <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>erlang_source<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">erlang_source</span><span class=\"br0\">(</span> <span class=\"re5\">File</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <span class=\"re5\">IO</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/file.html\"><span class=\"kw5\">file</span></a>:<span class=\"re3\">open</span><span class=\"br0\">(</span> <span class=\"re5\">File</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span>read<span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Forms</span> <span class=\"sy3\">=</span> <span class=\"re3\">parse_all</span><span class=\"br0\">(</span> <span class=\"re5\">IO</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">parse_erl_form</span><span class=\"br0\">(</span><span class=\"re5\">IO</span><span class=\"sy1\">,</span> <span class=\"st_h\">''</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Functions</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">flatten</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/erl_syntax_lib.html\"><span class=\"kw5\">erl_syntax_lib</span></a>:<span class=\"re3\">fold</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> accumulate_functions<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Forms</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">to_list</span><span class=\"br0\">(</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foldl</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> count<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">new</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Functions</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Function_frequencies</span> <span class=\"sy3\">=</span> <span class=\"re3\">erlang_source</span><span class=\"br0\">(</span> <span class=\"st0\">\"function_frequency.erl\"</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"br0\">{</span><span class=\"re5\">Top_tens</span><span class=\"sy1\">,</span> <span class=\"re5\">_Rest</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">split</span><span class=\"br0\">(</span> <span class=\"nu0\">10</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">keysort</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"re5\">Function_frequencies</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span><span class=\"st0\">\"Function ~p called ~p times.~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Top_tens</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">accumulate_functions</span><span class=\"br0\">(</span> <span class=\"re5\">Tree</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">accumulate_functions</span><span class=\"br0\">(</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">element</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Tree</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Tree</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">accumulate_functions</span><span class=\"br0\">(</span> call<span class=\"sy1\">,</span> <span class=\"re5\">Tree</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"re3\">accumulate_functions_name</span><span class=\"br0\">(</span><span class=\"re5\">Tree</span><span class=\"br0\">)</span> | <span class=\"re5\">Acc</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"re3\">accumulate_functions</span><span class=\"br0\">(</span> <span class=\"re5\">_Other</span><span class=\"sy1\">,</span> <span class=\"re5\">_Tree</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Acc</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">accumulate_functions_name</span><span class=\"br0\">(</span> <span class=\"re5\">Tree</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">accumulate_functions_name_scoop</span><span class=\"br0\">(</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">element</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"re5\">Tree</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">accumulate_functions_name_scoop</span><span class=\"br0\">(</span> <span class=\"br0\">{</span><span class=\"kw4\">atom</span><span class=\"sy1\">,</span> <span class=\"re5\">_Line</span><span class=\"sy1\">,</span> <span class=\"re5\">Name</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Name</span><span class=\"sy1\">;</span><br/><span class=\"re3\">accumulate_functions_name_scoop</span><span class=\"br0\">(</span> <span class=\"br0\">{</span>remote<span class=\"sy1\">,</span> <span class=\"re5\">_Line</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"kw4\">atom</span><span class=\"sy1\">,</span> <span class=\"re5\">_Line</span><span class=\"sy1\">,</span> <span class=\"re5\">Module</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"kw4\">atom</span><span class=\"sy1\">,</span> <span class=\"re5\">_Line</span><span class=\"sy1\">,</span> <span class=\"re5\">Name</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"re5\">Module</span><span class=\"sy1\">,</span> <span class=\"re5\">Name</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">count</span><span class=\"br0\">(</span> <span class=\"re5\">Key</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">update_counter</span><span class=\"br0\">(</span> <span class=\"re5\">Key</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">parse_all</span><span class=\"br0\">(</span> <span class=\"re5\">_IO</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span>eof<span class=\"sy1\">,</span> <span class=\"re5\">_End</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Acc</span><span class=\"sy1\">;</span><br/><span class=\"re3\">parse_all</span><span class=\"br0\">(</span> <span class=\"re5\">IO</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <span class=\"re5\">Tokens</span><span class=\"sy1\">,</span> <span class=\"re5\">Location</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">parse_all</span><span class=\"br0\">(</span> <span class=\"re5\">IO</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">parse_erl_form</span><span class=\"br0\">(</span><span class=\"re5\">IO</span><span class=\"sy1\">,</span> <span class=\"st_h\">''</span><span class=\"sy1\">,</span> <span class=\"re5\">Location</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Tokens</span> | <span class=\"re5\">Acc</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 160, "block": "<pre class=\"text highlighted_source\">' noop is bootmessage<br/>\u00a0<br/>\\ --- LIST OF CONSTANTS<br/>\\ WORD#\t\tmaximum word size<br/>\\ RING#\t\tsize of `Rings' element<br/>\\ DEFS\t\tdefinitions<br/>\\ KEYS<br/>\\<br/>\\ --- LIST OF VARIABLES<br/>\\ cmpl?\t\tis compiling?<br/>\\ cword\t\tcurrent compiled word<br/>\u00a0<br/>    wordlist constant DEFS<br/>    wordlist constant KEYS<br/>\u00a0<br/>\\ --- Compiling<br/>50 constant WORD#<br/>: &gt;&gt;fPAD\t( ca u --\u00a0; u &lt; 51 )<br/>\tPAD 80 blank s\" create \" PAD swap MOVE<br/>\ts\"  1 , DOES&gt; 1 swap +!\u00a0;\" PAD 57 + swap MOVE<br/>\tWORD# min PAD 7 + swap MOVE\u00a0;<br/>\u00a0<br/>: funcmpl\t( ca u -- )<br/>\t&gt;&gt;fPAD current @ DEFS current\u00a0!<br/>\tPAD 80 evaluate current\u00a0!\u00a0;<br/>\u00a0<br/>: &gt;&gt;kPAD\t( ca u --\u00a0; )<br/>\tPAD 80 blank s\"\u00a0: \" PAD swap MOVE<br/>\ts\"  parse-name funcmpl\u00a0;\" PAD 59 + swap MOVE<br/>\tWORD# min PAD 2 + swap MOVE\u00a0;<br/>\u00a0<br/>: keycmpl\t( ca u -- )<br/>\t &gt;&gt;kPAD current @ KEYS current\u00a0!<br/>\tPAD 80 evaluate current\u00a0!\u00a0;<br/>\u00a0<br/>\\ --- Interpreter<br/>: intp\tBEGIN parse-name dup<br/>\tWHILE\t( ca u )<br/>\t\t2dup KEYS search-wordlist<br/>\t\tIF   execute 2drop<br/>\t\tELSE DEFS search-wordlist IF execute THEN<br/>\t\tTHEN<br/>\tREPEAT 2drop\u00a0;<br/>\u00a0<br/>: run \tBEGIN refill WHILE intp REPEAT\u00a0;<br/>\u00a0<br/>\\ --- Lists&amp;Rings<br/>warnings OFF<br/>: LIST\t( node -- )\t]] BEGIN @ dup WHILE &gt;R [[\u00a0; immediate<br/>warnings ON<br/>: LOOP-LIST\t( -- )\t]] R&gt; REPEAT drop [[\u00a0; immediate<br/>\u00a0<br/>: empty-ring?\t( node -- f )\tdup @ =\u00a0;<br/>: RING\t( node -- )\t]] dup BEGIN @ 2dup &lt;&gt; WHILE 2&gt;R [[\u00a0; immediate<br/>: LOOP-RING\t( -- )\t]] 2R&gt; REPEAT 2drop [[\u00a0; immediate<br/>\u00a0<br/>: new-node\t( -- node )<br/>\there dup ,\u00a0;<br/>: do-link\t\t( node new-node  --\u00a0; do link after current node )<br/>\tover @ over\u00a0! swap\u00a0!\u00a0;<br/>\u00a0<br/>\\ --- Sorting..<br/>: nt&gt;freq\t( nt -- n\u00a0;frequency of uses )<br/>\tname&gt;int &gt;BODY @\u00a0;<br/>\u00a0<br/>: @maxfreq\t( wid -- n\u00a0;maximum frequency )<br/>\t0 swap cell+<br/>\tLIST\t( max )<br/>\t\tI nt&gt;freq 2dup &lt;<br/>\t\tIF nip ELSE drop THEN<br/>\tLOOP-LIST\u00a0;<br/>\u00a0<br/>    2 cells constant RING#<br/>: rings-vec\t( u -- a size\u00a0; create vector of rings )<br/>\there over 1+ 0<br/>\tDO new-node drop 0 , LOOP<br/>\tswap RING# *\u00a0;<br/>\u00a0<br/>: populate-by \t( a wid -- )<br/>\tcell+<br/>\tLIST<br/>\t\tdup  I nt&gt;freq RING# *   +\t\\ root-node<br/>\t\tnew-node I ,\t\t\t\\ new-node<br/>\t\tdo-link<br/>\tLOOP-LIST drop\u00a0;<br/>\u00a0<br/>\\ --- Display TOP<br/>: node&gt;nt\tcell+ @\u00a0;<br/>\u00a0<br/>: .ring\t\t( root-node -- )<br/>\t0 swap<br/>\tRING<br/>\t\tdup 0= IF I node&gt;nt nt&gt;freq . THEN<br/>\t\tspace I node&gt;nt name&gt;string type<br/>\t\t1+<br/>\tLOOP-RING drop cr\u00a0;<br/>\u00a0<br/>: .top\t( a size n -- )<br/>\t-rot BOUNDS swap<br/>\t?DO\t( n )<br/>\t\tI empty-ring?\t0= IF 1- I .ring THEN<br/>\t\tdup \t\t0= IF drop UNLOOP EXIT THEN<br/>\t[ RING# negate ] LITERAL +LOOP drop\u00a0;<br/>\u00a0<br/>: args&gt;top#\t( -- n )<br/>\t1 arg 2dup 0 0 d&lt;&gt;<br/>\tIF\t&gt;float<br/>\t\tIF \tf&gt;d d&gt;s dup 0= IF drop 4 THEN<br/>\t\tELSE \t4 THEN<br/>\tELSE\t2drop 4 THEN\u00a0;<br/>\u00a0<br/>\u00a0<br/>\\ --- KEYS behaviour<br/>    variable  cmpl?\tcmpl? OFF<br/>    2variable cword<br/>here WORD# allot 0 cword 2!<br/>\u00a0<br/>current @ KEYS current\u00a0!<br/>: create<br/>\tcmpl? @<br/>\tIF   cword <a class=\"__cf_email__\" data-cfemail=\"714331\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>   keycmpl<br/>\tELSE parse-name funcmpl THEN\u00a0;<br/>\u00a0<br/>: constant<br/>\tcmpl? @<br/>\tIF   cword <a class=\"__cf_email__\" data-cfemail=\"417301\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>   keycmpl<br/>\tELSE parse-name funcmpl THEN\u00a0;<br/>\u00a0<br/>: variable\tparse-name funcmpl\u00a0;<br/>: value\t\tparse-name funcmpl\u00a0;<br/>: defer\t\tparse-name funcmpl\u00a0;<br/>\u00a0<br/>: (\tBEGIN &gt;in @ [char] ) parse nip &gt;in @ rot - =<br/>\tWHILE refill 0= IF exit THEN REPEAT\u00a0;<br/>: \\\t10 parse 2drop\u00a0;<br/>: \\G\t10 parse 2drop\u00a0;<br/>: S\"\t[char] \" parse 2drop\u00a0;<br/>: .\"\t[char] \" parse 2drop\u00a0;<br/>\u00a0<br/>: [']<br/>\tparse-name DEFS search-wordlist IF execute THEN\u00a0;<br/>: postpone<br/>\tparse-name DEFS search-wordlist IF execute THEN\u00a0;<br/>\u00a0<br/>:\u00a0; \tcmpl? OFF\u00a0;<br/>:\u00a0:\twarnings OFF<br/>\tparse-name<br/>\tcword <a class=\"__cf_email__\" data-cfemail=\"0c3e4c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> drop WORD# rot  umin dup &gt;R MOVE<br/>\tcword <a class=\"__cf_email__\" data-cfemail=\"a391e3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> drop R&gt; cword 2!<br/>\tcword <a class=\"__cf_email__\" data-cfemail=\"7e4c3e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> cmpl? @<br/>\tIF\tkeycmpl\t\t\\ `:' inside def. = a defining word<br/>\tELSE\tfuncmpl\tTHEN<br/>\tcmpl? ON<br/>\twarnings ON<br/>;<br/>current\u00a0!<br/>\u00a0<br/>\\ Run, ruuun!<br/>stdin ' run execute-parsing-file  DEFS @maxfreq rings-vec  over DEFS populate-by  args&gt;top# .top bye<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 60, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"go/ast\"</span><br/>    <span class=\"st0\">\"go/parser\"</span><br/>    <span class=\"st0\">\"go/token\"</span><br/>    <span class=\"st0\">\"io/ioutil\"</span><br/>    <span class=\"st0\">\"os\"</span><br/>    <span class=\"st0\">\"sort\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>os<span class=\"sy3\">.</span>Args<span class=\"sy1\">)</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">2</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"usage ff &lt;go source filename&gt;\"</span><span class=\"sy1\">)</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    src<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> ioutil<span class=\"sy3\">.</span>ReadFile<span class=\"sy1\">(</span>os<span class=\"sy3\">.</span>Args<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">])</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    fs <span class=\"sy2\">:=</span> token<span class=\"sy3\">.</span>NewFileSet<span class=\"sy1\">()</span><br/>    a<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> parser<span class=\"sy3\">.</span>ParseFile<span class=\"sy1\">(</span>fs<span class=\"sy1\">,</span> os<span class=\"sy3\">.</span>Args<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">],</span> src<span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    f <span class=\"sy2\">:=</span> fs<span class=\"sy3\">.</span>File<span class=\"sy1\">(</span>a<span class=\"sy3\">.</span>Pos<span class=\"sy1\">())</span><br/>    m <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">map</span><span class=\"sy1\">[</span><span class=\"kw4\">string</span><span class=\"sy1\">]</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span><br/>    ast<span class=\"sy3\">.</span>Inspect<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>n <a href=\"http://golang.org/search?q=ast.Node\"><span class=\"kw5\">ast.<span class=\"me1\">Node</span></span></a><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> ce<span class=\"sy1\">,</span> ok <span class=\"sy2\">:=</span> n<span class=\"sy3\">.</span><span class=\"sy1\">(</span><span class=\"sy3\">*</span>ast<span class=\"sy3\">.</span>CallExpr<span class=\"sy1\">);</span> ok <span class=\"sy1\">{</span><br/>            start <span class=\"sy2\">:=</span> f<span class=\"sy3\">.</span>Offset<span class=\"sy1\">(</span>ce<span class=\"sy3\">.</span>Pos<span class=\"sy1\">())</span><br/>            end <span class=\"sy2\">:=</span> f<span class=\"sy3\">.</span>Offset<span class=\"sy1\">(</span>ce<span class=\"sy3\">.</span>Lparen<span class=\"sy1\">)</span><br/>            m<span class=\"sy1\">[</span><span class=\"kw4\">string</span><span class=\"sy1\">(</span>src<span class=\"sy1\">[</span>start<span class=\"sy1\">:</span>end<span class=\"sy1\">])]</span><span class=\"sy2\">++</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>    <span class=\"sy1\">})</span><br/>    cs <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span>calls<span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>m<span class=\"sy1\">))</span><br/>    <span class=\"kw1\">for</span> k<span class=\"sy1\">,</span> v <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> m <span class=\"sy1\">{</span><br/>        cs <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>cs<span class=\"sy1\">,</span> &amp;call<span class=\"sy1\">{</span>k<span class=\"sy1\">,</span> v<span class=\"sy1\">})</span><br/>    <span class=\"sy1\">}</span><br/>    sort<span class=\"sy3\">.</span>Sort<span class=\"sy1\">(</span>cs<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> c <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> cs <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%-20s\u00a0%4d<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> c<span class=\"sy3\">.</span>expr<span class=\"sy1\">,</span> c<span class=\"sy3\">.</span>count<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"nu2\">i</span> <span class=\"sy3\">==</span> <span class=\"nu0\">9</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">break</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> call <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    expr  <span class=\"kw4\">string</span><br/>    count <span class=\"kw4\">int</span><br/><span class=\"sy1\">}</span><br/><span class=\"kw1\">type</span> calls <span class=\"sy1\">[]</span><span class=\"sy3\">*</span>call<br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>c calls<span class=\"sy1\">)</span> Len<span class=\"sy1\">()</span> <span class=\"kw4\">int</span>           <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>c<span class=\"sy1\">)</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>c calls<span class=\"sy1\">)</span> Swap<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> j <span class=\"kw4\">int</span><span class=\"sy1\">)</span>      <span class=\"sy1\">{</span> c<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> c<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> c<span class=\"sy1\">[</span>j<span class=\"sy1\">],</span> c<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>c calls<span class=\"sy1\">)</span> Less<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> j <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> c<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>count &gt; c<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span><span class=\"sy3\">.</span>count <span class=\"sy1\">}</span></pre>"}, {"lang": "J", "loc": 37, "block": "<pre class=\"j highlighted_source\">\u00a0<br/>   IGNORE=:\u00a0;:<span class=\"st_h\">'y(0)1'</span>,CR<br/>\u00a0<br/>   Filter=: <span class=\"sy0\">(</span>#~`<span class=\"sy0\">)(</span>`:<span class=\"nu0\">6</span><span class=\"sy0\">)</span><br/>\u00a0<br/>   <span class=\"co1\">NB. extract tokens from a large body newline terminated of text</span><br/>   roughparse=:\u00a0;@<span class=\"sy0\">(</span>&lt;@;:\u00a0::<span class=\"sy0\">(</span><span class=\"st_h\">''</span>\"<span class=\"nu0\">_</span><span class=\"sy0\">)</span>;.<span class=\"nu0\">_2</span><span class=\"sy0\">)</span><br/>\u00a0<br/>   <span class=\"co1\">NB. count frequencies and get the top x</span><br/>   top=: top=: {. \\:<a class=\"__cf_email__\" data-cfemail=\"552b15\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:<span class=\"sy0\">((</span>#;{.<span class=\"sy0\">)</span>/.~<span class=\"sy0\">)</span><br/>\u00a0<br/>   <span class=\"co1\">NB. read all installed script (.ijs) files and concatenate them</span><br/>   JSOURCE=:\u00a0;fread each <span class=\"nu0\">1</span>&amp;<a class=\"__cf_email__\" data-cfemail=\"5a3f741a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">(</span><span class=\"st_h\">'.ijs'</span>&amp;E.<span class=\"sy0\">)</span>@&gt;Filter {.\"<span class=\"nu0\">1</span> dirtree jpath <span class=\"st_h\">'~install'</span><br/>\u00a0<br/>   <span class=\"nu0\">10</span> top <span class=\"sy0\">(</span>roughparse JSOURCE<span class=\"sy0\">)</span>-.IGNORE<br/>\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2510<br/>\u2502<span class=\"nu0\">49591</span>\u2502, \u2502<br/>\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">40473</span>\u2502=:\u2502<br/>\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">35593</span>\u2502; \u2502<br/>\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">34096</span>\u2502=.\u2502<br/>\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">24757</span>\u2502+ \u2502<br/>\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">18726</span>\u2502\" \u2502<br/>\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">18564</span>\u2502&lt; \u2502<br/>\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">18446</span>\u2502/ \u2502<br/>\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">16984</span>\u2502&gt; \u2502<br/>\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">14655</span>\u2502@ \u2502<br/>\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2518<br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 33, "block": "<pre class=\"text highlighted_source\">using DataStructures<br/>\u00a0<br/>function funcfreqs(expr::Expr)<br/>    cnt = counter(Symbol)<br/>    expr.head ==\u00a0:call &amp;&amp;<br/>        push!(cnt, expr.args[1])<br/>    for e in expr.args<br/>        e isa Expr &amp;&amp; merge!(cnt, funcfreqs(e))<br/>    end<br/>    return cnt<br/>end<br/>\u00a0<br/>function parseall(str::AbstractString)<br/>    exs = Any[]<br/>    pos = start(str)<br/>    while\u00a0!done(str, pos)<br/>        ex, pos = parse(str, pos) # returns next starting point as well as expr<br/>        ex.head ==\u00a0:toplevel\u00a0? append!(exs, ex.args)\u00a0: push!(exs, ex)<br/>    end<br/>    if isempty(exs)<br/>        throw(ParseError(\"end of input\"))<br/>    elseif length(exs) == 1<br/>        return exs[1]<br/>    else<br/>        return Expr(:block, exs...)<br/>    end<br/>end<br/>\u00a0<br/>freqs = readstring(\"src/Function_frequency.jl\") |&gt; parseall |&gt; funcfreqs<br/>\u00a0<br/>for (v, f) in freqs<br/>    @printf(\"%10s \u2192\u00a0%i\\n\", v, f)<br/>end</pre>"}, {"lang": "LiveCode", "loc": 29, "block": "<pre class=\"text highlighted_source\">function handlerNames pScript<br/>    put pScript into pScriptCopy<br/>    filter pScript with regex pattern \"^(on|function).*\"<br/>    -- add in the built-in commands &amp; functions<br/>    put the commandNames &amp; the functionnames into cmdfunc<br/>    repeat for each line builtin in cmdfunc<br/>        put 0 into handlers[builtin]<br/>    end repeat<br/>\u00a0<br/>    -- add user defined handlers, remove this section of you do not want your own functions included<br/>    repeat with x = 1 to the number of lines of pScript<br/>        put word 2 of line x of pScript into handlername<br/>        put 0 into handlers[handlername]<br/>    end repeat<br/>\u00a0<br/>    -- count handlers used<br/>    repeat with x = 1 to the number of lines of pScriptCopy<br/>        repeat for each key k in handlers<br/>            if k is among the tokens of line x of pScriptCopy then<br/>                add 1 to handlers[k]<br/>            end if<br/>        end repeat <br/>    end repeat<br/>\u00a0<br/>    combine handlers using cr and space<br/>    sort lines of handlers descending by word 2 of each<br/>    put line 1 to 10 of handlers into handlers<br/>    return handlers<br/>end handlerNames</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 1, "block": "<pre class=\"text highlighted_source\">programCount[fn_]\u00a0:=  Reverse[If[Length[#] &gt; 10, Take[#, -10], #] &amp;[SortBy[Tally[Cases[DownValues[fn], s_Symbol, \\[Infinity], Heads -&gt; True]], Last]]]</pre>"}, {"lang": "Perl", "loc": 16, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> PPI<span class=\"sy0\">::</span><span class=\"me2\">Tokenizer</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$Tokenizer</span> <span class=\"sy0\">=</span> PPI<span class=\"sy0\">::</span><span class=\"me2\">Tokenizer</span><span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span> <span class=\"st_h\">'/path/to/your/script.pl'</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">%counts</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$token</span> <span class=\"sy0\">=</span> <span class=\"re0\">$Tokenizer</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">get_token</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\"># We consider all Perl identifiers. The following regex is close enough.</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$token</span> <span class=\"sy0\">=~</span> <span class=\"co2\">/\\A[\\$\\@\\%*[:alpha:]]/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$counts</span><span class=\"br0\">{</span><span class=\"re0\">$token</span><span class=\"br0\">}</span><span class=\"sy0\">++;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@desc_by_occurrence</span> <span class=\"sy0\">=</span><br/>    <a href=\"http://perldoc.perl.org/functions/sort.html\"><span class=\"kw3\">sort</span></a> <span class=\"br0\">{</span><span class=\"re0\">$counts</span><span class=\"br0\">{</span><span class=\"re0\">$b</span><span class=\"br0\">}</span> <span class=\"sy0\">&lt;=&gt;</span> <span class=\"re0\">$counts</span><span class=\"br0\">{</span><span class=\"re0\">$a</span><span class=\"br0\">}</span> <span class=\"sy0\">||</span> <span class=\"re0\">$a</span> <span class=\"kw1\">cmp</span> <span class=\"re0\">$b</span><span class=\"br0\">}</span><br/>         <a href=\"http://perldoc.perl.org/functions/keys.html\"><span class=\"kw3\">keys</span></a><span class=\"br0\">(</span><span class=\"re0\">%counts</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@top_ten_by_occurrence</span> <span class=\"sy0\">=</span> <span class=\"re0\">@desc_by_occurrence</span><span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$token</span> <span class=\"br0\">(</span><span class=\"re0\">@top_ten_by_occurrence</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">$counts</span><span class=\"br0\">{</span><span class=\"re0\">$token</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$token</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 7, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$text</span> <span class=\"sy0\">=</span> qqx<span class=\"br0\">[</span>perl6 <span class=\"sy0\">--</span>target<span class=\"sy0\">=</span>ast <span class=\"re0\">@*ARGS</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">%fun</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"re0\">$text</span><span class=\"sy0\">.</span><span class=\"me1\">lines</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">%fun</span><span class=\"br0\">{</span><span class=\"co3\">$0</span><span class=\"br0\">}</span><span class=\"sy0\">++</span> <span class=\"kw1\">if</span> <span class=\"co2\">/ '(call &amp;' (.*?) ')' /</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"re0\">%fun</span><span class=\"sy0\">.</span><span class=\"kw3\">invert</span><span class=\"sy0\">.</span><span class=\"kw3\">sort</span><span class=\"sy0\">.</span><span class=\"kw3\">reverse</span><span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"nu0\">10</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"sy0\">.</span><span class=\"me1\">value</span><span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"br0\">}</span></pre>"}, {"lang": "PicoLisp", "loc": 9, "block": "<pre class=\"text highlighted_source\">(let Freq NIL<br/>   (for \"L\" (filter pair (extract getd (all)))<br/>      (for \"F\"<br/>         (filter atom<br/>            (fish '((X) (or (circ? X) (getd X)))<br/>               \"L\" ) )<br/>         (accu 'Freq \"F\" 1) ) )<br/>   (for X (head 10 (flip (by cdr sort Freq)))<br/>      (tab (-7 4) (car X) (cdr X)) ) )</pre>"}, {"lang": "Python", "loc": 24, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> ast<br/>\u00a0<br/><span class=\"kw1\">class</span> CallCountingVisitor<span class=\"br0\">(</span>ast.<span class=\"me1\">NodeVisitor</span><span class=\"br0\">)</span>:<br/>\u00a0<br/>    <span class=\"kw1\">def</span> <span class=\"kw4\">__init__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw2\">self</span>.<span class=\"me1\">calls</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> visit_Call<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"sy0\">,</span> node<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">if</span> <span class=\"kw2\">isinstance</span><span class=\"br0\">(</span>node.<span class=\"me1\">func</span><span class=\"sy0\">,</span> ast.<span class=\"me1\">Name</span><span class=\"br0\">)</span>:<br/>            fun_name <span class=\"sy0\">=</span> node.<span class=\"me1\">func</span>.<span class=\"kw2\">id</span><br/>            call_count <span class=\"sy0\">=</span> <span class=\"kw2\">self</span>.<span class=\"me1\">calls</span>.<span class=\"me1\">get</span><span class=\"br0\">(</span>fun_name<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"kw2\">self</span>.<span class=\"me1\">calls</span><span class=\"br0\">[</span>fun_name<span class=\"br0\">]</span> <span class=\"sy0\">=</span> call_count + <span class=\"nu0\">1</span><br/>        <span class=\"kw2\">self</span>.<span class=\"me1\">generic_visit</span><span class=\"br0\">(</span>node<span class=\"br0\">)</span><br/>\u00a0<br/>filename <span class=\"sy0\">=</span> <span class=\"kw2\">input</span><span class=\"br0\">(</span><span class=\"st0\">'Enter a filename to parse: '</span><span class=\"br0\">)</span><br/><span class=\"kw1\">with</span> <span class=\"kw2\">open</span><span class=\"br0\">(</span>filename<span class=\"sy0\">,</span> encoding<span class=\"sy0\">=</span><span class=\"st0\">'utf-8'</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> f:<br/>    contents <span class=\"sy0\">=</span> f.<span class=\"me1\">read</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>root <span class=\"sy0\">=</span> ast.<span class=\"me1\">parse</span><span class=\"br0\">(</span>contents<span class=\"sy0\">,</span> filename<span class=\"sy0\">=</span>filename<span class=\"br0\">)</span> <span class=\"co1\">#NOTE: this will throw a SyntaxError if the file isn't valid Python code</span><br/>visitor <span class=\"sy0\">=</span> CallCountingVisitor<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>visitor.<span class=\"me1\">visit</span><span class=\"br0\">(</span>root<span class=\"br0\">)</span><br/>top10 <span class=\"sy0\">=</span> <span class=\"kw2\">sorted</span><span class=\"br0\">(</span>visitor.<span class=\"me1\">calls</span>.<span class=\"me1\">items</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> key<span class=\"sy0\">=</span><span class=\"kw1\">lambda</span> x: x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> reverse<span class=\"sy0\">=</span><span class=\"kw2\">True</span><span class=\"br0\">)</span><span class=\"br0\">[</span>:<span class=\"nu0\">10</span><span class=\"br0\">]</span><br/><span class=\"kw1\">for</span> name<span class=\"sy0\">,</span> count <span class=\"kw1\">in</span> top10:<br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span>name<span class=\"sy0\">,</span><span class=\"st0\">'called'</span><span class=\"sy0\">,</span>count<span class=\"sy0\">,</span><span class=\"st0\">'times'</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(require math)<br/>(define in (open-input-file \"function-frequency.rkt\"))<br/>(void (read-language in))<br/>(define s-exprs (for/list ([s (in-port read in)]) s))<br/>(define symbols (filter symbol? (flatten s-exprs)))<br/>(define counts  (sort (hash-&gt;list (samples-&gt;hash symbols)) &gt;= #:key cdr))<br/>(take counts (min 10 (length counts)))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 34, "block": "<pre class=\"rexx highlighted_source\">fid=<span class=\"st0\">'pgm.rex'</span><br/>cnt<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span><br/>funl=<span class=\"st0\">''</span><br/><span class=\"kw1\">Do</span> <span class=\"kw2\">While</span> <span class=\"kw6\">lines</span><span class=\"br0\">(</span>fid<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><br/>  l=<span class=\"kw2\">linein</span><span class=\"br0\">(</span>fid<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Do</span> <span class=\"kw2\">Until</span> p=<span class=\"nu0\">0</span><br/>    p=<span class=\"kw6\">pos</span><span class=\"br0\">(</span><span class=\"st0\">'('</span>,l<span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> p<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>      <span class=\"kw1\">do</span> i=p-<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"nu0\">1</span> <span class=\"kw2\">By</span> -<span class=\"nu0\">1</span> <span class=\"kw2\">While</span> is_tc<span class=\"br0\">(</span><span class=\"kw6\">substr</span><span class=\"br0\">(</span>l,i,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">End</span><br/>      fn=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>l,i+<span class=\"nu0\">1</span>,p-i-<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">If</span> fn<span class=\"sy0\">&lt;&gt;</span><span class=\"st0\">''</span> <span class=\"kw3\">Then</span><br/>        <span class=\"kw1\">Call</span> store fn<br/>      l=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>l,p+<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Do</span> <span class=\"kw2\">While</span> funl<span class=\"sy0\">&lt;&gt;</span><span class=\"st0\">''</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw2\">Var</span> funl fn funl<br/>  <span class=\"kw1\">Say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>cnt<span class=\"sy0\">.</span>fn,<span class=\"nu0\">3</span><span class=\"br0\">)</span> fn<br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Exit</span><br/>x=a<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>+bbbbb<span class=\"br0\">(</span><span class=\"nu0\">5</span>,c<span class=\"br0\">(</span><span class=\"nu0\">555</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>special=<span class=\"kw6\">date</span><span class=\"br0\">(</span><span class=\"st0\">'S'</span><span class=\"br0\">)</span> <span class=\"st0\">'DATE'</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"st0\">\"date\"</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>is_tc:<br/>abc=<span class=\"st0\">'abcdefghijklmnopqrstuvwxyz'</span><br/><span class=\"kw1\">Return</span> <span class=\"kw6\">pos</span><span class=\"br0\">(</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,abc<span class=\"sy0\">||</span><span class=\"kw6\">translate</span><span class=\"br0\">(</span>abc<span class=\"br0\">)</span><span class=\"st0\">'1234567890_'</span><span class=\"st0\">'\"'</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><br/>\u00a0<br/>store:<br/><span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> fun<br/>cnt<span class=\"sy0\">.</span>fun=cnt<span class=\"sy0\">.</span>fun+<span class=\"nu0\">1</span><br/><span class=\"kw1\">If</span> cnt<span class=\"sy0\">.</span>fun=<span class=\"nu0\">1</span> <span class=\"kw3\">Then</span><br/>  funl=funl fun<br/><span class=\"kw1\">Return</span></pre>"}, {"lang": "Sidef", "loc": 14, "block": "<pre class=\"ruby highlighted_source\">func foo <span class=\"br0\">{</span> <span class=\"br0\">}</span><br/>func bar <span class=\"br0\">{</span> <span class=\"br0\">}</span><br/>\u00a0<br/>foo<span class=\"br0\">(</span><span class=\"br0\">)</span>; foo<span class=\"br0\">(</span><span class=\"br0\">)</span>; foo<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>bar<span class=\"br0\">(</span><span class=\"br0\">)</span>; bar<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>var data = Perl.<span class=\"me1\">to_sidef</span><span class=\"br0\">(</span>Parser<span class=\"br0\">{</span>:vars<span class=\"br0\">}</span><span class=\"br0\">{</span>:main<span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">flatten</span><br/>\u00a0<br/>data.<span class=\"me1\">sort_by</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>v<span class=\"sy0\">|</span> <span class=\"sy0\">-</span>v<span class=\"br0\">{</span>:count<span class=\"br0\">}</span> <span class=\"br0\">}</span>.<span class=\"me1\">first</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>entry<span class=\"sy0\">|</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>entry<span class=\"br0\">{</span>:type<span class=\"br0\">}</span> == <span class=\"re3\">:func</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        say <span class=\"br0\">(</span><span class=\"st0\">\"Function `#{entry{:name}}` (declared at line\"</span>,<br/>             <span class=\"st0\">\" #{entry{:line}}) is used #{entry{:count}} times\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 28, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.6</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> examine <span class=\"br0\">{</span><span class=\"kw3\">filename</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">global</span> cmds<br/>    <span class=\"kw1\">set</span> RE <span class=\"st0\">\"(?:^|<span class=\"es0\">\\[</span><span class=\"es0\">\\[</span><span class=\"es0\">\\{</span><span class=\"es0\">\\]</span>)<span class=\"es0\">\\[</span><span class=\"es0\">\\\\</span>w:.<span class=\"es0\">\\]</span>+\"</span><br/>    <span class=\"kw1\">set</span> f <span class=\"br0\">[</span><span class=\"kw2\">open</span> <span class=\"re0\">$filename</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">gets</span> <span class=\"re0\">$f</span> line<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> line <span class=\"br0\">[</span><span class=\"kw2\">string</span> trim <span class=\"re0\">$line</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$line</span> eq <span class=\"st0\">\"\"</span> || <span class=\"br0\">[</span><span class=\"kw2\">string</span> match <span class=\"st0\">\"#*\"</span> <span class=\"re0\">$line</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">continue</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">foreach</span> cmd <span class=\"br0\">[</span><span class=\"kw2\">regexp</span> -all -inline <span class=\"re0\">$RE</span> <span class=\"re0\">$line</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">incr</span> cmds<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> trim <span class=\"re0\">$cmd</span> <span class=\"st0\">\"<span class=\"es0\">\\{</span><span class=\"es0\">\\[</span>\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">close</span> <span class=\"re0\">$f</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Parse each file on the command line</span><br/><span class=\"kw1\">foreach</span> <span class=\"kw3\">filename</span> <span class=\"kw2\"><span class=\"re0\">$argv</span></span> <span class=\"br0\">{</span><br/>    examine <span class=\"re0\">$filename</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\"># Get the command list in order of frequency</span><br/><span class=\"kw1\">set</span> cmdinfo <span class=\"br0\">[</span><span class=\"kw2\">lsort</span> -stride <span class=\"nu0\">2</span> -index <span class=\"nu0\">1</span> -integer -decreasing <span class=\"br0\">[</span>array get cmds<span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"co1\"># Print the top 10 (two list items per entry, so 0-19, not 0-9)</span><br/><span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>cmd count<span class=\"br0\">}</span> <span class=\"br0\">[</span><span class=\"kw2\">lrange</span> <span class=\"re0\">$cmdinfo</span> <span class=\"nu0\">0</span> <span class=\"nu0\">19</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"%-20s%d\"</span> <span class=\"re0\">$cmd</span> <span class=\"re0\">$count</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}]}