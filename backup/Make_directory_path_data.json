{"task": "Make_directory_path", "blocks": [{"lang": "Aime", "loc": 21, "block": "<pre class=\"text highlighted_source\">void<br/>mkdirp(text path)<br/>{<br/>    list l;<br/>    text p, s;<br/>\u00a0<br/>    file().b_affix(path).news(l, 0, 0, \"/\");<br/>\u00a0<br/>    for (, s in l) {<br/>        p = p + s + \"/\";<br/>        trap_q(mkdir, p, 00755);<br/>    }<br/>}<br/>\u00a0<br/>integer<br/>main(void)<br/>{<br/>    mkdirp(\"./path/to/dir\");<br/>\u00a0<br/>    0;<br/>}</pre>"}, {"lang": "AppleScript", "loc": 58, "block": "<pre class=\"applescript highlighted_source\">use framework <span class=\"st0\">\"Foundation\"</span><br/>use scripting additions<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- createOrFindDirectoryMay\u00a0:: Bool -&gt; FilePath -&gt; Maybe IO ()</span><br/><span class=\"kw3\">on</span> createOrFindDirectoryMay<span class=\"br0\">(</span>fp<span class=\"br0\">)</span><br/>    createDirectoryIfMissingMay<span class=\"br0\">(</span><span class=\"kw1\">true</span>, fp<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> createOrFindDirectoryMay<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- createDirectoryIfMissingMay\u00a0:: Bool -&gt; FilePath -&gt; Maybe IO ()</span><br/><span class=\"kw3\">on</span> createDirectoryIfMissingMay<span class=\"br0\">(</span>blnParents, fp<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> doesPathExist<span class=\"br0\">(</span>fp<span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>        nothing<span class=\"br0\">(</span><span class=\"st0\">\"Directory already exists: \"</span> <span class=\"sy0\">&amp;</span> fp<span class=\"br0\">)</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> e <span class=\"kw3\">to</span> reference<br/>        <span class=\"kw3\">set</span> ca <span class=\"kw3\">to</span> current <span class=\"kw1\">application</span><br/>        <span class=\"kw3\">set</span> oPath <span class=\"kw3\">to</span> <span class=\"br0\">(</span>ca<span class=\"co2\">'</span>s NSString<span class=\"co2\">'</span>s stringWithString:<span class=\"br0\">(</span>fp<span class=\"br0\">)</span><span class=\"br0\">)</span>'s \u00ac<br/>            stringByStandardizingPath<br/>        <span class=\"kw3\">set</span> <span class=\"br0\">{</span>bool, nse<span class=\"br0\">}</span> <span class=\"kw3\">to</span> ca<span class=\"co2\">'</span>s NSFileManager<span class=\"co2\">'</span>s \u00ac<br/>            defaultManager<span class=\"co2\">'</span>s createDirectoryAtPath:<span class=\"br0\">(</span>oPath<span class=\"br0\">)</span> \u00ac<br/>            withIntermediateDirectories:<span class=\"br0\">(</span>blnParents<span class=\"br0\">)</span> \u00ac<br/>            attributes:<span class=\"br0\">(</span><span class=\"kw1\">missing value</span><span class=\"br0\">)</span> |<span class=\"kw3\">error</span>|:<span class=\"br0\">(</span>e<span class=\"br0\">)</span><br/>        <span class=\"kw3\">if</span> bool <span class=\"kw3\">then</span><br/>            just<span class=\"br0\">(</span>fp<span class=\"br0\">)</span><br/>        <span class=\"kw3\">else</span><br/>            nothing<span class=\"br0\">(</span><span class=\"br0\">(</span>localizedDescription <span class=\"kw3\">of</span> nse<span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> createDirectoryIfMissingMay<br/>\u00a0<br/><span class=\"co1\">-- TEST ----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>    createOrFindDirectoryMay<span class=\"br0\">(</span><span class=\"st0\">\"~/Desktop/Notes/today\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ---------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- doesPathExist\u00a0:: FilePath -&gt; IO Bool</span><br/><span class=\"kw3\">on</span> doesPathExist<span class=\"br0\">(</span>strPath<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> ca <span class=\"kw3\">to</span> current <span class=\"kw1\">application</span><br/>    ca<span class=\"co2\">'</span>s NSFileManager<span class=\"co2\">'</span>s defaultManager<span class=\"co2\">'</span>s \u00ac<br/>        fileExistsAtPath:<span class=\"br0\">(</span><span class=\"br0\">(</span>ca<span class=\"co2\">'</span>s NSString<span class=\"co2\">'</span>s \u00ac<br/>            stringWithString:strPath<span class=\"br0\">)</span>'s \u00ac<br/>            stringByStandardizingPath<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> doesPathExist<br/>\u00a0<br/><span class=\"co1\">-- just\u00a0:: a -&gt; Just a</span><br/><span class=\"kw3\">on</span> just<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span>nothing:<span class=\"kw1\">false</span>, just:x<span class=\"br0\">}</span><br/><span class=\"kw3\">end</span> just<br/>\u00a0<br/><span class=\"co1\">-- nothing\u00a0:: () -&gt; Nothing</span><br/><span class=\"kw3\">on</span> nothing<span class=\"br0\">(</span>msg<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span>nothing:<span class=\"kw1\">true</span>, msg:msg<span class=\"br0\">}</span><br/><span class=\"kw3\">end</span> nothing</pre>"}, {"lang": "AWK", "loc": 16, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f MAKE_DIRECTORY_PATH.AWK path ...</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;=</span>ARGC<span class=\"sy3\">-</span><span class=\"nu0\">1</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      path = <span class=\"kw3\">ARGV</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>      msg = <span class=\"br0\">(</span>make_dir_path<span class=\"br0\">(</span>path<span class=\"br0\">)</span> <span class=\"sy2\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy5\">?</span> <span class=\"st0\">\"created\"</span> <span class=\"sy5\">:</span> <span class=\"st0\">\"exists\"</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"'%s'\u00a0%s<span class=\"es0\">\\n</span>\"</span>,path,msg<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> make_dir_path<span class=\"br0\">(</span>path,  cmd<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/><span class=\"co1\">#   cmd = sprintf(\"mkdir -p '%s'\",path) # Unix</span><br/>    cmd = <span class=\"kw4\">sprintf</span><span class=\"br0\">(</span><span class=\"st0\">\"MKDIR <span class=\"es0\">\\\"</span>%s<span class=\"es0\">\\\"</span> 2&gt;NUL\"</span>,path<span class=\"br0\">)</span> <span class=\"co1\"># MS-Windows</span><br/>    <span class=\"kw6\">return</span> <span class=\"kw5\">system</span><span class=\"br0\">(</span>cmd<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C", "loc": 32, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;libgen.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/><span class=\"co2\">#include &lt;sys/stat.h&gt;</span><br/><span class=\"co2\">#include &lt;sys/types.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">**</span>argv<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>str<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>s<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">struct</span> stat statBuf<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>argc <span class=\"sy0\">!=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a> <span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span> <span class=\"st0\">\"usage:\u00a0%s &lt;path&gt;<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> basename <span class=\"br0\">(</span>argv<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    s <span class=\"sy0\">=</span> argv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>str <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strtok.html\"><span class=\"kw3\">strtok</span></a> <span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <span class=\"st0\">\"/\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> NULL<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>str <span class=\"sy0\">!=</span> s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            str<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'/'</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>stat <span class=\"br0\">(</span>argv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>statBuf<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            mkdir <span class=\"br0\">(</span>argv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span> S_ISDIR <span class=\"br0\">(</span>statBuf.<span class=\"me1\">st_mode</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a> <span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span> <span class=\"st0\">\"couldn't create directory\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> argv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        s <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 28, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;filesystem&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"kw2\">namespace</span> fs <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">experimental</span><span class=\"sy4\">::</span><span class=\"me2\">filesystem</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>argc <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\tstd<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"usage: mkdir &lt;path&gt;<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tfs<span class=\"sy4\">::</span><span class=\"me2\">path</span> pathToCreate<span class=\"br0\">(</span>argv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>fs<span class=\"sy4\">::</span><span class=\"me2\">exists</span><span class=\"br0\">(</span>pathToCreate<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>fs<span class=\"sy4\">::</span><span class=\"me2\">create_directories</span><span class=\"br0\">(</span>pathToCreate<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">else</span><br/>\t<span class=\"br0\">{</span><br/>\t\tstd<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"couldn't create directory: \"</span> <span class=\"sy1\">&lt;&lt;</span> pathToCreate.<span class=\"me1\">string</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 1, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw5\">System.<span class=\"me1\">IO</span></span><span class=\"sy0\">.</span><span class=\"me1\">Directory</span><span class=\"sy0\">.</span><span class=\"me1\">CreateDirectory</span><span class=\"br0\">(</span>path<span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 3, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>ensure-directories-exist <span class=\"st0\">\"your/path/name\"</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 5, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> mkdirp <span class=\"br0\">[</span>path<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>dir <span class=\"br0\">(</span>java<span class=\"sy0\">.</span>io<span class=\"sy0\">.</span>File<span class=\"sy0\">.</span> path<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">.</span>exists dir<span class=\"br0\">)</span><br/>      true<br/>      <span class=\"br0\">(</span><span class=\"sy0\">.</span>mkdirs dir<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 29, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    makeDir<span class=\"br0\">(</span><span class=\"st0\">\"parent/test\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">/// Manual implementation of what mkdirRecurse in std.file does.</span><br/><span class=\"kw4\">void</span> makeDir<span class=\"br0\">(</span><span class=\"kw4\">string</span> path<span class=\"br0\">)</span> <span class=\"kw2\">out</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">exception</span> <span class=\"sy0\">:</span> enforce<span class=\"sy0\">;</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">file</span> <span class=\"sy0\">:</span> exists<span class=\"sy0\">;</span><br/>    enforce<span class=\"br0\">(</span>path.<span class=\"me1\">exists</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Failed to create the requested directory.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">array</span> <span class=\"sy0\">:</span> array<span class=\"sy0\">;</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">file</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">path</span> <span class=\"sy0\">:</span> pathSplitter<span class=\"sy0\">,</span> chainPath<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> workdir <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>dir<span class=\"sy0\">;</span> path.<span class=\"me1\">pathSplitter</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        workdir <span class=\"sy0\">=</span> chainPath<span class=\"br0\">(</span>workdir<span class=\"sy0\">,</span> dir<span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>workdir.<span class=\"me1\">exists</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>workdir.<span class=\"me1\">isDir</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw2\">import</span> std.<span class=\"me1\">conv</span> <span class=\"sy0\">:</span> text<span class=\"sy0\">;</span><br/>                <span class=\"kw2\">throw</span> <span class=\"kw2\">new</span> FileException<span class=\"br0\">(</span>text<span class=\"br0\">(</span><span class=\"st0\">\"The file \"</span><span class=\"sy0\">,</span> workdir<span class=\"sy0\">,</span> <span class=\"st0\">\" in the path \"</span><span class=\"sy0\">,</span> path<span class=\"sy0\">,</span> <span class=\"st0\">\" is not a directory.\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            workdir.<span class=\"me1\">mkdir</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 1, "block": "<pre class=\"text highlighted_source\">File.mkdir_p(\"./path/to/dir\")</pre>"}, {"lang": "ERRE", "loc": 1, "block": "<pre class=\"text highlighted_source\">OS_MKDIR(\"C:\\EXAMPLES\\03192015\")</pre>"}, {"lang": "F#", "loc": 1, "block": "<pre>&gt; System.IO.Directory.CreateDirectory (System.IO.Directory.GetCurrentDirectory())\n;;\nval it\u00a0: System.IO.DirectoryInfo =\n  Temp {Attributes = Directory;\n        CreationTime = 2016-06-01 04:12:25;\n        CreationTimeUtc = 2016-06-01 02:12:25;\n        Exists = true;\n        Extension = \"\";\n        FullName = \"C:\\Users\\Kai\\AppData\\Local\\Temp\";\n        LastAccessTime = 2016-08-18 20:42:21;\n        LastAccessTimeUtc = 2016-08-18 18:42:21;\n        LastWriteTime = 2016-08-18 20:42:21;\n        LastWriteTimeUtc = 2016-08-18 18:42:21;\n        Name = \"Temp\";\n        Parent = Local;\n        Root = C:\\;}\n&gt; </pre>"}, {"lang": "Gambas", "loc": 5, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Form_Open<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> <a href=\"http://gambasdoc.org/help/lang/not\"><span class=\"kw5\">Not</span></a> <a href=\"http://gambasdoc.org/help/lang/exist\"><span class=\"kw2\">Exist</span></a><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=user+site:http://gambasdoc.org/&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw6\">User</span></a>.<span class=\"me1\">home</span> <span class=\"sy0\">&amp;/</span> <span class=\"st0\">\"TestFolder\"</span><span class=\"br0\">)</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> <a href=\"http://gambasdoc.org/help/lang/mkdir\"><span class=\"kw1\">Mkdir</span></a> <a href=\"http://www.google.com/search?hl=en&amp;q=user+site:http://gambasdoc.org/&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw6\">User</span></a>.<span class=\"me1\">Home</span> <span class=\"sy0\">&amp;/</span> <span class=\"st0\">\"TestFolder\"</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "Go", "loc": 1, "block": "<pre class=\"go highlighted_source\">\tos<span class=\"sy3\">.</span><span class=\"me1\">MkdirAll</span><span class=\"sy1\">(</span><span class=\"st0\">\"/tmp/some/path/to/dir\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">0770</span><span class=\"sy1\">)</span></pre>"}, {"lang": "Haskell", "loc": 9, "block": "<pre class=\"haskell highlighted_source\">\u00a0<br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Directory <span class=\"br0\">(</span>createDirectory<span class=\"sy0\">,</span> setCurrentDirectory<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List<span class=\"sy0\">.</span>Split  <span class=\"br0\">(</span>splitOn<span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">let</span> path <span class=\"sy0\">=</span> splitOn <span class=\"st0\">\"/\"</span> <span class=\"st0\">\"path/to/dir\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <span class=\"br0\">(</span>\\x <span class=\"sy0\">-&gt;</span> createDirectory x <span class=\"sy0\">&gt;&gt;</span> setCurrentDirectory x<span class=\"br0\">)</span> path<br/>\u00a0</pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">require <span class=\"st_h\">'general/dirutils'</span><br/>pathcreate <span class=\"st_h\">'/tmp/some/path/to/dir'</span></pre>"}, {"lang": "Java", "loc": 14, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.io.File</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">interface</span> Test <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">try</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afile+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">File</span></a> f <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afile+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">File</span></a><span class=\"br0\">(</span><span class=\"st0\">\"C:/parent/test\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>f.<span class=\"me1\">mkdirs</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"path successfully created\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Exception</span></a> e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            e.<span class=\"me1\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 27, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">var</span> path <span class=\"sy0\">=</span> require<span class=\"br0\">(</span><span class=\"st0\">'path'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">var</span> fs <span class=\"sy0\">=</span> require<span class=\"br0\">(</span><span class=\"st0\">'fs'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> mkdirp <span class=\"br0\">(</span>p<span class=\"sy0\">,</span> cb<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    cb <span class=\"sy0\">=</span> cb <span class=\"sy0\">||</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    p <span class=\"sy0\">=</span> path.<span class=\"me1\">resolve</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    fs.<span class=\"me1\">mkdir</span><span class=\"br0\">(</span>p<span class=\"sy0\">,</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>er<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>er<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> cb<span class=\"br0\">(</span><span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>er.<span class=\"me1\">code</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">'ENOENT'</span><span class=\"sy0\">:</span><br/>                <span class=\"co1\">// The directory doesn't exist. Make its parent and try again.</span><br/>                mkdirp<span class=\"br0\">(</span>path.<span class=\"me1\">dirname</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>er<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>er<span class=\"br0\">)</span> cb<span class=\"br0\">(</span>er<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">else</span> mkdirp<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> cb<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"co1\">// In the case of any other error, something is borked.</span><br/>            <span class=\"kw1\">default</span><span class=\"sy0\">:</span><br/>                cb<span class=\"br0\">(</span>er<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 1, "block": "<pre class=\"text highlighted_source\">mkpath(\"/tmp/unusefuldir/helloworld.d/test123\")</pre>"}, {"lang": "Kotlin", "loc": 10, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"me1\">File</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// using built-in mkdirs() method</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> success <span class=\"sy0\">=</span> File<span class=\"br0\">(</span><span class=\"st0\">\"./path/to/dir\"</span><span class=\"br0\">)</span>.<span class=\"me1\">mkdirs</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>success<span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"st0\">\"Directory path was created successfully\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a>         println<span class=\"br0\">(</span><span class=\"st0\">\"Failed to create directory path\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 11, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw3\">require</span><span class=\"br0\">(</span><span class=\"st0\">\"lfs\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">function</span> mkdir <span class=\"br0\">(</span>path<span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> sep<span class=\"sy0\">,</span> pStr <span class=\"sy0\">=</span> package<span class=\"sy0\">.</span>config<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><br/>  <span class=\"kw1\">for</span> dir <span class=\"kw2\">in</span> path<span class=\"sy0\">:</span>gmatch<span class=\"br0\">(</span><span class=\"st0\">\"[^\"</span> <span class=\"sy0\">..</span> sep <span class=\"sy0\">..</span> <span class=\"st0\">\"]+\"</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    pStr <span class=\"sy0\">=</span> pStr <span class=\"sy0\">..</span> dir <span class=\"sy0\">..</span> sep<br/>    lfs<span class=\"sy0\">.</span>mkdir<span class=\"br0\">(</span>pStr<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>mkdir<span class=\"br0\">(</span><span class=\"st0\">\"C:<span class=\"es1\">\\\\</span>path<span class=\"es1\">\\\\</span>to<span class=\"es1\">\\\\</span>dir\"</span><span class=\"br0\">)</span> <span class=\"co1\">-- Quoting backslashes requires escape sequence</span></pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\">mkdirp[path_]\u00a0:= Quiet[CreateDirectory[path,{CreateIntermediateDirectories-&gt;True}],{CreateDirectory::filex}]</pre>"}, {"lang": "NewLISP", "loc": 18, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#define\"><span class=\"kw1\">define</span></a> <span class=\"br0\">(</span>mkdir<span class=\"sy1\">-</span>p mypath<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy1\">=</span> <span class=\"st0\">\"/\"</span> <span class=\"br0\">(</span>mypath <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; Abs or relative path?</span><br/>        <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#setf\"><span class=\"kw1\">setf</span></a> <span class=\"sy1\">/</span>? <span class=\"st0\">\"/\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#setf\"><span class=\"kw1\">setf</span></a> <span class=\"sy1\">/</span>? <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#setf\"><span class=\"kw1\">setf</span></a> path<span class=\"sy1\">-</span>components <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#clean\"><span class=\"kw1\">clean</span></a> <a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#empty%3F\"><span class=\"kw1\">empty?</span></a> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#parse\"><span class=\"kw1\">parse</span></a> mypath <span class=\"st0\">\"/\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; Split path and remove empty elements</span><br/>    <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#for\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>x <span class=\"nu0\">0</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#length\"><span class=\"kw1\">length</span></a> path<span class=\"sy1\">-</span>components<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#setf\"><span class=\"kw1\">setf</span></a> walking<span class=\"sy1\">-</span>path <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#string\"><span class=\"kw1\">string</span></a> <span class=\"sy1\">/</span>? <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#join\"><span class=\"kw1\">join</span></a> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#slice\"><span class=\"kw1\">slice</span></a> path<span class=\"sy1\">-</span>components <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"sy1\">+</span> <span class=\"nu0\">1</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">\"/\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#make-dir\"><span class=\"kw1\">make-dir</span></a> walking<span class=\"sy1\">-</span>path<span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Using user-made function...</span><br/><span class=\"br0\">(</span>mkdir<span class=\"sy1\">-</span>p <span class=\"st0\">\"/tmp/rosetta/test1\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; ... or calling OS command directly.</span><br/><span class=\"br0\">(</span><span class=\"sy1\">!</span> <span class=\"st0\">\"mkdir -p /tmp/rosetta/test2\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#exit\"><span class=\"kw1\">exit</span></a><span class=\"br0\">)</span></pre>"}, {"lang": "Objeck", "loc": 5, "block": "<pre class=\"objeck highlighted_source\"><span class=\"kw1\">class</span> Program <span class=\"br0\">{</span><br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    System.IO.File.Directory<span class=\"sy0\">-&gt;</span><span class=\"me1\">CreatePath</span><span class=\"br0\">(</span><span class=\"st0\">\"your/path/name\"</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl", "loc": 3, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> File<span class=\"sy0\">::</span><span class=\"me2\">Path</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>make_path<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>make_path<span class=\"br0\">(</span><span class=\"st_h\">'path/to/dir'</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl 6", "loc": 1, "block": "<pre class=\"perl6 highlighted_source\">mkdir <span class=\"st_h\">'path/to/dir'</span></pre>"}, {"lang": "Phix", "loc": 3, "block": "<pre class=\"text highlighted_source\">if not create_directory(\"myapp/interface/letters\") then<br/>    crash(\"Filesystem problem - could not create the new folder\")<br/>end if</pre>"}, {"lang": "PicoLisp", "loc": 1, "block": "<pre class=\"text highlighted_source\">(call \"mkdir\" \"-p\" \"path/to/dir\")</pre>"}, {"lang": "PowerShell", "loc": 3, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw1\">New-Item</span> <span class=\"kw5\">-Path</span> <span class=\"st0\">\".\\path\\to\\dir\"</span> <span class=\"kw5\">-ItemType</span> Directory <span class=\"kw5\">-ErrorAction</span> SilentlyContinue<br/>\u00a0</pre>"}, {"lang": "Python", "loc": 25, "block": "<pre class=\"python highlighted_source\">\u00a0<br/><span class=\"kw1\">from</span> <span class=\"kw3\">errno</span> <span class=\"kw1\">import</span> EEXIST<br/><span class=\"kw1\">from</span> <span class=\"kw3\">os</span> <span class=\"kw1\">import</span> mkdir<span class=\"sy0\">,</span> curdir<br/><span class=\"kw1\">from</span> <span class=\"kw3\">os</span>.<span class=\"me1\">path</span> <span class=\"kw1\">import</span> split<span class=\"sy0\">,</span> exists<br/>\u00a0<br/><span class=\"kw1\">def</span> mkdirp<span class=\"br0\">(</span>path<span class=\"sy0\">,</span> mode<span class=\"sy0\">=</span><span class=\"nu0\">0777</span><span class=\"br0\">)</span>:<br/>    head<span class=\"sy0\">,</span> tail <span class=\"sy0\">=</span> split<span class=\"br0\">(</span>path<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> tail:<br/>        head<span class=\"sy0\">,</span> tail <span class=\"sy0\">=</span> split<span class=\"br0\">(</span>head<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> head <span class=\"kw1\">and</span> tail <span class=\"kw1\">and</span> <span class=\"kw1\">not</span> exists<span class=\"br0\">(</span>head<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">try</span>:<br/>            mkdirp<span class=\"br0\">(</span>head<span class=\"sy0\">,</span> mode<span class=\"br0\">)</span><br/>        <span class=\"kw1\">except</span> <span class=\"kw2\">OSError</span> <span class=\"kw1\">as</span> e:<br/>            <span class=\"co1\"># be happy if someone already created the path</span><br/>            <span class=\"kw1\">if</span> e.<span class=\"kw3\">errno</span> <span class=\"sy0\">!=</span> EEXIST:<br/>                <span class=\"kw1\">raise</span><br/>        <span class=\"kw1\">if</span> tail <span class=\"sy0\">==</span> curdir:  <span class=\"co1\"># xxx/newdir/. exists if xxx/newdir exists</span><br/>            <span class=\"kw1\">return</span><br/>    <span class=\"kw1\">try</span>:<br/>        mkdir<span class=\"br0\">(</span>path<span class=\"sy0\">,</span> mode<span class=\"br0\">)</span><br/>    <span class=\"kw1\">except</span> <span class=\"kw2\">OSError</span> <span class=\"kw1\">as</span> e:<br/>        <span class=\"co1\"># be happy if someone already created the path</span><br/>        <span class=\"kw1\">if</span> e.<span class=\"kw3\">errno</span> <span class=\"sy0\">!=</span> EEXIST:<br/>            <span class=\"kw1\">raise</span><br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 22, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(define path-str \"/tmp/woo/yay\")<br/>(define path/..-str \"/tmp/woo\")<br/>\u00a0<br/>;; clean up from a previous run<br/>(when (directory-exists? path-str)<br/>  (delete-directory path-str)<br/>  (delete-directory path/..-str))<br/>;; delete-directory/files could also be used -- but that requires goggles and rubber<br/>;; gloves to handle safely!<br/>\u00a0<br/>(define (report-path-exists)<br/>  (printf \"~s exists (as a directory?):~a~%~s exists (as a directory?):~a~%~%\"<br/>          path/..-str (directory-exists? path/..-str)<br/>          path-str (directory-exists? path-str)))<br/>\u00a0<br/>(report-path-exists)<br/>\u00a0<br/>;; Really ... this is the only bit that matters!<br/>(make-directory* path-str)<br/>\u00a0<br/>(report-path-exists)</pre>"}, {"lang": "REXX", "loc": 7, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  creates a  directory (folder)  and all its  parent paths  as necessary. */</span><br/><span class=\"kw1\">trace</span> <span class=\"kw2\">off</span>                                              <span class=\"coMULTI\">/*suppress possible warning msgs.*/</span><br/>\u00a0<br/>dPath = <span class=\"st0\">'path\\to\\dir'</span>                                  <span class=\"coMULTI\">/*define directory (folder) path.*/</span><br/>\u00a0<br/><span class=\"st0\">'MKDIR'</span>  dPath  <span class=\"st0\">\"2&gt;nul\"</span>                                <span class=\"coMULTI\">/*alias could be used:  MD dPath */</span><br/>                                                       <span class=\"coMULTI\">/*stick a fork in it, we're done.*/</span></pre>"}, {"lang": "Ring", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>System(\"mkdir C:\\Ring\\docs\")<br/>isdir(\"C:\\Ring\\docs\")<br/>\u00a0<br/>see isdir(\"C:\\Ring\\docs\") + nl<br/>func isdir cDir<br/>     try<br/>        dir(cDir)<br/>        return true<br/>     catch<br/>        return false<br/>     done<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 2, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'fileutils'</span><br/><span class=\"kw4\">FileUtils</span>.<span class=\"me1\">mkdir_p</span><span class=\"br0\">(</span><span class=\"st0\">\"path/to/dir\"</span><span class=\"br0\">)</span> </pre>"}, {"lang": "Run BASIC", "loc": 11, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>files #f, \"c:\\myDocs\"\t\t' check for directory<br/>if #f hasanswer() then<br/>   if #f isDir() then\t\t' is it a file or a directory<br/>    print \"A directory exist\"<br/>    else<br/>    print \"A file exist\"<br/>   end if<br/> else<br/>  shell$(\"mkdir c:\\myDocs\"    ' if not exist make a directory<br/>end if</pre>"}, {"lang": "Rust", "loc": 5, "block": "<pre class=\"text highlighted_source\">use std::fs;<br/>\u00a0<br/>fn main() {<br/>    fs::create_dir_all(\"./path/to/dir\").expect(\"An Error Occured!\")<br/>}</pre>"}, {"lang": "Scala", "loc": 1, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> java.<span class=\"me1\">io</span>.<span class=\"me1\">File</span><span class=\"br0\">(</span><span class=\"st0\">\"/path/to/dir\"</span><span class=\"br0\">)</span>.<span class=\"me1\">mkdirs</span></pre>"}, {"lang": "Seed7", "loc": 7, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"cli_cmds.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    doMkdirCmd(argv(PROGRAM), TRUE);<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 1, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw4\">Dir</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"kw4\">Dir</span>.<span class=\"me1\">cwd</span>, <span class=\"st0\">\"path\"</span>, <span class=\"st0\">\"to\"</span>, <span class=\"st0\">\"dir\"</span><span class=\"br0\">)</span>.<span class=\"me1\">make_path</span>;   <span class=\"co1\"># works cross-platform</span></pre>"}, {"lang": "Tcl", "loc": 1, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">file</span> mkdir ./path/to/dir</pre>"}, {"lang": "UNIX Shell", "loc": 1, "block": "<pre class=\"bash highlighted_source\"><span class=\"kw1\">function</span> mkdirp<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw2\">mkdir</span> <span class=\"re5\">-p</span> <span class=\"st0\">\"$1\"</span>; <span class=\"br0\">}</span></pre>"}, {"lang": "zkl", "loc": 1, "block": "<pre class=\"text highlighted_source\">System.cmd(\"mkdir -p ../foo/bar\")</pre>"}]}