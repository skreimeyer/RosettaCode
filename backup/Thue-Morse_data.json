{"task": "Thue-Morse", "blocks": [{"lang": "Ada", "loc": 18, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Thue_Morse <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">function</span> Replace<span class=\"br0\">(</span>S: String<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String <span class=\"kw1\">is</span><br/>      <span class=\"co1\">-- replace every \"0\" by \"01\" and every \"1\" by \"10\"</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> S'Length = <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"st0\">\"\"</span> <br/>      <span class=\"kw1\">else</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> S<span class=\"br0\">(</span>S'First<span class=\"br0\">)</span> = '<span class=\"nu0\">0</span>' <span class=\"kw1\">then</span> <span class=\"st0\">\"01\"</span> <span class=\"kw1\">else</span> <span class=\"st0\">\"10\"</span><span class=\"br0\">)</span> &amp; <br/>\tReplace<span class=\"br0\">(</span>S<span class=\"br0\">(</span>S'First+<span class=\"nu0\">1</span> .. <span class=\"me1\">S</span>'Last<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Sequence <span class=\"br0\">(</span>N: Natural<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String <span class=\"kw1\">is</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> N=<span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"st0\">\"0\"</span> <span class=\"kw1\">else</span> Replace<span class=\"br0\">(</span>Sequence<span class=\"br0\">(</span>N-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;   <br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"nu0\">0</span> .. <span class=\"nu0\">6</span> <span class=\"kw1\">loop</span><br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span>Integer'Image<span class=\"br0\">(</span>I<span class=\"br0\">)</span> &amp; <span class=\"st0\">\": \"</span> &amp; Sequence<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Thue_Morse;</pre>"}, {"lang": "ALGOL 68", "loc": 16, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># \"flips\" the \"bits\" in a string (assumed to contain only \"0\" and \"1\" characters) #</span><br/><span class=\"kw4\">OP</span>  FLIP <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> s <span class=\"br0\">)</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span><br/>    <span class=\"kw2\">BEGIN</span><br/>        <span class=\"kw3\">STRING</span> result <span class=\"sy1\">:=</span> s<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">FOR</span> char pos <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> result <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> result <span class=\"kw2\">DO</span><br/>            result<span class=\"br0\">[</span> char pos <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"kw2\">IF</span> result<span class=\"br0\">[</span> char pos <span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"0\"</span> <span class=\"kw2\">THEN</span> <span class=\"st0\">\"1\"</span> <span class=\"kw2\">ELSE</span> <span class=\"st0\">\"0\"</span> <span class=\"kw2\">FI</span><br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        result<br/>    <span class=\"kw2\">END</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># FLIP #</span><br/>\u00a0<br/><span class=\"coMULTI\"># print the first few members of the Thue-Morse sequence #</span><br/><span class=\"kw3\">STRING</span> tm <span class=\"sy1\">:=</span> <span class=\"st0\">\"0\"</span><span class=\"sy1\">;</span><br/><span class=\"kw2\">TO</span> 7 <span class=\"kw2\">DO</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> tm<span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    tm <span class=\"sy1\">+:=</span> FLIP tm<br/><span class=\"kw2\">OD</span></pre>"}, {"lang": "AppleScript", "loc": 89, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- THUE MORSE ----------------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- thueMorse\u00a0:: Int -&gt; String</span><br/><span class=\"kw3\">on</span> thueMorse<span class=\"br0\">(</span>nCycles<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> concatBinaryInverse<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>            <span class=\"kw3\">script</span> binaryInverse<br/>                <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>                    <span class=\"nu0\">1</span> <span class=\"sy0\">-</span> x<br/>                <span class=\"kw3\">end</span> |\u03bb|<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>            xs <span class=\"sy0\">&amp;</span> map<span class=\"br0\">(</span>binaryInverse, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    intercalate<span class=\"br0\">(</span><span class=\"st0\">\"\"</span>, \u00ac<br/>        foldl<span class=\"br0\">(</span>concatBinaryInverse, <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, enumFromTo<span class=\"br0\">(</span><span class=\"nu0\">1</span>, nCycles<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> thueMorse<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- TEST ----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>    thueMorse<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">--&gt; 0110100110010110100101100110100110010110011010010110100110010110</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC LIBRARY FUNCTIONS</span><br/>\u00a0<br/><span class=\"co1\">-- enumFromTo\u00a0:: Int -&gt; Int -&gt; [Int]</span><br/><span class=\"kw3\">on</span> enumFromTo<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> m &gt; n <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> m <span class=\"kw3\">to</span> n <span class=\"kw1\">by</span> d<br/>        <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> i<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> lst<br/><span class=\"kw3\">end</span> enumFromTo<br/>\u00a0<br/><span class=\"co1\">-- foldl\u00a0:: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/><span class=\"kw3\">on</span> foldl<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>v, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> foldl<br/>\u00a0<br/><span class=\"co1\">-- intercalate\u00a0:: Text -&gt; [Text] -&gt; Text</span><br/><span class=\"kw3\">on</span> intercalate<span class=\"br0\">(</span>strText, lstText<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>dlm, <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span><span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span>, strText<span class=\"br0\">}</span><br/>    <span class=\"kw3\">set</span> strJoined <span class=\"kw3\">to</span> lstText <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/>    <span class=\"kw3\">set</span> <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span> <span class=\"kw3\">to</span> dlm<br/>    <span class=\"kw3\">return</span> strJoined<br/><span class=\"kw3\">end</span> intercalate<br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn</pre>"}, {"lang": "AWK", "loc": 2, "block": "<pre class=\"awk highlighted_source\"><span class=\"kw2\">BEGIN</span><span class=\"br0\">{</span><span class=\"kw5\">print</span> x=<span class=\"st0\">\"0\"</span><span class=\"br0\">}</span><br/><span class=\"br0\">{</span><span class=\"kw4\">gsub</span><span class=\"br0\">(</span><span class=\"sy3\">/</span>.<span class=\"sy3\">/</span>,<span class=\"st0\">\" &amp;\"</span>,x<span class=\"br0\">)</span>;<span class=\"kw4\">gsub</span><span class=\"br0\">(</span><span class=\"sy3\">/</span> <span class=\"nu0\">0</span><span class=\"sy3\">/</span>,<span class=\"st0\">\"01\"</span>,x<span class=\"br0\">)</span>;<span class=\"kw4\">gsub</span><span class=\"br0\">(</span><span class=\"sy3\">/</span> <span class=\"nu0\">1</span><span class=\"sy3\">/</span>,<span class=\"st0\">\"10\"</span>,x<span class=\"br0\">)</span>;<span class=\"kw5\">print</span> x<span class=\"br0\">}</span></pre>"}, {"lang": "BASIC", "loc": 12, "block": "<pre class=\"text highlighted_source\"> 10 LET T$=\"0\"<br/> 20 PRINT \"T0=\";T$<br/> 30 FOR I=1 TO 7<br/> 40 PRINT \"T\";I;\"=\";<br/> 50 FOR J=1 TO LEN T$<br/> 60 IF T$(J)=\"0\" THEN GOTO 90<br/> 70 LET T$=T$+\"0\"<br/> 80 GOTO 100<br/> 90 LET T$=T$+\"1\"<br/>100 NEXT J<br/>110 PRINT T$<br/>120 NEXT I</pre>"}, {"lang": "BBC BASIC", "loc": 16, "block": "<pre class=\"text highlighted_source\">REM &gt;thuemorse<br/>tm$ = \"0\"<br/>PRINT tm$<br/>FOR i% = 1 TO 8<br/>  tm$ = FN_thue_morse(tm$)<br/>  PRINT tm$<br/>NEXT<br/>END<br/>:<br/>DEF FN_thue_morse(previous$)<br/>LOCAL i%, tm$<br/>tm$ = \"\"<br/>FOR i% = 1 TO LEN previous$<br/>  IF MID$(previous$, i%, 1) = \"1\" THEN tm$ += \"0\" ELSE tm$ += \"1\"<br/>NEXT<br/>= previous$ + tm$</pre>"}, {"lang": "Befunge", "loc": 2, "block": "<pre class=\"text highlighted_source\">:0\\:!v!:\\+g20\\&lt;&gt;*:*-!#@_<br/>86%2$_:2%02p2/^^82:+1,+*</pre>"}, {"lang": "C", "loc": 19, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">char</span> sequence<span class=\"br0\">[</span><span class=\"nu0\">256</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"0\"</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span> inverse<span class=\"br0\">[</span><span class=\"nu0\">256</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span> buffer<span class=\"br0\">[</span><span class=\"nu0\">256</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcpy.html\"><span class=\"kw3\">strcpy</span></a><span class=\"br0\">(</span>buffer<span class=\"sy0\">,</span> sequence<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcat.html\"><span class=\"kw3\">strcat</span></a><span class=\"br0\">(</span>sequence<span class=\"sy0\">,</span> inverse<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcat.html\"><span class=\"kw3\">strcat</span></a><span class=\"br0\">(</span>inverse<span class=\"sy0\">,</span> buffer<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/puts.html\"><span class=\"kw3\">puts</span></a><span class=\"br0\">(</span>sequence<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 19, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;iterator&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">bool</span><span class=\"sy1\">&gt;</span> t<span class=\"sy4\">;</span><br/>    t.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">size_t</span> len <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> t<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">size_t</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> len<span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>            t.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> t<span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy4\">?</span> <span class=\"nu0\">0</span> <span class=\"sy4\">:</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        std<span class=\"sy4\">::</span><span class=\"me2\">copy</span><span class=\"br0\">(</span> t.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, t.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">ostream_iterator</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">bool</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>        len <span class=\"sy1\">=</span> t.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">while</span><span class=\"br0\">(</span> len <span class=\"sy1\">&lt;</span> <span class=\"nu0\">60</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 27, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Text</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> ThueMorse<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Sequence<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Sequence<span class=\"br0\">(</span><span class=\"kw4\">int</span> steps<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> sb1 <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> StringBuilder<span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> sb2 <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> StringBuilder<span class=\"br0\">(</span><span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> steps<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">var</span> tmp <span class=\"sy0\">=</span> sb1<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                sb1<span class=\"sy0\">.</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>sb2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                sb2<span class=\"sy0\">.</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>tmp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>sb1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Common Lisp", "loc": 21, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> bit-<span class=\"kw1\">complement</span> <span class=\"br0\">(</span>bit-vector<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop with result <span class=\"sy0\">=</span> <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> bit-vector<span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"me1\">element-type</span> 'bit<span class=\"br0\">)</span><br/>        for b across bit-vector<br/>        for i from <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> result i<span class=\"br0\">)</span> <span class=\"br0\">(</span>- <span class=\"nu0\">1</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        finally <span class=\"br0\">(</span><span class=\"kw1\">return</span> result<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> next <span class=\"br0\">(</span>bit-vector<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>concatenate 'bit-vector bit-vector <span class=\"br0\">(</span>bit-<span class=\"kw1\">complement</span> bit-vector<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> print-bit-vector <span class=\"br0\">(</span>bit-vector<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop for b across bit-vector<br/>        <span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw1\">princ</span> b<span class=\"br0\">)</span><br/>        finally <span class=\"br0\">(</span>terpri<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> thue-morse <span class=\"br0\">(</span><span class=\"kw1\">max</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop repeat <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ <span class=\"kw1\">max</span><span class=\"br0\">)</span><br/>        for <span class=\"kw1\">value</span> <span class=\"sy0\">=</span> #*<span class=\"nu0\">0</span> then <span class=\"br0\">(</span>next <span class=\"kw1\">value</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">do</span> <span class=\"br0\">(</span>print-bit-vector <span class=\"kw1\">value</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>thue-morse <span class=\"nu0\">6</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 29, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> TM <span class=\"br0\">{</span><br/>    <span class=\"kw4\">private</span> <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span> sequence <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">'0'</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">private</span> <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span> inverse <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">'1'</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">private</span> <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span> buffer<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">enum</span> empty <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> front<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> sequence<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> popFront<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        buffer <span class=\"sy0\">=</span> sequence<span class=\"sy0\">;</span><br/>        sequence <span class=\"sy0\">~=</span> inverse<span class=\"sy0\">;</span><br/>        inverse <span class=\"sy0\">~=</span> buffer<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    TM sequence<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>step<span class=\"sy0\">;</span> sequence.<span class=\"me1\">take</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        writeln<span class=\"br0\">(</span>step<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 24, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>import system'text.<br/>\u00a0<br/>program =<br/>{<br/>    sequence(IntNumber steps)<br/>    [<br/>        var sb1\u00a0:= TextBuffer new(\"0\"). <br/>        var sb2\u00a0:= TextBuffer new(\"1\"). <br/>        0 till:steps do(:i)&lt;int&gt;<br/>        [<br/>            var tmp\u00a0:= sb1 literal.<br/>            sb1 write(sb2).<br/>            sb2 write(tmp).<br/>        ].<br/>        console printLine(sb1); readLine<br/>    ]<br/>\u00a0<br/>    // program entry<br/>    eval<br/>    [<br/>        $self sequence(6)<br/>    ]<br/>}.</pre>"}, {"lang": "Elixir", "loc": 9, "block": "<pre class=\"text highlighted_source\">Enum.reduce(0..6, '0', fn _,s -&gt;<br/>  IO.puts s<br/>  s ++ Enum.map(s, fn c -&gt; if c==?0, do:\u00a0?1, else:\u00a0?0 end)<br/>end)<br/>\u00a0<br/># or<br/>Stream.iterate('0', fn s -&gt; s ++ Enum.map(s, fn c -&gt; if c==?0, do:\u00a0?1, else:\u00a0?0 end) end)<br/>|&gt; Enum.take(7)<br/>|&gt; Enum.each(&amp;IO.puts/1)</pre>"}, {"lang": "Factor", "loc": 8, "block": "<pre class=\"text highlighted_source\">USING: io kernel math math.parser sequences\u00a0;<br/>\u00a0<br/>: thue-morse ( seq n -- seq' )<br/>    [ [ ] [ [ 1 bitxor ] map ] bi append ] times\u00a0;<br/>\u00a0<br/>: print-tm ( seq -- ) [ number&gt;string ] map \"\" join print\u00a0;<br/>\u00a0<br/>7 iota [ { 0 } swap thue-morse print-tm ] each</pre>"}, {"lang": "Fortran", "loc": 13, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> thue_morse<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>  <span class=\"kw3\">logical</span> <span class=\"sy0\">::</span> <span class=\"me2\">f</span><span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">false</span>.</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span><br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> f<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n &gt; <span class=\"kw4\">size</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">exit</span>  <br/>    f<span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>n<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"kw4\">not</span>.</span> f<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>n<span class=\"br0\">)</span><br/>    n <span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> thue_morse</pre>"}, {"lang": "Go", "loc": 32, "block": "<pre class=\"go highlighted_source\"><span class=\"co1\">// prints the first few members of the Thue-Morse sequence</span><br/>\u00a0<br/><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"bytes\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"co1\">// sets tmBuffer to the next member of the Thue-Morse sequence</span><br/><span class=\"co1\">// tmBuffer must contain a valid Thue-Morse sequence member before the call</span><br/><span class=\"kw4\">func</span> nextTMSequenceMember<span class=\"sy1\">(</span> tmBuffer <span class=\"sy3\">*</span> <a href=\"http://golang.org/search?q=bytes.Buffer\"><span class=\"kw5\">bytes.<span class=\"me1\">Buffer</span></span></a> <span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// \"flip\" the bytes, adding them to the buffer</span><br/>    <span class=\"kw1\">for</span> b<span class=\"sy1\">,</span> currLength<span class=\"sy1\">,</span> currBytes <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> tmBuffer<span class=\"sy3\">.</span>Len<span class=\"sy1\">(),</span> tmBuffer<span class=\"sy3\">.</span>Bytes<span class=\"sy1\">()</span> <span class=\"sy1\">;</span> b &lt; currLength<span class=\"sy1\">;</span> b <span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> currBytes<span class=\"sy1\">[</span> b <span class=\"sy1\">]</span> <span class=\"sy3\">==</span> <span class=\"st0\">'1'</span> <span class=\"sy1\">{</span><br/>            tmBuffer<span class=\"sy3\">.</span><span class=\"me1\">WriteByte</span><span class=\"sy1\">(</span> <span class=\"st0\">'0'</span> <span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>            tmBuffer<span class=\"sy3\">.</span>WriteByte<span class=\"sy1\">(</span> <span class=\"st0\">'1'</span> <span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> tmBuffer <a href=\"http://golang.org/search?q=bytes.Buffer\"><span class=\"kw5\">bytes.<span class=\"me1\">Buffer</span></span></a><br/>    <span class=\"co1\">// initial sequence member is \"0\"</span><br/>    tmBuffer<span class=\"sy3\">.</span><span class=\"me1\">WriteByte</span><span class=\"sy1\">(</span> <span class=\"st0\">'0'</span> <span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span> tmBuffer<span class=\"sy3\">.</span>String<span class=\"sy1\">()</span> <span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">7</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> <span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        nextTMSequenceMember<span class=\"sy1\">(</span> &amp; tmBuffer <span class=\"sy1\">)</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span> tmBuffer<span class=\"sy3\">.</span>String<span class=\"sy1\">()</span> <span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 3, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a><br/>\u00a0<br/>thueMorse <span class=\"sy0\">=</span> ap <span class=\"br0\">(</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span><span class=\"br0\">)</span><span class=\"br0\">)</span> `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:iterate\"><span class=\"kw3\">iterate</span></a>` <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span></pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">   <span class=\"sy0\">(</span>, -.<span class=\"sy0\">)</span>@]^:[&amp;<span class=\"nu0\">0</span>]<span class=\"nu0\">9</span><br/><span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> ...</pre>"}, {"lang": "Java", "loc": 17, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> ThueMorse <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        sequence<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> sequence<span class=\"br0\">(</span><span class=\"kw4\">int</span> steps<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        StringBuilder sb1 <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> StringBuilder<span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        StringBuilder sb2 <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> StringBuilder<span class=\"br0\">(</span><span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> steps<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> tmp <span class=\"sy0\">=</span> sb1.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            sb1.<span class=\"me1\">append</span><span class=\"br0\">(</span>sb2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            sb2.<span class=\"me1\">append</span><span class=\"br0\">(</span>tmp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>sb1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 15, "block": "<pre class=\"text highlighted_source\">function thuemorse(len::Int)<br/>    rst = Vector{Int8}(len)<br/>    rst[1] = 0<br/>    i, imax = 2, 1<br/>    while i \u2264 len<br/>        while i \u2264 len &amp;&amp; i \u2264 2 * imax<br/>            rst[i] = 1 - rst[i-imax]<br/>            i += 1<br/>        end<br/>        imax *= 2<br/>    end<br/>    return rst<br/>end<br/>\u00a0<br/>println(join(thuemorse(100)))</pre>"}, {"lang": "Kotlin", "loc": 15, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>fun thueMorse<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sb0 <span class=\"sy0\">=</span> StringBuilder<span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sb1 <span class=\"sy0\">=</span> StringBuilder<span class=\"br0\">(</span><span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">0</span> until n<span class=\"br0\">)</span>.<span class=\"me1\">forEach</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> tmp <span class=\"sy0\">=</span> sb0.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        sb0.<span class=\"me1\">append</span><span class=\"br0\">(</span>sb1<span class=\"br0\">)</span><br/>        sb1.<span class=\"me1\">append</span><span class=\"br0\">(</span>tmp<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> sb0.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">6</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"st0\">\"$i\u00a0: ${thueMorse(i)}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 10, "block": "<pre class=\"javascript highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>steps<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">'use strict'</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">var</span> i<span class=\"sy0\">,</span> tmp<span class=\"sy0\">,</span> s1 <span class=\"sy0\">=</span> <span class=\"st0\">'0'</span><span class=\"sy0\">,</span> s2 <span class=\"sy0\">=</span> <span class=\"st0\">'1'</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> steps<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        tmp <span class=\"sy0\">=</span> s1<span class=\"sy0\">;</span><br/>        s1 <span class=\"sy0\">+=</span> s2<span class=\"sy0\">;</span><br/>        s2 <span class=\"sy0\">+=</span> tmp<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    console.<span class=\"me1\">log</span><span class=\"br0\">(</span>s1<span class=\"br0\">)</span><span class=\"sy0\">;</span>    <br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Lua", "loc": 22, "block": "<pre class=\"lua highlighted_source\">ThueMorse <span class=\"sy0\">=</span> <span class=\"br0\">{</span>sequence <span class=\"sy0\">=</span> <span class=\"st0\">\"0\"</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> ThueMorse<span class=\"sy0\">:</span>show <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span>self<span class=\"sy0\">.</span>sequence<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> ThueMorse<span class=\"sy0\">:</span>addBlock <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> newBlock <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">for</span> bit <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> self<span class=\"sy0\">.</span>sequence<span class=\"sy0\">:</span>len<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> self<span class=\"sy0\">.</span>sequence<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span>bit<span class=\"sy0\">,</span> bit<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"1\"</span> <span class=\"kw1\">then</span><br/>            newBlock <span class=\"sy0\">=</span> newBlock <span class=\"sy0\">..</span> <span class=\"st0\">\"0\"</span><br/>        <span class=\"kw1\">else</span><br/>            newBlock <span class=\"sy0\">=</span> newBlock <span class=\"sy0\">..</span> <span class=\"st0\">\"1\"</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    self<span class=\"sy0\">.</span>sequence <span class=\"sy0\">=</span> self<span class=\"sy0\">.</span>sequence <span class=\"sy0\">..</span> newBlock<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span> <span class=\"kw1\">do</span><br/>    ThueMorse<span class=\"sy0\">:</span>show<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    ThueMorse<span class=\"sy0\">:</span>addBlock<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Modula-2", "loc": 26, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">MODULE</span> ThueMorse;<br/><span class=\"kw1\">FROM</span> Strings <span class=\"kw1\">IMPORT</span> Concat;<br/><span class=\"kw1\">FROM</span> Terminal <span class=\"kw1\">IMPORT</span> WriteString<span class=\"sy0\">,</span>WriteLn<span class=\"sy0\">,</span>ReadChar;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Sequence<span class=\"br0\">(</span>steps <span class=\"sy0\">:</span> <span class=\"kw4\">CARDINAL</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">TYPE</span> String <span class=\"sy0\">=</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">128</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/><span class=\"kw1\">VAR</span> sb1<span class=\"sy0\">,</span>sb2<span class=\"sy0\">,</span>tmp <span class=\"sy0\">:</span> String;<br/>    i <span class=\"sy0\">:</span> <span class=\"kw4\">CARDINAL</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    sb1 <span class=\"sy0\">:=</span> <span class=\"st0\">\"0\"</span>;<br/>    sb2 <span class=\"sy0\">:=</span> <span class=\"st0\">\"1\"</span>;<br/>\u00a0<br/>    <span class=\"kw1\">WHILE</span> i&lt;steps <span class=\"kw1\">DO</span><br/>        tmp <span class=\"sy0\">:=</span> sb1;<br/>        Concat<span class=\"br0\">(</span>sb1<span class=\"sy0\">,</span> sb2<span class=\"sy0\">,</span> sb1<span class=\"br0\">)</span>;<br/>        Concat<span class=\"br0\">(</span>sb2<span class=\"sy0\">,</span> tmp<span class=\"sy0\">,</span> sb2<span class=\"br0\">)</span>;<br/>        <span class=\"kw3\">INC</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">END</span>;<br/>    WriteString<span class=\"br0\">(</span>sb1<span class=\"br0\">)</span>;<br/>    WriteLn;<br/><span class=\"kw1\">END</span> Sequence;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>    Sequence<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span>;<br/>    ReadChar;<br/><span class=\"kw1\">END</span> ThueMorse.</pre>"}, {"lang": "NewLISP", "loc": 16, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#define\"><span class=\"kw1\">define</span></a> <span class=\"br0\">(</span>Thue<span class=\"sy1\">-</span>Morse loops<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#setf\"><span class=\"kw1\">setf</span></a> TM <span class=\"sy0\">'</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#println\"><span class=\"kw1\">println</span></a> TM<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#for\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"sy1\">--</span> loops<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#setf\"><span class=\"kw1\">setf</span></a> tmp TM<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#replace\"><span class=\"kw1\">replace</span></a> <span class=\"re5\">'0</span> tmp <span class=\"re5\">'_</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#replace\"><span class=\"kw1\">replace</span></a> <span class=\"re5\">'1</span> tmp <span class=\"re5\">'0</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#replace\"><span class=\"kw1\">replace</span></a> <span class=\"re5\">'_</span> tmp <span class=\"re5\">'1</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#setf\"><span class=\"kw1\">setf</span></a> TM <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#append\"><span class=\"kw1\">append</span></a> TM tmp<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#println\"><span class=\"kw1\">println</span></a> TM<span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>Thue<span class=\"sy1\">-</span>Morse <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#exit\"><span class=\"kw1\">exit</span></a><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "OASYS Assembler", "loc": 18, "block": "<pre class=\"text highlighted_source\">; Thue-Morse sequence<br/>\u00a0<br/>[*'A]              \u00a0; Ensure the vocabulary is not empty<br/>[&amp;]                \u00a0; Declare the initialization procedure<br/>%#1&gt;               \u00a0; Initialize length counter<br/>%@*&gt;               \u00a0; Create first object<br/>,#1&gt;               \u00a0; Initialize loop counter<br/>:                  \u00a0; Begin loop<br/> \u00a0%@&lt;.#&lt;PI         \u00a0; Print current cell<br/>  *.#%@&lt;.#&lt;NOT&gt;    \u00a0; Create new cell<br/> \u00a0%@%@&lt;NXT&gt;        \u00a0; Advance to next cell<br/>  ,#,#&lt;DN&gt;         \u00a0; Decrement loop counter<br/>  ,#&lt;/             \u00a0; Check if loop counter is now zero<br/>   \u00a0%#%#&lt;2MUL&gt;     \u00a0; Double length counter<br/>    ,#%#&lt;&gt;         \u00a0; Reset loop counter<br/>   \u00a0%@FO&gt;          \u00a0; Reset object pointer<br/>    CR             \u00a0; Line break<br/>|                  \u00a0; Repeat loop</pre>"}, {"lang": "Objeck", "loc": 17, "block": "<pre class=\"objeck highlighted_source\"><span class=\"kw1\">class</span> ThueMorse <span class=\"br0\">{</span><br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    Sequence<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Sequence<span class=\"br0\">(</span>steps <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    sb1 <span class=\"sy0\">:=</span> <span class=\"st0\">\"0\"</span><span class=\"sy0\">;</span><br/>    sb2 <span class=\"sy0\">:=</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> steps<span class=\"sy0\">;</span> i<span class=\"sy0\">++;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      tmp <span class=\"sy0\">:=</span> String<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span>sb1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      sb1 <span class=\"sy0\">+=</span> sb2<span class=\"sy0\">;</span><br/>      sb2 <span class=\"sy0\">+=</span> tmp<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    sb1<span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Pascal", "loc": 58, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">Program</span> ThueMorse<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> fThueMorse<span class=\"br0\">(</span>maxLen<span class=\"sy1\">:</span> NativeInt<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"kw4\">AnsiString</span><span class=\"sy1\">;</span><br/><span class=\"co1\">//double by appending the flipped original 0 -&gt; 1;1 -&gt; 0</span><br/><span class=\"co1\">//Flipping between two values:x oszillating A,B,A,B -&gt; x_next = A+B-x</span><br/><span class=\"co1\">//Beware A+B &lt; High(Char), the compiler will complain ...</span><br/><span class=\"kw1\">const</span><br/>  cVal0 <span class=\"sy3\">=</span> <span class=\"st0\">'^'</span><span class=\"sy1\">;</span>cVal1 <span class=\"sy3\">=</span> <span class=\"st0\">'v'</span><span class=\"sy1\">;</span><span class=\"co1\">//  cVal0 = '0';cVal1 = '1';</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  pOrg<span class=\"sy1\">,</span><br/>  pRpl <span class=\"sy1\">:</span> pChar<span class=\"sy1\">;</span><br/>  i<span class=\"sy1\">,</span>k<span class=\"sy1\">,</span>ml <span class=\"sy1\">:</span> NativeUInt<span class=\"sy1\">;</span><span class=\"co1\">//MaxLen: NativeInt</span><br/><span class=\"kw1\">Begin</span><br/>  <span class=\"kw1\">iF</span> maxlen &lt; <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>  <span class=\"kw1\">Begin</span><br/>    result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">''</span><span class=\"sy1\">;</span><br/>    EXIT<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"co1\">//setlength only one time</span><br/>  setlength<span class=\"br0\">(</span>result<span class=\"sy1\">,</span>Maxlen<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  pOrg <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"sy2\">@</span>result<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>  pOrg<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> cVal0<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">IF</span> maxlen <span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>    EXIT<span class=\"sy1\">;</span><br/>\u00a0<br/>  pRpl <span class=\"sy1\">:</span><span class=\"sy3\">=</span> pOrg<span class=\"sy1\">;</span><br/>  inc<span class=\"br0\">(</span>pRpl<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  ml<span class=\"sy1\">:</span><span class=\"sy3\">=</span> Maxlen<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">repeat</span><br/>    i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">repeat</span><br/>      pRpl<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">chr</span><span class=\"br0\">(</span><span class=\"kw3\">Ord</span><span class=\"br0\">(</span>cVal0<span class=\"br0\">)</span><span class=\"sy3\">+</span><span class=\"kw3\">Ord</span><span class=\"br0\">(</span>cVal1<span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"kw3\">Ord</span><span class=\"br0\">(</span>pOrg<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      inc<span class=\"br0\">(</span>pRpl<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      inc<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">until</span> i&gt;<span class=\"sy3\">=</span>k<span class=\"sy1\">;</span><br/>    inc<span class=\"br0\">(</span>k<span class=\"sy1\">,</span>k<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">until</span> k<span class=\"sy3\">+</span>k&gt; ml<span class=\"sy1\">;</span><br/>  <span class=\"co1\">// the rest</span><br/>  i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> ml<span class=\"sy3\">-</span>k<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">IF</span> k &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">repeat</span><br/>      pRpl<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">chr</span><span class=\"br0\">(</span><span class=\"kw3\">Ord</span><span class=\"br0\">(</span>cVal0<span class=\"br0\">)</span><span class=\"sy3\">+</span><span class=\"kw3\">Ord</span><span class=\"br0\">(</span>cVal1<span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"kw3\">Ord</span><span class=\"br0\">(</span>pOrg<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      inc<span class=\"br0\">(</span>pRpl<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      inc<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">until</span> i&gt;<span class=\"sy3\">=</span>k<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/> i <span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">8</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>i<span class=\"sy1\">:</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><span class=\"st0\">'  '</span><span class=\"sy1\">,</span>fThueMorse<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  fThueMorse<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">shl</span> <span class=\"nu0\">30</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 16, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> complement<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$s</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"re0\">$s</span> <span class=\"sy0\">=~</span> <span class=\"co2\">tr/01/10/</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$s</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$str</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'0'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    say <span class=\"re0\">$str</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$str</span> <span class=\"sy0\">.=</span> complement<span class=\"br0\">(</span><span class=\"re0\">$str</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 1, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span> <span class=\"st_h\">'0'</span> <span class=\"sy0\">~</span> <span class=\"re0\">@_</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"sy0\">.</span><span class=\"kw3\">trans</span><span class=\"br0\">(</span> <span class=\"st0\">\"01\"</span> <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"10\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>g<span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"sy0\">...</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 5, "block": "<pre class=\"text highlighted_source\">string tm = \"0\"<br/>for i=1 to 8 do<br/>   \u00a0?tm<br/>    tm &amp;= sq_sub('0'+'1',tm)<br/>end for</pre>"}, {"lang": "PicoLisp", "loc": 10, "block": "<pre class=\"text highlighted_source\">(let R 0<br/>   (prinl R)<br/>   (for (X 1 (&gt;= 32 X))<br/>      (setq R<br/>         (bin<br/>            (pack<br/>               (bin R)<br/>               (bin (x| (dec (** 2 X)) R)) ) ) )<br/>      (prinl (pack 0 (bin R)))<br/>      (inc 'X X) ) )</pre>"}, {"lang": "PowerShell", "loc": 31, "block": "<pre class=\"powershell highlighted_source\"><span class=\"kw3\">function</span> New<span class=\"sy0\">-</span>ThueMorse <span class=\"br0\">(</span> <span class=\"re0\">$Digits</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>    <span class=\"co1\">#  Start with seed 0</span><br/>    <span class=\"re0\">$ThueMorse</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"0\"</span><br/>\u00a0<br/>    <span class=\"co1\">#  Decrement digits remaining</span><br/>    <span class=\"re0\">$Digits</span><span class=\"sy0\">--</span><br/>\u00a0<br/>    <span class=\"co1\">#  While we still have digits to calculate...</span><br/>    <span class=\"kw3\">While</span> <span class=\"br0\">(</span> <span class=\"re0\">$Digits</span> <span class=\"kw4\">-gt</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>        <span class=\"co1\">#  Number of digits we'll get this loop (what we still need up to the maximum available), corrected to 0 base</span><br/>        <span class=\"re0\">$LastDigit</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>math<span class=\"br0\">]</span>::Min<span class=\"br0\">(</span> <span class=\"re0\">$ThueMorse</span>.Length<span class=\"sy0\">,</span> <span class=\"re0\">$Digits</span> <span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>        <span class=\"co1\">#  Loop through each digit</span><br/>        <span class=\"kw3\">ForEach</span> <span class=\"br0\">(</span> <span class=\"re0\">$i</span> <span class=\"kw3\">in</span> <span class=\"nu0\">0</span>..<span class=\"re0\">$LastDigit</span> <span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>            <span class=\"co1\">#  Append the twos complement</span><br/>            <span class=\"re0\">$ThueMorse</span> <span class=\"sy0\">+=</span> <span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"sy0\">-</span> <span class=\"re0\">$ThueMorse</span>.Substring<span class=\"br0\">(</span> <span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">#  Calculate the number of digits still remaining</span><br/>        <span class=\"re0\">$Digits</span> <span class=\"sy0\">=</span> <span class=\"re0\">$Digits</span> <span class=\"sy0\">-</span> <span class=\"re0\">$LastDigit</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw3\">return</span> <span class=\"re0\">$ThueMorse</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>New<span class=\"sy0\">-</span>ThueMorse <span class=\"nu0\">5</span><br/>New<span class=\"sy0\">-</span>ThueMorse <span class=\"nu0\">16</span><br/>New<span class=\"sy0\">-</span>ThueMorse <span class=\"nu0\">73</span></pre>"}, {"lang": "Python", "loc": 11, "block": "<pre class=\"python highlighted_source\">\u00a0<br/>m<span class=\"sy0\">=</span><span class=\"st0\">'0'</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span>m<span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"br0\">)</span>:<br/>     m0<span class=\"sy0\">=</span>m<br/>     m<span class=\"sy0\">=</span>m.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">'0'</span><span class=\"sy0\">,</span><span class=\"st0\">'a'</span><span class=\"br0\">)</span><br/>     m<span class=\"sy0\">=</span>m.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">'1'</span><span class=\"sy0\">,</span><span class=\"st0\">'0'</span><span class=\"br0\">)</span><br/>     m<span class=\"sy0\">=</span>m.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">'a'</span><span class=\"sy0\">,</span><span class=\"st0\">'1'</span><span class=\"br0\">)</span><br/>     m<span class=\"sy0\">=</span>m0+m<br/>     <span class=\"kw1\">print</span><span class=\"br0\">(</span>m<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 10, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(define 1&lt;-&gt;0 (match-lambda [#\\0 #\\1] [#\\1 #\\0]))<br/>(define (thue-morse-step (s \"0\"))<br/>  (string-append s (list-&gt;string (map 1&lt;-&gt;0 (string-&gt;list s)))))<br/>\u00a0<br/>(define (thue-morse n)<br/>  (let inr ((n (max (sub1 n) 0)) (rv (list \"0\")))<br/>    (if (zero? n) (reverse rv) (inr (sub1 n) (cons (thue-morse-step (car rv)) rv)))))<br/>\u00a0<br/>(for-each displayln (thue-morse 7))</pre>"}, {"lang": "REXX", "loc": 12, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX pgm generates &amp; displays the Thue\u2500Morse sequence up to the Nth term (inclusive). */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> N <span class=\"sy0\">.</span>                                    <span class=\"coMULTI\">/*obtain the optional argument from CL.*/</span><br/><span class=\"kw1\">if</span> N==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> N==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> N=<span class=\"nu0\">80</span>                     <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/>$=                                               <span class=\"coMULTI\">/*the Thue\u2500Morse sequence  (so far).   */</span><br/>         <span class=\"kw1\">do</span> j=<span class=\"nu0\">0</span>  <span class=\"kw2\">to</span> N                            <span class=\"coMULTI\">/*generate sequence up to the Nth item.*/</span><br/>         $=$ <span class=\"sy0\">||</span> $weight<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">//</span> <span class=\"nu0\">2</span>                  <span class=\"coMULTI\">/*append the item to the Thue\u2500Morse seq*/</span><br/>         <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/><span class=\"kw1\">say</span> $<br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>$pop:    <span class=\"kw1\">return</span>  <span class=\"kw6\">length</span><span class=\"br0\">(</span> <span class=\"kw6\">space</span><span class=\"br0\">(</span> <span class=\"kw6\">translate</span><span class=\"br0\">(</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, , <span class=\"nu0\">0</span><span class=\"br0\">)</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>     <span class=\"coMULTI\">/*count 1's in number.*/</span><br/>$weight: <span class=\"kw1\">return</span>  $pop<span class=\"br0\">(</span> <span class=\"kw6\">x2b</span><span class=\"br0\">(</span> <span class=\"kw6\">d2x</span><span class=\"br0\">(</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span>                     <span class=\"coMULTI\">/*dec\u2500\u2500\u25babin, pop count*/</span></pre>"}, {"lang": "Ring", "loc": 16, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>tm = \"0\"<br/>see tm <br/>for n = 1 to 6<br/>    tm = thue_morse(tm)<br/>    see tm<br/>next<br/>\u00a0<br/>func thue_morse(previous)<br/>     tm = \"\"<br/>     for i = 1 to len(previous)<br/>         if (substr(previous, i, 1) = \"1\") tm = tm + \"0\" else tm  = tm + \"1\" ok<br/>     next<br/>     see nl<br/>     return (previous + tm)<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 2, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">puts</span> s = <span class=\"st0\">\"0\"</span><br/><span class=\"nu0\">6</span>.<span class=\"me1\">times</span><span class=\"br0\">{</span><span class=\"kw3\">puts</span> s <span class=\"sy0\">&lt;&lt;</span> s.<span class=\"me1\">tr</span><span class=\"br0\">(</span><span class=\"st0\">\"01\"</span>,<span class=\"st0\">\"10\"</span><span class=\"br0\">)</span><span class=\"br0\">}</span></pre>"}, {"lang": "Scala", "loc": 11, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> thueMorse<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>sb0, sb1<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> StringBuilder<span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> StringBuilder<span class=\"br0\">(</span><span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"nu0\">0</span> until n<span class=\"br0\">)</span>.<span class=\"me1\">foreach</span> <span class=\"br0\">{</span> <span class=\"sy0\">_</span> <span class=\"sy0\">=&gt;</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> tmp <span class=\"sy0\">=</span> sb0.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    sb0.<span class=\"me1\">append</span><span class=\"br0\">(</span>sb1<span class=\"br0\">)</span><br/>    sb1.<span class=\"me1\">append</span><span class=\"br0\">(</span>tmp<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>  sb0.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"nu0\">0</span> to <span class=\"nu0\">6</span><span class=\"br0\">)</span>.<span class=\"me1\">foreach</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span>s<span class=\"st0\">\"$i\u00a0: ${thueMorse(i)}\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Sidef", "loc": 8, "block": "<pre class=\"ruby highlighted_source\">func recmap<span class=\"br0\">(</span>repeat, seed, transform, callback<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    func <span class=\"br0\">(</span>repeat, seed<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        callback<span class=\"br0\">(</span>seed<span class=\"br0\">)</span><br/>        repeat <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> __FUNC__<span class=\"br0\">(</span>repeat<span class=\"sy0\">-</span><span class=\"nu0\">1</span>, transform<span class=\"br0\">(</span>seed<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">(</span>repeat, seed<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>recmap<span class=\"br0\">(</span><span class=\"nu0\">6</span>, <span class=\"st0\">\"0\"</span>, <span class=\"br0\">{</span><span class=\"sy0\">|</span>s<span class=\"sy0\">|</span> s <span class=\"sy0\">+</span> s.<span class=\"me1\">tr</span><span class=\"br0\">(</span><span class=\"st0\">'01'</span>, <span class=\"st0\">'10'</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>, <span class=\"br0\">{</span> .<span class=\"me1\">say</span> <span class=\"br0\">}</span><span class=\"br0\">)</span></pre>"}, {"lang": "SQL", "loc": 1, "block": "<pre class=\"sql highlighted_source\"><span class=\"kw1\">WITH</span> recursive a<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"kw1\">AS</span> <span class=\"br0\">(</span><span class=\"kw1\">SELECT</span> <span class=\"st0\">'0'</span> <span class=\"kw1\">UNION</span> <span class=\"kw1\">ALL</span> <span class=\"kw1\">SELECT</span> <span class=\"kw1\">REPLACE</span><span class=\"br0\">(</span><span class=\"kw1\">REPLACE</span><span class=\"br0\">(</span>hex<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">'30'</span><span class=\"sy0\">,</span><span class=\"st0\">'01'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">'31'</span><span class=\"sy0\">,</span><span class=\"st0\">'10'</span><span class=\"br0\">)</span> <span class=\"kw1\">FROM</span> a<span class=\"br0\">)</span> <span class=\"kw1\">SELECT</span> <span class=\"sy0\">*</span> <span class=\"kw1\">FROM</span> a;</pre>"}, {"lang": "Tcl", "loc": 11, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> tm_expand <span class=\"br0\">{</span>s<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">string</span> map <span class=\"br0\">{</span><span class=\"nu0\">0</span> 01 <span class=\"nu0\">1</span> <span class=\"nu0\">10</span><span class=\"br0\">}</span> <span class=\"re0\">$s</span><span class=\"br0\">}</span><br/><span class=\"co1\"># this could also be written as:</span><br/><span class=\"co1\"># interp alias {} tm_expand {} string map {0 01 1 10}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> tm <span class=\"br0\">{</span>k<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> s <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">incr</span> k -<span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> s <span class=\"br0\">[</span>tm_expand <span class=\"re0\">$s</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$s</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "uBasic/4tH", "loc": 18, "block": "<pre class=\"text highlighted_source\">For x = 0 to 6                         ' sequence loop<br/>  Print Using \"_#\";x;\": \";             ' print sequence<br/>  For y = 0 To (2^x)-1                 ' element loop<br/>    Print AND(FUNC(_Parity(y)),1);     ' print element<br/>  Next                                 ' next element<br/>  Print                                ' terminate elements line<br/>Next                                   ' next sequence<br/>\u00a0<br/>End<br/>\u00a0<br/>_Parity Param (1)                      ' parity function<br/>  Local (1)                            ' number of bits set<br/>  <a class=\"__cf_email__\" data-cfemail=\"1c7e5c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 0                               ' no bits set yet<br/>  Do While <a class=\"__cf_email__\" data-cfemail=\"244564\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> # 0\u00a0                     ' until all bits are counted<br/>    If AND (<a class=\"__cf_email__\" data-cfemail=\"9dfcdd\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, 1) Then <a class=\"__cf_email__\" data-cfemail=\"482a08\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"fa98ba\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> + 1    ' bit set? increment count<br/>    <a class=\"__cf_email__\" data-cfemail=\"c0a180\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = SHL(<a class=\"__cf_email__\" data-cfemail=\"f899b8\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, -1)                   ' shift the number<br/>  Loop<br/>Return (<a class=\"__cf_email__\" data-cfemail=\"9af8da\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)                            ' return number of bits set</pre>"}, {"lang": "VBA", "loc": 22, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Option</span> <span class=\"kw2\">Explicit</span><br/>\u00a0<br/><span class=\"kw2\">Sub</span> Main()<br/><span class=\"kw4\">Dim</span> i&amp;, t$<br/>    <span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> 8<br/>        t = Thue_Morse(t)<br/>        Debug.<span class=\"kw4\">Print</span> i &amp; <span class=\"st0\">\":=&gt; \"</span> &amp; t<br/>    <span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Function</span> Thue_Morse(s <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/><span class=\"kw4\">Dim</span> k$<br/>    <span class=\"kw3\">If</span> s = <span class=\"st0\">\"\"</span> <span class=\"kw3\">Then</span><br/>        k = <span class=\"st0\">\"0\"</span><br/>    <span class=\"kw3\">Else</span><br/>        k = s<br/>        k = Replace(k, <span class=\"st0\">\"1\"</span>, <span class=\"st0\">\"2\"</span>)<br/>        k = Replace(k, <span class=\"st0\">\"0\"</span>, <span class=\"st0\">\"1\"</span>)<br/>        k = Replace(k, <span class=\"st0\">\"2\"</span>, <span class=\"st0\">\"0\"</span>)<br/>    <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>    Thue_Morse = s &amp; k<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span></pre>"}, {"lang": "XLISP", "loc": 23, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> thue-morse <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">defun</span> flip-bits <span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">defun</span> flip <span class=\"br0\">(</span><span class=\"kw1\">l</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">null</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">cons</span><br/>                    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">equal</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span> #\\<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                        #\\<span class=\"nu0\">0</span><br/>                        #\\<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                    <span class=\"br0\">(</span>flip <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>list-<span class=\"sy0\">&gt;</span>string <span class=\"br0\">(</span>flip <span class=\"br0\">(</span>string-<span class=\"sy0\">&gt;</span><span class=\"kw1\">list</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> n <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"st0\">\"0\"</span><br/>        <span class=\"br0\">(</span>string-<span class=\"kw1\">append</span> <span class=\"br0\">(</span>thue-morse <span class=\"br0\">(</span>- n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>flip-bits <span class=\"br0\">(</span>thue-morse <span class=\"br0\">(</span>- n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; define RANGE, for testing purposes</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> range <span class=\"br0\">(</span>x y<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> x y<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">cons</span> x <span class=\"br0\">(</span>range <span class=\"br0\">(</span>+ x <span class=\"nu0\">1</span><span class=\"br0\">)</span> y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; test THUE-MORSE by printing the strings it returns for n = 0 to n = 6</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span>thue-morse n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>range <span class=\"nu0\">0</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "zkl", "loc": 1, "block": "<pre class=\"text highlighted_source\">fcn nextTM(str){ str.pump(str,'-.fp(\"10\")) } // == fcn(c){ \"10\" - c }) }</pre>"}]}