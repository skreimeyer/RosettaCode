{"task": "Average_loop_length", "blocks": [{"lang": "Ada", "loc": 53, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Generic_Elementary_Functions</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Discrete_Random</span>;<br/><span class=\"kw3\">procedure</span> Avglen <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">package</span> IIO <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Integer_IO</span> <span class=\"br0\">(</span>Positive<span class=\"br0\">)</span>; <span class=\"kw3\">use</span> IIO;<br/>   <span class=\"kw3\">package</span> LFIO <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Float_IO</span> <span class=\"br0\">(</span>Long_Float<span class=\"br0\">)</span>; <span class=\"kw3\">use</span> LFIO;<br/>   <span class=\"kw3\">subtype</span> FactN <span class=\"kw1\">is</span> Natural <span class=\"kw3\">range</span> <span class=\"nu0\">0</span>..<span class=\"nu0\">20</span>;<br/>   TESTS\u00a0: <span class=\"kw3\">constant</span> Natural\u00a0:= <span class=\"nu0\">1</span>_000_000;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Factorial <span class=\"br0\">(</span>N\u00a0: FactN<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Long_Float <span class=\"kw1\">is</span><br/>      Result\u00a0: Long_Float\u00a0:= <span class=\"nu0\">1.0</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"nu0\">2</span>..<span class=\"me1\">N</span> <span class=\"kw1\">loop</span> Result\u00a0:= Result * Long_Float<span class=\"br0\">(</span>I<span class=\"br0\">)</span>; <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> Result;<br/>   <span class=\"kw1\">end</span> Factorial;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Analytical <span class=\"br0\">(</span>N\u00a0: FactN<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Long_Float <span class=\"kw1\">is</span><br/>      Sum\u00a0: Long_Float\u00a0:= <span class=\"nu0\">0.0</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"nu0\">1</span>..<span class=\"me1\">N</span> <span class=\"kw1\">loop</span><br/>         Sum\u00a0:= Sum + Factorial<span class=\"br0\">(</span>N<span class=\"br0\">)</span> / Factorial<span class=\"br0\">(</span>N - I<span class=\"br0\">)</span> / Long_Float<span class=\"br0\">(</span>N<span class=\"br0\">)</span>**I;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> Sum;<br/>   <span class=\"kw1\">end</span> Analytical;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Experimental <span class=\"br0\">(</span>N\u00a0: FactN<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Long_Float <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">subtype</span> RandInt <span class=\"kw1\">is</span> Natural <span class=\"kw3\">range</span> <span class=\"nu0\">1</span>..<span class=\"me1\">N</span>;<br/>      <span class=\"kw3\">package</span> Random <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Discrete_Random</span><span class=\"br0\">(</span>RandInt<span class=\"br0\">)</span>;<br/>      seed\u00a0: Random.<span class=\"me1\">Generator</span>;<br/>      Num\u00a0: RandInt;<br/>      count\u00a0: Natural\u00a0:= <span class=\"nu0\">0</span>;<br/>      bits\u00a0: <span class=\"kw3\">array</span><span class=\"br0\">(</span>RandInt'<span class=\"kw3\">Range</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> Boolean;<br/>   <span class=\"kw1\">begin</span><br/>      Random.<span class=\"me1\">Reset</span><span class=\"br0\">(</span>seed<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">for</span> run <span class=\"kw3\">in</span> <span class=\"nu0\">1</span>..<span class=\"me1\">TESTS</span> <span class=\"kw1\">loop</span><br/>         bits\u00a0:= <span class=\"br0\">(</span><span class=\"kw3\">others</span>  =&gt; false<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> RandInt'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>            Num\u00a0:= Random.<span class=\"me1\">Random</span><span class=\"br0\">(</span>seed<span class=\"br0\">)</span>; <span class=\"kw3\">exit</span> <span class=\"kw3\">when</span> bits<span class=\"br0\">(</span>Num<span class=\"br0\">)</span>;<br/>            bits<span class=\"br0\">(</span>Num<span class=\"br0\">)</span>\u00a0:= True; count\u00a0:= count + <span class=\"nu0\">1</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;   <br/>      <span class=\"kw1\">return</span> Long_Float<span class=\"br0\">(</span>count<span class=\"br0\">)</span>/Long_Float<span class=\"br0\">(</span>TESTS<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Experimental;<br/>\u00a0<br/>   A, E, err\u00a0: Long_Float;<br/><span class=\"kw1\">begin</span><br/>   Put_Line<span class=\"br0\">(</span><span class=\"st0\">\" N  avg    calc  \u00a0%diff\"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">20</span> <span class=\"kw1\">loop</span><br/>      A\u00a0:= Analytical<span class=\"br0\">(</span>I<span class=\"br0\">)</span>;  E\u00a0:= Experimental<span class=\"br0\">(</span>I<span class=\"br0\">)</span>; err\u00a0:= <span class=\"kw2\">abs</span><span class=\"br0\">(</span>E-A<span class=\"br0\">)</span>/A*<span class=\"nu0\">100.0</span>;<br/>      Put<span class=\"br0\">(</span>I, Width=&gt;<span class=\"nu0\">2</span><span class=\"br0\">)</span>; Put<span class=\"br0\">(</span>E ,Aft=&gt;<span class=\"nu0\">4</span>, exp=&gt;<span class=\"nu0\">0</span><span class=\"br0\">)</span>; Put<span class=\"br0\">(</span>A, Aft=&gt;<span class=\"nu0\">4</span>, exp=&gt;<span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>      Put<span class=\"br0\">(</span>err, Fore=&gt;<span class=\"nu0\">3</span>, Aft=&gt;<span class=\"nu0\">3</span>, exp=&gt;<span class=\"nu0\">0</span><span class=\"br0\">)</span>; New_line;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Avglen;</pre>"}, {"lang": "BBC BASIC", "loc": 33, "block": "<pre class=\"text highlighted_source\">      @% = &amp;2040A<br/>      MAX_N = 20<br/>      TIMES = 1000000<br/>\u00a0<br/>      FOR n = 1 TO MAX_N<br/>        avg = FNtest(n, TIMES)<br/>        theory = FNanalytical(n)<br/>        diff = (avg / theory - 1) * 100<br/>        PRINT STR$(n), avg, theory, diff \"%\"<br/>      NEXT<br/>      END<br/>\u00a0<br/>      DEF FNanalytical(n)<br/>      LOCAL i, s<br/>      FOR i = 1 TO n<br/>        s += FNfactorial(n) / n^i / FNfactorial(n-i)<br/>      NEXT<br/>      = s<br/>\u00a0<br/>      DEF FNtest(n, times)<br/>      LOCAL i, b, c, x<br/>      FOR i = 1 TO times<br/>        x = 1\u00a0: b = 0<br/>        WHILE (b AND x) = 0<br/>          c += 1<br/>          b OR= x<br/>          x = 1 &lt;&lt; (RND(n) - 1)<br/>        ENDWHILE<br/>      NEXT<br/>      = c / times<br/>\u00a0<br/>      DEF FNfactorial(n)<br/>      IF n=1 OR n=0 THEN =1 ELSE = n * FNfactorial(n-1)</pre>"}, {"lang": "C", "loc": 56, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;math.h&gt;</span><br/><span class=\"co2\">#include &lt;time.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define MAX_N 20</span><br/><span class=\"co2\">#define TIMES 1000000</span><br/>\u00a0<br/><span class=\"kw4\">double</span> factorial<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">double</span> f <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> f <span class=\"sy0\">*=</span> i<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> f<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">double</span> expected<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">double</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\tsum <span class=\"sy0\">+=</span> factorial<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/pow.html\"><span class=\"kw3\">pow</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">/</span> factorial<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> sum<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> randint<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> r<span class=\"sy0\">,</span> rmax <span class=\"sy0\">=</span> RAND_MAX <span class=\"sy0\">/</span> n <span class=\"sy0\">*</span> n<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>r <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> rmax<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> r <span class=\"sy0\">/</span> <span class=\"br0\">(</span>RAND_MAX <span class=\"sy0\">/</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> test<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> times<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> times<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> bits <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>bits <span class=\"sy0\">&amp;</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tcount<span class=\"sy0\">++;</span><br/>\t\t\tbits <span class=\"sy0\">|=</span> x<span class=\"sy0\">;</span><br/>\t\t\tx <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> randint<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> count<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/srand.html\"><span class=\"kw3\">srand</span></a><span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/time.html\"><span class=\"kw3\">time</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/puts.html\"><span class=\"kw3\">puts</span></a><span class=\"br0\">(</span><span class=\"st0\">\" n<span class=\"es1\">\\t</span>avg<span class=\"es1\">\\t</span>exp.<span class=\"es1\">\\t</span>diff<span class=\"es1\">\\n</span>-------------------------------\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> n<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;=</span> MAX_N<span class=\"sy0\">;</span> n<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">int</span> cnt <span class=\"sy0\">=</span> test<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> TIMES<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw4\">double</span> avg <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>cnt <span class=\"sy0\">/</span> TIMES<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw4\">double</span> theory <span class=\"sy0\">=</span> expected<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw4\">double</span> diff <span class=\"sy0\">=</span> <span class=\"br0\">(</span>avg <span class=\"sy0\">/</span> theory <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%2d\u00a0%8.4f\u00a0%8.4f\u00a0%6.3f%%<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> avg<span class=\"sy0\">,</span> theory<span class=\"sy0\">,</span> diff<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 63, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;random&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define MAX_N 20</span><br/><span class=\"co2\">#define TIMES 1000000</span><br/>\u00a0<br/><span class=\"coMULTI\">/**<br/> * Used to generate a uniform random distribution<br/> */</span><br/><span class=\"kw4\">static</span> std<span class=\"sy4\">::</span><span class=\"me2\">random_device</span> rd<span class=\"sy4\">;</span>  <span class=\"co1\">//Will be used to obtain a seed for the random number engine</span><br/><span class=\"kw4\">static</span> std<span class=\"sy4\">::</span><span class=\"me2\">mt19937</span> gen<span class=\"br0\">(</span>rd<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"co1\">//Standard mersenne_twister_engine seeded with rd()</span><br/><span class=\"kw4\">static</span> std<span class=\"sy4\">::</span><span class=\"me2\">uniform_int_distribution</span><span class=\"sy1\">&lt;&gt;</span> dis<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> randint<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> r, rmax <span class=\"sy1\">=</span> <span class=\"kw2\">RAND_MAX</span> <span class=\"sy2\">/</span> n <span class=\"sy2\">*</span> n<span class=\"sy4\">;</span><br/>    dis<span class=\"sy1\">=</span>std<span class=\"sy4\">::</span><span class=\"me2\">uniform_int_distribution</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,rmax<span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>    r <span class=\"sy1\">=</span> dis<span class=\"br0\">(</span>gen<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> r <span class=\"sy2\">/</span> <span class=\"br0\">(</span><span class=\"kw2\">RAND_MAX</span> <span class=\"sy2\">/</span> n<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> factorial<span class=\"br0\">(</span><span class=\"kw4\">size_t</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">//Factorial using dynamic programming to memoize the values.</span><br/>    <span class=\"kw4\">static</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span><span class=\"sy1\">&gt;</span>factorials<span class=\"br0\">{</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"sy4\">;</span>factorials.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;=</span> n<span class=\"sy4\">;</span><span class=\"br0\">)</span><br/>\t    factorials.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>factorials.<span class=\"me1\">back</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy2\">*</span>factorials.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">return</span> factorials<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">long</span> <span class=\"kw4\">double</span> expected<span class=\"br0\">(</span><span class=\"kw4\">size_t</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">long</span> <span class=\"kw4\">double</span> sum <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">size_t</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;=</span> n<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>        sum <span class=\"sy2\">+</span><span class=\"sy1\">=</span> factorial<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy2\">/</span> <span class=\"kw3\">pow</span><span class=\"br0\">(</span>n, i<span class=\"br0\">)</span> <span class=\"sy2\">/</span> factorial<span class=\"br0\">(</span>n <span class=\"sy2\">-</span> i<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> sum<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> test<span class=\"br0\">(</span><span class=\"kw4\">int</span> n, <span class=\"kw4\">int</span> times<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> i, count <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> times<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">1</span>, bits <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy3\">!</span><span class=\"br0\">(</span>bits <span class=\"sy3\">&amp;</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            count<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>            bits <span class=\"sy3\">|</span><span class=\"sy1\">=</span> x<span class=\"sy4\">;</span><br/>            x <span class=\"sy1\">=</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy1\">&lt;&lt;</span> randint<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> count<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">puts</span><span class=\"br0\">(</span><span class=\"st0\">\" n<span class=\"es1\">\\t</span>avg<span class=\"es1\">\\t</span>exp.<span class=\"es1\">\\t</span>diff<span class=\"es1\">\\n</span>-------------------------------\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> n<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>n <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> n <span class=\"sy1\">&lt;=</span> MAX_N<span class=\"sy4\">;</span> n<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> cnt <span class=\"sy1\">=</span> test<span class=\"br0\">(</span>n, TIMES<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw4\">long</span> <span class=\"kw4\">double</span> avg <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>cnt <span class=\"sy2\">/</span> TIMES<span class=\"sy4\">;</span><br/>        <span class=\"kw4\">long</span> <span class=\"kw4\">double</span> theory <span class=\"sy1\">=</span> expected<span class=\"br0\">(</span><span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">size_t</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw4\">long</span> <span class=\"kw4\">double</span> diff <span class=\"sy1\">=</span> <span class=\"br0\">(</span>avg <span class=\"sy2\">/</span> theory <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy2\">*</span> <span class=\"nu0\">100</span><span class=\"sy4\">;</span><br/>        <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%2d\u00a0%8.4f\u00a0%8.4f\u00a0%6.3f%%<span class=\"es1\">\\n</span>\"</span>, n, <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>avg<span class=\"br0\">)</span>, <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>theory<span class=\"br0\">)</span>, <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>diff<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 45, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>ns cyclelengths<br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">gen-class</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn factorial <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" n! \"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">apply</span> *' <span class=\"br0\">(</span>range <span class=\"nu0\">1</span> <span class=\"br0\">(</span>inc n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>             <span class=\"co1\">; Use *' (vs. *) to allow arbitrary length arithmetic</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn pow <span class=\"br0\">[</span>n i<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" n^i\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">apply</span> *' <span class=\"br0\">(</span>repeat i n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn analytical <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" Analytical Computation \"</span><br/>  <span class=\"br0\">(</span>-<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">(</span>range <span class=\"nu0\">1</span> <span class=\"br0\">(</span>inc n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>map #<span class=\"br0\">(</span>/ <span class=\"br0\">(</span>factorial n<span class=\"br0\">)</span> <span class=\"br0\">(</span>pow n <span class=\"sy0\">%</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>factorial <span class=\"br0\">(</span>- n <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;calc n\u00a0%))</span><br/>      <span class=\"br0\">(</span>reduce<span class=\"sy0\"> + </span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Number of random times to test each n</span><br/><span class=\"br0\">(</span>def TIMES <span class=\"nu0\">1000000</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn single-test-cycle-<span class=\"kw1\">length</span> <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" Single random test of cycle length \"</span><br/>  <span class=\"br0\">(</span>loop <span class=\"br0\">[</span>count <span class=\"nu0\">0</span><br/>         bits <span class=\"nu0\">0</span><br/>         x <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>zero? <span class=\"br0\">(</span>bit-<span class=\"kw1\">and</span> x bits<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>recur <span class=\"br0\">(</span>inc count<span class=\"br0\">)</span> <span class=\"br0\">(</span>bit-<span class=\"kw1\">or</span> bits x<span class=\"br0\">)</span> <span class=\"br0\">(</span>bit-shift-left <span class=\"nu0\">1</span> <span class=\"br0\">(</span>rand-int n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        count<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn avg-cycle-<span class=\"kw1\">length</span> <span class=\"br0\">[</span>n times<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" Average results of single tests of cycle lengths \"</span><br/>  <span class=\"br0\">(</span>/<br/>   <span class=\"br0\">(</span>reduce +<br/>           <span class=\"br0\">(</span>for <span class=\"br0\">[</span>i <span class=\"br0\">(</span>range times<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>             <span class=\"br0\">(</span>single-test-cycle-<span class=\"kw1\">length</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  times<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Show Results</span><br/><span class=\"br0\">(</span>println <span class=\"st0\">\"<span class=\"es0\">\\t</span>Avg<span class=\"es0\">\\t</span><span class=\"es0\">\\t</span>Exp<span class=\"es0\">\\t</span><span class=\"es0\">\\t</span>Diff\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>doseq <span class=\"br0\">[</span>q <span class=\"br0\">(</span>range <span class=\"nu0\">1</span> <span class=\"nu0\">21</span><span class=\"br0\">)</span><br/>        <span class=\"sy0\">:</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>anal <span class=\"br0\">(</span>double <span class=\"br0\">(</span>analytical q<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              avg <span class=\"br0\">(</span>double <span class=\"br0\">(</span>avg-cycle-<span class=\"kw1\">length</span> q TIMES<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              diff <span class=\"br0\">(</span>Math/<span class=\"kw1\">abs</span> <span class=\"br0\">(</span>* <span class=\"nu0\">100</span> <span class=\"br0\">(</span>- <span class=\"nu0\">1</span> <span class=\"br0\">(</span>/ avg anal<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>println <span class=\"br0\">(</span>format <span class=\"st0\">\"%3d<span class=\"es0\">\\t</span>%.4f<span class=\"es0\">\\t</span>%.4f<span class=\"es0\">\\t</span>%.2f%%\"</span> q avg anal diff<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 41, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">random</span><span class=\"sy0\">,</span> std.<span class=\"me1\">math</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">format</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">real</span> analytical<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> <span class=\"coMULTI\">/*@nogc*/</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">enum</span> aux <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> k<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> reduce<span class=\"sy0\">!</span>q<span class=\"br0\">{</span>a <span class=\"sy0\">*</span> b<span class=\"br0\">}</span><span class=\"br0\">(</span>1.0L<span class=\"sy0\">,</span> iota<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> k <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> iota<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>           .<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>k <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>aux<span class=\"br0\">(</span>k<span class=\"br0\">)</span> <span class=\"sy0\">*</span> k <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"kw4\">real</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">^^</span> <span class=\"br0\">(</span>k <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           .<span class=\"me1\">sum</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">size_t</span> loopLength<span class=\"br0\">(</span><span class=\"kw4\">size_t</span> maxN<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> size<span class=\"sy0\">,</span> <span class=\"kw2\">ref</span> Xorshift rng<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">__gshared</span> <span class=\"kw4\">static</span> <span class=\"kw4\">bool</span><span class=\"br0\">[</span>maxN <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> seen<span class=\"sy0\">;</span><br/>    seen<span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">size</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> current <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">size_t</span> steps <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>seen<span class=\"br0\">[</span>current<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        seen<span class=\"br0\">[</span>current<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>        current <span class=\"sy0\">=</span> uniform<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> size <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> rng<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        steps<span class=\"sy0\">++;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> steps<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">enum</span> maxN  <span class=\"sy0\">=</span> <span class=\"nu0\">40</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">enum</span> nTrials <span class=\"sy0\">=</span> <span class=\"nu0\">300</span>_000<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> rng <span class=\"sy0\">=</span> Xorshift<span class=\"br0\">(</span>unpredictableSeed<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\" n    average    analytical     (error)\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"===  =========  ============  ==========\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> n<span class=\"sy0\">;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"me1\">maxN</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">long</span> total <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> _<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">nTrials</span><span class=\"br0\">)</span><br/>            total <span class=\"sy0\">+=</span> loopLength<span class=\"sy0\">!</span>maxN<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> rng<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">immutable</span> average <span class=\"sy0\">=</span> total <span class=\"sy0\">/</span> <span class=\"kw4\">real</span><span class=\"br0\">(</span>nTrials<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">immutable</span> an <span class=\"sy0\">=</span> n.<span class=\"me1\">analytical</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">immutable</span> percentError <span class=\"sy0\">=</span> abs<span class=\"br0\">(</span>an <span class=\"sy0\">-</span> average<span class=\"br0\">)</span> <span class=\"sy0\">/</span> an <span class=\"sy0\">*</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">immutable</span> errorS <span class=\"sy0\">=</span> format<span class=\"br0\">(</span><span class=\"st0\">\"%2.4f\"</span><span class=\"sy0\">,</span> percentError<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"%3d \u00a0%9.5f \u00a0%12.5f  (%7s%%)\"</span><span class=\"sy0\">,</span><br/>                 n<span class=\"sy0\">,</span> average<span class=\"sy0\">,</span> an<span class=\"sy0\">,</span> errorS<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 31, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>lib 'math<span class=\"br0\">)</span> <span class=\"co1\">;; \u03a3 aka (sigma f(n)  nfrom nto)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>f<span class=\"sy0\">-</span>count  N <span class=\"br0\">(</span>times <span class=\"nu0\">100000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">define</span> count <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span>i times<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">;; new  random f mapping from  0..N-1 to 0..N-1 </span><br/>    <span class=\"co1\">;; (f n) is NOT (random N) </span><br/>    <span class=\"co1\">;; because each call (f n) must return the same value</span><br/>\u00a0<br/>    <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"kw1\">f</span> <span class=\"br0\">(</span>build<span class=\"sy0\">-</span><span class=\"kw1\">vector</span> N  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">(</span>random N<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"br0\">(</span><span class=\"kw1\">define</span> hits <span class=\"br0\">(</span><span class=\"kw1\">make-vector</span> N<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">define</span> n <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>while <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> <span class=\"br0\">[</span>hits n<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"sy0\">++</span> count<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">vector</span><span class=\"sy0\">+=</span> hits n <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">set!</span> n <span class=\"br0\">[</span><span class=\"kw1\">f</span> n<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">//</span> count times<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>f<span class=\"sy0\">-</span>anal N<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>\u03a3  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">//</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span> N<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> N i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">^</span>  N i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span> N<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>decimals <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>f<span class=\"sy0\">-</span>print <span class=\"br0\">(</span>maxN <span class=\"nu0\">21</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span>N <span class=\"br0\">(</span>in<span class=\"sy0\">-</span>range <span class=\"nu0\">1</span> maxN<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">define</span> fc <span class=\"br0\">(</span>f<span class=\"sy0\">-</span>count N<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">define</span> fa <span class=\"br0\">(</span>f<span class=\"sy0\">-</span>anal N<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>printf  <span class=\"st0\">\"%3d\u00a0%10d\u00a0%10d \u00a0%10.2d\u00a0%%\"</span> N fc fa <span class=\"br0\">(</span><span class=\"sy0\">//</span> <span class=\"br0\">(</span><span class=\"kw1\">abs</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> fa fc<span class=\"br0\">)</span><span class=\"br0\">)</span> fc <span class=\"nu0\">0.01</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 26, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  def factorial(0), do: 1<br/>  def factorial(n), do: Enum.reduce(1..n, 1, &amp;(&amp;1 * &amp;2))<br/>\u00a0<br/>  def loop_length(n), do: loop_length(n, MapSet.new)<br/>\u00a0<br/>  defp loop_length(n, set) do<br/>    r =\u00a0:rand.uniform(n)<br/>    if r in set, do: MapSet.size(set), else: loop_length(n, MapSet.put(set, r))<br/>  end<br/>\u00a0<br/>  def task(runs) do<br/>    IO.puts \" N    average   analytical   (error) \"<br/>    IO.puts \"===  =========  ==========  =========\"<br/>    Enum.each(1..20, fn n -&gt;<br/>      avg = Enum.reduce(1..runs, 0, fn _,sum -&gt; sum + loop_length(n) end) / runs<br/>      analytical = Enum.reduce(1..n, 0, fn i,sum -&gt;<br/>        sum + (factorial(n) /\u00a0:math.pow(n, i) / factorial(n-i))<br/>      end)<br/>     \u00a0:io.format \"~3w  ~9.4f   ~9.4f  (~6.2f%)~n\", [n, avg, analytical, abs(avg/analytical - 1)*100]<br/>    end)<br/>  end<br/>end<br/>\u00a0<br/>runs = 1_000_000<br/>RC.task(runs)</pre>"}, {"lang": "F#", "loc": 50, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System<br/>\u00a0<br/><span class=\"kw1\">let</span> gamma z <span class=\"sy0\">=</span> <br/>    <span class=\"kw1\">let</span> lanczosCoefficients <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">76.18009172947146</span><span class=\"sy0\">;-</span><span class=\"nu0\">86.50532032941677</span><span class=\"sy0\">;</span><span class=\"nu0\">24.01409824083091</span><span class=\"sy0\">;-</span><span class=\"nu0\">1.231739572450155</span><span class=\"sy0\">;</span>0.1208650973866179e<span class=\"sy0\">-</span>2<span class=\"sy0\">;-</span>0.5395239384953e<span class=\"sy0\">-</span>5<span class=\"br0\">]</span><br/>    <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> sumCoefficients acc i coefficients <span class=\"sy0\">=</span><br/>        <span class=\"kw1\">match</span> coefficients <span class=\"kw1\">with</span><br/>        | <span class=\"br0\">[</span><span class=\"br0\">]</span>   <span class=\"sy0\">-&gt;</span> acc<br/>        | h::t <span class=\"sy0\">-&gt;</span> sumCoefficients <span class=\"br0\">(</span>acc <span class=\"sy0\">+</span> <span class=\"br0\">(</span>h<span class=\"sy0\">/</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1.0</span><span class=\"br0\">)</span> t<br/>    <span class=\"kw1\">let</span> gamma <span class=\"sy0\">=</span> <span class=\"nu0\">5.0</span><br/>    <span class=\"kw1\">let</span> x <span class=\"sy0\">=</span> z <span class=\"sy0\">-</span> <span class=\"nu0\">1.0</span><br/>    Math.<span class=\"me1\">Pow</span><span class=\"br0\">(</span>x <span class=\"sy0\">+</span> gamma <span class=\"sy0\">+</span> <span class=\"nu0\">0.5</span>, x <span class=\"sy0\">+</span> <span class=\"nu0\">0.5</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> Math.<span class=\"me1\">Exp</span><span class=\"br0\">(</span> <span class=\"sy0\">-</span><span class=\"br0\">(</span>x <span class=\"sy0\">+</span> gamma <span class=\"sy0\">+</span> <span class=\"nu0\">0.5</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy0\">*</span> Math.<span class=\"me1\">Sqrt</span><span class=\"br0\">(</span> <span class=\"nu0\">2.0</span> <span class=\"sy0\">*</span> Math.<span class=\"me1\">PI</span> <span class=\"br0\">)</span> <span class=\"sy0\">*</span> sumCoefficients <span class=\"nu0\">1.000000000190015</span> <span class=\"br0\">(</span>x <span class=\"sy0\">+</span> <span class=\"nu0\">1.0</span><span class=\"br0\">)</span> lanczosCoefficients<br/>\u00a0<br/><span class=\"kw1\">let</span> factorial n <span class=\"sy0\">=</span> gamma <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">float</span> n<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>.<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> expected n <span class=\"sy0\">=</span><br/>    <span class=\"kw4\">seq</span> <span class=\"br0\">{</span><span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"nu0\">1</span> .. <span class=\"me1\">n</span> <span class=\"kw1\">do</span> <span class=\"kw1\">yield</span> <span class=\"br0\">(</span>factorial n<span class=\"br0\">)</span> <span class=\"sy0\">/</span> System.<span class=\"me1\">Math</span>.<span class=\"me1\">Pow</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">float</span> n<span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"kw4\">float</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>factorial <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">sum</span><br/>\u00a0<br/><span class=\"kw1\">let</span> r <span class=\"sy0\">=</span> System.<span class=\"me1\">Random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> trial n <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> count <span class=\"sy0\">=</span> <span class=\"kw4\">ref</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">let</span> x <span class=\"sy0\">=</span> <span class=\"kw4\">ref</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">let</span> bits <span class=\"sy0\">=</span> <span class=\"kw4\">ref</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>bits <span class=\"sy0\">&amp;&amp;&amp;</span> <span class=\"sy0\">!</span>x<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>        count <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>count <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        bits <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>bits <span class=\"sy0\">|||</span> <span class=\"sy0\">!</span>x<br/>        x <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;&lt;</span> r.<span class=\"me1\">Next</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"sy0\">!</span>count<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">let</span> tested n times <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">float</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">sum</span> <span class=\"br0\">(</span><span class=\"kw4\">seq</span> <span class=\"br0\">{</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"nu0\">1</span> .. <span class=\"me1\">times</span> <span class=\"kw1\">do</span> <span class=\"kw1\">yield</span> <span class=\"br0\">(</span>trial n<span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"kw4\">float</span> times<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> results <span class=\"sy0\">=</span> <span class=\"kw4\">seq</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"nu0\">1</span> .. <span class=\"nu0\">20</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">let</span> avg <span class=\"sy0\">=</span> tested n <span class=\"nu0\">1000000</span><br/>        <span class=\"kw1\">let</span> theory <span class=\"sy0\">=</span> expected n<br/>        <span class=\"kw1\">yield</span> n, avg, theory<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>EntryPoint<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> main argv <span class=\"sy0\">=</span> <br/>    printfn <span class=\"st0\">\" N     average   analytical   (error)\"</span><br/>    printfn <span class=\"st0\">\"------------------------------------\"</span><br/>    results<br/>    <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">iter</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>n, avg, theory<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>        printfn <span class=\"st0\">\"%2i   \u00a0%2.6f   \u00a0%2.6f   \u00a0%+2.3f%%\"</span> n avg theory <span class=\"br0\">(</span><span class=\"br0\">(</span>avg <span class=\"sy0\">/</span> theory <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>.<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">100</span>.<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"nu0\">0</span><br/>\u00a0</pre>"}, {"lang": "Go", "loc": 44, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math\"</span><br/>    <span class=\"st0\">\"math/rand\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">const</span> nmax <span class=\"sy2\">=</span> <span class=\"nu0\">20</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\" N    average    analytical    (error)\"</span><span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"===  =========  ============  =========\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> n <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> n &lt;<span class=\"sy2\">=</span> nmax<span class=\"sy1\">;</span> n<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        a <span class=\"sy2\">:=</span> avg<span class=\"sy1\">(</span>n<span class=\"sy1\">)</span><br/>        b <span class=\"sy2\">:=</span> ana<span class=\"sy1\">(</span>n<span class=\"sy1\">)</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%3d \u00a0%9.4f \u00a0%12.4f  (%6.2f%%)<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span><br/>            n<span class=\"sy1\">,</span> a<span class=\"sy1\">,</span> b<span class=\"sy1\">,</span> math<span class=\"sy3\">.</span>Abs<span class=\"sy1\">(</span>a<span class=\"sy3\">-</span>b<span class=\"sy1\">)</span><span class=\"sy3\">/</span>b<span class=\"sy3\">*</span><span class=\"nu0\">100</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> avg<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">const</span> tests <span class=\"sy2\">=</span> <span class=\"nu1\">1e4</span><br/>    sum <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> t <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> t &lt; tests<span class=\"sy1\">;</span> t<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">var</span> v <span class=\"sy1\">[</span>nmax<span class=\"sy1\">]</span><span class=\"kw4\">bool</span><br/>        <span class=\"kw1\">for</span> x <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"sy3\">!</span>v<span class=\"sy1\">[</span>x<span class=\"sy1\">];</span> x <span class=\"sy2\">=</span> rand<span class=\"sy3\">.</span>Intn<span class=\"sy1\">(</span>n<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            v<span class=\"sy1\">[</span>x<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>            sum<span class=\"sy2\">++</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>sum<span class=\"sy1\">)</span> <span class=\"sy3\">/</span> tests<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> ana<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>    nn <span class=\"sy2\">:=</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>n<span class=\"sy1\">)</span><br/>    term <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy3\">.</span><br/>    sum <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy3\">.</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> nn <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &gt;<span class=\"sy2\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">--</span> <span class=\"sy1\">{</span><br/>        term <span class=\"sy2\">*=</span> <span class=\"nu2\">i</span> <span class=\"sy3\">/</span> nn<br/>        sum <span class=\"sy2\">+=</span> term<br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> sum<br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 54, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Random<br/><span class=\"kw1\">import</span> <span class=\"kw1\">qualified</span> Data<span class=\"sy0\">.</span>Set <span class=\"kw1\">as</span> S<br/><span class=\"kw1\">import</span> Text<span class=\"sy0\">.</span>Printf<br/>\u00a0<br/>findRep <span class=\"sy0\">::</span> <span class=\"br0\">(</span>Random a<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integral\"><span class=\"kw4\">Integral</span></a> a<span class=\"sy0\">,</span> RandomGen b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">-&gt;</span> b <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><br/>findRep n gen <span class=\"sy0\">=</span> findRep<span class=\"st0\">' (S.singleton 1) 1 gen<br/>    where<br/>      findRep'</span> seen len gen<span class=\"st0\">'<br/>          | S.member fx seen = (len, gen'</span><span class=\"st0\">')<br/>          | otherwise        = findRep'</span> <span class=\"br0\">(</span>S<span class=\"sy0\">.</span>insert fx seen<span class=\"br0\">)</span> <span class=\"br0\">(</span>len <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> gen<span class=\"st0\">''</span><br/>          <span class=\"kw1\">where</span><br/>            <span class=\"br0\">(</span>fx<span class=\"sy0\">,</span> gen<span class=\"st0\">''</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> randomR <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span> gen<span class=\"st0\">'<br/>\u00a0<br/>statistical\u00a0:: (Integral a, Random b, Integral b, RandomGen c, Fractional d) =&gt;<br/>               a -&gt; b -&gt; c -&gt; (d, c)<br/>statistical samples size gen =<br/>    let (total, gen'</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> sar samples gen <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> total<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> samples<span class=\"br0\">)</span><span class=\"sy0\">,</span> gen<span class=\"st0\">')<br/>    where<br/>      sar 0        gen'</span> acc <span class=\"sy0\">=</span> <span class=\"br0\">(</span>acc<span class=\"sy0\">,</span> gen<span class=\"st0\">')<br/>      sar samples'</span> gen<span class=\"st0\">' acc =<br/>          let (len, gen'</span><span class=\"st0\">') = findRep size gen'</span><br/>          <span class=\"kw1\">in</span> sar <span class=\"br0\">(</span>samples<span class=\"st0\">' - 1) gen'</span><span class=\"st0\">' (acc + len)<br/>\u00a0<br/>factorial\u00a0:: (Integral a) =&gt; a -&gt; a<br/>factorial n = foldl (*) 1 [1..n]<br/>\u00a0<br/>analytical\u00a0:: (Integral a, Fractional b) =&gt; a -&gt; b<br/>analytical n = sum [fromIntegral num /<br/>                    fromIntegral (factorial (n - i)) /<br/>                    fromIntegral (n ^ i) |<br/>                    i &lt;- [1..n]]<br/>    where num = factorial n<br/>\u00a0<br/>test\u00a0:: (Integral a, Random b, Integral b, PrintfArg b, RandomGen c) =&gt;<br/>        a -&gt; [b] -&gt; c -&gt; IO c<br/>test _       []     gen = return gen<br/>test samples (x:xs) gen = do<br/>  let (st, gen'</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> statistical samples x gen<br/>      an         <span class=\"sy0\">=</span> analytical x<br/>      err        <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:abs\"><span class=\"kw3\">abs</span></a> <span class=\"br0\">(</span>st <span class=\"sy0\">-</span> an<span class=\"br0\">)</span> <span class=\"sy0\">/</span> st <span class=\"sy0\">*</span> <span class=\"nu0\">100.0</span><br/>      str        <span class=\"sy0\">=</span> printf <span class=\"st0\">\"%3d \u00a0%9.4f \u00a0%12.4f  (%6.2f%%)<span class=\"es0\">\\n</span>\"</span><br/>                   x <span class=\"br0\">(</span>st <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"br0\">)</span> <span class=\"br0\">(</span>an <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"br0\">)</span> <span class=\"br0\">(</span>err <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"br0\">)</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStr\"><span class=\"kw3\">putStr</span></a> str<br/>  test samples xs gen<span class=\"st0\">'<br/>\u00a0<br/>main\u00a0:: IO ()<br/>main = do<br/>  putStrLn \" N    average    analytical    (error)\"<br/>  putStrLn \"===  =========  ============  =========\"<br/>  let samples = 10000\u00a0:: Integer<br/>      range   = [1..20]\u00a0:: [Integer]<br/>  _ &lt;- test samples range $ mkStdGen 0<br/>  return ()</span></pre>"}, {"lang": "J", "loc": 4, "block": "<pre class=\"j highlighted_source\">   <span class=\"sy0\">(</span><a class=\"__cf_email__\" data-cfemail=\"2a54046a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, {&amp;<span class=\"nu0\">0</span> <span class=\"nu0\">0</span>@{:<span class=\"sy0\">)</span>^:<span class=\"nu0\">_</span>] <span class=\"nu0\">0</span><br/><span class=\"nu0\">0</span><br/>   <span class=\"sy0\">(</span><a class=\"__cf_email__\" data-cfemail=\"6a14442a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, {&amp;<span class=\"nu0\">0</span> <span class=\"nu0\">0</span>@{:<span class=\"sy0\">)</span>^:<span class=\"nu0\">_</span>] <span class=\"nu0\">1</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">0</span></pre>"}, {"lang": "Java", "loc": 56, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.HashSet</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Random</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Set</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> AverageLoopLength <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> N <span class=\"sy0\">=</span> <span class=\"nu0\">100000</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">//analytical(n) = sum_(i=1)^n (n!/(n-i)!/n**i)</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> analytical<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> factorial <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span>n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> powers <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span>n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        powers<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span><span class=\"sy0\">;</span><br/>        factorial<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            factorial<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> factorial<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> i<span class=\"sy0\">;</span><br/>            powers<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> powers<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> n<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw4\">double</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"co1\">//memoized factorial and powers</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            sum <span class=\"sy0\">+=</span> factorial<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">/</span> factorial<span class=\"br0\">[</span>n <span class=\"sy0\">-</span> i<span class=\"br0\">]</span> <span class=\"sy0\">/</span> powers<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> sum<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> average<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arandom+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Random</span></a> rnd <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arandom+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Random</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> a <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> a <span class=\"sy0\">&lt;</span> N<span class=\"sy0\">;</span> a<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> random <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                random<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> rnd.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            Set<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> seen <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> HashSet<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> current <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> length <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>seen.<span class=\"me1\">add</span><span class=\"br0\">(</span>current<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                length<span class=\"sy0\">++;</span><br/>                current <span class=\"sy0\">=</span> random<span class=\"br0\">[</span>current<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            sum <span class=\"sy0\">+=</span> length<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> sum <span class=\"sy0\">/</span> N<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\" N    average    analytical    (error)\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"===  =========  ============  =========\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">20</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">double</span> avg <span class=\"sy0\">=</span> average<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">double</span> ana <span class=\"sy0\">=</span> analytical<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"%3d \u00a0%9.4f \u00a0%12.4f  (%6.2f%%)\"</span>, i, avg, ana, <span class=\"br0\">(</span><span class=\"br0\">(</span>ana <span class=\"sy0\">-</span> avg<span class=\"br0\">)</span> <span class=\"sy0\">/</span> ana <span class=\"sy0\">*</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 28, "block": "<pre class=\"text highlighted_source\"># Version 5.2<br/>analytical(n::Integer) = sum(factorial(n) / big(n) ^ i / factorial(n - i) for i = 1:n)<br/>\u00a0<br/>function test(n::Integer, times::Integer = 1000000)<br/>    c = 0<br/>    for i = range(0, times)<br/>        x, bits = 1, 0<br/>        while (bits &amp; x) == 0<br/>            c += 1<br/>            bits |= x<br/>            x = 1 &lt;&lt; rand(0:(n - 1))<br/>        end<br/>    end<br/>    return c / times<br/>end<br/>\u00a0<br/>function main(n::Integer)<br/>    println(\" n\\tavg\\texp.\\tdiff\\n-------------------------------\")<br/>    for n in 1:n<br/>        avg = test(n)<br/>        theory = analytical(n)<br/>        diff = (avg / theory - 1) * 100<br/>        @printf(STDOUT, \"%2d\u00a0%8.4f\u00a0%8.4f\u00a0%6.3f%%\\n\", n, avg, theory, diff)<br/>    end<br/>end<br/>\u00a0<br/>main(20)<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 38, "block": "<pre class=\"scala highlighted_source\">const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> NMAX  <span class=\"sy0\">=</span> <span class=\"nu0\">20</span><br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> TESTS <span class=\"sy0\">=</span> <span class=\"nu0\">1000000</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rand <span class=\"sy0\">=</span> java.<span class=\"me1\">util</span>.<span class=\"me1\">Random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun avg<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Double <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>t in <span class=\"nu0\">0</span> until TESTS<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> v <span class=\"sy0\">=</span> BooleanArray<span class=\"br0\">(</span>NMAX<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>v<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            v<span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>            sum++<br/>            x <span class=\"sy0\">=</span> rand.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> sum.<span class=\"me1\">toDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span> / TESTS<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun ana<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Double <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> nn <span class=\"sy0\">=</span> n.<span class=\"me1\">toDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> term <span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> sum <span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in n - <span class=\"nu0\">1</span> downTo <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        term <span class=\"sy0\">*=</span> i / nn<br/>        sum +<span class=\"sy0\">=</span> term<br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> sum<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\" N    average    analytical    (error)\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"===  =========  ============  =========\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>n in <span class=\"nu0\">1</span>..<span class=\"me1\">NMAX</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> avg<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> b <span class=\"sy0\">=</span> ana<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span>String.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"%3d  \u00a0%6.4f  \u00a0%10.4f      (%4.2f%%)\"</span>, n, a, b, Math.<span class=\"me1\">abs</span><span class=\"br0\">(</span>a - b<span class=\"br0\">)</span> / b <span class=\"sy0\">*</span> <span class=\"nu0\">100.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 38, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/>MAXN <span class=\"sy0\">=</span> <span class=\"nu0\">20</span><br/>TIMES <span class=\"sy0\">=</span> <span class=\"nu0\">10000</span><span class=\"co1\">'00</span><br/>\u00a0<br/><span class=\"co1\">'t0=time$(\"ms\")</span><br/><span class=\"kw1\">FOR</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> MAXN<br/>    avg <span class=\"sy0\">=</span> FNtest<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> TIMES<span class=\"br0\">)</span><br/>    theory <span class=\"sy0\">=</span> FNanalytical<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    diff <span class=\"sy0\">=</span> <span class=\"br0\">(</span>avg <span class=\"sy0\">/</span> theory <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">100</span><br/>    <span class=\"kw1\">PRINT</span> n<span class=\"sy0\">,</span> avg<span class=\"sy0\">,</span> theory<span class=\"sy0\">,</span> <span class=\"kw2\">using</span><span class=\"br0\">(</span><span class=\"st0\">\"##.####\"</span><span class=\"sy0\">,</span>diff<span class=\"br0\">)</span>; <span class=\"st0\">\"%\"</span><br/><span class=\"kw1\">NEXT</span><br/><span class=\"co1\">'t1=time$(\"ms\")</span><br/><span class=\"co1\">'print t1-t0; \" ms\"</span><br/><span class=\"kw1\">END</span><br/>\u00a0<br/><span class=\"kw1\">function</span> FNanalytical<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">FOR</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> n<br/>        s <span class=\"sy0\">=</span> s<span class=\"sy0\">+</span> FNfactorial<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">/</span> n^i <span class=\"sy0\">/</span> FNfactorial<span class=\"br0\">(</span>n<span class=\"sy0\">-</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">NEXT</span><br/>    FNanalytical <span class=\"sy0\">=</span> s<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> FNtest<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> times<span class=\"br0\">)</span><br/>    <span class=\"kw1\">FOR</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> times<br/>        x <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> b <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span>b <span class=\"kw1\">AND</span> x<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>            c <span class=\"sy0\">=</span> c <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>            b <span class=\"sy0\">=</span> b <span class=\"kw1\">OR</span> x<br/>            x <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>^int<span class=\"br0\">(</span>n<span class=\"sy0\">*</span><span class=\"kw2\">RND</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">WEND</span><br/>    <span class=\"kw1\">NEXT</span><br/>    FNtest <span class=\"sy0\">=</span> c <span class=\"sy0\">/</span> times<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> FNfactorial<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">IF</span> n<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">OR</span> n<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> FNfactorial<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">ELSE</span> FNfactorial<span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> FNfactorial<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 9, "block": "<pre class=\"text highlighted_source\"><a class=\"__cf_email__\" data-cfemail=\"d295a0bbb69282a0b7a2b7bcb6\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[<br/>  Table[{n, #[[1]], #[[2]], <br/>      Row[{Round[10000 Abs[#[[1]] - #[[2]]]/#[[2]]]/100., \"%\"}]} &amp;@<br/>    N[{Mean[Array[<br/>        <a class=\"__cf_email__\" data-cfemail=\"632f060d04170b232d061017340b0a0f062f0a1017\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[#, 1, UnsameQ[##] &amp;, All] - 1 &amp;[# /. <br/>            MapIndexed[#2[[1]] -&gt; #1 &amp;, <br/>             RandomInteger[{1, n}, n]] &amp;] &amp;, 10000]], <br/>      Sum[n! n^(n - k - 1)/(n - k)!, {k, n}]/n^(n - 1)}, 5], {n, 1, <br/>    20}], {\"N\", \"average\", \"analytical\", \"error\"}]</pre>"}, {"lang": "Nim", "loc": 34, "block": "<pre class=\"text highlighted_source\">import random, math, strfmt<br/>randomize()<br/>\u00a0<br/>const<br/>  maxN = 20<br/>  times = 1_000_000<br/>\u00a0<br/>proc factorial(n: int): float =<br/>  result = 1<br/>  for i in 1 .. n:<br/>    result *= i.float<br/>\u00a0<br/>proc expected(n: int): float =<br/>  for i in 1 .. n:<br/>    result += factorial(n) / pow(n.float, i.float) / factorial(n - i)<br/>\u00a0<br/>proc test(n, times: int): int =<br/>  for i in 1 .. times:<br/>    var<br/>      x = 1<br/>      bits = 0<br/>    while (bits and x) == 0:<br/>      inc result<br/>      bits = bits or x<br/>      x = 1 shl random(n)<br/>\u00a0<br/>echo \" n\\tavg\\texp.\\tdiff\"<br/>echo \"-------------------------------\"<br/>for n in 1 .. maxN:<br/>  let cnt = test(n, times)<br/>  let avg = cnt.float / times<br/>  let theory = expected(n)<br/>  let diff = (avg / theory - 1) * 100<br/>  printlnfmt \"{:2} {:8.4f} {:8.4f} {:6.3f}%\", n, avg, theory, diff</pre>"}, {"lang": "Oberon-2", "loc": 73, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> AvgLoopLen;<br/><span class=\"coMULTI\">(* Oxford Oberon-2 *)</span><br/><span class=\"kw1\">IMPORT</span> Random<span class=\"sy0\">,</span> Out;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Fac<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>; f<span class=\"sy0\">:</span> <span class=\"kw4\">REAL</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">REAL</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\t<span class=\"kw1\">IF</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>\t\t<span class=\"kw1\">RETURN</span> f<br/>\t<span class=\"kw1\">ELSE</span><br/>\t\t<span class=\"kw1\">RETURN</span> Fac<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span>n<span class=\"sy0\">*</span>f<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">END</span><br/><span class=\"kw1\">END</span> Fac;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Power<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>i<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">REAL</span>;<br/><span class=\"kw1\">VAR</span><br/>\tp<span class=\"sy0\">:</span> <span class=\"kw4\">REAL</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\tp <span class=\"sy0\">:=</span> <span class=\"nu0\">1.0</span>;<br/>\t<span class=\"kw1\">WHILE</span> i &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">DO</span> p <span class=\"sy0\">:=</span> p <span class=\"sy0\">*</span> n; <span class=\"kw3\">DEC</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">END</span>;<br/>\t<span class=\"kw1\">RETURN</span> p<br/><span class=\"kw1\">END</span> Power;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Abs<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> <span class=\"kw4\">REAL</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">REAL</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\t<span class=\"kw1\">IF</span> x &lt; <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">RETURN</span> <span class=\"sy0\">-</span>x <span class=\"kw1\">ELSE</span> <span class=\"kw1\">RETURN</span> x <span class=\"kw1\">END</span><br/><span class=\"kw1\">END</span> Abs;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Analytical<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">REAL</span>;<br/><span class=\"kw1\">VAR</span><br/>\ti<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\tres<span class=\"sy0\">:</span> <span class=\"kw4\">REAL</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\tres <span class=\"sy0\">:=</span> <span class=\"nu0\">0.0</span>;<br/>\t<span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> n <span class=\"kw1\">DO</span><br/>\t\tres <span class=\"sy0\">:=</span> res <span class=\"sy0\">+</span> <span class=\"br0\">(</span>Fac<span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"nu0\">1.0</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> Power<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>i<span class=\"br0\">)</span> <span class=\"sy0\">/</span> Fac<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> i<span class=\"sy0\">,</span><span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">END</span>;<br/>\t<span class=\"kw1\">RETURN</span> res<br/><span class=\"kw1\">END</span> Analytical;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Averages<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">REAL</span>;<br/><span class=\"kw1\">CONST</span><br/>\ttimes <span class=\"sy0\">=</span> <span class=\"nu0\">100000</span>;<br/><span class=\"kw1\">VAR</span><br/>\trnds<span class=\"sy0\">:</span> <span class=\"kw4\">SET</span>;<br/>\tr<span class=\"sy0\">,</span>count<span class=\"sy0\">,</span>i<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\tcount <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>; i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>\t<span class=\"kw1\">WHILE</span> i &lt; times <span class=\"kw1\">DO</span><br/>\t\trnds <span class=\"sy0\">:=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span>;<br/>\t\t<span class=\"kw1\">LOOP</span><br/>\t\t\tr <span class=\"sy0\">:=</span> Random.<span class=\"me1\">Roll</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>;<br/>\t\t\t<span class=\"kw1\">IF</span> r <span class=\"kw1\">IN</span> rnds <span class=\"kw1\">THEN</span> <span class=\"kw1\">EXIT</span> <span class=\"kw1\">ELSE</span> <span class=\"kw3\">INCL</span><span class=\"br0\">(</span>rnds<span class=\"sy0\">,</span>r<span class=\"br0\">)</span>; <span class=\"kw3\">INC</span><span class=\"br0\">(</span>count<span class=\"br0\">)</span> <span class=\"kw1\">END</span><br/>\t\t<span class=\"kw1\">END</span>;<br/>\t\t<span class=\"kw3\">INC</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">END</span>;<br/>\u00a0<br/>\t<span class=\"kw1\">RETURN</span> count <span class=\"sy0\">/</span> times<br/><span class=\"kw1\">END</span> Averages;<br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>\ti<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\tav<span class=\"sy0\">,</span>an<span class=\"sy0\">,</span>df<span class=\"sy0\">:</span> <span class=\"kw4\">REAL</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\tRandom.<span class=\"me1\">Randomize</span>;<br/>\tOut.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"        Averages  Analytical  Diff%     \"</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span>;<br/>\t<span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">20</span> <span class=\"kw1\">DO</span><br/>\t\tOut.<span class=\"me1\">Int</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>; Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\": \"</span><span class=\"br0\">)</span>;<br/>\t\tav <span class=\"sy0\">:=</span> Averages<span class=\"br0\">(</span>i<span class=\"br0\">)</span>;an <span class=\"sy0\">:=</span> Analytical<span class=\"br0\">(</span>i<span class=\"br0\">)</span>;df <span class=\"sy0\">:=</span> Abs<span class=\"br0\">(</span>av <span class=\"sy0\">-</span> an<span class=\"br0\">)</span> <span class=\"sy0\">/</span> an <span class=\"sy0\">*</span> <span class=\"nu0\">100.0</span>;<br/>\t\tOut.<span class=\"me1\">Fixed</span><span class=\"br0\">(</span>av<span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Fixed</span><span class=\"br0\">(</span>an<span class=\"sy0\">,</span><span class=\"nu0\">11</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Fixed</span><span class=\"br0\">(</span>df<span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span><br/>\t<span class=\"kw1\">END</span><br/><span class=\"kw1\">END</span> AvgLoopLen.<br/>\u00a0</pre>"}, {"lang": "PARI/GP", "loc": 14, "block": "<pre class=\"parigp highlighted_source\">expected<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">sum</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>n<span class=\"sy0\">,</span>n<span class=\"sy0\">!/</span><span class=\"br0\">(</span>n<span class=\"sy0\">-</span>i<span class=\"br0\">)</span><span class=\"sy0\">!/</span>n<span class=\"sy0\">^</span>i<span class=\"sy0\">,</span><span class=\"nu1\">0</span>.<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>test<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> times<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>ct<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>times<span class=\"sy0\">,</span><br/>    my<span class=\"br0\">(</span>x<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>bits<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"kw1\">bitand</span><span class=\"br0\">(</span>bits<span class=\"sy0\">,</span>x<span class=\"br0\">)</span><span class=\"sy0\">,</span>ct<span class=\"sy0\">++;</span> bits<span class=\"sy0\">=</span><span class=\"kw1\">bitor</span><span class=\"br0\">(</span>bits<span class=\"sy0\">,</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span> x <span class=\"sy0\">=</span> <span class=\"nu1\">1</span><span class=\"sy0\">&lt;&lt;</span><span class=\"kw1\">random</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  ct<br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>TIMES<span class=\"sy0\">=</span><span class=\"nu1\">1000000</span><span class=\"sy0\">;</span><br/><span class=\"br0\">{</span><span class=\"kw1\">for</span><span class=\"br0\">(</span>n<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">20</span><span class=\"sy0\">,</span><br/> my<span class=\"br0\">(</span>cnt<span class=\"sy0\">=</span>test<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> TIMES<span class=\"br0\">)</span><span class=\"sy0\">,</span>avg<span class=\"sy0\">=</span>cnt<span class=\"sy0\">/</span>TIMES<span class=\"sy0\">,</span>ex<span class=\"sy0\">=</span>expected<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">,</span>diff<span class=\"sy0\">=</span><span class=\"br0\">(</span>avg<span class=\"sy0\">/</span>ex<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu1\">100</span>.<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">print</span><span class=\"br0\">(</span>n<span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span>avg<span class=\"sy0\">*</span><span class=\"nu1\">1</span>.<span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span>ex<span class=\"sy0\">*</span><span class=\"nu1\">1</span>.<span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span>diff<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">)</span><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 18, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">constant</span> MAX_N  <span class=\"sy0\">=</span> <span class=\"nu0\">20</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">constant</span> TRIALS <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"me1\">MAX_N</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$N</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$empiric</span> <span class=\"sy0\">=</span> TRIALS R<span class=\"sy0\">/</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> find<span class=\"sy0\">-</span><span class=\"kw1\">loop</span><span class=\"br0\">(</span>random<span class=\"sy0\">-</span>mapping<span class=\"br0\">(</span><span class=\"re0\">$N</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">elems</span> <span class=\"kw1\">xx</span> TRIALS<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$theoric</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span><br/>        <span class=\"kw3\">map</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$k</span> <span class=\"br0\">{</span> <span class=\"re0\">$N</span> <span class=\"sy0\">**</span> <span class=\"br0\">(</span><span class=\"re0\">$k</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> R<span class=\"sy0\">/</span> <span class=\"br0\">[</span><span class=\"sy0\">*</span><span class=\"br0\">]</span> flat <span class=\"re0\">$k</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"re0\">$N</span> <span class=\"sy0\">-</span> <span class=\"re0\">$k</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$N</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$N</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">FIRST</span> <span class=\"kw3\">say</span> <span class=\"st0\">\" N    empiric      theoric      (error)\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">FIRST</span> <span class=\"kw3\">say</span> <span class=\"st0\">\"===  =========  ============  =========\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw3\">printf</span> <span class=\"st0\">\"%3d \u00a0%9.4f \u00a0%12.4f    (%4.2f%%)<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span><br/>            <span class=\"re0\">$N</span><span class=\"sy0\">,</span>  <span class=\"re0\">$empiric</span><span class=\"sy0\">,</span><br/>                        <span class=\"re0\">$theoric</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span> <span class=\"sy0\">*</span> <span class=\"kw3\">abs</span><span class=\"br0\">(</span><span class=\"re0\">$theoric</span> <span class=\"sy0\">-</span> <span class=\"re0\">$empiric</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"re0\">$theoric</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> random<span class=\"sy0\">-</span>mapping <span class=\"br0\">{</span> hash <span class=\"sy0\">.</span><span class=\"me1\">list</span> <span class=\"kw1\">Z</span><span class=\"sy0\">=&gt;</span> <span class=\"sy0\">.</span><span class=\"me1\">roll</span> <span class=\"kw1\">given</span> <span class=\"sy0\">^</span><span class=\"re0\">$^size</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> find<span class=\"sy0\">-</span><span class=\"kw1\">loop</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">|</span> <span class=\"re0\">%^mapping</span><span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span> <span class=\"sy0\">...^</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"re0\">$_</span><span class=\"br0\">}</span><span class=\"sy0\">++</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 33, "block": "<pre class=\"text highlighted_source\">constant MAX = 20,<br/>         ITER = 1000000<br/>\u00a0<br/>function expected(integer n)<br/>atom sum = 0<br/>    for i=1 to n do<br/>        sum += factorial(n) / power(n,i) / factorial(n-i)<br/>    end for<br/>    return sum<br/>end function<br/>\u00a0<br/>function test(integer n)<br/>integer count = 0, x, bits<br/>    for i=1 to ITER do<br/>        x = 1<br/>        bits = 0<br/>        while not and_bits(bits,x) do<br/>            count += 1<br/>            bits = or_bits(bits,x)<br/>            x = power(2,rand(n)-1)<br/>        end while<br/>    end for<br/>    return count/ITER<br/>end function<br/>\u00a0<br/>atom av, ex<br/>    puts(1,\" n     avg.     exp.  (error%)\\n\");<br/>    puts(1,\"==   ======   ======  ========\\n\");<br/>    for n=1 to MAX do<br/>        av = test(n)<br/>        ex = expected(n)<br/>        printf(1,\"%2d\u00a0%8.4f\u00a0%8.4f  (%5.3f%%)\\n\", {n,av,ex,abs(1-av/ex)*100})<br/>    end for</pre>"}, {"lang": "PicoLisp", "loc": 42, "block": "<pre class=\"text highlighted_source\">(scl 4)<br/>(seed (in \"/dev/urandom\" (rd 8)))<br/>\u00a0<br/>(de fact (N)<br/>   (if (=0 N) 1 (apply * (range 1 N))) )<br/>\u00a0<br/>(de analytical (N)<br/>   (sum<br/>      '((I)<br/>         (/ <br/>            (* (fact N) 1.0) <br/>            (** N I) <br/>            (fact (- N I)) ) )<br/>      (range 1 N) ) )<br/>\u00a0<br/>(de testing (N)<br/>   (let (C 0  N (dec N)  X 0  B 0  I 1000000)<br/>      (do I<br/>         (zero B)<br/>         (one X)<br/>         (while (=0 (&amp; B X))<br/>            (inc 'C)<br/>            (setq<br/>               B (| B X)<br/>               X (** 2 (rand 0 N)) ) ) )<br/>      (*/ C 1.0 I) ) )<br/>\u00a0<br/>(let F (2 8 8 6)<br/>   (tab F \"N\" \"Avg\" \"Exp\" \"Diff\")<br/>   (for I 20<br/>      (let (A (testing I)  B (analytical I))<br/>         (tab F<br/>            I<br/>            (round A 4)<br/>            (round B 4) <br/>            (round <br/>               (*<br/>                  (abs (- (*/ A 1.0 B) 1.0)) <br/>                  100 ) <br/>               2 ) ) ) ) ) <br/>\u00a0<br/>(bye)</pre>"}, {"lang": "PowerShell", "loc": 61, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> Get<span class=\"sy0\">-</span>AnalyticalLoopAverage <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"re0\">$N</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>    <span class=\"co1\">#  Expected loop average = sum from i = 1 to N of N! / (N-i)! / N^(N-i+1)</span><br/>    <span class=\"co1\">#  Equivalently, Expected loop average = sum from i = 1 to N of F(i)</span><br/>    <span class=\"co1\">#    where F(N) = 1, and F(i) = F(i+1)*i/N</span><br/>\u00a0<br/>    <span class=\"re0\">$LoopAverage</span> <span class=\"sy0\">=</span> <span class=\"re0\">$Fi</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>    <span class=\"kw3\">If</span> <span class=\"br0\">(</span> <span class=\"re0\">$N</span> <span class=\"kw4\">-eq</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">return</span> <span class=\"re0\">$LoopAverage</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw3\">ForEach</span> <span class=\"br0\">(</span> <span class=\"re0\">$i</span> <span class=\"kw3\">in</span> <span class=\"br0\">(</span><span class=\"re0\">$N</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>..<span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>        <span class=\"re0\">$Fi</span> <span class=\"sy0\">*=</span> <span class=\"re0\">$i</span> <span class=\"sy0\">/</span> <span class=\"re0\">$N</span><br/>        <span class=\"re0\">$LoopAverage</span>  <span class=\"sy0\">+=</span> <span class=\"re0\">$Fi</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"kw3\">return</span> <span class=\"re0\">$LoopAverage</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">function</span> Get<span class=\"sy0\">-</span>ExperimentalLoopAverage <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"re0\">$N</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"re0\">$Tests</span> <span class=\"sy0\">=</span> <span class=\"nu0\">100000</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>    <span class=\"kw3\">If</span> <span class=\"br0\">(</span> <span class=\"re0\">$N</span> <span class=\"kw4\">-eq</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">return</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">#  Using 0 through N-1 instead of 1 through N for speed and simplicity</span><br/>    <span class=\"re0\">$NMO</span> <span class=\"sy0\">=</span> <span class=\"re0\">$N</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>    <span class=\"co1\">#  Create array to hold mapping function</span><br/>    <span class=\"re0\">$F</span> <span class=\"sy0\">=</span> <span class=\"kw1\">New-Object</span> int<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">(</span> <span class=\"re0\">$N</span> <span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"re0\">$Count</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"re0\">$Random</span> <span class=\"sy0\">=</span> <span class=\"kw1\">New-Object</span> System.Random<br/>\u00a0<br/>    <span class=\"kw3\">ForEach</span> <span class=\"br0\">(</span> <span class=\"re0\">$Test</span> <span class=\"kw3\">in</span> <span class=\"nu0\">1</span>..<span class=\"re0\">$Tests</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>        <span class=\"co1\">#  Map each number to a random number</span><br/>        <span class=\"kw3\">ForEach</span> <span class=\"br0\">(</span> <span class=\"re0\">$i</span> <span class=\"kw3\">in</span> <span class=\"nu0\">0</span>..<span class=\"re0\">$NMO</span> <span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>            <span class=\"re0\">$F</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$Random</span>.Next<span class=\"br0\">(</span> <span class=\"re0\">$N</span> <span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">#  For each number...</span><br/>        <span class=\"kw3\">ForEach</span> <span class=\"br0\">(</span> <span class=\"re0\">$i</span> <span class=\"kw3\">in</span> <span class=\"nu0\">0</span>..<span class=\"re0\">$NMO</span> <span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>            <span class=\"co1\">#  Add the number to the list</span><br/>            <span class=\"re0\">$List</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <span class=\"re0\">$Count</span><span class=\"sy0\">++</span><br/>            <span class=\"re0\">$List</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$X</span> <span class=\"sy0\">=</span> <span class=\"re0\">$i</span><br/>\u00a0<br/>            <span class=\"co1\">#  If loop does not yet exist in list...</span><br/>            <span class=\"kw3\">While</span> <span class=\"br0\">(</span> <span class=\"re0\">$F</span><span class=\"br0\">[</span><span class=\"re0\">$X</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span>notin <span class=\"re0\">$List</span> <span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                <span class=\"co1\">#  Go to the next mapped number and add it to the list</span><br/>                <span class=\"re0\">$Count</span><span class=\"sy0\">++</span><br/>                <span class=\"re0\">$List</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$X</span> <span class=\"sy0\">=</span> <span class=\"re0\">$F</span><span class=\"br0\">[</span><span class=\"re0\">$X</span><span class=\"br0\">]</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"re0\">$LoopAvereage</span> <span class=\"sy0\">=</span> <span class=\"re0\">$Count</span> <span class=\"sy0\">/</span> <span class=\"re0\">$N</span> <span class=\"sy0\">/</span> <span class=\"re0\">$Tests</span><br/>    <span class=\"kw3\">return</span> <span class=\"re0\">$LoopAvereage</span><br/>    <span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 27, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">__future__</span> <span class=\"kw1\">import</span> division <span class=\"co1\"># Only necessary for Python 2.X</span><br/><span class=\"kw1\">from</span> <span class=\"kw3\">math</span> <span class=\"kw1\">import</span> factorial<br/><span class=\"kw1\">from</span> <span class=\"kw3\">random</span> <span class=\"kw1\">import</span> randrange<br/>\u00a0<br/>MAX_N <span class=\"sy0\">=</span> <span class=\"nu0\">20</span><br/>TIMES <span class=\"sy0\">=</span> <span class=\"nu0\">1000000</span><br/>\u00a0<br/><span class=\"kw1\">def</span> analytical<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span>factorial<span class=\"br0\">(</span>n<span class=\"br0\">)</span> / <span class=\"kw2\">pow</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> / factorial<span class=\"br0\">(</span>n -i<span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> n+<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> <span class=\"kw3\">test</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> times<span class=\"br0\">)</span>:<br/>    count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>times<span class=\"br0\">)</span>:<br/>        x<span class=\"sy0\">,</span> bits <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">while</span> <span class=\"kw1\">not</span> <span class=\"br0\">(</span>bits &amp; x<span class=\"br0\">)</span>:<br/>            count +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>            bits |<span class=\"sy0\">=</span> x<br/>            x <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> randrange<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> count / times<br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\" n<span class=\"es0\">\\t</span>avg<span class=\"es0\">\\t</span>exp.<span class=\"es0\">\\t</span>diff<span class=\"es0\">\\n</span>-------------------------------\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> MAX_N+<span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>        avg <span class=\"sy0\">=</span> <span class=\"kw3\">test</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> TIMES<span class=\"br0\">)</span><br/>        theory <span class=\"sy0\">=</span> analytical<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        diff <span class=\"sy0\">=</span> <span class=\"br0\">(</span>avg / theory - <span class=\"nu0\">1</span><span class=\"br0\">)</span> * <span class=\"nu0\">100</span><br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"%2d\u00a0%8.4f\u00a0%8.4f\u00a0%6.3f%%\"</span>\u00a0% <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> avg<span class=\"sy0\">,</span> theory<span class=\"sy0\">,</span> diff<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 29, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(require (only-in math factorial))<br/>\u00a0<br/>(define (analytical n)<br/>  (for/sum ([i (in-range 1 (add1 n))])<br/>    (/ (factorial n) (expt n i) (factorial (- n i)))))<br/>\u00a0<br/>(define (test n times)<br/>  (define (count-times seen times)<br/>    (define x (random n))<br/>    (if (memq x seen) times (count-times (cons x seen) (add1 times))))<br/>  (/ (for/fold ([count 0]) ([i times]) (count-times '() count))<br/>     times))<br/>\u00a0<br/>(define (test-table max-n times)<br/>  (displayln \" n avg    theory error\\n------------------------\")<br/>  (for ([i (in-range 1 (add1 max-n))])<br/>    (define average    (test i times))<br/>    (define theory     (analytical i))<br/>    (define difference (* (abs (sub1 (/ average theory))) 100))<br/>    (displayln (~a (~a i #:width 2 #:align 'right)<br/>                   \" \" (real-&gt;decimal-string average 4)<br/>                   \" \" (real-&gt;decimal-string theory 4)<br/>                   \" \" (real-&gt;decimal-string difference 4)<br/>                   \"%\"))))<br/>\u00a0<br/>(test-table 20 10000)<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 36, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program computes the average loop length mapping a random field 1\u00b7\u00b7\u00b7N \u2500\u2500\u2500\u25ba 1\u00b7\u00b7\u00b7N */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> runs tests seed <span class=\"sy0\">.</span>                      <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">if</span>  runs ==<span class=\"st0\">''</span> <span class=\"sy0\">|</span>  runs ==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> runs =      <span class=\"nu0\">40</span> <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">if</span> tests ==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> tests ==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> tests= <span class=\"nu0\">1000000</span> <span class=\"coMULTI\">/* \"      \"         \"   \"   \"     \"    */</span><br/><span class=\"kw1\">if</span> <span class=\"kw6\">datatype</span><span class=\"br0\">(</span>seed, <span class=\"st0\">'W'</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> <span class=\"kw6\">random</span> ,, seed <span class=\"coMULTI\">/*Is integer?   For RAND repeatability.*/</span><br/>!<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>;         \u00a0!<span class=\"sy0\">.</span>0=<span class=\"nu0\">1</span>                             <span class=\"coMULTI\">/*used for  factorial (!)  memoization.*/</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">100000</span>                            <span class=\"coMULTI\">/*be able to calculate 25k! if need be.*/</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"kw6\">max</span><span class=\"br0\">(</span><span class=\"nu0\">9</span>, <span class=\"kw6\">length</span><span class=\"br0\">(</span>\u00a0!<span class=\"br0\">(</span>runs<span class=\"br0\">)</span> <span class=\"br0\">)</span>   <span class=\"br0\">)</span>      <span class=\"coMULTI\">/*set the NUMERIC DIGITS for \u00a0!(runs). */</span><br/><span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>     runs, <span class=\"nu0\">24</span><span class=\"br0\">)</span>      <span class=\"st0\">'runs'</span>             <span class=\"coMULTI\">/*display number of runs   we're using.*/</span><br/><span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>    tests, <span class=\"nu0\">24</span><span class=\"br0\">)</span>      <span class=\"st0\">'tests'</span>            <span class=\"coMULTI\">/*   \"       \"    \" tests    \"     \"   */</span><br/><span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span> <span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">24</span><span class=\"br0\">)</span>      <span class=\"st0\">'digits'</span>           <span class=\"coMULTI\">/*   \"       \"    \" digits   \"     \"   */</span><br/><span class=\"kw1\">say</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">\"        N    average     exact    \u00a0% error \"</span>     <span class=\"coMULTI\">/* \u25c4\u2500\u2500\u2500 title, header \u25ba\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  */</span><br/>hdr=<span class=\"st0\">\"       \u2550\u2550\u2550  \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550  \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550  \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\"</span>;       pad=<span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>,<span class=\"nu0\">3</span><span class=\"br0\">)</span>  <span class=\"coMULTI\">/* \u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  */</span><br/><span class=\"kw1\">say</span> hdr<br/>         <span class=\"kw1\">do</span> #=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> runs;   av=fmtD<span class=\"br0\">(</span> exact<span class=\"br0\">(</span>#<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"coMULTI\">/*use four digits past decimal point.  */</span><br/>                             xa=fmtD<span class=\"br0\">(</span> exper<span class=\"br0\">(</span>#<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"coMULTI\">/* \"    \"    \"      \"     \"      \"     */</span><br/>         <span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>#,<span class=\"nu0\">9</span><span class=\"br0\">)</span>  pad xa pad av pad fmtD<span class=\"br0\">(</span> <span class=\"kw6\">abs</span><span class=\"br0\">(</span>xa-av<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">100</span> <span class=\"sy0\">/</span> av<span class=\"br0\">)</span>   <span class=\"coMULTI\">/*show values.*/</span><br/>         <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*#*/</span><br/><span class=\"kw1\">say</span> hdr                                          <span class=\"coMULTI\">/*display the final header (some bars).*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>!:     <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span>\u00a0!<span class=\"sy0\">.</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> z;                      <span class=\"kw1\">if</span>\u00a0!<span class=\"sy0\">.</span>z<span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span>\u00a0!<span class=\"sy0\">.</span>z<br/>      \u00a0!=<span class=\"nu0\">1</span>;       <span class=\"kw1\">do</span> j=<span class=\"nu0\">2</span>  <span class=\"kw2\">for</span> z -<span class=\"nu0\">1</span>; \u00a0!=!<span class=\"sy0\">*</span>j; \u00a0!<span class=\"sy0\">.</span>j=!;  <span class=\"kw3\">end</span>; <span class=\"coMULTI\">/*compute factorial*/</span>   <span class=\"kw1\">return</span>\u00a0!<br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>exact: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x;  s=<span class=\"nu0\">0</span>;     <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> x;  s=s +\u00a0!<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">/</span>\u00a0!<span class=\"br0\">(</span>x-j<span class=\"br0\">)</span> <span class=\"sy0\">/</span> x<span class=\"sy0\">**</span>j;  <span class=\"kw3\">end</span>;   <span class=\"kw1\">return</span> s<br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>exper: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> n;  k=<span class=\"nu0\">0</span>;     <span class=\"kw1\">do</span> tests;   $<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>                      <span class=\"coMULTI\">/*do it TESTS times.*/</span><br/>                                 <span class=\"kw1\">do</span> n;    r=<span class=\"kw6\">random</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, n<span class=\"br0\">)</span>;      <span class=\"kw1\">if</span> $<span class=\"sy0\">.</span>r  <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span><br/>                                 $<span class=\"sy0\">.</span>r=<span class=\"nu0\">1</span>;   k=k + <span class=\"nu0\">1</span>                   <span class=\"coMULTI\">/*bump the counter. */</span><br/>                                 <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*n*/</span><br/>                              <span class=\"kw3\">end</span>      <span class=\"coMULTI\">/*tests*/</span><br/>       <span class=\"kw1\">return</span> k<span class=\"sy0\">/</span>tests<br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>fmtD:  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> y,d;     d=<span class=\"kw6\">word</span><span class=\"br0\">(</span>d <span class=\"nu0\">4</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>;    y=<span class=\"kw6\">format</span><span class=\"br0\">(</span>y, , d<span class=\"br0\">)</span>;     <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span>  y  w  <span class=\"st0\">'.'</span>  f<br/>       <span class=\"kw1\">if</span> f=<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span>  w <span class=\"sy0\">||</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>, d +<span class=\"nu0\">1</span><span class=\"br0\">)</span>;                                  <span class=\"kw1\">return</span> y</pre>"}, {"lang": "Ruby", "loc": 25, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> <span class=\"kw3\">Integer</span><br/>  <span class=\"kw1\">def</span> factorial<br/>    <span class=\"kw2\">self</span> == <span class=\"nu0\">0</span>\u00a0? <span class=\"nu0\">1</span>\u00a0: <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"kw2\">self</span><span class=\"br0\">)</span>.<span class=\"me1\">inject</span><span class=\"br0\">(</span>:<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> rand_until_rep<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  rands = <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>  <span class=\"kw3\">loop</span> <span class=\"kw1\">do</span><br/>    r = <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">n</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">return</span> rands.<span class=\"me1\">size</span> <span class=\"kw1\">if</span> rands<span class=\"br0\">[</span>r<span class=\"br0\">]</span><br/>    rands<span class=\"br0\">[</span>r<span class=\"br0\">]</span> = <span class=\"kw2\">true</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>runs = <span class=\"nu0\">1</span>_000_000<br/>\u00a0<br/><span class=\"kw3\">puts</span> <span class=\"st0\">\" N    average    exp.        diff   \"</span>,<br/>     <span class=\"st0\">\"===  ========  ========  ===========\"</span><br/><span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">20</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>n<span class=\"sy0\">|</span><br/>  sum_of_runs = runs.<span class=\"me1\">times</span>.<span class=\"me1\">inject</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>sum, _<span class=\"sy0\">|</span> sum <span class=\"sy0\">+</span>= rand_until_rep<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  avg = sum_of_runs <span class=\"sy0\">/</span> runs.<span class=\"me1\">to_f</span><br/>  analytical = <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">n</span><span class=\"br0\">)</span>.<span class=\"me1\">inject</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>sum, i<span class=\"sy0\">|</span> sum <span class=\"sy0\">+</span>= <span class=\"br0\">(</span>n.<span class=\"me1\">factorial</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>n<span class=\"sy0\">**</span>i<span class=\"br0\">)</span>.<span class=\"me1\">to_f</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>n<span class=\"sy0\">-</span>i<span class=\"br0\">)</span>.<span class=\"me1\">factorial</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"%3d \u00a0%8.4f \u00a0%8.4f  (%8.4f%%)\"</span> <span class=\"sy0\">%</span> <span class=\"br0\">[</span>n, avg, analytical, <span class=\"br0\">(</span>avg<span class=\"sy0\">/</span>analytical <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">100</span><span class=\"br0\">]</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Rust", "loc": 77, "block": "<pre class=\"text highlighted_source\">extern crate rand;<br/>\u00a0<br/>use rand::{ThreadRng, thread_rng};<br/>use rand::distributions::{IndependentSample, Range};<br/>use std::collections::HashSet;<br/>use std::env;<br/>use std::process;<br/>\u00a0<br/>fn help() {<br/>    println!(\"usage: average_loop_length &lt;max_N&gt; &lt;trials&gt;\");<br/>}<br/>\u00a0<br/>fn main() {<br/>    let args: Vec&lt;String&gt; = env::args().collect();<br/>    let mut max_n: u32 = 20;<br/>    let mut trials: u32 = 1000;<br/>\u00a0<br/>    match args.len() {<br/>        1 =&gt; {}<br/>        3 =&gt; {<br/>            max_n = args[1].parse::&lt;u32&gt;().unwrap();<br/>            trials = args[2].parse::&lt;u32&gt;().unwrap();<br/>        }<br/>        _ =&gt; {<br/>            help();<br/>            process::exit(0);<br/>        }<br/>    }<br/>\u00a0<br/>    let mut rng = thread_rng();<br/>\u00a0<br/>    println!(\" N    average    analytical    (error)\");<br/>    println!(\"===  =========  ============  =========\");<br/>    for n in 1..(max_n + 1) {<br/>        let the_analytical = analytical(n);<br/>        let the_empirical = empirical(n, trials, &amp;mut rng);<br/>        println!(\" {:&gt;2}     {:3.4}        {:3.4}  ( {:&gt;+1.2}%)\",<br/>                 n,<br/>                 the_empirical,<br/>                 the_analytical,<br/>                 100f64 * (the_empirical / the_analytical - 1f64));<br/>    }<br/>}<br/>\u00a0<br/>fn factorial(n: u32) -&gt; f64 {<br/>    (1..n + 1).fold(1f64, |p, n| p * n as f64)<br/>}<br/>\u00a0<br/>fn analytical(n: u32) -&gt; f64 {<br/>    let sum: f64 = (1..(n + 1))<br/>                       .map(|i| factorial(n) / (n as f64).powi(i as i32) / factorial(n - i))<br/>                       .fold(0f64, |a, v| a + v);<br/>    sum<br/>}<br/>\u00a0<br/>fn empirical(n: u32, trials: u32, rng: &amp;mut ThreadRng) -&gt; f64 {<br/>    let sum: f64 = (0..trials)<br/>                       .map(|_t| {<br/>                           let mut item = 1u32;<br/>                           let mut seen = HashSet::new();<br/>                           let range = Range::new(1u32, n + 1);<br/>\u00a0<br/>                           for step in 0..n {<br/>                               if seen.contains(&amp;item) {<br/>                                   return step as f64;<br/>                               }<br/>                               seen.insert(item);<br/>                               item = range.ind_sample(rng);<br/>                           }<br/>                           n as f64<br/>                       })<br/>                       .fold(0f64, |a, v| a + v);<br/>    sum / trials as f64<br/>}<br/>\u00a0<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 39, "block": "<pre class=\"scala highlighted_source\">\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">util</span>.<span class=\"me1\">Random</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> AverageLoopLength <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> factorial<span class=\"sy0\">:</span> Stream<span class=\"br0\">[</span>Double<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">#::</span> factorial.<span class=\"me1\">zip</span><span class=\"br0\">(</span>Stream.<span class=\"me1\">from</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>n <span class=\"sy0\">=&gt;</span> n.<span class=\"sy0\">_</span>2 <span class=\"sy0\">*</span> factorial<span class=\"br0\">(</span>n.<span class=\"sy0\">_</span>2 - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> expected<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">1</span> to n<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">yield</span></a> factorial<span class=\"br0\">(</span>n<span class=\"br0\">)</span> / Math.<span class=\"me1\">pow</span><span class=\"br0\">(</span>n, i<span class=\"br0\">)</span> / factorial<span class=\"br0\">(</span>n - i<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">sum</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> trial<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span>Double <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> x <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> bits <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>bits <span class=\"sy0\">&amp;</span> x<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      count <span class=\"sy0\">=</span> count + <span class=\"nu0\">1</span><br/>      bits <span class=\"sy0\">=</span> bits | x<br/>      x <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> Random.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    count<br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> tested<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int, times<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">1</span> to times<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">yield</span></a> trial<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">sum</span> / times<br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> results <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">1</span> to <span class=\"nu0\">20</span><span class=\"sy0\">;</span><br/>                     avg <span class=\"sy0\">=</span> tested<span class=\"br0\">(</span>n, <span class=\"nu0\">1000000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                     theory <span class=\"sy0\">=</span> expected<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">yield</span></a> <span class=\"br0\">(</span>n, avg, theory, <span class=\"br0\">(</span>avg / theory - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/>  println<span class=\"br0\">(</span><span class=\"st0\">\"n          avg         exp      diff\"</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span><span class=\"st0\">\"------------------------------------\"</span><span class=\"br0\">)</span><br/>  results foreach <span class=\"br0\">{</span> n <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>      println<span class=\"br0\">(</span>f<span class=\"st0\">\"${n._1}%2d    ${n._2}%2.6f    ${n._3}%2.6f    ${n._4}%2.3f%%\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Scheme", "loc": 58, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>import <span class=\"br0\">(</span>scheme base<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>scheme <span class=\"kw1\">write</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>srfi <span class=\"nu0\">1</span> lists<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>only <span class=\"br0\">(</span>srfi <span class=\"nu0\">13</span> strings<span class=\"br0\">)</span> string<span class=\"sy0\">-</span>pad<span class=\"sy0\">-</span>right<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>srfi <span class=\"nu0\">27</span> random<span class=\"sy0\">-</span>bits<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>analytical<span class=\"sy0\">-</span>function n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>factorial n<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>fold <span class=\"sy0\">*</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span>iota n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">; </span><br/>  <span class=\"br0\">(</span>fold <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>i sum<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"sy0\">+</span> sum<br/>             <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span>factorial n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> n i<span class=\"br0\">)</span> <span class=\"br0\">(</span>factorial <span class=\"br0\">(</span><span class=\"sy0\">-</span> n i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"nu0\">0</span> <br/>        <span class=\"br0\">(</span>iota n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>simulation n runs<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>single<span class=\"sy0\">-</span>simulation<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>random<span class=\"sy0\">-</span>source<span class=\"sy0\">-</span>randomize<span class=\"sy0\">!</span> default<span class=\"sy0\">-</span>random<span class=\"sy0\">-</span>source<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>vec <span class=\"br0\">(</span><span class=\"kw1\">make-vector</span> n #f<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span> loop <span class=\"br0\">(</span><span class=\"br0\">(</span>count <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span>num <span class=\"br0\">(</span>random<span class=\"sy0\">-</span>integer n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> vec num<span class=\"br0\">)</span><br/>          count<br/>          <span class=\"br0\">(</span><span class=\"kw1\">begin</span> <span class=\"br0\">(</span><span class=\"kw1\">vector-set!</span> vec num #t<span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span>loop <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"nu0\">1</span> count<span class=\"br0\">)</span><br/>                       <span class=\"br0\">(</span>random<span class=\"sy0\">-</span>integer n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">;;</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> loop <span class=\"br0\">(</span><span class=\"br0\">(</span>total <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>run runs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> run<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"sy0\">/</span> total runs<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>loop <span class=\"br0\">(</span><span class=\"sy0\">+</span> total <span class=\"br0\">(</span>single<span class=\"sy0\">-</span>simulation<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"sy0\">-</span> run <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\" N   average   formula   (error) <span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"=== ========= ========= =========<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">for-each</span> <br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>simulation <span class=\"br0\">(</span>inexact <span class=\"br0\">(</span>simulation n <span class=\"nu0\">10000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>formula <span class=\"br0\">(</span>inexact <span class=\"br0\">(</span>analytical<span class=\"sy0\">-</span>function n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">display</span> <br/>        <span class=\"br0\">(</span><span class=\"kw1\">string-append</span><br/>          <span class=\"st0\">\" \"</span><br/>          <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>pad<span class=\"sy0\">-</span>right <span class=\"br0\">(</span>number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> n<span class=\"br0\">)</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>          <span class=\"st0\">\"   \"</span><br/>          <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>pad<span class=\"sy0\">-</span>right <span class=\"br0\">(</span>number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> simulation<span class=\"br0\">)</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>          <span class=\"st0\">\"   \"</span><br/>          <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>pad<span class=\"sy0\">-</span>right <span class=\"br0\">(</span>number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> formula<span class=\"br0\">)</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>          <span class=\"st0\">\"   (\"</span><br/>          <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>pad<span class=\"sy0\">-</span>right <br/>            <span class=\"br0\">(</span>number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">100</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> simulation formula<span class=\"br0\">)</span> formula<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>          <span class=\"st0\">\"%)\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>iota <span class=\"nu0\">20</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Seed7", "loc": 64, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"float.s7i\";<br/>\u00a0<br/>const integer: TESTS is 1000000;<br/>\u00a0<br/>const func float: factorial (in integer: number) is func<br/>  result<br/>    var float: factorial is 1.0;<br/>  local<br/>    var integer: i is 0;<br/>  begin<br/>    for i range 2 to number do<br/>      factorial *:= flt(i);<br/>    end for;<br/>  end func;<br/>\u00a0<br/>const func float: analytical (in integer: number) is func<br/>  result<br/>    var float: sum is 0.0;<br/>  local<br/>    var integer: i is 0;<br/>  begin<br/>    for i range 1 to number do<br/>      sum +:= factorial(number) / factorial(number - i) / flt(number)**i;<br/>    end for;<br/>  end func;<br/>\u00a0<br/>const func float: experimental (in integer: number) is func<br/>  result<br/>    var float: experimental is 0.0;<br/>  local<br/>    var integer: run is 0;<br/>    var set of integer: seen is EMPTY_SET;<br/>    var integer: current is 1;<br/>    var integer: count is 0;<br/>  begin<br/>    for run range 1 to TESTS do<br/>      current\u00a0:= 1;<br/>      seen\u00a0:= EMPTY_SET;<br/>      while current not in seen do<br/>        incr(count);<br/>        incl(seen, current);<br/>        current\u00a0:= rand(1, number);<br/>      end while;<br/>    end for;<br/>    experimental\u00a0:= flt(count) / flt(TESTS);<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var integer: number is 0;<br/>    var float: analytical is 0.0;<br/>    var float: experimental is 0.0;<br/>    var float: err is 0.0;<br/>  begin<br/>    writeln(\" N  avg    calc  \u00a0%diff\");<br/>    for number range 1 to 20 do<br/>      analytical\u00a0:= analytical(number);<br/>      experimental\u00a0:= experimental(number);<br/>      err\u00a0:= abs(experimental - analytical) / analytical * 100.0;<br/>      writeln(number lpad 2 &lt;&amp; experimental digits 4 lpad 7 &lt;&amp;<br/>              analytical digits 4 lpad 7 &lt;&amp; err digits 3 lpad 7);<br/>    end for;<br/>  end func;</pre>"}, {"lang": "Tcl", "loc": 40, "block": "<pre class=\"tcl highlighted_source\"><span class=\"co1\"># Generate a list of the numbers increasing from $a to $b</span><br/><span class=\"kw1\">proc</span> range <span class=\"br0\">{</span>a b<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> result <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$a</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$b</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> a<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">lappend</span> result <span class=\"re0\">$a</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$result</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Computing the expected value analytically</span><br/><span class=\"kw1\">proc</span> tcl::<span class=\"me1\">mathfunc</span>::<span class=\"me1\">factorial</span> n <span class=\"br0\">{</span><br/>   \u00a0::<span class=\"me1\">tcl</span>::<span class=\"me1\">mathop</span>::<span class=\"sy0\">*</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"br0\">[</span>range <span class=\"nu0\">2</span> <span class=\"re0\">$n</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> Analytical <span class=\"br0\">{</span>n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> sum <span class=\"nu0\">0.0</span><br/>    <span class=\"kw1\">foreach</span> x <span class=\"br0\">[</span>range <span class=\"nu0\">1</span> <span class=\"re0\">$n</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> sum <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$sum</span> + factorial<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> / factorial<span class=\"br0\">(</span><span class=\"re0\">$n</span>-<span class=\"re0\">$x</span><span class=\"br0\">)</span> / double<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"re0\">$x</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$sum</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Determining an approximation to the value experimentally</span><br/><span class=\"kw1\">proc</span> Experimental <span class=\"br0\">{</span>n numTests<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> count <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">set</span> u0 <span class=\"br0\">[</span>lrepeat <span class=\"re0\">$n</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">foreach</span> run <span class=\"br0\">[</span>range <span class=\"nu0\">1</span> <span class=\"re0\">$numTests</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> unseen <span class=\"re0\">$u0</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$unseen</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> count<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">lset</span> unseen <span class=\"re0\">$i</span> <span class=\"nu0\">0</span><br/>\t    <span class=\"kw1\">set</span> i <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>int<span class=\"br0\">(</span>rand<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$count</span> / double<span class=\"br0\">(</span><span class=\"re0\">$numTests</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Tabulate the results in exactly the original format</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\" N    average    analytical    (error)\"</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"===  =========  ============  =========\"</span><br/><span class=\"kw1\">foreach</span> n <span class=\"br0\">[</span>range <span class=\"nu0\">1</span> <span class=\"nu0\">20</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> a <span class=\"br0\">[</span>Analytical <span class=\"re0\">$n</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> e <span class=\"br0\">[</span>Experimental <span class=\"re0\">$n</span> <span class=\"nu0\">100000</span><span class=\"br0\">]</span><br/>    <span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"%3d \u00a0%9.4f \u00a0%12.4f  (%6.2f%%)\"</span> <span class=\"re0\">$n</span> <span class=\"re0\">$e</span> <span class=\"re0\">$a</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>abs<span class=\"br0\">(</span><span class=\"re0\">$e</span>-<span class=\"re0\">$a</span><span class=\"br0\">)</span>/<span class=\"re0\">$a</span><span class=\"sy0\">*</span><span class=\"nu0\">100.0</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Unicon", "loc": 39, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">link</span> printf<span class=\"sy0\">,</span> factors<br/>\u00a0<br/>$<span class=\"kw6\">define</span> MAX_N <span class=\"nu0\">20</span><br/>$<span class=\"kw6\">define</span> TIMES <span class=\"nu0\">1000000</span><br/>$<span class=\"kw6\">define</span> RAND_MAX <span class=\"nu0\">2147483647</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> expected<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw2\">local</span> sum <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">every</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n <span class=\"kw1\">do</span><br/>        sum <span class=\"sy0\">+:=</span> factorial<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>n <span class=\"sy0\">^</span> i<span class=\"br0\">)</span> <span class=\"sy0\">/</span> factorial<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> sum<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> test<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> times<span class=\"br0\">)</span><br/>    <span class=\"kw2\">local</span> i<span class=\"sy0\">,</span> count <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> bits<br/>    <span class=\"kw1\">every</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> times<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>\tx <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>\tbits <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">while</span> <span class=\"kw4\">iand</span><span class=\"br0\">(</span>bits<span class=\"sy0\">,</span> x<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>            count <span class=\"sy0\">+:=</span> <span class=\"nu0\">1</span><br/>            bits <span class=\"sy0\">:=</span> <span class=\"kw4\">ior</span><span class=\"br0\">(</span>bits<span class=\"sy0\">,</span> x<span class=\"br0\">)</span><br/>            x <span class=\"sy0\">:=</span> <span class=\"kw4\">ishift</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">,</span> <span class=\"sy0\">?</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> count<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>void<span class=\"br0\">)</span><br/>    <span class=\"kw2\">local</span> n<span class=\"sy0\">,</span> cnt<span class=\"sy0\">,</span> avg<span class=\"sy0\">,</span> theory<span class=\"sy0\">,</span> diff<br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\" n<span class=\"es0\">\\t</span>avg<span class=\"es0\">\\t</span>exp.<span class=\"es0\">\\t</span>diff<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"kw4\">repl</span><span class=\"br0\">(</span><span class=\"st0\">\"-\"</span><span class=\"sy0\">,</span><span class=\"nu0\">29</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> n <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> MAX_N <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        cnt <span class=\"sy0\">:=</span> test<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> TIMES<span class=\"br0\">)</span><br/>        avg <span class=\"sy0\">:=</span> <span class=\"kw4\">real</span><span class=\"br0\">(</span>cnt<span class=\"br0\">)</span> <span class=\"sy0\">/</span> TIMES<br/>        theory <span class=\"sy0\">:=</span> expected<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        diff <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>avg <span class=\"sy0\">/</span> theory <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">100</span><br/>        printf<span class=\"br0\">(</span><span class=\"st0\">\"%2d\u00a0%8.4r\u00a0%8.4r\u00a0%6.3r%%<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> avg<span class=\"sy0\">,</span> theory<span class=\"sy0\">,</span> diff<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "zkl", "loc": 33, "block": "<pre class=\"text highlighted_source\">const N=20;<br/>\u00a0<br/>(\" N    average    analytical    (error)\").println();<br/>(\"===  =========  ============  =========\").println();<br/>foreach n in ([1..N]){<br/>   a\u00a0:= avg(n);<br/>   b\u00a0:= ana(n);<br/>   \"%3d \u00a0%9.4f \u00a0%12.4f  (%6.2f%%)\".fmt(<br/>            n, a, b, ((a-b)/b*100)).println();<br/>}<br/>\u00a0<br/>fcn f(n){ (0).random(n) }<br/>\u00a0<br/>fcn avg(n){<br/>   tests\u00a0:= 0d10_000;<br/>   sum\u00a0:= 0;<br/>   do(tests){<br/>      v:=(0).pump(n,List,T(Void,False)).copy();<br/>      while(1){<br/>         z\u00a0:= f(n);<br/>         if(v[z]) break;<br/>\t v[z] = True;<br/>\t sum += 1;<br/>      }<br/>   }<br/>   return(sum.toFloat() / tests);<br/>}<br/>\u00a0<br/>fcn fact(n) { (1).reduce(n,fcn(N,n){N*n},1.0) } //--&gt;Float<br/>fcn ana(n){<br/>   n=n.toFloat();<br/>   (1).reduce(n,'wrap(sum,i){ sum+fact(n)/n.pow(i)/fact(n-i) },0.0);<br/>}</pre>"}]}