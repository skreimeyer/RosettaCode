{"task": "Repeat_a_string", "blocks": [{"lang": "4DOS Batch", "loc": 10, "block": "<pre class=\"text highlighted_source\">gosub repeat ha 5<br/>echo\u00a0%@repeat[*,5]<br/>quit<br/>\u00a0<br/>:Repeat [String Times]<br/>    do\u00a0%Times%<br/>        echos\u00a0%String%<br/>    enddo<br/>    echo.<br/>return</pre>"}, {"lang": "8th", "loc": 2, "block": "<pre class=\"text highlighted_source\">\"ha\" 5 s:*<br/>. cr</pre>"}, {"lang": "ActionScript", "loc": 7, "block": "<pre class=\"actionscript highlighted_source\"><span class=\"kw2\">function</span> repeatString<span class=\"br0\">(</span><span class=\"kw3\">string</span>:<span class=\"kw3\">String</span>, numTimes:uint<span class=\"br0\">)</span>:<span class=\"kw3\">String</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw2\">var</span> output:<span class=\"kw3\">String</span> = <span class=\"st0\">\"\"</span>;<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw2\">var</span> i:uint = <span class=\"nu0\">0</span>; i <span class=\"sy0\">&lt;</span> numTimes; i++<span class=\"br0\">)</span><br/>\t\toutput += <span class=\"kw3\">string</span>;<br/>\t<span class=\"kw1\">return</span> output;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ada", "loc": 7, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Fixed</span>;  <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Fixed</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;        <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> String_Multiplication <span class=\"kw1\">is</span><br/><span class=\"kw1\">begin</span><br/>   Put_Line <span class=\"br0\">(</span><span class=\"nu0\">5</span> * <span class=\"st0\">\"ha\"</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> String_Multiplication;</pre>"}, {"lang": "Aime", "loc": 1, "block": "<pre class=\"text highlighted_source\">call_n(5, o_text, \"ha\");</pre>"}, {"lang": "ALGOL 68", "loc": 2, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw22\">print</span> <span class=\"br0\">(</span>5 <span class=\"sy1\">*</span> <span class=\"st0\">\"ha\"</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "APL", "loc": 2, "block": "<pre class=\"text highlighted_source\">      10\u2374'ha'<br/>hahahahaha</pre>"}, {"lang": "AppleScript", "loc": 5, "block": "<pre class=\"applescript highlighted_source\"><span class=\"kw3\">set</span> str <span class=\"kw3\">to</span> <span class=\"st0\">\"ha\"</span><br/><span class=\"kw3\">set</span> final_string <span class=\"kw3\">to</span> <span class=\"st0\">\"\"</span><br/><span class=\"kw3\">repeat</span> <span class=\"nu0\">5</span> <span class=\"kw3\">times</span><br/>    <span class=\"kw3\">set</span> final_string <span class=\"kw3\">to</span> final_string <span class=\"sy0\">&amp;</span> str<br/><span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span></pre>"}, {"lang": "Applesoft BASIC", "loc": 3, "block": "<pre class=\"text highlighted_source\">FOR I = 1 TO 5\u00a0: S$ = S$ + \"HA\"\u00a0: NEXT<br/>\u00a0<br/>? \"X\" SPC(20) \"X\"</pre>"}, {"lang": "ATS", "loc": 34, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>//<br/>// How to compile:<br/>// patscc -DATS_MEMALLOC_LIBC -o string_repeat string_repeat.dats<br/>//<br/>\u00a0<br/>#include<br/>\"share/atspre_staload.hats\"<br/>\u00a0<br/>fun<br/>string_repeat<br/>(<br/>  x: string, n: intGte(0)<br/>)\u00a0: Strptr1 = res where<br/>{<br/>  val xs =<br/>    list_make_elt&lt;string&gt;(n, x)<br/>  val res = stringlst_concat($UNSAFE.list_vt2t(xs))<br/>  val ((*freed*)) = list_vt_free(xs)<br/>} (* end of [string_repeat] *)<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0<br/>implement<br/>main0 () = let<br/>//<br/>val ha5 = string_repeat(\"ha\", 5)<br/>val ((*void*)) = println! (\"ha5 = \\\"\", ha5, \"\\\"\")<br/>val ((*freed*)) = strptr_free (ha5)<br/>//<br/>in<br/>  // nothing<br/>end // end of [main0]<br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 8, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <a href=\"http://www.autohotkey.com/docs/commands/Repeat.htm\"><span class=\"kw3\">Repeat</span></a><span class=\"br0\">(</span><span class=\"st0\">\"ha\"</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Repeat.htm\"><span class=\"kw3\">Repeat</span></a><span class=\"br0\">(</span>String<span class=\"sy0\">,</span>Times<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%Times%</span><br/>    Output <span class=\"sy0\">.=</span> String<br/>  <span class=\"kw1\">Return</span> Output<br/><span class=\"br0\">}</span></pre>"}, {"lang": "AutoIt", "loc": 3, "block": "<pre class=\"autoit highlighted_source\"><span class=\"kw5\">#include</span><span class=\"co1\"> &lt;String.au3&gt;</span><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm\"><span class=\"kw3\">ConsoleWrite</span></a><span class=\"br0\">(</span><span class=\"kw4\">_StringRepeat</span><span class=\"br0\">(</span><span class=\"st0\">\"ha\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@CRLF</span></span></a><span class=\"br0\">)</span></pre>"}, {"lang": "AWK", "loc": 10, "block": "<pre class=\"awk highlighted_source\"><span class=\"kw6\">function</span> repeat<span class=\"br0\">(</span> str, n,    rep, i <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>\u00a0; i<span class=\"sy2\">&lt;</span>n; i<span class=\"sy3\">++</span> <span class=\"br0\">)</span><br/>        rep = rep str   <br/>    <span class=\"kw6\">return</span> rep<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    <span class=\"kw5\">print</span> repeat<span class=\"br0\">(</span> <span class=\"st0\">\"ha\"</span>, <span class=\"nu0\">5</span> <span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Babel", "loc": 3, "block": "<pre class=\"text highlighted_source\">main: { \"ha\" 5 print_repeat }<br/>\u00a0<br/>print_repeat!: { &lt;- { dup &lt;&lt; } -&gt; times }</pre>"}, {"lang": "Batch File", "loc": 8, "block": "<pre class=\"dos highlighted_source\"><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> \"<span class=\"sy0\">%</span><span class=\"re3\">2</span>\" <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">equ</span></a> \"\" <a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> fail<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> char=<span class=\"sy0\">%</span><span class=\"re3\">1</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> num=<span class=\"sy0\">%</span><span class=\"re3\">2</span><br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">i</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>1,1,<span class=\"sy0\">%</span><span class=\"re3\">num</span><span class=\"sy0\">%)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> res=<span class=\"sy0\">!</span><span class=\"re2\">res</span><span class=\"sy0\">!%</span><span class=\"re3\">char</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">%</span><span class=\"re3\">res</span><span class=\"sy0\">%</span><br/>:<span class=\"re0\">fail</span></pre>"}, {"lang": "BaCon", "loc": 4, "block": "<pre class=\"qbasic highlighted_source\">DOTIMES <span class=\"nu0\">5</span><br/>    s$ <span class=\"sy0\">=</span> s$ &amp; <span class=\"st0\">\"ha\"</span><br/>DONE<br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> s$</pre>"}, {"lang": "BBC BASIC", "loc": 1, "block": "<pre class=\"text highlighted_source\">      PRINT STRING$(5, \"ha\")</pre>"}, {"lang": "beeswax", "loc": 3, "block": "<pre class=\"text highlighted_source\">          p    &lt;<br/>      p0~1&lt;}~&lt; <a class=\"__cf_email__\" data-cfemail=\"b7d3f7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&lt;<br/><a class=\"__cf_email__\" data-cfemail=\"78272e2c3849\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>~&gt;<a class=\"__cf_email__\" data-cfemail=\"522b352c6b021936121f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>'d;</pre>"}, {"lang": "Befunge", "loc": 4, "block": "<pre class=\"text highlighted_source\">v&gt;                \"&gt;:#,_v<br/>&gt;29*+00p&gt;~:\"0\"-    #v_v $<br/> v      ^p0p00:-1g00&lt; $            &gt;<br/> v    p00&amp;p0-1g00+4*65&lt; &gt;00g1-:00p#^<a class=\"__cf_email__\" data-cfemail=\"bee1fe\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a></pre>"}, {"lang": "Bracmat", "loc": 8, "block": "<pre class=\"text highlighted_source\">(repeat=<br/>  string N rep<br/>.  \u00a0!arg:(?string.?N)<br/>  &amp;\u00a0!string:?rep<br/>  &amp;   whl<br/>    ' (!N+-1:&gt;0:?N&amp;!string\u00a0!rep:?rep)<br/>  &amp; str$!rep<br/>);</pre>"}, {"lang": "Brainf***", "loc": 9, "block": "<pre class=\"bf highlighted_source\"><span class=\"sy0\">+++++</span> <span class=\"sy0\">+++++</span><span class=\"co1\">\tinit first as 10 counter</span><br/><span class=\"sy1\">[</span><span class=\"sy0\">-</span><span class=\"sy2\">&gt;</span> <span class=\"sy0\">+++++</span> <span class=\"sy0\">+++++</span><span class=\"sy2\">&lt;</span><span class=\"sy1\">]</span><span class=\"co1\"> we add 10 to second each loopround</span><br/>\u00a0<br/><span class=\"co1\">\t\tNow we want to loop 5 times to follow std</span><br/><span class=\"sy0\">+++++</span><br/><span class=\"sy1\">[</span><span class=\"sy0\">-</span><span class=\"sy2\">&gt;</span> <span class=\"sy0\">++++</span> <span class=\"sy3\">.</span> <span class=\"sy0\">-----</span> <span class=\"sy0\">--</span> <span class=\"sy3\">.</span> <span class=\"sy0\">+++</span><span class=\"sy2\">&lt;</span><span class=\"sy1\">]</span><span class=\"co1\"> print h and a each loop</span><br/>\u00a0<br/><span class=\"co1\">and a newline because I'm kind and it looks good</span><br/><span class=\"sy0\">+++++</span> <span class=\"sy0\">+++++</span> <span class=\"sy0\">+++</span> <span class=\"sy3\">.</span> <span class=\"sy0\">---</span> <span class=\"sy3\">.</span></pre>"}, {"lang": "Brat", "loc": 1, "block": "<pre class=\"text highlighted_source\">p \"ha\" * 5  #Prints \"hahahahaha\"</pre>"}, {"lang": "Burlesque", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>blsq ) 'h5?*<br/>\"hhhhh\"<br/>blsq ) \"ha\"5.*\\[<br/>\"hahahahaha\"<br/>\u00a0</pre>"}, {"lang": "C", "loc": 22, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">char</span> <span class=\"sy0\">*</span> string_repeat<span class=\"br0\">(</span> <span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span> s <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw4\">size_t</span> slen <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">char</span> <span class=\"sy0\">*</span> dest <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">*</span>slen<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span> p<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> p <span class=\"sy0\">=</span> dest<span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"sy0\">,</span> p <span class=\"sy0\">+=</span> slen <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memcpy.html\"><span class=\"kw3\">memcpy</span></a><span class=\"br0\">(</span>p<span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> slen<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"sy0\">*</span>p <span class=\"sy0\">=</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> dest<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw4\">char</span> <span class=\"sy0\">*</span> result <span class=\"sy0\">=</span> string_repeat<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"st0\">\"ha\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/puts.html\"><span class=\"kw3\">puts</span></a><span class=\"br0\">(</span>result<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>result<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 1, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw4\">string</span> s <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">.</span><span class=\"me1\">PadLeft</span><span class=\"br0\">(</span><span class=\"nu0\">5</span>, <span class=\"st0\">'X'</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Replace</span><span class=\"br0\">(</span><span class=\"st0\">\"X\"</span>, <span class=\"st0\">\"ha\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "C++", "loc": 15, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/>std<span class=\"sy4\">::</span><span class=\"me2\">string</span> repeat<span class=\"br0\">(</span> <span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span> <span class=\"sy3\">&amp;</span>word, <span class=\"kw4\">int</span> times <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">string</span> result <span class=\"sy4\">;</span><br/>   result.<span class=\"me1\">reserve</span><span class=\"br0\">(</span>times<span class=\"sy2\">*</span>word.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"co1\">// avoid repeated reallocation</span><br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span> a <span class=\"sy1\">&lt;</span> times <span class=\"sy4\">;</span> a<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <br/>      result <span class=\"sy2\">+</span><span class=\"sy1\">=</span> word <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">return</span> result <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> repeat<span class=\"br0\">(</span> <span class=\"st0\">\"Ha\"</span> , <span class=\"nu0\">5</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ceylon", "loc": 3, "block": "<pre class=\"text highlighted_source\">shared void repeatAString() {<br/>\tprint(\"ha\".repeat(5));<br/>}</pre>"}, {"lang": "Clipper", "loc": 1, "block": "<pre class=\"visualfoxpro highlighted_source\">   <span class=\"kw2\">Replicate</span><span class=\"br0\">(</span> <span class=\"st0\">\"Ha\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span> <span class=\"br0\">)</span></pre>"}, {"lang": "Clojure", "loc": 1, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">apply</span> str <span class=\"br0\">(</span>repeat <span class=\"nu0\">5</span> <span class=\"st0\">\"ha\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "COBOL", "loc": 9, "block": "<pre class=\"cobol highlighted_source\"><span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> REPEAT-<span class=\"kw3\">PROGRAM</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">WORKING-STORAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">77</span>  HAHA         <span class=\"kw3\">PIC</span> A<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">MOVE</span> <span class=\"kw3\">ALL</span> <span class=\"st0\">'ha'</span> <span class=\"kw2\">TO</span> HAHA<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">DISPLAY</span> HAHA<span class=\"sy0\">.</span><br/>    <span class=\"kw3\">STOP</span> <span class=\"kw3\">RUN</span><span class=\"sy0\">.</span></pre>"}, {"lang": "ColdFusion", "loc": 7, "block": "<pre class=\"cfm highlighted_source\">\u00a0<br/><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfset</span> word <span class=\"sy0\">=</span> <span class=\"st0\">'ha'</span><span class=\"sy0\">&gt;</span></span><br/><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">Cfset</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">&gt;</span></span><br/><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">Cfoutput</span><span class=\"sy0\">&gt;</span></span><br/><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">Cfloop</span> <span class=\"kw6\">from</span><span class=\"sy0\">=</span><span class=\"st0\">\"1\"</span> <span class=\"kw6\">to</span><span class=\"sy0\">=</span><span class=\"st0\">\"#n#\"</span> <span class=\"kw6\">index</span><span class=\"sy0\">=</span><span class=\"st0\">\"i\"</span><span class=\"sy0\">&gt;</span></span><span class=\"sc2\">#word#</span><span class=\"sc5\"><span class=\"sy0\">&lt;/</span><span class=\"kw1\">Cfloop</span><span class=\"sy0\">&gt;</span></span><br/><span class=\"sc5\"><span class=\"sy0\">&lt;/</span><span class=\"kw1\">Cfoutput</span><span class=\"sy0\">&gt;</span></span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 3, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> repeat-string <span class=\"br0\">(</span>n string<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>with-output-to-string <span class=\"br0\">(</span>stream<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>loop repeat n <span class=\"kw1\">do</span> <span class=\"br0\">(</span>write-string string stream<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Crystal", "loc": 3, "block": "<pre class=\"ruby highlighted_source\">\u00a0<br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"ha\"</span> <span class=\"sy0\">*</span> <span class=\"nu0\">5</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 5, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"ha\"</span>.<span class=\"me1\">replicate</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "DCL", "loc": 2, "block": "<pre class=\"dcl highlighted_source\">$ <span class=\"kw1\">write</span> <span class=\"kw3\">sys$output</span> <span class=\"kw2\">f$fao</span><span class=\"br0\">(</span> <span class=\"st0\">\"!AS!-!AS!-!AS!-!AS!-!AS\"</span>, <span class=\"st0\">\"ha\"</span> <span class=\"br0\">)</span><br/>$ <span class=\"kw1\">write</span> <span class=\"kw3\">sys$output</span> <span class=\"kw2\">f$fao</span><span class=\"br0\">(</span> <span class=\"st0\">\"!12*d\"</span> <span class=\"br0\">)</span></pre>"}, {"lang": "Delphi", "loc": 11, "block": "<pre class=\"delphi highlighted_source\">\u00a0<br/><span class=\"kw1\">function</span> RepeatString<span class=\"br0\">(</span><span class=\"kw1\">const</span> s<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span> count<span class=\"sy1\">:</span> <span class=\"kw4\">cardinal</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> count <span class=\"kw1\">do</span><br/>    Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Result <span class=\"sy3\">+</span> s<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>RepeatString<span class=\"br0\">(</span><span class=\"st0\">'ha'</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0</pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 1, "block": "<pre class=\"text highlighted_source\">!. concat( rep 5 \"ha\" )</pre>"}, {"lang": "DWScript", "loc": 3, "block": "<pre class=\"delphi highlighted_source\">\u00a0<br/>PrintLn<span class=\"br0\">(</span> StringOfString<span class=\"br0\">(</span><span class=\"st0\">'abc'</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0</pre>"}, {"lang": "E", "loc": 1, "block": "<pre class=\"e highlighted_source\"><span class=\"st0\">\"ha\"</span> <span class=\"sy0\">*</span> <span class=\"nu0\">5</span></pre>"}, {"lang": "ECL", "loc": 5, "block": "<pre class=\"text highlighted_source\">IMPORT STD; //Imports the Standard Library<br/>\u00a0<br/>STRING MyBaseString\u00a0:= 'abc';<br/>RepeatedString\u00a0:= STD.Str.Repeat(MyBaseString,3);<br/>RepeatedString;  //returns 'abcabcabc'</pre>"}, {"lang": "Egison", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(S.concat (take 5 (repeat1 \"ha\")))<br/>\u00a0</pre>"}, {"lang": "Eiffel", "loc": 8, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/> repeat_string<span class=\"br0\">(</span>a_string<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+string&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">STRING</span></a>; times<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+string&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">STRING</span></a><br/> <span class=\"kw2\">require</span><br/>   times_positive<span class=\"sy0\">:</span> times <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/> <span class=\"kw2\">do</span><br/>   <span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> a_string.<span class=\"me1\">multiply</span><span class=\"br0\">(</span>times<span class=\"br0\">)</span><br/> <span class=\"kw2\">end</span><br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 7, "block": "<pre class=\"text highlighted_source\">import system'routines.<br/>import extensions.<br/>\u00a0<br/>program =<br/>[<br/>    var s\u00a0:= 0 till:5 repeat(:n)( \"ha\" ); summarize(String new); literal.<br/>].</pre>"}, {"lang": "Elixir", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>String.duplicate(\"ha\", 5)<br/>\u00a0</pre>"}, {"lang": "Emacs Lisp", "loc": 1, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">apply</span> 'concat <span class=\"br0\">(</span><span class=\"kw1\">make-list</span> <span class=\"nu0\">5</span> <span class=\"st0\">\"ha\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Erlang", "loc": 2, "block": "<pre class=\"erlang highlighted_source\"><span class=\"re3\">repeat</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">flatten</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">duplicate</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">X</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "ERRE", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROCEDURE REPEAT_STRING(S$,N%-&gt;REP$)<br/>   LOCAL I%<br/>   REP$=\"\"<br/>   FOR I%=1 TO N% DO<br/>       REP$=REP$+S$<br/>   END FOR<br/>END PROCEDURE<br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 16, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">function</span> repeat_string<span class=\"br0\">(</span><span class=\"kw2\">object</span> x<span class=\"sy2\">,</span> <span class=\"kw2\">integer</span> times<span class=\"br0\">)</span><br/>    <span class=\"kw2\">sequence</span> out<br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">atom</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">repeat</span><span class=\"br0\">(</span>x<span class=\"sy2\">,</span>times<span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span><br/>        out <span class=\"sy1\">=</span> <span class=\"st0\">\"\"</span><br/>        <span class=\"kw1\">for</span> n <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> times <span class=\"kw1\">do</span><br/>            out <span class=\"sy1\">&amp;=</span> x<br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>        <span class=\"kw1\">return</span> out<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span>repeat_string<span class=\"br0\">(</span><span class=\"st0\">\"ha\"</span><span class=\"sy2\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy1\">&amp;</span> <span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span> <span class=\"co1\">-- hahahahaha</span><br/>\u00a0<br/><span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span>repeat_string<span class=\"br0\">(</span><span class=\"st0\">'*'</span><span class=\"sy2\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy1\">&amp;</span> <span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span> <span class=\"co1\">-- *****</span></pre>"}, {"lang": "F#", "loc": 2, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"sy0\">&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">String</span></a>.<span class=\"me1\">replicate</span> <span class=\"nu0\">5</span> <span class=\"st0\">\"ha\"</span><span class=\"sy0\">;;</span><br/><span class=\"kw1\">val</span> it\u00a0: <span class=\"kw4\">string</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"hahahahaha\"</span></pre>"}, {"lang": "Factor", "loc": 3, "block": "<pre class=\"text highlighted_source\">: repeat-string ( str n -- str' ) swap &lt;repetition&gt; concat\u00a0;<br/>\u00a0<br/>\"ha\" 5 repeat-string print</pre>"}, {"lang": "Forth", "loc": 6, "block": "<pre class=\"text highlighted_source\">: place-n { src len dest n -- }<br/>  0 dest c!<br/>  n 0\u00a0?do src len dest +place loop\u00a0;<br/>\u00a0<br/>s\" ha\" pad 5 place-n<br/>pad count type    \\ hahahahaha</pre>"}, {"lang": "Fortran", "loc": 5, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> test_repeat<br/>\u00a0<br/>  write <span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">'(a)'</span><span class=\"br0\">)</span> <span class=\"kw4\">repeat</span> <span class=\"br0\">(</span><span class=\"st0\">'ha'</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> test_repeat</pre>"}, {"lang": "FreeBASIC", "loc": 29, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"co1\">' A character is essentially a string of length 1 in FB though there is a built-in function, String,</span><br/><span class=\"co1\">' which creates a string by repeating a character a given number of times.</span><br/>\u00a0<br/><span class=\"co1\">' To avoid repeated concatenation (a slow operation) when the string to be repeated has a length</span><br/><span class=\"co1\">' greater than one, we instead create a buffer of the required size and then fill that.</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> repeat<span class=\"br0\">(</span>s <span class=\"kw1\">As</span> <span class=\"kw1\">String</span>, n <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/>  <span class=\"kw1\">If</span> n &lt; <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"st0\">\"\"</span><br/>  <span class=\"kw1\">If</span> n = <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> s<br/>  Var size = <span class=\"kw1\">Len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> size = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> s  <span class=\"co1\">' empty string</span><br/>  <span class=\"kw1\">If</span> size = <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">String</span><span class=\"br0\">(</span>n, s<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>  <span class=\"co1\">' repeated single character  </span><br/>  Var buffer = <span class=\"kw1\">Space</span><span class=\"br0\">(</span>size * n<span class=\"br0\">)</span>  <span class=\"co1\">'create buffer for size &gt; 1</span><br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> n - <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">For</span> j <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> size - <span class=\"nu0\">1</span><br/>      buffer<span class=\"br0\">[</span>i * size + j<span class=\"br0\">]</span> = s<span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>    <span class=\"kw1\">Next</span> j<br/>  <span class=\"kw1\">Next</span> i<br/>  <span class=\"kw1\">Return</span> buffer<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span> <br/>\u00a0<br/><span class=\"kw1\">Print</span> repeat<span class=\"br0\">(</span><span class=\"st0\">\"rosetta\"</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> repeat<span class=\"br0\">(</span><span class=\"st0\">\"ha\"</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> repeat<span class=\"br0\">(</span><span class=\"st0\">\"*\"</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit program\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Frink", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>println[repeat[\"ha\", 5]]<br/>\u00a0</pre>"}, {"lang": "Gambas", "loc": 5, "block": "<pre class=\"text highlighted_source\">Public Sub Main()<br/>\u00a0<br/>Print String$(5, \"ha\")<br/>\u00a0<br/>End</pre>"}, {"lang": "GAP", "loc": 2, "block": "<pre class=\"text highlighted_source\">Concatenation(ListWithIdenticalEntries(10, \"BOB \"));<br/>\"BOB BOB BOB BOB BOB BOB BOB BOB BOB BOB \"</pre>"}, {"lang": "Glee", "loc": 1, "block": "<pre class=\"text highlighted_source\">'*'\u00a0%% 5</pre>"}, {"lang": "Go", "loc": 1, "block": "<pre class=\"go highlighted_source\">fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span>strings<span class=\"sy3\">.</span><span class=\"me1\">Repeat</span><span class=\"sy1\">(</span><span class=\"st0\">\"ha\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">))</span>        <span class=\"co1\">// ==&gt; \"hahahahaha\"</span></pre>"}, {"lang": "Groovy", "loc": 1, "block": "<pre class=\"groovy highlighted_source\"> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">'ha'</span> <span class=\"sy0\">*</span> <span class=\"nu0\">5</span></pre>"}, {"lang": "Harbour", "loc": 1, "block": "<pre class=\"visualfoxpro highlighted_source\"><span class=\"sy0\">?</span> <span class=\"kw2\">Replicate</span><span class=\"br0\">(</span> <span class=\"st0\">\"Ha\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span> <span class=\"br0\">)</span></pre>"}, {"lang": "Haskell", "loc": 1, "block": "<pre class=\"haskell highlighted_source\"><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concat\"><span class=\"kw3\">concat</span></a> <span class=\"sy0\">$</span> replicate <span class=\"nu0\">5</span> <span class=\"st0\">\"ha\"</span></pre>"}, {"lang": "HicEst", "loc": 3, "block": "<pre class=\"hicest highlighted_source\"><span class=\"kw1\">CHARACTER</span> out<span class=\"sy1\">*</span><span class=\"nu0\">20</span><br/>\u00a0<br/><span class=\"kw1\">EDIT</span><span class=\"br0\">(</span>Text<span class=\"sy1\">=</span>out<span class=\"sy1\">,</span> Insert<span class=\"sy1\">=</span><span class=\"st0\">\"ha\"</span><span class=\"sy1\">,</span> <span class=\"kw1\">DO</span><span class=\"sy1\">=</span><span class=\"nu0\">5</span><span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 3, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"kw4\">args</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"kw4\">repl</span><span class=\"br0\">(</span><span class=\"kw4\">integer</span><span class=\"br0\">(</span><span class=\"sy1\">!</span><span class=\"kw4\">args</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Idris", "loc": 7, "block": "<pre class=\"text highlighted_source\">strRepeat\u00a0: Nat -&gt; String -&gt; String<br/>strRepeat Z s = \"\"<br/>strRepeat (S n) s = s ++ strRepeat n s<br/>\u00a0<br/>chrRepeat\u00a0: Nat -&gt; Char -&gt; String<br/>chrRepeat Z c = \"\"<br/>chrRepeat (S n) c = strCons c $ chrRepeat n c</pre>"}, {"lang": "Inform 7", "loc": 11, "block": "<pre class=\"text highlighted_source\">Home is a room.<br/>\u00a0<br/>To decide which indexed text is (T - indexed text) repeated (N - number) times:<br/>\tlet temp be indexed text;<br/>\trepeat with M running from 1 to N:<br/>\t\tlet temp be \"[temp][T]\";<br/>\tdecide on temp.<br/>\u00a0<br/>When play begins:<br/>\tsay \"ha\" repeated 5 times;<br/>\tend the story.</pre>"}, {"lang": "J", "loc": 8, "block": "<pre class=\"j highlighted_source\">   <span class=\"nu0\">5</span> # <span class=\"st_h\">'*'</span>               <span class=\"co1\">NB. repeat each item 5 times</span><br/>*****<br/>   <span class=\"nu0\">5</span> # <span class=\"st_h\">'ha'</span>              <span class=\"co1\">NB. repeat each item 5 times</span><br/>hhhhhaaaaa<br/>   <span class=\"nu0\">5</span> <span class=\"sy0\">((</span>* #<span class=\"sy0\">)</span> $ ]<span class=\"sy0\">)</span> <span class=\"st_h\">'ha'</span>    <span class=\"co1\">NB. repeat array 5 times</span><br/>hahahahaha<br/>   <span class=\"nu0\">5</span>\u00a0;@# &lt; <span class=\"st_h\">'ha'</span>          <span class=\"co1\">NB. boxing is used to treat the array as a whole</span><br/>hahahahaha</pre>"}, {"lang": "Java", "loc": 10, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> repeat<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> str, <span class=\"kw3\">int</span> times<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/StringBuilder.html\"><span class=\"kw21\">StringBuilder</span></a> sb = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/StringBuilder.html\"><span class=\"kw21\">StringBuilder</span></a><span class=\"br0\">(</span>str.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> times<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw3\">int</span> i = <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> times<span class=\"sy0\">;</span> i++<span class=\"br0\">)</span><br/>        sb.<span class=\"me1\">append</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">return</span> sb.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>repeat<span class=\"br0\">(</span><span class=\"st0\">\"ha\"</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 5, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw4\">String</span>.<span class=\"kw1\">prototype</span>.<span class=\"me1\">repeat</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> <span class=\"kw4\">Array</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>n <span class=\"sy0\">||</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"kw1\">this</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>console.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"st0\">\"ha\"</span>.<span class=\"me1\">repeat</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"co1\">// hahahahaha</span></pre>"}, {"lang": "jq", "loc": 1, "block": "<pre class=\"text highlighted_source\">\"a \" * 3' # =&gt; \"a a a \"</pre>"}, {"lang": "Julia", "loc": 4, "block": "<pre class=\"text highlighted_source\">@show \"ha\" ^ 5<br/>\u00a0<br/># The ^ operator is really just call to the `repeat` function<br/>@show repeat(\"ha\", 5)</pre>"}, {"lang": "K", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>  ,/5#,\"ha\"<br/>\"hahahahaha\"<br/>\u00a0<br/>  5#\"*\"<br/>\"*****\"<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 3, "block": "<pre class=\"scala highlighted_source\">fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"ha\"</span>.<span class=\"me1\">repeat</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "LabVIEW", "loc": 1, "block": "<pre class=\"text highlighted_source\">'ha'*5 // hahahahaha</pre>"}, {"lang": "Lasso", "loc": 1, "block": "<pre class=\"text highlighted_source\">'ha'*5 // hahahahaha</pre>"}, {"lang": "LFE", "loc": 3, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>string<span class=\"sy0\">:</span><span class=\"me1\">copies</span> '<span class=\"st0\">\"ha\"</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Liberty BASIC", "loc": 12, "block": "<pre class=\"lb highlighted_source\">a$ <span class=\"sy0\">=</span><span class=\"st0\">\"ha \"</span><br/><span class=\"kw1\">print</span> StringRepeat$<span class=\"br0\">(</span> a$<span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> StringRepeat$<span class=\"br0\">(</span> in$<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><br/>    o$ <span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n<br/>        o$ <span class=\"sy0\">=</span>o$ <span class=\"sy0\">+</span>in$<br/>    <span class=\"kw1\">next</span> i<br/>    StringRepeat$ <span class=\"sy0\">=</span>o$<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span></pre>"}, {"lang": "Lingo", "loc": 7, "block": "<pre class=\"text highlighted_source\">on rep (str, n)<br/>  res = \"\"<br/>  repeat with i = 1 to n<br/>    put str after res<br/>  end repeat<br/>  return res<br/>end</pre>"}, {"lang": "LiveCode", "loc": 10, "block": "<pre class=\"text highlighted_source\">on mouseUp<br/>    put repeatString(\"ha\", 5)<br/>end mouseUp<br/>\u00a0<br/>function repeatString str n <br/>    repeat n times<br/>        put str after t<br/>    end repeat<br/>    return t<br/>end repeatString</pre>"}, {"lang": "Logo", "loc": 4, "block": "<pre class=\"text highlighted_source\">to copies\u00a0:n\u00a0:thing [:acc \"||]<br/>  if\u00a0:n = 0 [output\u00a0:acc]<br/>  output (copies\u00a0:n-1\u00a0:thing combine\u00a0:acc\u00a0:thing)<br/>end</pre>"}, {"lang": "Lua", "loc": 1, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> repeats<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"kw1\">return</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw2\">and</span> s <span class=\"sy0\">..</span> repeats<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">or</span> <span class=\"st0\">\"\"</span> <span class=\"kw1\">end</span></pre>"}, {"lang": "Maple", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&gt; use StringTools in<br/>&gt;       Repeat( \"abc\", 10 ); # repeat an arbitrary string<br/>&gt;       Fill( \"x\", 20 )      # repeat a character<br/>&gt; end use;<br/>                    \"abcabcabcabcabcabcabcabcabcabc\"<br/>\u00a0<br/>                         \"xxxxxxxxxxxxxxxxxxxx\"<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 8, "block": "<pre class=\"text highlighted_source\">(* solution 1 *)<br/>rep[n_Integer,s_String]:=Apply[StringJoin,ConstantArray[s,{n}]]<br/>\u00a0<br/>(* solution 2 -- @@ is the infix form of Apply[] *)<br/>rep[n_Integer,s_String]:<a class=\"__cf_email__\" data-cfemail=\"714c220503181f163b1e181f31\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@Table[s,{n}]<br/>\u00a0<br/>(* solution 3 -- demonstrating another of the large number of looping constructs available *)<br/>rep[n_Integer,s_String]:=Nest[StringJoin[s, #] &amp;,s,n-1]</pre>"}, {"lang": "MATLAB / Octave", "loc": 3, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> S = repeat<span class=\"br0\">(</span>s , n<span class=\"br0\">)</span><br/>    S = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/repmat.html\"><span class=\"kw2\">repmat</span></a><span class=\"br0\">(</span>s , <span class=\"br0\">[</span><span class=\"nu0\">1</span>,n<span class=\"br0\">]</span><span class=\"br0\">)</span>\u00a0;<br/><span class=\"kw1\">return</span></pre>"}, {"lang": "Maxima", "loc": 5, "block": "<pre class=\"text highlighted_source\">\"$*\"(s, n)\u00a0:= apply(sconcat, makelist(s, n))$<br/>infix(\"$*\")$<br/>\u00a0<br/>\"abc\" $* 5;<br/>/* \"abcabcabcabcabc\" */</pre>"}, {"lang": "Mercury", "loc": 26, "block": "<pre class=\"text highlighted_source\">:- module repeat.<br/>:- interface.<br/>:- import_module string, char, int.<br/>\u00a0<br/>:- func repeat_char(char, int) = string.<br/>:- func repeat(string, int) = string.<br/>\u00a0<br/>:- implementation.<br/>:- import_module stream, stream.string_writer, string.builder.<br/>\u00a0<br/>repeat_char(C, N) = string.duplicate_char(C, N).<br/>\u00a0<br/>repeat(String, Count) = Repeated\u00a0:-<br/>        S0 = string.builder.init,<br/>        Repeated = string.builder.to_string(S),<br/>        printn(string.builder.handle, Count, String, S0, S).<br/>\u00a0<br/>:- pred printn(Stream, int, string, State, State)<br/>               &lt;= (stream.writer(Stream, string, State),<br/>                   stream.writer(Stream, character, State)).<br/>:- mode printn(in, in, in, di, uo) is det.<br/>printn(Stream, N, String,\u00a0!S)\u00a0:-<br/>        ( N &gt; 0 -&gt;<br/>                print(Stream, String,\u00a0!S),<br/>                printn(Stream, N - 1, String,\u00a0!S)<br/>       \u00a0; true ).</pre>"}, {"lang": "Mirah", "loc": 7, "block": "<pre class=\"text highlighted_source\">x = StringBuilder.new<br/>\u00a0<br/>5.times do <br/>    x.append \"ha\"<br/>end<br/>\u00a0<br/>puts x # ==&gt; \"hahahahaha\"</pre>"}, {"lang": "Monte", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>var s\u00a0:= \"ha \" * 5<br/>traceln(s)<br/>\u00a0</pre>"}, {"lang": "MontiLang", "loc": 1, "block": "<pre class=\"text highlighted_source\">|ha| 5 * PRINT .</pre>"}, {"lang": "MUMPS", "loc": 10, "block": "<pre class=\"text highlighted_source\">RPTSTR(S,N)<br/>\u00a0;Repeat a string S for N times<br/> NEW I<br/> FOR I=1:1:N WRITE S<br/> KILL I<br/> QUIT<br/>RPTSTR1(S,N)\u00a0;Functionally equivalent, but denser to read<br/> F I=1:1:N W S<br/> Q<br/>\u00a0</pre>"}, {"lang": "Nemerle", "loc": 18, "block": "<pre class=\"text highlighted_source\">using System;<br/>using System.Console;<br/>\u00a0<br/>module StrRep<br/>{<br/>    Repeat(this s\u00a0: string, n\u00a0: int)\u00a0: string<br/>    {<br/>        String('x', n).Replace(\"x\", s)<br/>    }<br/>\u00a0<br/>    Main()\u00a0: void<br/>    {<br/>        WriteLine(\"ha\".Repeat(5));<br/>        WriteLine(\"*\".Repeat(5));<br/>        WriteLine(String('*', 5)); // repeating single char<br/>\u00a0<br/>    }<br/>}</pre>"}, {"lang": "NetRexx", "loc": 4, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>\u00a0<br/>ha5 = <span class=\"st0\">'ha'</span>.<span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "NewLISP", "loc": 1, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#dup\"><span class=\"kw1\">dup</span></a> <span class=\"st0\">\"ha\"</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span></pre>"}, {"lang": "Nim", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>import strutils<br/>repeatStr(5, \"ha\")<br/>\u00a0</pre>"}, {"lang": "Objeck", "loc": 16, "block": "<pre class=\"objeck highlighted_source\"><span class=\"kw1\">bundle</span> Default <span class=\"br0\">{</span><br/>  <span class=\"kw1\">class</span> Repeat <span class=\"br0\">{</span><br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      Repeat<span class=\"br0\">(</span><span class=\"st0\">\"ha\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Repeat<span class=\"br0\">(</span>string <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"sy0\">,</span> max <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">String</span> <span class=\"br0\">{</span><br/>      repeat <span class=\"sy0\">:</span> <span class=\"kw2\">String</span> <span class=\"sy0\">:=</span> String<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> max<span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        repeat<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>string<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">return</span> repeat<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Objective-C", "loc": 9, "block": "<pre class=\"objc highlighted_source\"><span class=\"kw1\">@interface</span> <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"br0\">(</span>RosettaCodeAddition<span class=\"br0\">)</span><br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span> repeatStringByNumberOfTimes<span class=\"sy0\">:</span> <span class=\"br0\">(</span>NSUInteger<span class=\"br0\">)</span> times;<br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw1\">@implementation</span> <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"br0\">(</span>RosettaCodeAddition<span class=\"br0\">)</span><br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span> repeatStringByNumberOfTimes<span class=\"sy0\">:</span> <span class=\"br0\">(</span>NSUInteger<span class=\"br0\">)</span> times <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"co3\">@</span><span class=\"st0\">\"\"</span> stringByPaddingToLength<span class=\"sy0\">:</span><span class=\"br0\">[</span>self length<span class=\"br0\">]</span><span class=\"sy0\">*</span>times withString<span class=\"sy0\">:</span>self startingAtIndex<span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>;<br/><span class=\"br0\">}</span><br/><span class=\"kw1\">@end</span></pre>"}, {"lang": "OCaml", "loc": 8, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> string_repeat s n <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> len <span class=\"sy0\">=</span> Bytes<span class=\"sy0\">.</span>length s <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> res <span class=\"sy0\">=</span> Bytes<span class=\"sy0\">.</span>create<span class=\"br0\">(</span>n <span class=\"sy0\">*</span> len<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALpred\"><span class=\"kw3\">pred</span></a> n <span class=\"kw1\">do</span><br/>    Bytes<span class=\"sy0\">.</span>blit s <span class=\"nu0\">0</span> res <span class=\"br0\">(</span>i <span class=\"sy0\">*</span> len<span class=\"br0\">)</span> len<br/>  <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  Bytes<span class=\"sy0\">.</span>to_string res <span class=\"co1\">(* not stricly necessary, the bytes type is equivalent to string except mutability *)</span><br/><span class=\"sy0\">;;</span></pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">StringBuffer new \"abcd\" &lt;&lt;n(5)</pre>"}, {"lang": "OpenEdge/Progress", "loc": 1, "block": "<pre class=\"progress highlighted_source\"><span class=\"kw1\">MESSAGE</span> <span class=\"kw2\">FILL</span><span class=\"br0\">(</span> <span class=\"st0\">\"ha\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span> <span class=\"br0\">)</span> <span class=\"kw1\">VIEW-AS</span> <span class=\"kw1\">ALERT-BOX</span><span class=\"sy0\">.</span></pre>"}, {"lang": "OxygenBasic", "loc": 21, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\u00a0<br/>'REPEATING A CHARACTER<br/>\u00a0<br/>print string 10,\"A\" 'result AAAAAAAAAA<br/>\u00a0<br/>'REPEATING A STRING<br/>\u00a0<br/>function RepeatString(string s,sys n) as string<br/>  sys i, le=len s<br/>  if le=0 then exit function<br/>  n*=le<br/>  function=nuls n<br/>  '<br/>  for i=1 to n step le<br/>    mid function,i,s<br/>  next<br/>end function<br/>\u00a0<br/>print RepeatString \"ABC\",3 'result ABCABCABC<br/>\u00a0</pre>"}, {"lang": "Oz", "loc": 10, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Repeat</span> Xs N<span class=\"br0\">}</span><br/>     <span class=\"kw1\">if</span> N <span class=\"sy0\">&gt;</span> 0 <span class=\"kw1\">then</span><br/>        <span class=\"br0\">{</span>Append Xs <span class=\"br0\">{</span>Repeat Xs N<span class=\"sy0\">-</span>1<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>     <span class=\"kw1\">else</span><br/>        nil<br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"br0\">{</span>Repeat <span class=\"st0\">\"Ha\"</span> 5<span class=\"br0\">}</span><span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 3, "block": "<pre class=\"parigp highlighted_source\">repeat<span class=\"br0\">(</span>s<span class=\"sy0\">,</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"kw1\">Str</span><span class=\"br0\">(</span>repeat<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> n<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> s<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Pascal", "loc": 1, "block": "<pre class=\"perl highlighted_source\"><span class=\"st0\">\"ha\"</span> x <span class=\"nu0\">5</span></pre>"}, {"lang": "Perl", "loc": 1, "block": "<pre class=\"perl highlighted_source\"><span class=\"st0\">\"ha\"</span> x <span class=\"nu0\">5</span></pre>"}, {"lang": "Perl 6", "loc": 1, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw3\">print</span> <span class=\"st0\">\"ha\"</span> <span class=\"kw1\">x</span> <span class=\"nu0\">5</span></pre>"}, {"lang": "Phix", "loc": 2, "block": "<pre class=\"text highlighted_source\">?repeat('*',5)<br/>?join(repeat(\"ha\",5),\"\")</pre>"}, {"lang": "PHP", "loc": 1, "block": "<pre class=\"php highlighted_source\"><a href=\"http://www.php.net/str_repeat\"><span class=\"kw3\">str_repeat</span></a><span class=\"br0\">(</span><span class=\"st0\">\"ha\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span></pre>"}, {"lang": "PicoLisp", "loc": 2, "block": "<pre class=\"text highlighted_source\">(pack (need 5 \"ha\"))<br/>-&gt; \"hahahahaha\"</pre>"}, {"lang": "Pike", "loc": 1, "block": "<pre class=\"pike highlighted_source\"><span class=\"st0\">\"ha\"</span><span class=\"sy0\">*</span><span class=\"nu0\">5</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PL/I", "loc": 6, "block": "<pre class=\"text highlighted_source\">s = copy('ha', 5);<br/>\u00a0<br/>/* To repeat a single character a fixed number of times: */<br/>\u00a0<br/>s = (5)'h';     /* asigns 'hhhhh' to s. */<br/>\u00a0</pre>"}, {"lang": "Plorth", "loc": 1, "block": "<pre class=\"text highlighted_source\">\"ha\" 5 *</pre>"}, {"lang": "PostScript", "loc": 19, "block": "<pre class=\"text highlighted_source\">% the comments show the stack content after the line was executed<br/>% where rcount is the repeat count, \"o\" is for orignal,<br/>% \"f\" is for final, and iter is the for loop variable<br/>%<br/>% usage: rcount ostring times -&gt; fstring<br/>\u00a0<br/>/times {<br/>  dup length dup   \u00a0% rcount ostring olength olength<br/>  4 3 roll         \u00a0% ostring olength olength rcount<br/>  mul dup string   \u00a0% ostring olength flength fstring<br/>  4 1 roll         \u00a0% fstring ostring olength flength<br/>  1 sub 0 3 1 roll \u00a0% fstring ostring 0 olength flength_minus_one <br/>  {                \u00a0% fstring ostring iter<br/>    1 index 3 index\u00a0% fstring ostring iter ostring fstring<br/>    3 1 roll       \u00a0% fstring ostring fstring iter ostring<br/>    putinterval    \u00a0% fstring ostring<br/>  } for<br/>  pop              \u00a0% fstring<br/>} def</pre>"}, {"lang": "PowerBASIC", "loc": 1, "block": "<pre class=\"text highlighted_source\">MSGBOX REPEAT$(5, \"ha\")</pre>"}, {"lang": "PowerShell", "loc": 1, "block": "<pre class=\"powershell highlighted_source\"><span class=\"st0\">\"ha\"</span> <span class=\"sy0\">*</span> <span class=\"nu0\">5</span>  <span class=\"co1\"># ==&gt; \"hahahahaha\"</span></pre>"}, {"lang": "Prolog", "loc": 6, "block": "<pre class=\"prolog highlighted_source\"><span class=\"co1\">%repeat(Str,Num,Res).</span><br/><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">repeat</span></a><span class=\"br0\">(</span>Str<span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span>Str<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">repeat</span></a><span class=\"br0\">(</span>Str<span class=\"sy4\">,</span>Num<span class=\"sy4\">,</span>Res<span class=\"br0\">)</span><span class=\"sy1\">:-</span><br/>    Num1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Num<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>    <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">repeat</span></a><span class=\"br0\">(</span>Str<span class=\"sy4\">,</span>Num1<span class=\"sy4\">,</span>Res1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    string_concat<span class=\"br0\">(</span>Str<span class=\"sy4\">,</span> Res1<span class=\"sy4\">,</span> Res<span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "Pure", "loc": 5, "block": "<pre class=\"text highlighted_source\">&gt; str_repeat 0 s = \"\";<br/>&gt; str_repeat n s = s + (str_repeat (n-1) s) if n&gt;0;<br/>&gt; str_repeat 5 \"ha\";<br/>\"hahahahaha\"<br/>&gt;</pre>"}, {"lang": "PureBasic", "loc": 10, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span>.s RepeatString<span class=\"br0\">(</span>count, text$<span class=\"sy0\">=</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">Protected</span> i, <span class=\"kw3\">ret</span>$<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><br/>\u00a0<br/>   <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> count<br/>      <span class=\"kw3\">ret</span>$ <span class=\"sy0\">+</span> text$<br/>   <span class=\"kw1\">Next</span><br/>   <span class=\"kw1\">ProcedureReturn</span> <span class=\"kw3\">ret</span>$<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Debug</span> RepeatString<span class=\"br0\">(</span><span class=\"nu0\">5</span>, <span class=\"st0\">\"ha\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Python", "loc": 1, "block": "<pre class=\"python highlighted_source\"><span class=\"st0\">\"ha\"</span> * <span class=\"nu0\">5</span>  <span class=\"co1\"># ==&gt; \"hahahahaha\"</span></pre>"}, {"lang": "R", "loc": 1, "block": "<pre class=\"ruby highlighted_source\">paste<span class=\"br0\">(</span>rep<span class=\"br0\">(</span><span class=\"st0\">\"ha\"</span>,<span class=\"nu0\">5</span><span class=\"br0\">)</span>, collapse=<span class=\"st0\">''</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>;; fast<br/>(define (string-repeat n str)<br/>  (string-append* (make-list n str)))<br/>(string-repeat 5 \"ha\")\u00a0; =&gt; \"hahahahaha\"<br/>\u00a0</pre>"}, {"lang": "RapidQ", "loc": 14, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"co1\">'For a single char<br/></span>showmessage <span class=\"kw1\">String</span>$(10, <span class=\"st0\">\"-\"</span>)<br/>\u00a0<br/><span class=\"co1\">'For strings with more than one char<br/></span><span class=\"kw2\">function</span> Repeat$(Expr <span class=\"kw4\">as</span> <span class=\"kw1\">string</span>, Count <span class=\"kw4\">as</span> <span class=\"kw1\">integer</span>) <span class=\"kw4\">as</span> <span class=\"kw1\">string</span><br/>    <span class=\"kw4\">dim</span> x <span class=\"kw4\">as</span> <span class=\"kw1\">integer</span><br/>    <span class=\"kw3\">for</span> x = 1 <span class=\"kw3\">to</span> Count<br/>        Result = Result + Expr<br/>    <span class=\"kw3\">next</span><br/><span class=\"kw3\">end</span> <span class=\"kw2\">function</span><br/>\u00a0<br/>showmessage Repeat$(<span class=\"st0\">\"ha\"</span>, 5)<br/>\u00a0</pre>"}, {"lang": "REALbasic", "loc": 8, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Function</span> Repeat(s <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>, count <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/>  <span class=\"kw4\">Dim</span> <span class=\"kw4\">output</span> <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/>  <span class=\"kw3\">For</span> i <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span> = 0 <span class=\"kw3\">To</span> count<br/>    <span class=\"kw4\">output</span> = <span class=\"kw4\">output</span> + s<br/>  <span class=\"kw3\">Next</span><br/>  Return <span class=\"kw4\">output</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0</pre>"}, {"lang": "REBOL", "loc": 1, "block": "<pre class=\"rebol highlighted_source\"><span class=\"kw3\">head</span> <span class=\"kw3\">insert</span><span class=\"sy0\">/</span>dup <span class=\"st0\">\"\"</span> <span class=\"st0\">\"ha\"</span> <span class=\"nu0\">5</span></pre>"}, {"lang": "Red", "loc": 5, "block": "<pre class=\"text highlighted_source\">&gt;&gt; str: \"Add duplicates to string\"<br/>&gt;&gt; insert/dup str \"ha\" 3<br/>== \"hahahaAdd duplicates to string\"<br/>&gt;&gt; insert/dup tail str \"ha\" 3<br/>== \"hahahaAdd duplicates to stringhahaha\"</pre>"}, {"lang": "Retro", "loc": 5, "block": "<pre class=\"text highlighted_source\">with strings'<br/>: repeatString ( $n-$ )<br/>  1- [ dup ] dip [ over prepend ] times nip\u00a0;<br/>\u00a0<br/>\"ha\" 5 repeatString</pre>"}, {"lang": "REXX", "loc": 118, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program to show various ways to repeat a string (or repeat a single char).*/</span><br/>\u00a0<br/><span class=\"coMULTI\">/*all examples are equivalent, but not created equal.*/</span><br/>\u00a0<br/>                           <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>y=<span class=\"st0\">'ha'</span><br/>z=<span class=\"kw6\">copies</span><span class=\"br0\">(</span>y,<span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>                           <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>z=<span class=\"kw6\">copies</span><span class=\"br0\">(</span> <span class=\"st0\">'ha'</span>, <span class=\"nu0\">5</span> <span class=\"br0\">)</span><br/>                           <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>y=<span class=\"st0\">'ha'</span><br/>z=y<span class=\"sy0\">||</span>y<span class=\"sy0\">||</span>y<span class=\"sy0\">||</span>y<span class=\"sy0\">||</span>y<br/>                           <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>y=<span class=\"st0\">'ha'</span><br/>z=y <span class=\"sy0\">||</span> y <span class=\"sy0\">||</span> y <span class=\"sy0\">||</span> y <span class=\"sy0\">||</span> y    <span class=\"coMULTI\">/*same as previous, but the \"big sky\" version*/</span><br/>                           <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>y=<span class=\"st0\">'ha'</span><br/>z=<span class=\"st0\">''</span><br/>       <span class=\"kw1\">do</span> <span class=\"nu0\">5</span><br/>       z=z<span class=\"sy0\">||</span>y<br/>       <span class=\"kw3\">end</span><br/>                           <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>y=<span class=\"st0\">\"ha\"</span><br/>z=<br/>       <span class=\"kw1\">do</span> <span class=\"nu0\">5</span><br/>       z=z<span class=\"sy0\">||</span>y<br/>       <span class=\"kw3\">end</span><br/>                           <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>y=<span class=\"st0\">\"ha\"</span><br/>z=<br/>       <span class=\"kw1\">do</span> i=<span class=\"nu0\">101</span> <span class=\"kw2\">to</span> <span class=\"nu0\">105</span><br/>       z=z<span class=\"sy0\">||</span>y<br/>       <span class=\"kw3\">end</span><br/>\u00a0<br/>                           <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>y=<span class=\"st0\">'+'</span><br/>z=<span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>,<span class=\"nu0\">5</span>,y<span class=\"br0\">)</span><br/>                           <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>y=<span class=\"st0\">'+'</span><br/>z=<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"st0\">''</span>,<span class=\"nu0\">5</span>,y<span class=\"br0\">)</span><br/>                           <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>y=<span class=\"st0\">'+'</span><br/>z=<span class=\"kw6\">substr</span><span class=\"br0\">(</span><span class=\"st0\">''</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">5</span>,y<span class=\"br0\">)</span><br/>                           <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>y=<span class=\"st0\">'+'</span><br/>z=<span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">''</span>,<span class=\"nu0\">5</span>,y<span class=\"br0\">)</span><br/>                           <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>y=<span class=\"st0\">'+'</span><br/>z=<span class=\"kw6\">centre</span><span class=\"br0\">(</span><span class=\"st0\">''</span>,<span class=\"nu0\">5</span>,y<span class=\"br0\">)</span><br/>                           <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>y=<span class=\"st0\">'+'</span><br/>z=<span class=\"kw6\">space</span><span class=\"br0\">(</span><span class=\"st0\">''</span>,<span class=\"nu0\">5</span>,y<span class=\"br0\">)</span><br/>                           <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>y=<span class=\"st0\">'+'</span><br/>z=<span class=\"kw6\">translate</span><span class=\"br0\">(</span><span class=\"st0\">'@@@@@'</span>,y,<span class=\"st0\">\"@\"</span><span class=\"br0\">)</span><br/>                           <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>y=<span class=\"st0\">'abcdef'</span><br/>z=five<span class=\"br0\">(</span>y<span class=\"br0\">)</span><br/><span class=\"kw1\">exit</span><br/>\u00a0<br/>five: <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> y; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> g<br/><span class=\"kw1\">if</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span>=<span class=\"nu0\">5</span><span class=\"sy0\">*</span><span class=\"kw6\">length</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> g<br/><span class=\"kw1\">return</span> five<span class=\"br0\">(</span>y<span class=\"sy0\">||</span>g<span class=\"br0\">)</span><br/>                           <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>y=<span class=\"st0\">'something wicked this way comes.'</span><br/>z=y<span class=\"sy0\">||</span>y<span class=\"sy0\">||</span>y<span class=\"sy0\">||</span>y<span class=\"sy0\">||</span>y<span class=\"sy0\">||</span>y<span class=\"sy0\">||</span>y<span class=\"sy0\">||</span>y<span class=\"sy0\">||</span>y<span class=\"sy0\">||</span>y<span class=\"sy0\">||</span>y<span class=\"sy0\">||</span>y<span class=\"sy0\">|\\</span>y<span class=\"sy0\">||</span>y<span class=\"sy0\">||</span>y<br/>z=<span class=\"kw6\">left</span><span class=\"br0\">(</span>z,<span class=\"nu0\">5</span><span class=\"sy0\">*</span><span class=\"kw6\">length</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                           <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>y=<span class=\"st0\">'+'</span><br/>z=<span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">''</span>,<span class=\"nu0\">5</span>,y<span class=\"br0\">)</span><br/>                           <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>y=<span class=\"st0\">'+'</span><br/>z=<span class=\"kw6\">lower</span><span class=\"br0\">(</span><span class=\"st0\">''</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">5</span>,y<span class=\"br0\">)</span><br/>                           <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>y=<span class=\"st0\">'+'</span><br/>z=<span class=\"kw6\">lower</span><span class=\"br0\">(</span><span class=\"st0\">''</span>,,<span class=\"nu0\">5</span>,y<span class=\"br0\">)</span><br/>                           <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>z=<span class=\"st0\">'+'</span><br/>z=<span class=\"kw2\">upper</span><span class=\"br0\">(</span><span class=\"st0\">''</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">5</span>,y<span class=\"br0\">)</span><br/>                           <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>z=<span class=\"kw2\">upper</span><span class=\"br0\">(</span><span class=\"st0\">''</span>,,<span class=\"nu0\">5</span>,y<span class=\"br0\">)</span><br/>                           <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>\u00a0<br/>y=<span class=\"st0\">'charter bus.'</span><br/>z=<span class=\"st0\">'*****'</span><br/>z=<span class=\"kw6\">changestr</span><span class=\"br0\">(</span><span class=\"st0\">'*'</span>,z,y<span class=\"br0\">)</span><br/>                           <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>y=<span class=\"st0\">'what the hey!'</span><br/>z=<br/>  <span class=\"kw1\">do</span> <span class=\"kw2\">until</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span>==<span class=\"nu0\">5</span><span class=\"sy0\">*</span><span class=\"kw6\">length</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span><br/>  z=z<span class=\"sy0\">||</span>y<br/>  <span class=\"kw3\">end</span><br/>                           <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>y=<span class=\"st0\">'what the hey!'</span><br/>z=<br/>  <span class=\"kw1\">do</span> <span class=\"kw2\">until</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span>==<span class=\"nu0\">5</span><span class=\"sy0\">*</span><span class=\"kw6\">length</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span><br/>  z=<span class=\"kw6\">insert</span><span class=\"br0\">(</span>z,<span class=\"nu0\">0</span>,y<span class=\"br0\">)</span><br/>  <span class=\"kw3\">end</span><br/>                           <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>y=<span class=\"st0\">'yippie ki yay'</span><br/>z=<br/>   <span class=\"kw1\">do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">by</span> <span class=\"nu0\">5</span> <span class=\"kw2\">for</span> <span class=\"nu0\">5</span><br/>   z=<span class=\"kw6\">overlay</span><span class=\"br0\">(</span>y,z,i<span class=\"br0\">)</span><br/>   <span class=\"kw3\">end</span><br/>                           <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>y=<span class=\"st0\">'+'</span><br/>z=justify<span class=\"br0\">(</span><span class=\"st0\">''</span>,<span class=\"nu0\">5</span>,y<span class=\"br0\">)</span><br/>                           <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>whatever_this_variable_is_____it_aint_referenced_directly= <span class=\"st0\">'boy oh boy.'</span><br/>z=; <span class=\"kw1\">signal</span> me; me:<br/>  <span class=\"kw1\">do</span> <span class=\"nu0\">5</span><br/>  z=z<span class=\"sy0\">||</span><span class=\"kw6\">strip</span><span class=\"br0\">(</span><span class=\"kw6\">subword</span><span class=\"br0\">(</span><span class=\"kw6\">sourceline</span><span class=\"br0\">(</span>sigl-<span class=\"nu0\">1</span><span class=\"br0\">)</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span>,,<span class=\"st0\">\"'\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">end</span><br/>                           <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>y=<span class=\"st0\">\"any more examples &amp; the angry townfolk with pitchforks will burn the castle.\"</span><br/><span class=\"kw1\">parse</span> <span class=\"kw2\">value</span> y<span class=\"sy0\">||</span>y<span class=\"sy0\">||</span>y<span class=\"sy0\">||</span>y<span class=\"sy0\">||</span>y <span class=\"kw2\">with</span> z<br/>\u00a0<br/><span class=\"kw1\">exit</span>                                   <span class=\"coMULTI\">/*stick a fork in it, we're done.*/</span></pre>"}, {"lang": "Ring", "loc": 1, "block": "<pre class=\"text highlighted_source\"> Copy(\"ha\" , 5)  # ==&gt; \"hahahahaha\"</pre>"}, {"lang": "Ruby", "loc": 1, "block": "<pre class=\"ruby highlighted_source\"><span class=\"st0\">\"ha\"</span> <span class=\"sy0\">*</span> <span class=\"nu0\">5</span>  <span class=\"co1\"># ==&gt; \"hahahahaha\"</span></pre>"}, {"lang": "Run BASIC", "loc": 6, "block": "<pre class=\"text highlighted_source\">a$ = \"ha \"<br/>for i = 1 to 5<br/>  a1$ = a1$ + a$<br/>next i<br/>a$ = a1$<br/>print a$</pre>"}, {"lang": "Rust", "loc": 1, "block": "<pre class=\"text highlighted_source\">std::iter::repeat(\"ha\").take(5).collect::&lt;String&gt;(); // ==&gt; \"hahahahaha\"</pre>"}, {"lang": "Scala", "loc": 1, "block": "<pre class=\"scala highlighted_source\"><span class=\"st0\">\"ha\"</span> <span class=\"sy0\">*</span> <span class=\"nu0\">5</span> <span class=\"co1\">// ==&gt; \"hahahahaha\"</span></pre>"}, {"lang": "Scheme", "loc": 2, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>repeat n str<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>apply <span class=\"kw1\">string-append</span> <span class=\"br0\">(</span>vector<span class=\"sy0\">-&gt;</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">make-vector</span> n str<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Scratch", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$ echo ha | sed 's/.*/&amp;&amp;&amp;&amp;&amp;/'<br/>hahahahaha<br/>\u00a0</pre>"}, {"lang": "sed", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$ echo ha | sed 's/.*/&amp;&amp;&amp;&amp;&amp;/'<br/>hahahahaha<br/>\u00a0</pre>"}, {"lang": "Seed7", "loc": 6, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    writeln(\"ha\" mult 5);<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 1, "block": "<pre class=\"ruby highlighted_source\"><span class=\"st0\">'ha'</span> <span class=\"sy0\">*</span> <span class=\"nu0\">5</span>;  <span class=\"co1\"># ==&gt; 'hahahahaha'</span></pre>"}, {"lang": "Sinclair ZX81 BASIC", "loc": 10, "block": "<pre class=\"text highlighted_source\"> 10 LET S$=\"HA\"<br/> 20 LET N=5<br/> 30 GOSUB 60<br/> 40 PRINT T$<br/> 50 STOP<br/> 60 LET T$=\"\"<br/> 70 FOR I=1 TO N<br/> 80 LET T$=T$+S$<br/> 90 NEXT I<br/>100 RETURN</pre>"}, {"lang": "Smalltalk", "loc": 2, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re6\">v</span> <span class=\"sy0\">:=</span> <span class=\"st0\">'ha'</span>.<br/><span class=\"re5\">v</span>,<span class=\"re5\">v</span>,<span class=\"re5\">v</span>,<span class=\"re5\">v</span>,<span class=\"re5\">v</span></pre>"}, {"lang": "SNOBOL4", "loc": 2, "block": "<pre class=\"text highlighted_source\">\toutput = dupl(\"ha\",5)<br/>end</pre>"}, {"lang": "Sparkling", "loc": 2, "block": "<pre class=\"text highlighted_source\">spn:3&gt; repeat(\"na\", 8) .. \" Batman!\"<br/>= nananananananana Batman!</pre>"}, {"lang": "SQL", "loc": 1, "block": "<pre class=\"sql highlighted_source\"><span class=\"kw1\">SELECT</span> rpad<span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"st0\">'ha'</span><span class=\"br0\">)</span></pre>"}, {"lang": "Standard ML", "loc": 3, "block": "<pre class=\"text highlighted_source\">fun string_repeat (s, n) =<br/>  concat (List.tabulate (n, fn _ =&gt; s))<br/>;</pre>"}, {"lang": "Stata", "loc": 4, "block": "<pre class=\"text highlighted_source\">. scalar a=\"ha\"<br/>. scalar b=a*5<br/>. display b<br/>hahahahaha</pre>"}, {"lang": "Suneido", "loc": 2, "block": "<pre class=\"text highlighted_source\">'ha'.Repeat(5)  --&gt;  \"hahahahaha\"<br/>'*'.Repeat(5)  --&gt;  \"*****\"</pre>"}, {"lang": "Swift", "loc": 19, "block": "<pre class=\"text highlighted_source\">extension String {<br/>  // Slower version<br/>  func repeatString(n: Int) -&gt; String {<br/>    return Array(count: n, repeatedValue: self).joinWithSeparator(\"\")<br/>  }<br/>\u00a0<br/>  // Faster version<br/>  // benchmarked with a 1000 characters and 100 repeats the fast version is approx 500 000 times faster\u00a0:-)<br/>  func repeatString2(n:Int) -&gt; String {<br/>    var result = self<br/>    for _ in 1 ..&lt; n {<br/>      result.appendContentsOf(self)   // Note that String.appendContentsOf is up to 10 times faster than \"result += self\"<br/>    }<br/>    return result<br/>  }<br/>}<br/>\u00a0<br/>print( \"ha\".repeatString(5) )<br/>print( \"he\".repeatString2(5) )</pre>"}, {"lang": "Tcl", "loc": 1, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">string</span> repeat <span class=\"st0\">\"ha\"</span> <span class=\"nu0\">5</span>  <span class=\"sy0\">;</span><span class=\"co1\"># =&gt; hahahahaha</span></pre>"}, {"lang": "TUSCRIPT", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$$ MODE TUSCRIPT<br/>repeatstring=REPEAT (\"ha\",5)<br/>\u00a0</pre>"}, {"lang": "TorqueScript", "loc": 9, "block": "<pre class=\"text highlighted_source\">function strRep(%str,%int)<br/>{<br/>\tfor(%i = 0;\u00a0%i &lt;\u00a0%int;\u00a0%i++)<br/>\t{<br/>\t\t%rstr =\u00a0%<a class=\"__cf_email__\" data-cfemail=\"1c6e6f686e5c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>%str;<br/>\t}<br/>\u00a0<br/>\treturn\u00a0%rstr;<br/>}</pre>"}, {"lang": "Transact-SQL", "loc": 1, "block": "<pre class=\"tsql highlighted_source\"><span class=\"kw1\">select</span> <span class=\"kw2\">REPLICATE</span><span class=\"br0\">(</span> <span class=\"st0\">'ha'</span>, <span class=\"nu0\">5</span> <span class=\"br0\">)</span></pre>"}, {"lang": "UNIX Shell", "loc": 1, "block": "<pre class=\"bash highlighted_source\"><span class=\"kw3\">printf</span> <span class=\"st0\">\"ha\"</span><span class=\"sy0\">%</span>.0s <span class=\"br0\">{</span><span class=\"nu0\">1</span>..<span class=\"nu0\">5</span><span class=\"br0\">}</span></pre>"}, {"lang": "Ursala", "loc": 7, "block": "<pre class=\"text highlighted_source\">#import nat<br/>\u00a0<br/>repeat = ^|DlSL/~&amp; iota<br/>\u00a0<br/>#cast\u00a0%s<br/>\u00a0<br/>example = repeat('ha',5)</pre>"}, {"lang": "Vala", "loc": 6, "block": "<pre class=\"vala highlighted_source\">\u00a0<br/><span class=\"kw4\">string</span> s <span class=\"sy0\">=</span> <span class=\"st0\">\"ha\"</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">string</span> copy <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> x<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\tcopy <span class=\"sy0\">+=</span> s<span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "VBA", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Public Function RepeatStr(aString As String, aNumber As Integer) As String<br/>Dim bString As String<br/>\u00a0<br/>bString = aString<br/>If aNumber &gt; 1 Then<br/>  For i = 2 To aNumber<br/>    bString = bString &amp; aString<br/>  Next i<br/>End If<br/>RepeatStr = bString<br/>End Function<br/>\u00a0</pre>"}, {"lang": "VBScript", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>' VBScript has a String() function that can repeat a character a given number of times<br/>' but this only works with single characters (or the 1st char of a string):<br/>WScript.Echo String(10, \"123\")\t' Displays \"1111111111\"<br/>\u00a0<br/>' To repeat a string of chars, you can use either of the following \"hacks\"...<br/>WScript.Echo Replace(Space(10), \" \", \"Ha\")<br/>WScript.Echo Replace(String(10, \"X\"), \"X\", \"Ha\")<br/>\u00a0</pre>"}, {"lang": "Vedit macro language", "loc": 1, "block": "<pre class=\"vedit highlighted_source\">Ins_Text<span class=\"br0\">(</span><span class=\"st0\">\"ha\"</span><span class=\"sy0\">,</span> COUNT<span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> </pre>"}, {"lang": "Visual Basic .NET", "loc": 1, "block": "<pre class=\"vbnet highlighted_source\">FileContents <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">.</span><span class=\"me1\">PadRight</span><span class=\"br0\">(</span>FileSizeBytes, <span class=\"st0\">\"X\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Visual FoxPro", "loc": 1, "block": "<pre class=\"text highlighted_source\">? REPLICATE(\"HO\", 3)</pre>"}, {"lang": "Wart", "loc": 7, "block": "<pre class=\"text highlighted_source\">def (s * n)\u00a0:case (string? s)<br/>  with outstring<br/>    repeat n<br/>      pr s<br/>\u00a0<br/>(\"ha\" * 5)<br/>=&gt; \"hahahahaha\"</pre>"}, {"lang": "Wortel", "loc": 1, "block": "<pre class=\"text highlighted_source\">@join \"\" @rep 5 \"ha\"\u00a0; returns \"hahahahaha\"</pre>"}, {"lang": "XPL0", "loc": 1, "block": "<pre class=\"text highlighted_source\">cod T=12; int I; for I gets 1,5 do T(0,\"ha\")</pre>"}, {"lang": "Yorick", "loc": 1, "block": "<pre class=\"text highlighted_source\">array(\"ha\", 5)(sum)</pre>"}, {"lang": "zkl", "loc": 1, "block": "<pre class=\"text highlighted_source\">\"ha\" * 5  # --&gt; \"hahahahaha\"</pre>"}]}