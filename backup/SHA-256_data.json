{"task": "SHA-256", "blocks": [{"lang": "AutoHotkey", "loc": 52, "block": "<pre class=\"autohotkey highlighted_source\">str <span class=\"sy0\">:=</span> <span class=\"st0\">\"Rosetta code\"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\"File:`n\"</span> <span class=\"br0\">(</span>file<span class=\"br0\">)</span> <span class=\"st0\">\"`n`nSHA-256:`n\"</span> FileSHA256<span class=\"br0\">(</span>file<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">; SHA256 ============================================================================</span><br/>SHA256<span class=\"br0\">(</span>string<span class=\"sy0\">,</span> encoding <span class=\"sy0\">=</span> <span class=\"st0\">\"utf-8\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> CalcStringHash<span class=\"br0\">(</span>string<span class=\"sy0\">,</span> 0x800c<span class=\"sy0\">,</span> encoding<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">; CalcAddrHash ======================================================================</span><br/>CalcAddrHash<span class=\"br0\">(</span>addr<span class=\"sy0\">,</span> length<span class=\"sy0\">,</span> algid<span class=\"sy0\">,</span> byref hash <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> byref hashlength <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    static h <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"st0\">\"A\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"B\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"C\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"E\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"F\"</span><span class=\"br0\">]</span><br/>    static b <span class=\"sy0\">:=</span> h<span class=\"sy0\">.</span>minIndex<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    o <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"advapi32\\CryptAcquireContext\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr*\"</span><span class=\"sy0\">,</span> hProv<span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">24</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> 0xF0000000<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"advapi32\\CryptCreateHash\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr\"</span><span class=\"sy0\">,</span> hProv<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> algid<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr*\"</span><span class=\"sy0\">,</span> hHash<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"advapi32\\CryptHashData\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr\"</span><span class=\"sy0\">,</span> hHash<span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr\"</span><span class=\"sy0\">,</span> addr<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> length<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"advapi32\\CryptGetHashParam\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr\"</span><span class=\"sy0\">,</span> hHash<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UInt*\"</span><span class=\"sy0\">,</span> hashlength<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    <a href=\"http://www.autohotkey.com/docs/commands/VarSetCapacity.htm\"><span class=\"kw3\">VarSetCapacity</span></a><span class=\"br0\">(</span>hash<span class=\"sy0\">,</span> hashlength<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"advapi32\\CryptGetHashParam\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr\"</span><span class=\"sy0\">,</span> hHash<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>hash<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt*\"</span><span class=\"sy0\">,</span> hashlength<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    <span class=\"br0\">{</span><br/>                        <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span>\u00a0% hashlength<br/>                        <span class=\"br0\">{</span><br/>                            v <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">NumGet</span></a><span class=\"br0\">(</span>hash<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UChar\"</span><span class=\"br0\">)</span><br/>                            o <span class=\"sy0\">.=</span> h<span class=\"br0\">[</span><span class=\"br0\">(</span>v <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> b<span class=\"br0\">]</span> h<span class=\"br0\">[</span><span class=\"br0\">(</span>v <span class=\"sy0\">&amp;</span> 0xf<span class=\"br0\">)</span> <span class=\"sy0\">+</span> b<span class=\"br0\">]</span><br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"advapi32\\CryptDestroyHash\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr\"</span><span class=\"sy0\">,</span> hHash<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"advapi32\\CryPtreleaseContext\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr\"</span><span class=\"sy0\">,</span> hProv<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> o<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">; CalcStringHash ====================================================================</span><br/>CalcStringHash<span class=\"br0\">(</span>string<span class=\"sy0\">,</span> algid<span class=\"sy0\">,</span> encoding <span class=\"sy0\">=</span> <span class=\"st0\">\"utf-8\"</span><span class=\"sy0\">,</span> byref hash <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> byref hashlength <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    chrlength <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>encoding <span class=\"sy0\">=</span> <span class=\"st0\">\"cp1200\"</span> || encoding <span class=\"sy0\">=</span> <span class=\"st0\">\"utf-16\"</span><span class=\"br0\">)</span>\u00a0? <span class=\"nu0\">2</span>\u00a0: <span class=\"nu0\">1</span><br/>    length <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>StrPut<span class=\"br0\">(</span>string<span class=\"sy0\">,</span> encoding<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> chrlength<br/>    <a href=\"http://www.autohotkey.com/docs/commands/VarSetCapacity.htm\"><span class=\"kw3\">VarSetCapacity</span></a><span class=\"br0\">(</span>data<span class=\"sy0\">,</span> length<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    StrPut<span class=\"br0\">(</span>string<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>data<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">floor</span></a><span class=\"br0\">(</span>length <span class=\"sy0\">/</span> chrlength<span class=\"br0\">)</span><span class=\"sy0\">,</span> encoding<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> CalcAddrHash<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>data<span class=\"sy0\">,</span> length<span class=\"sy0\">,</span> algid<span class=\"sy0\">,</span> hash<span class=\"sy0\">,</span> hashlength<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "BaCon", "loc": 14, "block": "<pre class=\"qbasic highlighted_source\">PRAGMA INCLUDE <span class=\"sy0\">&lt;</span>openssl<span class=\"sy0\">/</span>sha.h<span class=\"sy0\">&gt;</span><br/>PRAGMA LDFLAGS <span class=\"sy0\">-</span>lcrypto<br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckoption.shtml\"><span class=\"kw3\">OPTION</span></a> MEMTYPE unsigned char<br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckdeclare.shtml\"><span class=\"kw3\">DECLARE</span></a> result <a href=\"http://www.qbasicnews.com/qboho/qcktype.shtml\"><span class=\"kw3\">TYPE</span></a> unsigned char<span class=\"sy0\">*</span><br/>\u00a0<br/>result <span class=\"sy0\">=</span> SHA256<span class=\"br0\">(</span><span class=\"st0\">\"Rosetta code\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">12</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">FOR</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> SHA256_DIGEST_LENGTH<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckpeek.shtml\"><span class=\"kw3\">PEEK</span></a><span class=\"br0\">(</span>result<span class=\"sy0\">+</span>i<span class=\"br0\">)</span> FORMAT <span class=\"st0\">\"%02x\"</span><br/><span class=\"kw1\">NEXT</span><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a></pre>"}, {"lang": "BBC BASIC", "loc": 25, "block": "<pre class=\"text highlighted_source\">      PRINT FNsha256(\"Rosetta code\")<br/>      END<br/>\u00a0<br/>      DEF FNsha256(message$)<br/>      LOCAL buflen%, buffer%, hcont%, hprov%, hhash%, hash$, i%<br/>      CALG_SHA_256 = &amp;800C<br/>      HP_HASHVAL = 2<br/>      CRYPT_NEWKEYSET = 8<br/>      PROV_RSA_AES = 24<br/>      buflen% = 128<br/>      DIM buffer% LOCAL buflen%-1<br/>      SYS \"CryptAcquireContext\", ^hcont%, 0, \\<br/>      \\   \"Microsoft Enhanced RSA and AES Cryptographic Provider\", \\<br/>      \\   PROV_RSA_AES, CRYPT_NEWKEYSET<br/>      SYS \"CryptAcquireContext\", ^hprov%, 0, 0, PROV_RSA_AES, 0<br/>      SYS \"CryptCreateHash\", hprov%, CALG_SHA_256, 0, 0, ^hhash%<br/>      SYS \"CryptHashData\", hhash%, message$, LEN(message$), 0<br/>      SYS \"CryptGetHashParam\", hhash%, HP_HASHVAL, buffer%, ^buflen%, 0<br/>      SYS \"CryptDestroyHash\", hhash%<br/>      SYS \"CryptReleaseContext\", hprov%<br/>      SYS \"CryptReleaseContext\", hcont%<br/>      FOR i% = 0 TO buflen%-1<br/>        hash$ += RIGHT$(\"0\" + STR$~buffer%?i%, 2)<br/>      NEXT<br/>      = hash$</pre>"}, {"lang": "C", "loc": 15, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/><span class=\"co2\">#include &lt;openssl/sha.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main <span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s <span class=\"sy0\">=</span> <span class=\"st0\">\"Rosetta code\"</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>d <span class=\"sy0\">=</span> SHA256<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> SHA256_DIGEST_LENGTH<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%02x\"</span><span class=\"sy0\">,</span> d<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 20, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;cryptopp/filters.h&gt;</span><br/><span class=\"co2\">#include &lt;cryptopp/hex.h&gt;</span><br/><span class=\"co2\">#include &lt;cryptopp/sha.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"sy2\">**</span>argv<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tCryptoPP<span class=\"sy4\">::</span><span class=\"me2\">SHA256</span> hash<span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">string</span> digest<span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">string</span> message <span class=\"sy1\">=</span> <span class=\"st0\">\"Rosetta code\"</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tCryptoPP<span class=\"sy4\">::</span><span class=\"me2\">StringSource</span> s<span class=\"br0\">(</span>message, <span class=\"kw2\">true</span>,<br/>\t\t\t<span class=\"kw3\">new</span> CryptoPP<span class=\"sy4\">::</span><span class=\"me2\">HashFilter</span><span class=\"br0\">(</span>hash,<br/>\t\t\t\t<span class=\"kw3\">new</span> CryptoPP<span class=\"sy4\">::</span><span class=\"me2\">HexEncoder</span><span class=\"br0\">(</span><br/>\t\t\t\t\t<span class=\"kw3\">new</span> CryptoPP<span class=\"sy4\">::</span><span class=\"me2\">StringSink</span><span class=\"br0\">(</span>digest<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tstd<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> digest <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 22, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Security.Cryptography</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Text</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">Microsoft.VisualStudio.TestTools.UnitTesting</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> RosettaCode<span class=\"sy0\">.</span><span class=\"me1\">SHA256</span><br/><span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span>TestClass<span class=\"br0\">]</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">class</span> SHA256ManagedTest<br/>    <span class=\"br0\">{</span><br/>        <span class=\"br0\">[</span>TestMethod<span class=\"br0\">]</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> TestComputeHash<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> buffer <span class=\"sy0\">=</span> Encoding<span class=\"sy0\">.</span><span class=\"me1\">UTF8</span><span class=\"sy0\">.</span><span class=\"me1\">GetBytes</span><span class=\"br0\">(</span><span class=\"st0\">\"Rosetta code\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> hashAlgorithm <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> SHA256Managed<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> hash <span class=\"sy0\">=</span> hashAlgorithm<span class=\"sy0\">.</span><span class=\"me1\">ComputeHash</span><span class=\"br0\">(</span>buffer<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Assert<span class=\"sy0\">.</span><span class=\"me1\">AreEqual</span><span class=\"br0\">(</span><br/>                <span class=\"st0\">\"76-4F-AF-5C-61-AC-31-5F-14-97-F9-DF-A5-42-71-39-65-B7-85-E5-CC-2F-70-7D-64-68-D7-D1-12-4C-DF-CF\"</span>,<br/>                BitConverter<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span>hash<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Cach\u00e9 ObjectScript", "loc": 1, "block": "<pre>USER&gt;set hash=$System.Encryption.SHAHash(256, \"Rosetta code\")\nUSER&gt;zzdump hash\n0000: 76 4F AF 5C 61 AC 31 5F 14 97 F9 DF A5 42 71 39\n0010: 65 B7 85 E5 CC 2F 70 7D 64 68 D7 D1 12 4C DF CF</pre>"}, {"lang": "Clojure", "loc": 2, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span>use 'pandect<span class=\"sy0\">.</span>core<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>sha256 <span class=\"st0\">\"Rosetta code\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 7, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>ql<span class=\"sy0\">:</span><span class=\"me1\">quickload</span> 'ironclad<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> sha-<span class=\"nu0\">256</span> <span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>ironclad<span class=\"sy0\">:</span><span class=\"me1\">byte-array-to-hex-string</span><br/>    <span class=\"br0\">(</span>ironclad<span class=\"sy0\">:</span><span class=\"me1\">digest-sequence</span> <span class=\"sy0\">:</span><span class=\"me1\">sha256</span> <br/>                              <span class=\"br0\">(</span>ironclad<span class=\"sy0\">:</span><span class=\"me1\">ascii-string-to-byte-</span><span class=\"kw1\">array</span> str<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>sha-<span class=\"nu0\">256</span> <span class=\"st0\">\"Rosetta code\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 5, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">digest</span>.<span class=\"me1\">sha</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"%-(%02x%)\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Rosetta code\"</span>.<span class=\"me1\">sha256Of</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "DWScript", "loc": 1, "block": "<pre class=\"delphi highlighted_source\">PrintLn<span class=\"br0\">(</span> HashSHA256<span class=\"sy1\">.</span><span class=\"me1\">HashData</span><span class=\"br0\">(</span><span class=\"st0\">'Rosetta code'</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span></pre>"}, {"lang": "Emacs Lisp", "loc": 1, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>secure-<span class=\"kw1\">hash</span> 'sha256 <span class=\"st0\">\"Rosetta code\"</span><span class=\"br0\">)</span>  <span class=\"co1\">;; as string of hex digits</span></pre>"}, {"lang": "Erlang", "loc": 1, "block": "<pre>10&gt; Binary =  crypto:hash( sha256, \"Rosetta code\" ).\n11&gt; lists:append( [erlang:integer_to_list(X, 16) || &lt;&lt;X:8/integer&gt;&gt; &lt;= Binary] ).\n\"764FAF5C61AC315F1497F9DFA542713965B785E5CC2F707D6468D7D1124CDFCF\"\n</pre>"}, {"lang": "F#", "loc": 9, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System.<span class=\"me1\">Security</span>.<span class=\"me1\">Cryptography</span><br/><span class=\"kw1\">open</span> System.<span class=\"me1\">Text</span><br/>\u00a0<br/><span class=\"st0\">\"Rosetta code\"</span><br/><span class=\"sy0\">|&gt;</span> Encoding.<span class=\"me1\">ASCII</span>.<span class=\"me1\">GetBytes</span><br/><span class=\"sy0\">|&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">new</span> SHA256Managed<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">ComputeHash</span><br/><span class=\"sy0\">|&gt;</span> System.<span class=\"me1\">BitConverter</span>.<span class=\"me1\">ToString</span><br/><span class=\"sy0\">|&gt;</span> printfn <span class=\"st0\">\"%s\"</span><br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 3, "block": "<pre class=\"text highlighted_source\">USING: checksums checksums.sha io math.parser\u00a0;<br/>\u00a0<br/>\"Rosetta code\" sha-256 checksum-bytes bytes&gt;hex-string print</pre>"}, {"lang": "Fortran", "loc": 1, "block": "<pre>sha256 rc.txt\n764FAF5C61AC315F1497F9DFA542713965B785E5CC2F707D6468D7D1124CDFCF rc.txt (12 bytes)</pre>"}, {"lang": "FreeBASIC", "loc": 133, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 20-10-2016</span><br/><span class=\"co1\">' FIPS PUB 180-4</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> SHA_256<span class=\"br0\">(</span>test_str <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/>\u00a0<br/>  <span class=\"co2\">#Macro Ch (x, y, z)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> And <span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">Xor</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">Not</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span> And z<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"co2\">#EndMacro</span><br/>\u00a0<br/>  <span class=\"co2\">#Macro Maj (x, y, z)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> And <span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">Xor</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> And <span class=\"br0\">(</span>z<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">Xor</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span> And <span class=\"br0\">(</span>z<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"co2\">#EndMacro</span><br/>\u00a0<br/>  <span class=\"co2\">#Macro sigma0 (x)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">Shr</span> <span class=\"nu0\">2</span> <span class=\"kw1\">Or</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">Shl</span> <span class=\"nu0\">30</span><span class=\"br0\">)</span> <span class=\"kw1\">Xor</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">Shr</span> <span class=\"nu0\">13</span> <span class=\"kw1\">Or</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">Shl</span> <span class=\"nu0\">19</span><span class=\"br0\">)</span> <span class=\"kw1\">Xor</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">Shr</span> <span class=\"nu0\">22</span> <span class=\"kw1\">Or</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">Shl</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"co2\">#EndMacro</span><br/>\u00a0<br/>  <span class=\"co2\">#Macro sigma1 (x)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">Shr</span> <span class=\"nu0\">6</span> <span class=\"kw1\">Or</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">Shl</span> <span class=\"nu0\">26</span><span class=\"br0\">)</span> <span class=\"kw1\">Xor</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">Shr</span> <span class=\"nu0\">11</span> <span class=\"kw1\">Or</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">Shl</span> <span class=\"nu0\">21</span><span class=\"br0\">)</span> <span class=\"kw1\">Xor</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">Shr</span> <span class=\"nu0\">25</span> <span class=\"kw1\">Or</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">Shl</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"co2\">#EndMacro</span><br/>\u00a0<br/>  <span class=\"co2\">#Macro sigma2 (x)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">Shr</span> <span class=\"nu0\">7</span> <span class=\"kw1\">Or</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">Shl</span> <span class=\"nu0\">25</span><span class=\"br0\">)</span> <span class=\"kw1\">Xor</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">Shr</span> <span class=\"nu0\">18</span> <span class=\"kw1\">Or</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">Shl</span> <span class=\"nu0\">14</span><span class=\"br0\">)</span> <span class=\"kw1\">Xor</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">Shr</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"co2\">#EndMacro</span><br/>\u00a0<br/>  <span class=\"co2\">#Macro sigma3 (x)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">Shr</span> <span class=\"nu0\">17</span> <span class=\"kw1\">Or</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">Shl</span> <span class=\"nu0\">15</span><span class=\"br0\">)</span> <span class=\"kw1\">Xor</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">Shr</span> <span class=\"nu0\">19</span> <span class=\"kw1\">Or</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">Shl</span> <span class=\"nu0\">13</span><span class=\"br0\">)</span> <span class=\"kw1\">Xor</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">Shr</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"co2\">#EndMacro</span><br/>\u00a0<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> message = test_str   <span class=\"co1\">' strings are passed as ByRef's</span><br/>\u00a0<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Long</span> i, j<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UByte</span> <span class=\"kw1\">Ptr</span> ww1<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> UInteger&lt;<span class=\"nu0\">32</span>&gt; <span class=\"kw1\">Ptr</span> ww4<br/>\u00a0<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">ULongInt</span> l = <span class=\"kw1\">Len</span><span class=\"br0\">(</span>message<span class=\"br0\">)</span><br/>  <span class=\"co1\">' set the first bit after the message to 1</span><br/>  message = message + <span class=\"kw1\">Chr</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">Shl</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">' add one char to the length</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> ULong padding = <span class=\"nu0\">64</span> - <span class=\"br0\">(</span><span class=\"br0\">(</span>l +<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">Mod</span> <span class=\"br0\">(</span><span class=\"nu0\">512</span> \\ <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">' 512 \\ 8 = 64 char.</span><br/>\u00a0<br/>  <span class=\"co1\">' check if we have enough room for inserting the length</span><br/>  <span class=\"kw1\">If</span> padding &lt; <span class=\"nu0\">8</span> <span class=\"kw1\">Then</span> padding = padding + <span class=\"nu0\">64</span><br/>\u00a0<br/>  message = message + <span class=\"kw1\">String</span><span class=\"br0\">(</span>padding, <span class=\"kw1\">Chr</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>   <span class=\"co1\">' adjust length</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> ULong l1 = <span class=\"kw1\">Len</span><span class=\"br0\">(</span>message<span class=\"br0\">)</span>                <span class=\"co1\">' new length</span><br/>\u00a0<br/>  l = l * <span class=\"nu0\">8</span>    <span class=\"co1\">' orignal length in bits</span><br/>  <span class=\"co1\">' create ubyte ptr to point to l ( = length in bits)</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UByte</span> <span class=\"kw1\">Ptr</span> ub_ptr = Cast<span class=\"br0\">(</span><span class=\"kw1\">UByte</span> <span class=\"kw1\">Ptr</span>, @l<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">7</span>  <span class=\"co1\">'copy length of message to the last 8 bytes</span><br/>    message<span class=\"br0\">[</span>l1 -<span class=\"nu0\">1</span> - i<span class=\"br0\">]</span> = ub_ptr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/>  <span class=\"co1\">'table of constants</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> UInteger&lt;<span class=\"nu0\">32</span>&gt; K<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> ...<span class=\"br0\">)</span> = _<br/>  <span class=\"br0\">{</span> &amp;H428a2f98, &amp;H71374491, &amp;Hb5c0fbcf, &amp;He9b5dba5, &amp;H3956c25b, &amp;H59f111f1, _<br/>    &amp;H923f82a4, &amp;Hab1c5ed5, &amp;Hd807aa98, &amp;H12835b01, &amp;H243185be, &amp;H550c7dc3, _<br/>    &amp;H72be5d74, &amp;H80deb1fe, &amp;H9bdc06a7, &amp;Hc19bf174, &amp;He49b69c1, &amp;Hefbe4786, _<br/>    &amp;H0fc19dc6, &amp;H240ca1cc, &amp;H2de92c6f, &amp;H4a7484aa, &amp;H5cb0a9dc, &amp;H76f988da, _<br/>    &amp;H983e5152, &amp;Ha831c66d, &amp;Hb00327c8, &amp;Hbf597fc7, &amp;Hc6e00bf3, &amp;Hd5a79147, _<br/>    &amp;H06ca6351, &amp;H14292967, &amp;H27b70a85, &amp;H2e1b2138, &amp;H4d2c6dfc, &amp;H53380d13, _<br/>    &amp;H650a7354, &amp;H766a0abb, &amp;H81c2c92e, &amp;H92722c85, &amp;Ha2bfe8a1, &amp;Ha81a664b, _<br/>    &amp;Hc24b8b70, &amp;Hc76c51a3, &amp;Hd192e819, &amp;Hd6990624, &amp;Hf40e3585, &amp;H106aa070, _<br/>    &amp;H19a4c116, &amp;H1e376c08, &amp;H2748774c, &amp;H34b0bcb5, &amp;H391c0cb3, &amp;H4ed8aa4a, _<br/>    &amp;H5b9cca4f, &amp;H682e6ff3, &amp;H748f82ee, &amp;H78a5636f, &amp;H84c87814, &amp;H8cc70208, _<br/>    &amp;H90befffa, &amp;Ha4506ceb, &amp;Hbef9a3f7, &amp;Hc67178f2 <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> UInteger&lt;<span class=\"nu0\">32</span>&gt; h0 = &amp;H6a09e667<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> UInteger&lt;<span class=\"nu0\">32</span>&gt; h1 = &amp;Hbb67ae85<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> UInteger&lt;<span class=\"nu0\">32</span>&gt; h2 = &amp;H3c6ef372<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> UInteger&lt;<span class=\"nu0\">32</span>&gt; h3 = &amp;Ha54ff53a<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> UInteger&lt;<span class=\"nu0\">32</span>&gt; h4 = &amp;H510e527f<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> UInteger&lt;<span class=\"nu0\">32</span>&gt; h5 = &amp;H9b05688c<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> UInteger&lt;<span class=\"nu0\">32</span>&gt; h6 = &amp;H1f83d9ab<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> UInteger&lt;<span class=\"nu0\">32</span>&gt; h7 = &amp;H5be0cd19<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> UInteger&lt;<span class=\"nu0\">32</span>&gt; a, b, c, d, e, f, g, h<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> UInteger&lt;<span class=\"nu0\">32</span>&gt; t1, t2, w<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">63</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/>  <span class=\"kw1\">For</span> j = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"br0\">(</span>l1 -<span class=\"nu0\">1</span><span class=\"br0\">)</span> \\ <span class=\"nu0\">64</span> <span class=\"co1\">' split into block of 64 bytes</span><br/>    ww1 = Cast<span class=\"br0\">(</span><span class=\"kw1\">UByte</span> <span class=\"kw1\">Ptr</span>, @message<span class=\"br0\">[</span>j * <span class=\"nu0\">64</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    ww4 = Cast<span class=\"br0\">(</span>UInteger&lt;<span class=\"nu0\">32</span>&gt; <span class=\"kw1\">Ptr</span>, @message<span class=\"br0\">[</span>j * <span class=\"nu0\">64</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">60</span> <span class=\"kw1\">Step</span> <span class=\"nu0\">4</span>  <span class=\"co1\">'little endian -&gt; big endian</span><br/>      <span class=\"kw1\">Swap</span> ww1<span class=\"br0\">[</span>i   <span class=\"br0\">]</span>, ww1<span class=\"br0\">[</span>i +<span class=\"nu0\">3</span><span class=\"br0\">]</span><br/>      <span class=\"kw1\">Swap</span> ww1<span class=\"br0\">[</span>i +<span class=\"nu0\">1</span><span class=\"br0\">]</span>, ww1<span class=\"br0\">[</span>i +<span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">15</span>    <span class=\"co1\">' copy the 16 32bit block into the array</span><br/>      W<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = ww4<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"kw1\">For</span> i = <span class=\"nu0\">16</span> <span class=\"kw1\">To</span> <span class=\"nu0\">63</span>   <span class=\"co1\">' fill the rest of the array</span><br/>      w<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = sigma3<span class=\"br0\">(</span>W<span class=\"br0\">(</span>i -<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> + W<span class=\"br0\">(</span>i -<span class=\"nu0\">7</span><span class=\"br0\">)</span> + sigma2<span class=\"br0\">(</span>W<span class=\"br0\">(</span>i -<span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"br0\">)</span> + W<span class=\"br0\">(</span>i -<span class=\"nu0\">16</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    a = h0\u00a0: b = h1\u00a0: c = h2\u00a0: d = h3\u00a0: e = h4\u00a0: f = h5\u00a0: g = h6\u00a0: h = h7<br/>\u00a0<br/>    <span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">63</span><br/>      t1 = h + sigma1<span class=\"br0\">(</span>e<span class=\"br0\">)</span> + Ch<span class=\"br0\">(</span>e, f, g<span class=\"br0\">)</span> + K<span class=\"br0\">(</span>i<span class=\"br0\">)</span> + W<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>      t2 = sigma0<span class=\"br0\">(</span>a<span class=\"br0\">)</span> + Maj<span class=\"br0\">(</span>a, b, c<span class=\"br0\">)</span><br/>      h = g\u00a0: g = f\u00a0: f = e<br/>      e = d + t1<br/>      d = c\u00a0: c = b\u00a0: b = a<br/>      a = t1 + t2<br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    h0 += a\u00a0: h1 += b\u00a0: h2 += c\u00a0: h3 += d<br/>    h4 += e\u00a0: h5 += f\u00a0: h6 += g\u00a0: h7 += h<br/>\u00a0<br/>  <span class=\"kw1\">Next</span> j<br/>\u00a0<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> answer  = <span class=\"kw1\">Hex</span><span class=\"br0\">(</span>h0, <span class=\"nu0\">8</span><span class=\"br0\">)</span> + <span class=\"kw1\">Hex</span><span class=\"br0\">(</span>h1, <span class=\"nu0\">8</span><span class=\"br0\">)</span> + <span class=\"kw1\">Hex</span><span class=\"br0\">(</span>h2, <span class=\"nu0\">8</span><span class=\"br0\">)</span> + <span class=\"kw1\">Hex</span><span class=\"br0\">(</span>h3, <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>                answer += <span class=\"kw1\">Hex</span><span class=\"br0\">(</span>h4, <span class=\"nu0\">8</span><span class=\"br0\">)</span> + <span class=\"kw1\">Hex</span><span class=\"br0\">(</span>h5, <span class=\"nu0\">8</span><span class=\"br0\">)</span> + <span class=\"kw1\">Hex</span><span class=\"br0\">(</span>h6, <span class=\"nu0\">8</span><span class=\"br0\">)</span> + <span class=\"kw1\">Hex</span><span class=\"br0\">(</span>h7, <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">Return</span> <span class=\"kw1\">LCase</span><span class=\"br0\">(</span>answer<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> test = <span class=\"st0\">\"Rosetta code\"</span><br/><span class=\"kw1\">Print</span> test; <span class=\"st0\">\" =&gt; \"</span>; SHA_256<span class=\"br0\">(</span>test<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">Inkey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "FunL", "loc": 3, "block": "<pre class=\"text highlighted_source\">native java.security.MessageDigest<br/>\u00a0<br/>def sha256Java( message ) = map( a -&gt; format('%02x', a), list(MessageDigest.getInstance('SHA-256').digest(message.getBytes('UTF-8'))) ).mkString()</pre>"}, {"lang": "Go", "loc": 15, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"crypto/sha256\"</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"log\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    h <span class=\"sy2\">:=</span> sha256<span class=\"sy3\">.</span>New<span class=\"sy1\">()</span><br/>    <span class=\"kw1\">if</span> _<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> h<span class=\"sy3\">.</span>Write<span class=\"sy1\">([]</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span><span class=\"st0\">\"Rosetta code\"</span><span class=\"sy1\">));</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        log<span class=\"sy3\">.</span>Fatal<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%x<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> h<span class=\"sy3\">.</span>Sum<span class=\"sy1\">(</span><span class=\"kw2\">nil</span><span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 4, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> sha256Hash <span class=\"sy0\">=</span> <span class=\"br0\">{</span> text <span class=\"sy0\">-&gt;</span><br/>    java.<span class=\"me1\">security</span>.<a href=\"http://www.google.de/search?as_q=MessageDigest&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">MessageDigest</span></a>.<span class=\"me1\">getInstance</span><span class=\"br0\">(</span><span class=\"st0\">\"SHA-256\"</span><span class=\"br0\">)</span>.<span class=\"me1\">digest</span><span class=\"br0\">(</span>text.<span class=\"me1\">bytes</span><span class=\"br0\">)</span><br/>            .<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"%02x\"</span>, it<span class=\"br0\">)</span> <span class=\"br0\">}</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20join\"><span class=\"kw5\">join</span></a><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Halon", "loc": 2, "block": "<pre class=\"text highlighted_source\">$var = \"Rosetta code\";<br/>echo sha2($var, 256);</pre>"}, {"lang": "Haskell", "loc": 13, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a> <span class=\"br0\">(</span>ord<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Crypto<span class=\"sy0\">.</span>Hash<span class=\"sy0\">.</span>SHA256 <span class=\"br0\">(</span>hash<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>ByteString <span class=\"br0\">(</span>unpack<span class=\"sy0\">,</span> pack<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Text<span class=\"sy0\">.</span>Printf <span class=\"br0\">(</span>printf<span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span>                     <span class=\"co1\">-- output to terminal</span><br/>       <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concatMap\"><span class=\"kw3\">concatMap</span></a> <span class=\"br0\">(</span>printf <span class=\"st0\">\"%02x\"</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span>    <span class=\"co1\">-- to hex string</span><br/>       unpack <span class=\"sy0\">$</span>                       <span class=\"co1\">-- to array of Word8</span><br/>       hash <span class=\"sy0\">$</span>                         <span class=\"co1\">-- SHA-256 hash to ByteString</span><br/>       pack <span class=\"sy0\">$</span>                         <span class=\"co1\">-- to ByteString</span><br/>       <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a><span class=\"sy0\">.</span>ord<span class=\"br0\">)</span>         <span class=\"co1\">-- to array of Word8</span><br/>       <span class=\"st0\">\"Rosetta code\"</span><br/>\u00a0</pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">require <span class=\"st_h\">'~addons/ide/qt/qt.ijs'</span><br/>getsha256=: <span class=\"st_h\">'sha256'</span>&amp;gethash_jqtide_</pre>"}, {"lang": "Java", "loc": 10, "block": "<pre class=\"text highlighted_source\">msg = \"Rosetta code\"<br/>\u00a0<br/>using Nettle<br/>digest = hexdigest(\"sha256\", msg)<br/>\u00a0<br/># native<br/>using SHA<br/>digest1 = join(num2hex.(sha256(msg)))<br/>\u00a0<br/>@assert digest == digest1</pre>"}, {"lang": "Julia", "loc": 10, "block": "<pre class=\"text highlighted_source\">msg = \"Rosetta code\"<br/>\u00a0<br/>using Nettle<br/>digest = hexdigest(\"sha256\", msg)<br/>\u00a0<br/># native<br/>using SHA<br/>digest1 = join(num2hex.(sha256(msg)))<br/>\u00a0<br/>@assert digest == digest1</pre>"}, {"lang": "Kotlin", "loc": 12, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">security</span>.<span class=\"me1\">MessageDigest</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> text  <span class=\"sy0\">=</span> <span class=\"st0\">\"Rosetta code\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> bytes <span class=\"sy0\">=</span> text.<span class=\"me1\">toByteArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> md <span class=\"sy0\">=</span> MessageDigest.<span class=\"me1\">getInstance</span><span class=\"br0\">(</span><span class=\"st0\">\"SHA-256\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> digest <span class=\"sy0\">=</span> md.<span class=\"me1\">digest</span><span class=\"br0\">(</span>bytes<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span><span class=\"kw2\">byte</span> in digest<span class=\"br0\">)</span> print<span class=\"br0\">(</span><span class=\"st0\">\"%02x\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"kw2\">byte</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span> <br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 11, "block": "<pre class=\"text highlighted_source\">// The following will return a list of all the cipher <br/>// algorithms supported by the installation of Lasso<br/>cipher_list<br/>\u00a0<br/>// With a -digest parameter the method will limit the returned list<br/>// to all of the digest algorithms supported by the installation of Lasso<br/>cipher_list(-digest)<br/>\u00a0<br/>// return the SHA-256 digest. Dependant on SHA-256 being an available digest method<br/>cipher_digest('Rosetta Code', -digest='SHA-256',-hex=true)<br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 5, "block": "<pre class=\"lua highlighted_source\"><span class=\"sy0\">#</span>!<span class=\"sy0\">/</span>usr<span class=\"sy0\">/</span>bin<span class=\"sy0\">/</span>lua<br/>\u00a0<br/><span class=\"kw3\">require</span> <span class=\"st0\">\"sha2\"</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>sha2<span class=\"sy0\">.</span>sha256hex<span class=\"br0\">(</span><span class=\"st0\">\"Rosetta code\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\">Hash[\"Rosetta code\",\"SHA256\",\"HexString\"]</pre>"}, {"lang": "NetRexx", "loc": 51, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref savelog symbols <span class=\"kw2\">binary</span><br/>\u00a0<br/><span class=\"kw1\">import</span> java.<span class=\"me0\">security</span>.<span class=\"me0\">MessageDigest</span><br/>\u00a0<br/>SHA256<span class=\"br0\">(</span><span class=\"st0\">'Rosetta code'</span>, <span class=\"st0\">'764faf5c61ac315f1497f9dfa542713965b785e5cc2f707d6468d7d1124cdfcf'</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method SHA256<span class=\"br0\">(</span>messageText, verifyCheck<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>\u00a0<br/>  algorithm   = <span class=\"st0\">'SHA-256'</span><br/>  digestSum = getDigest<span class=\"br0\">(</span>messageText, algorithm<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'&lt;Message&gt;'</span>messageText<span class=\"st0\">'&lt;/Message&gt;'</span><br/>  <span class=\"kw1\">say</span> Rexx<span class=\"br0\">(</span><span class=\"st0\">'&lt;'</span>algorithm<span class=\"st0\">'&gt;'</span><span class=\"br0\">)</span>.<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> digestSum<span class=\"st0\">'&lt;/'</span>algorithm<span class=\"st0\">'&gt;'</span><br/>  <span class=\"kw1\">say</span> Rexx<span class=\"br0\">(</span><span class=\"st0\">'&lt;Verify&gt;'</span><span class=\"br0\">)</span>.<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> verifyCheck<span class=\"st0\">'&lt;/Verify&gt;'</span><br/>  <span class=\"kw1\">if</span> digestSum == verifyCheck <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> algorithm <span class=\"st0\">'Confirmed'</span><br/>                              <span class=\"kw3\">else</span> <span class=\"kw1\">say</span> algorithm <span class=\"st0\">'Failed'</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method getDigest<span class=\"br0\">(</span>messageText = Rexx, algorithm = Rexx <span class=\"st0\">'MD5'</span>, encoding = Rexx <span class=\"st0\">'UTF-8'</span>, lowercase = boolean <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> Rexx<br/>\u00a0<br/>  algorithm = algorithm.<span class=\"kw6\">upper</span><br/>  encoding  = encoding.<span class=\"kw6\">upper</span><br/>\u00a0<br/>  message      = String<span class=\"br0\">(</span>messageText<span class=\"br0\">)</span><br/>  messageBytes = byte<span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  digestBytes  = byte<span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  digestSum    = Rexx <span class=\"st0\">''</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span><br/>    messageBytes = message.<span class=\"me0\">getBytes</span><span class=\"br0\">(</span>encoding<span class=\"br0\">)</span><br/>    md = MessageDigest.<span class=\"me0\">getInstance</span><span class=\"br0\">(</span>algorithm<span class=\"br0\">)</span><br/>    md.<span class=\"me0\">update</span><span class=\"br0\">(</span>messageBytes<span class=\"br0\">)</span><br/>    digestBytes = md.<span class=\"me0\">digest</span><br/>\u00a0<br/>    <span class=\"kw1\">loop</span> b_ = <span class=\"nu0\">0</span> to digestBytes.<span class=\"me0\">length</span> - <span class=\"nu0\">1</span><br/>      bb = Rexx<span class=\"br0\">(</span>digestBytes<span class=\"br0\">[</span>b_<span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"kw6\">d2x</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> lowercase <span class=\"kw3\">then</span> digestSum = digestSum <span class=\"sy0\">||</span> bb.<span class=\"kw6\">lower</span><br/>                   <span class=\"kw3\">else</span> digestSum = digestSum <span class=\"sy0\">||</span> bb.<span class=\"kw6\">upper</span><br/>      <span class=\"kw3\">end</span> b_<br/>  <span class=\"kw3\">catch</span> ex = Exception<br/>    ex.<span class=\"me0\">printStackTrace</span><br/>  <span class=\"kw3\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> digestSum<br/>\u00a0</pre>"}, {"lang": "NewLISP", "loc": 4, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"co1\">;; using the crypto module from http://www.newlisp.org/code/modules/crypto.lsp.html</span><br/><span class=\"co1\">;; (import native functions from the crypto library, provided by OpenSSL)</span><br/><span class=\"br0\">(</span>module <span class=\"st0\">\"crypto.lsp\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>crypto<span class=\"sy1\">:</span><span class=\"me0\">sha256</span> <span class=\"st0\">\"Rosetta Code\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Nim", "loc": 13, "block": "<pre class=\"text highlighted_source\">import strutils<br/>\u00a0<br/>const SHA256Len = 32<br/>\u00a0<br/>proc SHA256(d: cstring, n: culong, md: cstring = nil): cstring {.cdecl, dynlib: \"libssl.so\", importc.}<br/>\u00a0<br/>proc SHA256(s: string): string =<br/>  result = \"\"<br/>  let s = SHA256(s.cstring, s.len.culong)<br/>  for i in 0 .. &lt; SHA256Len:<br/>    result.add s[i].BiggestInt.toHex(2).toLower<br/>\u00a0<br/>echo SHA256(\"Rosetta code\")</pre>"}, {"lang": "Oberon-2", "loc": 20, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> SHA256;<br/><span class=\"kw1\">IMPORT</span><br/>  Crypto<span class=\"sy0\">:</span>SHA256<span class=\"sy0\">,</span><br/>  Crypto<span class=\"sy0\">:</span>Utils<span class=\"sy0\">,</span><br/>  Strings<span class=\"sy0\">,</span><br/>  Out;<br/><span class=\"kw1\">VAR</span><br/>  h<span class=\"sy0\">:</span> SHA256.<span class=\"me1\">Hash</span>;<br/>  str<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"nu0\">128</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  h <span class=\"sy0\">:=</span> SHA256.<span class=\"me1\">NewHash</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>  h.<span class=\"me1\">Initialize</span>;<br/>  str <span class=\"sy0\">:=</span> <span class=\"st0\">\"Rosetta code\"</span>;<br/>  h.<span class=\"me1\">Update</span><span class=\"br0\">(</span>str<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>Strings.<span class=\"me1\">Length</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>  h.<span class=\"me1\">GetHash</span><span class=\"br0\">(</span>str<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>  Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"SHA256: \"</span><span class=\"br0\">)</span>;Utils.<span class=\"me1\">PrintHex</span><span class=\"br0\">(</span>str<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>h.<span class=\"me1\">size</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span><br/><span class=\"kw1\">END</span> SHA256.<br/>\u00a0</pre>"}, {"lang": "Objeck", "loc": 10, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span> ShaHash <span class=\"br0\">{</span><br/>   <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      hash<span class=\"sy0\">:=</span> Encryption.Hash<span class=\"sy0\">-&gt;</span><span class=\"me1\">SHA256</span><span class=\"br0\">(</span><span class=\"st0\">\"Rosetta code\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">ToByteArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      str <span class=\"sy0\">:=</span> hash<span class=\"sy0\">-&gt;</span><span class=\"me1\">ToHexString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">ToLower</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      str<span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      str<span class=\"sy0\">-&gt;</span><span class=\"me1\">Equals</span><span class=\"br0\">(</span><span class=\"st0\">\"764faf5c61ac315f1497f9dfa542713965b785e5cc2f707d6468d7d1124cdfcf\"</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Objective-C", "loc": 1, "block": "<pre>clang -o rosetta_sha256 rosetta_sha256.m /System/Library/Frameworks/Cocoa.framework/Cocoa\n</pre>"}, {"lang": "OCaml", "loc": 4, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> s <span class=\"sy0\">=</span> <span class=\"st0\">\"Rosetta code\"</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> digest <span class=\"sy0\">=</span> Sha256<span class=\"sy0\">.</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEstring\"><span class=\"kw4\">string</span></a> s <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"br0\">(</span>Sha256<span class=\"sy0\">.</span>to_hex digest<span class=\"br0\">)</span></pre>"}, {"lang": "OS X sha256sum", "loc": 1, "block": "<pre class=\"text highlighted_source\">echo -n 'Rosetta code' | sha256sum</pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\">sha256<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">extern</span><span class=\"br0\">(</span><span class=\"st0\">\"echo <span class=\"es0\">\\\"</span>Str(`echo -n '\"</span><span class=\"kw1\">Str</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"st0\">\"'|sha256sum|cut -d' ' -f1`)<span class=\"es0\">\\\"</span>\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 8, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!/usr/bin/perl </span><br/><span class=\"kw2\">use</span> strict <span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> warnings <span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> Digest<span class=\"sy0\">::</span><span class=\"me2\">SHA</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> sha256_hex <span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$digest</span> <span class=\"sy0\">=</span> sha256_hex <span class=\"kw1\">my</span> <span class=\"re0\">$phrase</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Rosetta code\"</span> <span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"SHA-256('$phrase'): $digest<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 44, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw3\">say</span> sha256 <span class=\"st0\">\"Rosetta code\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> init<span class=\"br0\">(</span><span class=\"re0\">&amp;f</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">map</span> <span class=\"br0\">{</span> <span class=\"kw1\">my</span> <span class=\"re0\">$f</span> <span class=\"sy0\">=</span> <span class=\"re0\">$^p</span><span class=\"sy0\">.</span><span class=\"re0\">&amp;f</span><span class=\"sy0\">;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$f</span> <span class=\"sy0\">-</span> <span class=\"re0\">$f</span><span class=\"sy0\">.</span><span class=\"me1\">Int</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"sy0\">**</span><span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Int</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"kw1\">state</span> <span class=\"sy0\">@</span> <span class=\"sy0\">=</span> <span class=\"kw3\">grep</span> <span class=\"sy0\">*.</span><span class=\"me1\">is</span><span class=\"sy0\">-</span>prime<span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"sy0\">..</span> <span class=\"sy0\">*;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> infix<span class=\"sy0\">:&lt;</span>m<span class=\"sy0\">+&gt;</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"re0\">$^a</span> <span class=\"sy0\">+</span> <span class=\"re0\">$^b</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"sy0\">**</span><span class=\"nu0\">32</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> rotr<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$n</span> <span class=\"sy0\">+&gt;</span> <span class=\"re0\">$b</span> <span class=\"sy0\">+|</span> <span class=\"re0\">$n</span> <span class=\"sy0\">+&lt;</span> <span class=\"br0\">(</span><span class=\"nu0\">32</span> <span class=\"sy0\">-</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">proto</span> sha256<span class=\"br0\">(</span>$<span class=\"br0\">)</span> <span class=\"kw1\">returns</span> Blob <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><br/><span class=\"kw2\">multi</span> sha256<span class=\"br0\">(</span>Str <span class=\"re0\">$str</span> <span class=\"kw1\">where</span> <span class=\"kw3\">all</span><span class=\"br0\">(</span><span class=\"re0\">$str</span><span class=\"sy0\">.</span><span class=\"me1\">ords</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">128</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    sha256 <span class=\"re0\">$str</span><span class=\"sy0\">.</span><span class=\"kw3\">encode</span><span class=\"sy0\">:</span> <span class=\"st_h\">'ascii'</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">multi</span> sha256<span class=\"br0\">(</span>Blob <span class=\"re0\">$data</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">constant</span> K <span class=\"sy0\">=</span> init<span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"sy0\">**</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"nu0\">64</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@b</span> <span class=\"sy0\">=</span> flat <span class=\"re0\">$data</span><span class=\"sy0\">.</span><span class=\"me1\">list</span><span class=\"sy0\">,</span> 0x80<span class=\"sy0\">;</span><br/>    <span class=\"kw3\">push</span> <span class=\"re0\">@b</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"kw1\">until</span> <span class=\"br0\">(</span><span class=\"nu0\">8</span> <span class=\"sy0\">*</span> <span class=\"re0\">@b</span> <span class=\"sy0\">-</span> <span class=\"nu0\">448</span><span class=\"br0\">)</span> <span class=\"sy0\">%%</span> <span class=\"nu0\">512</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">push</span> <span class=\"re0\">@b</span><span class=\"sy0\">,</span> slip <span class=\"kw3\">reverse</span> <span class=\"br0\">(</span><span class=\"nu0\">8</span> <span class=\"sy0\">*</span> <span class=\"re0\">$data</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">polymod</span><span class=\"br0\">(</span><span class=\"nu0\">256</span> <span class=\"kw1\">xx</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@word</span> <span class=\"sy0\">=</span> <span class=\"sy0\">:</span><span class=\"nu0\">256</span><span class=\"br0\">[</span><span class=\"re0\">@b</span><span class=\"sy0\">.</span><span class=\"kw3\">shift</span> <span class=\"kw1\">xx</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"kw1\">xx</span> <span class=\"re0\">@b</span><span class=\"sy0\">/</span><span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@H</span> <span class=\"sy0\">=</span> init<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span><span class=\"kw3\">sqrt</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@w</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">loop</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">@word</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">@h</span> <span class=\"sy0\">=</span> <span class=\"re0\">@H</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"nu0\">64</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$j</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">@w</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$j</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">16</span> <span class=\"sy0\">??</span> <span class=\"re0\">@word</span><span class=\"br0\">[</span><span class=\"re0\">$j</span> <span class=\"sy0\">+</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">//</span> <span class=\"nu0\">0</span> <span class=\"sy0\">!!</span><br/>            <span class=\"br0\">[</span>m<span class=\"sy0\">+</span><span class=\"br0\">]</span><br/>            rotr<span class=\"br0\">(</span><span class=\"re0\">@w</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"sy0\">-</span><span class=\"nu0\">15</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"sy0\">+^</span> rotr<span class=\"br0\">(</span><span class=\"re0\">@w</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"sy0\">-</span><span class=\"nu0\">15</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">18</span><span class=\"br0\">)</span> <span class=\"sy0\">+^</span> <span class=\"re0\">@w</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"sy0\">-</span><span class=\"nu0\">15</span><span class=\"br0\">]</span> <span class=\"sy0\">+&gt;</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span><br/>            <span class=\"re0\">@w</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"sy0\">-</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>            rotr<span class=\"br0\">(</span><span class=\"re0\">@w</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">17</span><span class=\"br0\">)</span> <span class=\"sy0\">+^</span> rotr<span class=\"br0\">(</span><span class=\"re0\">@w</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">19</span><span class=\"br0\">)</span>  <span class=\"sy0\">+^</span> <span class=\"re0\">@w</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">+&gt;</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span><br/>            <span class=\"re0\">@w</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"sy0\">-</span><span class=\"nu0\">16</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">$ch</span> <span class=\"sy0\">=</span> <span class=\"re0\">@h</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">+&amp;</span> <span class=\"re0\">@h</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"sy0\">+^</span> <span class=\"sy0\">+^</span><span class=\"re0\">@h</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"sy0\">**</span><span class=\"nu0\">32</span> <span class=\"sy0\">+&amp;</span> <span class=\"re0\">@h</span><span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">$maj</span> <span class=\"sy0\">=</span> <span class=\"re0\">@h</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+&amp;</span> <span class=\"re0\">@h</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">+^</span> <span class=\"re0\">@h</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+&amp;</span> <span class=\"re0\">@h</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+^</span> <span class=\"re0\">@h</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+&amp;</span> <span class=\"re0\">@h</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">my</span> $\u03c3<span class=\"nu0\">0</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">+^</span><span class=\"br0\">]</span> <span class=\"kw3\">map</span> <span class=\"br0\">{</span> rotr <span class=\"re0\">@h</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$_</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">13</span><span class=\"sy0\">,</span> <span class=\"nu0\">22</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">my</span> $\u03c3<span class=\"nu0\">1</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">+^</span><span class=\"br0\">]</span> <span class=\"kw3\">map</span> <span class=\"br0\">{</span> rotr <span class=\"re0\">@h</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$_</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"sy0\">,</span> <span class=\"nu0\">25</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">$t1</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>m<span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"re0\">@h</span><span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> $\u03c3<span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$ch</span><span class=\"sy0\">,</span> K<span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">@w</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">$t2</span> <span class=\"sy0\">=</span> $\u03c3<span class=\"nu0\">0</span> m<span class=\"sy0\">+</span> <span class=\"re0\">$maj</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">@h</span> <span class=\"sy0\">=</span> flat <span class=\"re0\">$t1</span> m<span class=\"sy0\">+</span> <span class=\"re0\">$t2</span><span class=\"sy0\">,</span> <span class=\"re0\">@h</span><span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">@h</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> m<span class=\"sy0\">+</span> <span class=\"re0\">$t1</span><span class=\"sy0\">,</span> <span class=\"re0\">@h</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">..</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"re0\">@H</span> <span class=\"br0\">[</span><span class=\"kw1\">Z</span><span class=\"br0\">[</span>m<span class=\"sy0\">+</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">=</span> <span class=\"re0\">@h</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> Blob<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"sy0\">:</span> <span class=\"kw3\">map</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span><span class=\"kw3\">reverse</span> <span class=\"sy0\">.</span><span class=\"me1\">polymod</span><span class=\"br0\">(</span><span class=\"nu0\">256</span> <span class=\"kw1\">xx</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"re0\">@H</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 11, "block": "<pre class=\"text highlighted_source\">include builtins\\sha256.e<br/>\u00a0<br/>function asHex(string s)<br/>string res = \"\"<br/>    for i=1 to length(s) do<br/>        res &amp;= sprintf(\"%02X\",s[i])<br/>    end for<br/>    return res<br/>end function<br/>\u00a0<br/>?asHex(sha256(\"Rosetta code\"))</pre>"}, {"lang": "PHP", "loc": 3, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"kw1\">echo</span> <a href=\"http://www.php.net/hash\"><span class=\"kw3\">hash</span></a><span class=\"br0\">(</span><span class=\"st_h\">'sha256'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Rosetta code'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "PicoLisp", "loc": 160, "block": "<pre class=\"text highlighted_source\">(setq *Sha256-K <br/>   (mapcar hex <br/>      '(\"428A2F98\" \"71374491\" \"B5C0FBCF\" \"E9B5DBA5\" \"3956C25B\" <br/>        \"59F111F1\" \"923F82A4\" \"AB1C5ED5\" \"D807AA98\" \"12835B01\"<br/>        \"243185BE\" \"550C7DC3\" \"72BE5D74\" \"80DEB1FE\" \"9BDC06A7\" <br/>        \"C19BF174\" \"E49B69C1\" \"EFBE4786\" \"0FC19DC6\" \"240CA1CC\"<br/>        \"2DE92C6F\" \"4A7484AA\" \"5CB0A9DC\" \"76F988DA\" \"983E5152\"<br/>        \"A831C66D\" \"B00327C8\" \"BF597FC7\" \"C6E00BF3\" \"D5A79147\"<br/>        \"06CA6351\" \"14292967\" \"27B70A85\" \"2E1B2138\" \"4D2C6DFC\" <br/>        \"53380D13\" \"650A7354\" \"766A0ABB\" \"81C2C92E\" \"92722C85\"<br/>        \"A2BFE8A1\" \"A81A664B\" \"C24B8B70\" \"C76C51A3\" \"D192E819\"<br/>        \"D6990624\" \"F40E3585\" \"106AA070\" \"19A4C116\" \"1E376C08\"<br/>        \"2748774C\" \"34B0BCB5\" \"391C0CB3\" \"4ED8AA4A\" \"5B9CCA4F\"<br/>        \"682E6FF3\" \"748F82EE\" \"78A5636F\" \"84C87814\" \"8CC70208\"<br/>        \"90BEFFFA\" \"A4506CEB\" \"BEF9A3F7\" \"C67178F2\") ) )<br/>\u00a0<br/>(de rightRotate (X C)<br/>   (| (mod32 (&gt;&gt; C X)) (mod32 (&gt;&gt; (- C 32) X))) )<br/>\u00a0<br/>(de mod32 (N)<br/>   (&amp; N `(hex \"FFFFFFFF\")) )<br/>\u00a0<br/>(de not32 (N)<br/>   (x| N `(hex \"FFFFFFFF\")) )   <br/>\u00a0<br/>(de add32 @<br/>   (mod32 (pass +)) )   <br/>\u00a0<br/>(de sha256 (Str)<br/>   (let Len (length Str)<br/>      (setq Str<br/>         (conc<br/>            (need<br/>               (- <br/>                  8 <br/>                  (* 64 (/ (+ Len 1 8 63) 64)) )<br/>               (conc (mapcar char (chop Str)) (cons `(hex \"80\")))<br/>               0 ) <br/>            (flip <br/>               (make<br/>                  (setq Len (* 8 Len))<br/>                  (do 8<br/>                     (link (&amp; Len 255))<br/>                     (setq Len (&gt;&gt; 8 Len )) ) ) ) ) ) )<br/>   (let<br/>      (H0 `(hex \"6A09E667\")<br/>         H1 `(hex \"BB67AE85\")<br/>         H2 `(hex \"3C6EF372\")<br/>         H3 `(hex \"A54FF53A\")<br/>         H4 `(hex \"510E527F\")<br/>         H5 `(hex \"9B05688C\")<br/>         H6 `(hex \"1F83D9AB\")<br/>         H7 `(hex \"5BE0CD19\") )<br/>      (while Str                  <br/>         (let<br/>            (A H0<br/>               B H1<br/>               C H2<br/>               D H3<br/>               E H4<br/>               F H5<br/>               G H6<br/>               H H7<br/>               W <br/>               (conc<br/>                 (make<br/>                    (do 16<br/>                       (link<br/>                          (apply <br/>                             |<br/>                             (mapcar &gt;&gt; (-24 -16 -8 0) (cut 4 'Str)) ) ) ) )<br/>                 (need 48 0) ) )<br/>               (for (I 17 (&gt;= 64 I) (inc I))<br/>                  (let <br/>                     (Wi15 (get W (- I 15)) <br/>                        Wi2 (get W (- I 2))<br/>                        S0<br/>                        (x| <br/>                           (rightRotate Wi15 7)<br/>                           (rightRotate Wi15 18)<br/>                           (&gt;&gt; 3 Wi15) )<br/>                        S1<br/>                        (x| <br/>                           (rightRotate Wi2 17)<br/>                           (rightRotate Wi2 19)<br/>                           (&gt;&gt; 10 Wi2) ) )<br/>                     (set (nth W I)<br/>                        (add32<br/>                           (get W (- I 16))<br/>                           S0<br/>                           (get W (- I 7))<br/>                           S1 ) ) ) )<br/>               (use (Tmp1 Tmp2)<br/>                  (for I 64<br/>                     (setq <br/>                        Tmp1<br/>                        (add32<br/>                           H<br/>                           (x|<br/>                              (rightRotate E 6)<br/>                              (rightRotate E 11)<br/>                              (rightRotate E 25) )<br/>                           (x| (&amp; E F) (&amp; (not32 E) G))<br/>                           (get *Sha256-K I)<br/>                           (get W I) )<br/>                        Tmp2<br/>                        (add32<br/>                           (x|<br/>                              (rightRotate A 2)<br/>                              (rightRotate A 13)<br/>                              (rightRotate A 22) )<br/>                           (x| <br/>                              (&amp; A B)<br/>                              (&amp; A C)<br/>                              (&amp; B C) ) )<br/>                        H G<br/>                        G F<br/>                        F E<br/>                        E (add32 D Tmp1)<br/>                        D C<br/>                        C B<br/>                        B A<br/>                        A (add32 Tmp1 Tmp2) ) ) )<br/>               (setq<br/>                  H0 (add32 H0 A)<br/>                  H1 (add32 H1 B)<br/>                  H2 (add32 H2 C)<br/>                  H3 (add32 H3 D) <br/>                  H4 (add32 H4 E) <br/>                  H5 (add32 H5 F) <br/>                  H6 (add32 H6 G) <br/>                  H7 (add32 H7 H) ) ) )<br/>      (mapcan<br/>         '((N)<br/>            (flip<br/>               (make<br/>                  (do 4<br/>                     (link (&amp; 255 N))<br/>                     (setq N (&gt;&gt; 8 N)) ) ) ) )<br/>         (list H0 H1 H2 H3 H4 H5 H6 H7) ) ) )<br/>\u00a0<br/>(let Str \"Rosetta code\"<br/>   (println<br/>      (pack<br/>         (mapcar <br/>            '((B) (pad 2 (hex B))) <br/>            (sha256 Str) ) ) )<br/>   (println<br/>      (pack<br/>         (mapcar <br/>            '((B) (pad 2 (hex B)))<br/>            (native <br/>               \"libcrypto.so\"<br/>               \"SHA256\"<br/>               '(B . 32)<br/>               Str<br/>               (length Str)<br/>               '(NIL (32)) ) ) ) ) )<br/>\u00a0<br/>(bye)</pre>"}, {"lang": "PowerShell", "loc": 4, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw1\">Set-Content</span> <span class=\"kw5\">-Value</span> <span class=\"st0\">\"Rosetta code\"</span> <span class=\"kw5\">-Path</span> C:\\Colors\\blue.txt <span class=\"kw5\">-NoNewline</span> <span class=\"kw5\">-Force</span><br/>Get<span class=\"sy0\">-</span>FileHash <span class=\"kw5\">-Path</span> C:\\Colors\\blue.txt <span class=\"sy0\">-</span>Algorithm SHA256<br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 8, "block": "<pre class=\"purebasic highlighted_source\">a$<span class=\"sy0\">=</span><span class=\"st0\">\"Rosetta code\"</span><br/>bit.i<span class=\"sy0\">=</span> <span class=\"nu0\">256</span><br/>\u00a0<br/>UseSHA2Fingerprint<span class=\"br0\">(</span><span class=\"br0\">)</span>\u00a0: b$<span class=\"sy0\">=</span>StringFingerprint<span class=\"br0\">(</span>a$, #PB_Cipher_SHA2, bit<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"[SHA2 \"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>bit<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" bit] Text: \"</span><span class=\"sy0\">+</span>a$<span class=\"sy0\">+</span><span class=\"st0\">\" ==&gt; \"</span><span class=\"sy0\">+</span>b$<span class=\"br0\">)</span><br/><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Python", "loc": 4, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">import</span> hashlib<br/><span class=\"sy0\">&gt;&gt;&gt;</span> hashlib.<span class=\"me1\">sha256</span><span class=\"br0\">(</span> <span class=\"st0\">\"Rosetta code\"</span>.<span class=\"me1\">encode</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>.<span class=\"me1\">hexdigest</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"st0\">'764faf5c61ac315f1497f9dfa542713965b785e5cc2f707d6468d7d1124cdfcf'</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> </pre>"}, {"lang": "Racket", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket/base<br/>\u00a0<br/>;; define a quick SH256 FFI interface, similar to the Racket's default<br/>;; SHA1 interface<br/>(require ffi/unsafe ffi/unsafe/define openssl/libcrypto<br/>         (only-in openssl/sha1 bytes-&gt;hex-string))<br/>(define-ffi-definer defcrypto libcrypto)<br/>(defcrypto SHA256_Init   (_fun _pointer -&gt; _int))<br/>(defcrypto SHA256_Update (_fun _pointer _pointer _long -&gt; _int))<br/>(defcrypto SHA256_Final  (_fun _pointer _pointer -&gt; _int))<br/>(define (sha256 bytes)<br/>  (define ctx (malloc 128))<br/>  (define result (make-bytes 32))<br/>  (SHA256_Init ctx)<br/>  (SHA256_Update ctx bytes (bytes-length bytes))<br/>  (SHA256_Final result ctx)<br/>  (bytes-&gt;hex-string result))<br/>\u00a0<br/>;; use the defined wrapper to solve the task<br/>(displayln (sha256 #\"Rosetta code\"))<br/>\u00a0</pre>"}, {"lang": "Ring", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project: SHA-256<br/>\u00a0<br/>load \"stdlib.ring\"<br/>str = \"Rosetta code\"<br/>see \"String: \" + str + nl<br/>see \"SHA-256: \"<br/>see sha256(str) + nl<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 2, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'digest/sha2'</span><br/><span class=\"kw3\">puts</span> <span class=\"re2\">Digest::SHA256</span>.<span class=\"me1\">hexdigest</span><span class=\"br0\">(</span><span class=\"st0\">'Rosetta code'</span><span class=\"br0\">)</span></pre>"}, {"lang": "Rust", "loc": 12, "block": "<pre class=\"text highlighted_source\">extern crate ring;<br/>\u00a0<br/>use ring::digest::{digest, SHA256};<br/>\u00a0<br/>fn main() {<br/>    println!(\"{}\", sha_256(\"Rosetta code\"));<br/>}<br/>\u00a0<br/>fn sha_256(input: &amp;str) -&gt; String {<br/>    let result = digest(&amp;SHA256, input.as_bytes());<br/>    result.as_ref().iter().map(|b| format!(\"{:x}\", b)).collect()<br/>}</pre>"}, {"lang": "Scala", "loc": 11, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> RosettaSHA256 <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> MD5<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// Besides \"MD5\", \"SHA-256\", and other hashes are available</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> m <span class=\"sy0\">=</span> java.<span class=\"me1\">security</span>.<span class=\"me1\">MessageDigest</span>.<span class=\"me1\">getInstance</span><span class=\"br0\">(</span><span class=\"st0\">\"SHA-256\"</span><span class=\"br0\">)</span>.<span class=\"me1\">digest</span><span class=\"br0\">(</span>s.<span class=\"me1\">getBytes</span><span class=\"br0\">(</span><span class=\"st0\">\"UTF-8\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    m.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"st0\">\"%02x\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"sy0\">_</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">mkString</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  assert<span class=\"br0\">(</span>MD5<span class=\"br0\">(</span><span class=\"st0\">\"Rosetta code\"</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"764faf5c61ac315f1497f9dfa542713965b785e5cc2f707d6468d7d1124cdfcf\"</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span><span class=\"st0\">\"Successfully completed without errors.\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Seed7", "loc": 7, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"msgdigest.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    writeln(hex(sha256(\"Rosetta code\")));<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 2, "block": "<pre class=\"ruby highlighted_source\">var sha = frequire<span class=\"br0\">(</span><span class=\"st0\">'Digest::SHA'</span><span class=\"br0\">)</span>;<br/>say sha.<span class=\"me1\">sha256_hex</span><span class=\"br0\">(</span><span class=\"st0\">'Rosetta code'</span><span class=\"br0\">)</span>;</pre>"}, {"lang": "Smalltalk", "loc": 3, "block": "<pre class=\"smalltalk highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"re0\">SHA256</span> new hashStream: <span class=\"st0\">'Rosetta code'</span> readStream<span class=\"br0\">)</span> hex. <br/>\u00a0</pre>"}, {"lang": "Tcl", "loc": 3, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require sha256<br/>\u00a0<br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>sha2::<span class=\"me1\">sha256</span> -hex <span class=\"st0\">\"Rosetta code\"</span><span class=\"br0\">]</span></pre>"}, {"lang": "zkl", "loc": 2, "block": "<pre class=\"text highlighted_source\">var MsgHash=Import(\"zklMsgHash\");<br/>MsgHash.SHA256(\"Rosetta code\")==\"764faf5c61ac315f1497f9dfa542713965b785e5cc2f707d6468d7d1124cdfcf\"</pre>"}]}