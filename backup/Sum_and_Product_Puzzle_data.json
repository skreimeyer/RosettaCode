{"task": "Sum_and_Product_Puzzle", "blocks": [{"lang": "AWK", "loc": 65, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f SUM_AND_PRODUCT_PUZZLE.AWK</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>s=<span class=\"nu0\">2</span>; s<span class=\"sy2\">&lt;=</span><span class=\"nu0\">100</span>; s<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>a=satisfies_statement3<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d (%d+%d)<span class=\"es0\">\\n</span>\"</span>,s,a,s<span class=\"sy3\">-</span>a<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> satisfies_statement1<span class=\"br0\">(</span>s,  a<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># S says: P does not know the two numbers.</span><br/><span class=\"co1\"># Given s, for all pairs (a,b), a+b=s, 2 &lt;= a,b &lt;= 99, true if at least one of a or b is composite</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>a=<span class=\"nu0\">2</span>; a<span class=\"sy2\">&lt;=</span><span class=\"kw4\">int</span><span class=\"br0\">(</span>s<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>; a<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>is_prime<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy1\">&amp;&amp;</span> is_prime<span class=\"br0\">(</span>s<span class=\"sy3\">-</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw6\">return</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw6\">return</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> satisfies_statement2<span class=\"br0\">(</span>p,  i,j,winner<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># P says: Now I know the two numbers.</span><br/><span class=\"co1\"># Given p, for all pairs (a,b), a*b=p, 2 &lt;= a,b &lt;= 99, true if exactly one pair satisfies statement 1</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">2</span>; i<span class=\"sy2\">&lt;=</span><span class=\"kw4\">int</span><span class=\"br0\">(</span><span class=\"kw4\">sqrt</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>p <span class=\"sy3\">%</span> i <span class=\"sy2\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        j = <span class=\"kw4\">int</span><span class=\"br0\">(</span>p<span class=\"sy3\">/</span>i<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy1\">!</span><span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy2\">&lt;=</span> j <span class=\"sy1\">&amp;&amp;</span> j <span class=\"sy2\">&lt;=</span> <span class=\"nu0\">99</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># in range</span><br/>          <span class=\"kw1\">continue</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>satisfies_statement1<span class=\"br0\">(</span>i<span class=\"sy3\">+</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span>winner<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw6\">return</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">}</span><br/>          winner = <span class=\"nu0\">1</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw6\">return</span><span class=\"br0\">(</span>winner<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> satisfies_statement3<span class=\"br0\">(</span>s,  a,b,winner<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># S says: Now I know the two numbers.</span><br/><span class=\"co1\"># Given s, for all pairs (a,b), a+b=s, 2 &lt;= a,b &lt;= 99, true if exactly one pair satisfies statements 1 and 2</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy1\">!</span>satisfies_statement1<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw6\">return</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>a=<span class=\"nu0\">2</span>; a<span class=\"sy2\">&lt;=</span><span class=\"kw4\">int</span><span class=\"br0\">(</span>s<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>; a<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      b = s <span class=\"sy3\">-</span> a<br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>satisfies_statement2<span class=\"br0\">(</span>a<span class=\"sy3\">*</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>winner<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          <span class=\"kw6\">return</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        winner = a<br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw6\">return</span><span class=\"br0\">(</span>winner<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> is_prime<span class=\"br0\">(</span>x,  i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy2\">&lt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw6\">return</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">2</span>; i<span class=\"sy2\">&lt;=</span><span class=\"kw4\">int</span><span class=\"br0\">(</span><span class=\"kw4\">sqrt</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy3\">%</span> i <span class=\"sy2\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw6\">return</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw6\">return</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 40, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">const</span> <span class=\"kw4\">int</span> maxSum <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> pairs <span class=\"sy0\">=</span> <span class=\"br0\">(</span><br/>            <span class=\"kw1\">from</span> X <span class=\"kw1\">in</span> <span class=\"nu0\">2</span><span class=\"sy0\">.</span><span class=\"me1\">To</span><span class=\"br0\">(</span>maxSum <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">from</span> Y <span class=\"kw1\">in</span> <span class=\"br0\">(</span>X <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">To</span><span class=\"br0\">(</span>maxSum <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">TakeWhile</span><span class=\"br0\">(</span>y <span class=\"sy0\">=&gt;</span> X <span class=\"sy0\">+</span> y <span class=\"sy0\">&lt;=</span> maxSum<span class=\"br0\">)</span><br/>            <span class=\"kw1\">select</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"br0\">{</span> X, Y, S <span class=\"sy0\">=</span> X <span class=\"sy0\">+</span> Y, P <span class=\"sy0\">=</span> X <span class=\"sy0\">*</span> Y <span class=\"br0\">}</span><br/>            <span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToHashSet</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>pairs<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">var</span> uniqueP <span class=\"sy0\">=</span> pairs<span class=\"sy0\">.</span><span class=\"me1\">GroupBy</span><span class=\"br0\">(</span>pair <span class=\"sy0\">=&gt;</span> pair<span class=\"sy0\">.</span><span class=\"me1\">P</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Where</span><span class=\"br0\">(</span>g <span class=\"sy0\">=&gt;</span> g<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>g <span class=\"sy0\">=&gt;</span> g<span class=\"sy0\">.</span><span class=\"me1\">Key</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToHashSet</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        pairs<span class=\"sy0\">.</span><span class=\"me1\">ExceptWith</span><span class=\"br0\">(</span>pairs<span class=\"sy0\">.</span><span class=\"me1\">GroupBy</span><span class=\"br0\">(</span>pair <span class=\"sy0\">=&gt;</span> pair<span class=\"sy0\">.</span><span class=\"me1\">S</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Where</span><span class=\"br0\">(</span>g <span class=\"sy0\">=&gt;</span> g<span class=\"sy0\">.</span><span class=\"me1\">Any</span><span class=\"br0\">(</span>pair <span class=\"sy0\">=&gt;</span> uniqueP<span class=\"sy0\">.</span><span class=\"me1\">Contains</span><span class=\"br0\">(</span>pair<span class=\"sy0\">.</span><span class=\"me1\">P</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">SelectMany</span><span class=\"br0\">(</span>g <span class=\"sy0\">=&gt;</span> g<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>pairs<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        pairs<span class=\"sy0\">.</span><span class=\"me1\">ExceptWith</span><span class=\"br0\">(</span>pairs<span class=\"sy0\">.</span><span class=\"me1\">GroupBy</span><span class=\"br0\">(</span>pair <span class=\"sy0\">=&gt;</span> pair<span class=\"sy0\">.</span><span class=\"me1\">P</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Where</span><span class=\"br0\">(</span>g <span class=\"sy0\">=&gt;</span> g<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">SelectMany</span><span class=\"br0\">(</span>g <span class=\"sy0\">=&gt;</span> g<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>pairs<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        pairs<span class=\"sy0\">.</span><span class=\"me1\">ExceptWith</span><span class=\"br0\">(</span>pairs<span class=\"sy0\">.</span><span class=\"me1\">GroupBy</span><span class=\"br0\">(</span>pair <span class=\"sy0\">=&gt;</span> pair<span class=\"sy0\">.</span><span class=\"me1\">S</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Where</span><span class=\"br0\">(</span>g <span class=\"sy0\">=&gt;</span> g<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">SelectMany</span><span class=\"br0\">(</span>g <span class=\"sy0\">=&gt;</span> g<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>pairs<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> pair <span class=\"kw1\">in</span> pairs<span class=\"br0\">)</span> Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>pair<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">class</span> Extensions<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> IEnumerable<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> To<span class=\"br0\">(</span><span class=\"kw1\">this</span> <span class=\"kw4\">int</span> start, <span class=\"kw4\">int</span> end<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> start<span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> end<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> i<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> HashSet<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> ToHashSet<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"kw1\">this</span> IEnumerable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> source<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> HashSet<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>source<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D", "loc": 17, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">typecons</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">const</span> s1 <span class=\"sy0\">=</span> cartesianProduct<span class=\"br0\">(</span>iota<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">101</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> iota<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">101</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               .<span class=\"me1\">filter</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>p <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;</span> p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> p<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> p<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>               .<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">alias</span> P <span class=\"sy0\">=</span> <span class=\"kw4\">const</span> Tuple<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">enum</span> add   <span class=\"sy0\">=</span> <span class=\"br0\">(</span>P p<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> p<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">enum</span> mul   <span class=\"sy0\">=</span> <span class=\"br0\">(</span>P p<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> p<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">enum</span> sumEq <span class=\"sy0\">=</span> <span class=\"br0\">(</span>P p<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> s1.<span class=\"me1\">filter</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>q <span class=\"sy0\">=&gt;</span> add<span class=\"br0\">(</span>q<span class=\"br0\">)</span> <span class=\"sy0\">==</span> add<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">enum</span> mulEq <span class=\"sy0\">=</span> <span class=\"br0\">(</span>P p<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> s1.<span class=\"me1\">filter</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>q <span class=\"sy0\">=&gt;</span> mul<span class=\"br0\">(</span>q<span class=\"br0\">)</span> <span class=\"sy0\">==</span> mul<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">const</span> s2 <span class=\"sy0\">=</span> s1.<span class=\"me1\">filter</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>p <span class=\"sy0\">=&gt;</span> sumEq<span class=\"br0\">(</span>p<span class=\"br0\">)</span>.<span class=\"me1\">all</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>q <span class=\"sy0\">=&gt;</span> mulEq<span class=\"br0\">(</span>q<span class=\"br0\">)</span>.<span class=\"me1\">walkLength</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">const</span> s3 <span class=\"sy0\">=</span> s2.<span class=\"me1\">filter</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>p <span class=\"sy0\">=&gt;</span> mulEq<span class=\"br0\">(</span>p<span class=\"br0\">)</span>.<span class=\"me1\">setIntersection</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span>.<span class=\"me1\">walkLength</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>    s3.<span class=\"me1\">filter</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>p <span class=\"sy0\">=&gt;</span> sumEq<span class=\"br0\">(</span>p<span class=\"br0\">)</span>.<span class=\"me1\">setIntersection</span><span class=\"br0\">(</span>s3<span class=\"br0\">)</span>.<span class=\"me1\">walkLength</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 24, "block": "<pre class=\"text highlighted_source\">defmodule Puzzle do<br/>  def sum_and_product do<br/>    s1 = for x &lt;- 2..49, y &lt;- x+1..99, x+y&lt;100, do: {x,y}<br/>    s2 = Enum.filter(s1, fn p -&gt;<br/>      Enum.all?(sumEq(s1,p), fn q -&gt; length(mulEq(s1,q))\u00a0!= 1 end)<br/>    end)<br/>    s3 = Enum.filter(s2, fn p -&gt; only1?(mulEq(s1,p), s2) end)<br/>    Enum.filter(s3, fn p -&gt; only1?(sumEq(s1,p), s3) end) |&gt; IO.inspect <br/>  end<br/>\u00a0<br/>  defp add({x,y}), do: x + y<br/>\u00a0<br/>  defp mul({x,y}), do: x * y<br/>\u00a0<br/>  defp sumEq(s, p), do: Enum.filter(s, fn q -&gt; add(p) == add(q) end)<br/>\u00a0<br/>  defp mulEq(s, p), do: Enum.filter(s, fn q -&gt; mul(p) == mul(q) end)<br/>\u00a0<br/>  defp only1?(a, b) do<br/>    MapSet.size(MapSet.intersection(MapSet.new(a), MapSet.new(b))) == 1<br/>  end<br/>end<br/>\u00a0<br/>Puzzle.sum_and_product</pre>"}, {"lang": "Go", "loc": 95, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw1\">type</span> pair <span class=\"kw4\">struct</span><span class=\"sy1\">{</span> x<span class=\"sy1\">,</span> y <span class=\"kw4\">int</span> <span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\t<span class=\"co1\">//const max = 100</span><br/>\t<span class=\"co1\">// Use 1685 (the highest with a unique answer) instead</span><br/>\t<span class=\"co1\">// of 100 just to make it work a little harder\u00a0:).</span><br/>\t<span class=\"kw1\">const</span> max <span class=\"sy2\">=</span> <span class=\"nu0\">1685</span><br/>\t<span class=\"kw1\">var</span> all <span class=\"sy1\">[]</span>pair<br/>\t<span class=\"kw1\">for</span> a <span class=\"sy2\">:=</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span> a &lt; max<span class=\"sy1\">;</span> a<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">for</span> b <span class=\"sy2\">:=</span> a <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> b &lt; max<span class=\"sy3\">-</span>a<span class=\"sy1\">;</span> b<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>\t\t\tall <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>all<span class=\"sy1\">,</span> pair<span class=\"sy1\">{</span>a<span class=\"sy1\">,</span> b<span class=\"sy1\">})</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/>\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"There are\"</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>all<span class=\"sy1\">),</span> <span class=\"st0\">\"pairs where a+b &lt;\"</span><span class=\"sy1\">,</span> max<span class=\"sy1\">,</span> <span class=\"st0\">\"(and a&lt;b)\"</span><span class=\"sy1\">)</span><br/>\tproducts <span class=\"sy2\">:=</span> countProducts<span class=\"sy1\">(</span>all<span class=\"sy1\">)</span><br/>\u00a0<br/>\t<span class=\"co1\">// Those for which no sum decomposition has unique product to are</span><br/>\t<span class=\"co1\">// S mathimatician's possible pairs.</span><br/>\t<span class=\"kw1\">var</span> sPairs <span class=\"sy1\">[]</span>pair<br/>pairs<span class=\"sy1\">:</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> p <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> all <span class=\"sy1\">{</span><br/>\t\ts <span class=\"sy2\">:=</span> p<span class=\"sy3\">.</span>x <span class=\"sy3\">+</span> p<span class=\"sy3\">.</span>y<br/>\t\t<span class=\"co1\">// foreach a+b=s (a&lt;b)</span><br/>\t\t<span class=\"kw1\">for</span> a <span class=\"sy2\">:=</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span> a &lt; s<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy3\">+</span>s&amp;<span class=\"nu0\">1</span><span class=\"sy1\">;</span> a<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>\t\t\tb <span class=\"sy2\">:=</span> s <span class=\"sy3\">-</span> a<br/>\t\t\t<span class=\"kw1\">if</span> products<span class=\"sy1\">[</span>a<span class=\"sy3\">*</span>b<span class=\"sy1\">]</span> <span class=\"sy3\">==</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>\t\t\t\t<span class=\"co1\">// Excluded because P would have a unique product</span><br/>\t\t\t\t<span class=\"kw1\">continue</span> pairs<br/>\t\t\t<span class=\"sy1\">}</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t\tsPairs <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>sPairs<span class=\"sy1\">,</span> p<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"S starts with\"</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>sPairs<span class=\"sy1\">),</span> <span class=\"st0\">\"possible pairs.\"</span><span class=\"sy1\">)</span><br/>\t<span class=\"co1\">//fmt.Println(\"S pairs:\", sPairs)</span><br/>\tsProducts <span class=\"sy2\">:=</span> countProducts<span class=\"sy1\">(</span>sPairs<span class=\"sy1\">)</span><br/>\u00a0<br/>\t<span class=\"co1\">// Look in sPairs for those with a unique product to get</span><br/>\t<span class=\"co1\">// P mathimatician's possible pairs.</span><br/>\t<span class=\"kw1\">var</span> pPairs <span class=\"sy1\">[]</span>pair<br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> p <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> sPairs <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">if</span> sProducts<span class=\"sy1\">[</span>p<span class=\"sy3\">.</span>x<span class=\"sy3\">*</span>p<span class=\"sy3\">.</span>y<span class=\"sy1\">]</span> <span class=\"sy3\">==</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>\t\t\tpPairs <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>pPairs<span class=\"sy1\">,</span> p<span class=\"sy1\">)</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/>\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"P then has\"</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>pPairs<span class=\"sy1\">),</span> <span class=\"st0\">\"possible pairs.\"</span><span class=\"sy1\">)</span><br/>\t<span class=\"co1\">//fmt.Println(\"P pairs:\", pPairs)</span><br/>\tpSums <span class=\"sy2\">:=</span> countSums<span class=\"sy1\">(</span>pPairs<span class=\"sy1\">)</span><br/>\u00a0<br/>\t<span class=\"co1\">// Finally, look in pPairs for those with a unique sum</span><br/>\t<span class=\"kw1\">var</span> final <span class=\"sy1\">[]</span>pair<br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> p <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> pPairs <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">if</span> pSums<span class=\"sy1\">[</span>p<span class=\"sy3\">.</span>x<span class=\"sy3\">+</span>p<span class=\"sy3\">.</span>y<span class=\"sy1\">]</span> <span class=\"sy3\">==</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>\t\t\tfinal <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>final<span class=\"sy1\">,</span> p<span class=\"sy1\">)</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/>\u00a0<br/>\t<span class=\"co1\">// Nicely show any answers.</span><br/>\t<span class=\"kw1\">switch</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>final<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">case</span> <span class=\"nu0\">1</span><span class=\"sy1\">:</span><br/>\t\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Answer:\"</span><span class=\"sy1\">,</span> final<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>x<span class=\"sy1\">,</span> <span class=\"st0\">\"and\"</span><span class=\"sy1\">,</span> final<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>y<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">case</span> <span class=\"nu0\">0</span><span class=\"sy1\">:</span><br/>\t\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"No possible answer.\"</span><span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">default</span><span class=\"sy1\">:</span><br/>\t\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>final<span class=\"sy1\">),</span> <span class=\"st0\">\"possible answers:\"</span><span class=\"sy1\">,</span> final<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> countProducts<span class=\"sy1\">(</span>list <span class=\"sy1\">[]</span>pair<span class=\"sy1\">)</span> <span class=\"kw4\">map</span><span class=\"sy1\">[</span><span class=\"kw4\">int</span><span class=\"sy1\">]</span><span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>\tm <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">map</span><span class=\"sy1\">[</span><span class=\"kw4\">int</span><span class=\"sy1\">]</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> p <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> list <span class=\"sy1\">{</span><br/>\t\tm<span class=\"sy1\">[</span>p<span class=\"sy3\">.</span>x<span class=\"sy3\">*</span>p<span class=\"sy3\">.</span>y<span class=\"sy1\">]</span><span class=\"sy2\">++</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> m<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> countSums<span class=\"sy1\">(</span>list <span class=\"sy1\">[]</span>pair<span class=\"sy1\">)</span> <span class=\"kw4\">map</span><span class=\"sy1\">[</span><span class=\"kw4\">int</span><span class=\"sy1\">]</span><span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>\tm <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">map</span><span class=\"sy1\">[</span><span class=\"kw4\">int</span><span class=\"sy1\">]</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> p <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> list <span class=\"sy1\">{</span><br/>\t\tm<span class=\"sy1\">[</span>p<span class=\"sy3\">.</span>x<span class=\"sy3\">+</span>p<span class=\"sy3\">.</span>y<span class=\"sy1\">]</span><span class=\"sy2\">++</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> m<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// not used, manually inlined above</span><br/><span class=\"kw4\">func</span> decomposeSum<span class=\"sy1\">(</span>s <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">[]</span>pair <span class=\"sy1\">{</span><br/>\tpairs <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span>pair<span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> s<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">for</span> a <span class=\"sy2\">:=</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span> a &lt; s<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy3\">+</span>s&amp;<span class=\"nu0\">1</span><span class=\"sy1\">;</span> a<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>\t\tpairs <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>pairs<span class=\"sy1\">,</span> pair<span class=\"sy1\">{</span>a<span class=\"sy1\">,</span> s <span class=\"sy3\">-</span> a<span class=\"sy1\">})</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> pairs<br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 18, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>intersect<span class=\"br0\">)</span><br/>\u00a0<br/>s1<span class=\"sy0\">,</span> s2<span class=\"sy0\">,</span> s3<span class=\"sy0\">,</span> s4 <span class=\"sy0\">::</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>s1 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">|</span> x <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">100</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> y <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">100</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;</span> x <span class=\"sy0\">&amp;&amp;</span> x <span class=\"sy0\">&lt;</span> y <span class=\"sy0\">&amp;&amp;</span> x <span class=\"sy0\">+</span> y <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span><span class=\"br0\">]</span><br/>\u00a0<br/>add<span class=\"sy0\">,</span> mul <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>add <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> x <span class=\"sy0\">+</span> y<br/>mul <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> x <span class=\"sy0\">*</span> y<br/>\u00a0<br/>sumEq<span class=\"sy0\">,</span> mulEq <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>sumEq p <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span>\\q <span class=\"sy0\">-&gt;</span> add q <span class=\"sy0\">==</span> add p<span class=\"br0\">)</span> s1<br/>mulEq p <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span>\\q <span class=\"sy0\">-&gt;</span> mul q <span class=\"sy0\">==</span> mul p<span class=\"br0\">)</span> s1<br/>\u00a0<br/>s2 <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span>\\p <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:all\"><span class=\"kw3\">all</span></a> <span class=\"br0\">(</span>\\q <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> <span class=\"sy0\">$</span> mulEq q<span class=\"br0\">)</span> <span class=\"sy0\">/=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>sumEq p<span class=\"br0\">)</span><span class=\"br0\">)</span> s1<br/>s3 <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span>\\p <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> <span class=\"br0\">(</span>mulEq p `intersect` s2<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> s2<br/>s4 <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span>\\p <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> <span class=\"br0\">(</span>sumEq p `intersect` s3<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> s3<br/>\u00a0<br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> s4</pre>"}, {"lang": "Java", "loc": 148, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">package</span> <span class=\"co2\">org.rosettacode</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.ArrayList</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.List</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co3\">/**<br/> * This program applies the logic in the Sum and Product Puzzle for the value <br/> * provided by systematically applying each requirement to all number pairs in <br/> * range. Note that the requirements: (x, y different), (x &lt; y), and <br/> * (x, y &gt; MIN_VALUE) are baked into the loops in run(), sumAddends(), and <br/> * productFactors(), so do not need a separate test. Also note that to test a<br/> * solution to this logic puzzle, it is suggested to test the condition with<br/> * maxSum = 1685 to ensure that both the original solution (4, 13) and the<br/> * additional solution (4, 61), and only these solutions, are found. Note<br/> * also that at 1684 only the original solution should be found!<br/> */</span><br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> SumAndProductPuzzle <span class=\"br0\">{</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">final</span> <span class=\"kw4\">long</span> beginning<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> maxSum<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> MIN_VALUE <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span> firstConditionExcludes <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span> secondConditionExcludes <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>... <span class=\"me1\">args</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>args.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <span class=\"kw1\">new</span> SumAndProductPuzzle<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span>.<span class=\"me1\">run</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">new</span> SumAndProductPuzzle<span class=\"br0\">(</span><span class=\"nu0\">1684</span><span class=\"br0\">)</span>.<span class=\"me1\">run</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">new</span> SumAndProductPuzzle<span class=\"br0\">(</span><span class=\"nu0\">1685</span><span class=\"br0\">)</span>.<span class=\"me1\">run</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> arg <span class=\"sy0\">:</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                <span class=\"kw1\">try</span><span class=\"br0\">{</span><br/>                    <span class=\"kw1\">new</span> SumAndProductPuzzle<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>arg<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">run</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Anumberformatexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">NumberFormatException</span></a> e<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Please provide only integer arguments. \"</span> <span class=\"sy0\">+</span><br/>                            <span class=\"st0\">\"Provided argument \"</span> <span class=\"sy0\">+</span> arg <span class=\"sy0\">+</span> <span class=\"st0\">\" was not an integer. \"</span> <span class=\"sy0\">+</span><br/>                            <span class=\"st0\">\"Alternatively, calling the program with no arguments \"</span> <span class=\"sy0\">+</span><br/>                            <span class=\"st0\">\"will run the puzzle where maximum sum equals 100, 1684, and 1865.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> SumAndProductPuzzle<span class=\"br0\">(</span><span class=\"kw4\">int</span> maxSum<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">beginning</span> <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">currentTimeMillis</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">maxSum</span> <span class=\"sy0\">=</span> maxSum<span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Run with maximum sum of \"</span> <span class=\"sy0\">+</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>maxSum<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <br/>                <span class=\"st0\">\" started at \"</span> <span class=\"sy0\">+</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>beginning<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> run<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> MIN_VALUE<span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> maxSum <span class=\"sy0\">-</span> MIN_VALUE<span class=\"sy0\">;</span> x<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> y <span class=\"sy0\">=</span> x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> y <span class=\"sy0\">&lt;</span> maxSum <span class=\"sy0\">-</span> MIN_VALUE<span class=\"sy0\">;</span> y<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\u00a0<br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isSumNoGreaterThanMax<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span><br/>                    isSKnowsPCannotKnow<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span><br/>                    isPKnowsNow<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span><br/>                    isSKnowsNow<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span><br/>                    <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Found solution x is \"</span> <span class=\"sy0\">+</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" y is \"</span> <span class=\"sy0\">+</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <br/>                            <span class=\"st0\">\" in \"</span> <span class=\"sy0\">+</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">currentTimeMillis</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> beginning<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"ms.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Run with maximum sum of \"</span> <span class=\"sy0\">+</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>maxSum<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <br/>                <span class=\"st0\">\" ended in \"</span> <span class=\"sy0\">+</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">currentTimeMillis</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> beginning<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"ms.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span> isSumNoGreaterThanMax<span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> x <span class=\"sy0\">+</span> y <span class=\"sy0\">&lt;=</span> maxSum<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span> isSKnowsPCannotKnow<span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>firstConditionExcludes.<span class=\"me1\">contains</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span>x, y<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> addends <span class=\"sy0\">:</span> sumAddends<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span>productFactors<span class=\"br0\">(</span>addends<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, addends<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                firstConditionExcludes.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span>x, y<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span> isPKnowsNow<span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>secondConditionExcludes.<span class=\"me1\">contains</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span>x, y<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> countSolutions <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> factors <span class=\"sy0\">:</span> productFactors<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isSKnowsPCannotKnow<span class=\"br0\">(</span>factors<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, factors<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                countSolutions<span class=\"sy0\">++;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>countSolutions <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            secondConditionExcludes.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span>x, y<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span> isSKnowsNow<span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> countSolutions <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> addends <span class=\"sy0\">:</span> sumAddends<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isPKnowsNow<span class=\"br0\">(</span>addends<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, addends<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                countSolutions<span class=\"sy0\">++;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> countSolutions <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span> sumAddends<span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\u00a0<br/>        List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span> list <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> sum <span class=\"sy0\">=</span> x <span class=\"sy0\">+</span> y<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> addend <span class=\"sy0\">=</span> MIN_VALUE<span class=\"sy0\">;</span> addend <span class=\"sy0\">&lt;</span> sum <span class=\"sy0\">-</span> addend<span class=\"sy0\">;</span> addend<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isSumNoGreaterThanMax<span class=\"br0\">(</span>addend, sum <span class=\"sy0\">-</span> addend<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                list.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span>addend, sum <span class=\"sy0\">-</span> addend<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> list<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span> productFactors<span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\u00a0<br/>        List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span> list <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> product <span class=\"sy0\">=</span> x <span class=\"sy0\">*</span> y<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> factor <span class=\"sy0\">=</span> MIN_VALUE<span class=\"sy0\">;</span> factor <span class=\"sy0\">&lt;</span> product <span class=\"sy0\">/</span> factor<span class=\"sy0\">;</span> factor<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>product <span class=\"sy0\">%</span> factor <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isSumNoGreaterThanMax<span class=\"br0\">(</span>factor, product <span class=\"sy0\">/</span> factor<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                    list.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span>factor, product <span class=\"sy0\">/</span> factor<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> list<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 96, "block": "<pre class=\"javascript highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">'use strict'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// GENERIC FUNCTIONS</span><br/>\u00a0<br/>    <span class=\"co1\">// concatMap\u00a0:: (a -&gt; [b]) -&gt; [a] -&gt; [b]</span><br/>    <span class=\"kw1\">var</span> concatMap <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> concatMap<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">concat</span>.<span class=\"me1\">apply</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> xs.<span class=\"me1\">map</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\u00a0<br/>        <span class=\"co1\">// curry\u00a0:: ((a, b) -&gt; c) -&gt; a -&gt; b -&gt; c</span><br/>        curry <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> curry<span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">return</span> f<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\u00a0<br/>        <span class=\"co1\">// intersectBy\u00a0:: (a - &gt; a - &gt; Bool) - &gt; [a] - &gt; [a] - &gt; [a]</span><br/>        intersectBy <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> intersectBy<span class=\"br0\">(</span>eq<span class=\"sy0\">,</span> xs<span class=\"sy0\">,</span> ys<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> xs.<span class=\"me1\">length</span> <span class=\"sy0\">&amp;&amp;</span> ys.<span class=\"me1\">length</span> <span class=\"sy0\">?</span> xs.<span class=\"me1\">filter</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> ys.<span class=\"me1\">some</span><span class=\"br0\">(</span>curry<span class=\"br0\">(</span>eq<span class=\"br0\">)</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\u00a0<br/>        <span class=\"co1\">// range\u00a0:: Int -&gt; Int -&gt; Maybe Int -&gt; [Int]</span><br/>        range <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> range<span class=\"br0\">(</span>m<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> step<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> d <span class=\"sy0\">=</span> <span class=\"br0\">(</span>step <span class=\"sy0\">||</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;=</span> m <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw4\">Array</span>.<span class=\"me1\">from</span><span class=\"br0\">(</span><span class=\"br0\">{</span><br/>                length<span class=\"sy0\">:</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"sy0\">-</span> m<span class=\"br0\">)</span> <span class=\"sy0\">/</span> d<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>            <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>_<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> m <span class=\"sy0\">+</span> i <span class=\"sy0\">*</span> d<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// PROBLEM FUNCTIONS</span><br/>\u00a0<br/>    <span class=\"co1\">// add, mul\u00a0:: (Int, Int) -&gt; Int</span><br/>    <span class=\"kw1\">var</span> add <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> add<span class=\"br0\">(</span>xy<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> xy<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> xy<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        mul <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> mul<span class=\"br0\">(</span>xy<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> xy<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> xy<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// sumEq, mulEq\u00a0:: (Int, Int) -&gt; [(Int, Int)]</span><br/>    <span class=\"kw1\">var</span> sumEq <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> sumEq<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> addP <span class=\"sy0\">=</span> add<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> s1.<span class=\"me1\">filter</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>q<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> add<span class=\"br0\">(</span>q<span class=\"br0\">)</span> <span class=\"sy0\">===</span> addP<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        mulEq <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> mulEq<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> mulP <span class=\"sy0\">=</span> mul<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> s1.<span class=\"me1\">filter</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>q<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> mul<span class=\"br0\">(</span>q<span class=\"br0\">)</span> <span class=\"sy0\">===</span> mulP<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// pairEQ\u00a0:: ((a, a) -&gt; (a, a)) -&gt; Bool</span><br/>    <span class=\"kw1\">var</span> pairEQ <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> pairEQ<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">===</span> b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">===</span> b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// MAIN</span><br/>\u00a0<br/>    <span class=\"co1\">// xs\u00a0:: [Int]</span><br/>    <span class=\"kw1\">var</span> xs <span class=\"sy0\">=</span> range<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// s1 s2, s3, s4\u00a0:: [(Int, Int)]</span><br/>    <span class=\"kw1\">var</span> s1 <span class=\"sy0\">=</span> concatMap<span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> concatMap<span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;</span> x <span class=\"sy0\">&amp;&amp;</span> x <span class=\"sy0\">&lt;</span> y <span class=\"sy0\">&amp;&amp;</span> x <span class=\"sy0\">+</span> y <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span> <span class=\"sy0\">?</span> <span class=\"br0\">[</span><br/>                    <span class=\"br0\">[</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">]</span><br/>                <span class=\"br0\">]</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"sy0\">,</span> xs<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">,</span> xs<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\u00a0<br/>        s2 <span class=\"sy0\">=</span> s1.<span class=\"me1\">filter</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> sumEq<span class=\"br0\">(</span>p<span class=\"br0\">)</span>.<span class=\"me1\">every</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>q<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> mulEq<span class=\"br0\">(</span>q<span class=\"br0\">)</span>.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\u00a0<br/>        s3 <span class=\"sy0\">=</span> s2.<span class=\"me1\">filter</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> intersectBy<span class=\"br0\">(</span>pairEQ<span class=\"sy0\">,</span> mulEq<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy0\">,</span> s2<span class=\"br0\">)</span>.<span class=\"me1\">length</span> <span class=\"sy0\">===</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\u00a0<br/>        s4 <span class=\"sy0\">=</span> s3.<span class=\"me1\">filter</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> intersectBy<span class=\"br0\">(</span>pairEQ<span class=\"sy0\">,</span> sumEq<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy0\">,</span> s3<span class=\"br0\">)</span>.<span class=\"me1\">length</span> <span class=\"sy0\">===</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> s4<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 44, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>using Primes<br/>\u00a0<br/>function satisfy1(x::Integer)<br/>    prmslt100 = primes(100)<br/>    for i in 2:(x \u00f7 2)<br/>        if i \u2208 prmslt100 &amp;&amp; x - i \u2208 prmslt100<br/>            return false<br/>        end<br/>    end<br/>    return true<br/>end<br/>\u00a0<br/>function satisfy2(x::Integer)<br/>    once = false<br/>    for i in 2:isqrt(x)<br/>        if x\u00a0% i == 0<br/>            j = x \u00f7 i<br/>            if 2 &lt; j &lt; 100 &amp;&amp; satisfy1(i + j)<br/>                if once return false end<br/>                once = true<br/>            end<br/>        end<br/>    end<br/>    return once<br/>end<br/>\u00a0<br/>function satisfyboth(x::Integer)<br/>    if\u00a0!satisfy1(x) return 0 end<br/>    found = 0<br/>    for i in 2:(x \u00f7 2)<br/>        if satisfy2(i * (x - i))<br/>            if found &gt; 0 return 0 end<br/>            found = i<br/>        end<br/>    end<br/>    return found<br/>end<br/>\u00a0<br/>for i in 2:99<br/>    if (j = satisfyboth(i)) &gt; 0<br/>        println(\"Solution: ($j, $(i - j))\")<br/>    end<br/>end</pre>"}, {"lang": "Kotlin", "loc": 21, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.4-3</span><br/>\u00a0<br/>data <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> P<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x<span class=\"sy0\">:</span> Int, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> y<span class=\"sy0\">:</span> Int, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sum<span class=\"sy0\">:</span> Int, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> prod<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> candidates <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>P<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span>    <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>x in <span class=\"nu0\">2</span>..<span class=\"nu0\">49</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>y in x + <span class=\"nu0\">1</span>..<span class=\"nu0\">100</span> - x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            candidates.<span class=\"me1\">add</span><span class=\"br0\">(</span>P<span class=\"br0\">(</span>x, y, x + y, x <span class=\"sy0\">*</span> y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sums <span class=\"sy0\">=</span> candidates.<span class=\"me1\">groupBy</span> <span class=\"br0\">{</span> it.<span class=\"me1\">sum</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> prods <span class=\"sy0\">=</span> candidates.<span class=\"me1\">groupBy</span> <span class=\"br0\">{</span> it.<span class=\"me1\">prod</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fact1 <span class=\"sy0\">=</span> candidates.<span class=\"me1\">filter</span> <span class=\"br0\">{</span> sums<span class=\"br0\">[</span>it.<span class=\"me1\">sum</span><span class=\"br0\">]</span><span class=\"sy0\">!!</span>.<span class=\"me1\">all</span> <span class=\"br0\">{</span> prods<span class=\"br0\">[</span>it.<span class=\"me1\">prod</span><span class=\"br0\">]</span><span class=\"sy0\">!!</span>.<span class=\"me1\">size</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fact2 <span class=\"sy0\">=</span> fact1.<span class=\"me1\">filter</span> <span class=\"br0\">{</span> prods<span class=\"br0\">[</span>it.<span class=\"me1\">prod</span><span class=\"br0\">]</span><span class=\"sy0\">!!</span>.<span class=\"me1\">intersect</span><span class=\"br0\">(</span>fact1<span class=\"br0\">)</span>.<span class=\"me1\">size</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fact3 <span class=\"sy0\">=</span> fact2.<span class=\"me1\">filter</span> <span class=\"br0\">{</span> sums<span class=\"br0\">[</span>it.<span class=\"me1\">sum</span><span class=\"br0\">]</span><span class=\"sy0\">!!</span>.<span class=\"me1\">intersect</span><span class=\"br0\">(</span>fact2<span class=\"br0\">)</span>.<span class=\"me1\">size</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/>    print<span class=\"br0\">(</span><span class=\"st0\">\"The only solution is\u00a0: \"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>x, y, <span class=\"sy0\">_</span>, <span class=\"sy0\">_</span><span class=\"br0\">)</span> in fact3<span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"st0\">\"x = $x, y = $y\"</span><span class=\"br0\">)</span>    <br/><span class=\"br0\">}</span></pre>"}, {"lang": "ooRexx", "loc": 90, "block": "<pre class=\"oorexx highlighted_source\">all      =<span class=\"sy0\">.</span>set~new<br/><span class=\"kw1\">Call</span> <span class=\"kw6\">time</span> <span class=\"st0\">'R'</span><br/>cnt<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span><br/><span class=\"kw1\">do</span> a=<span class=\"nu0\">2</span> <span class=\"kw2\">to</span> <span class=\"nu0\">100</span><br/>  <span class=\"kw1\">do</span> b=a+<span class=\"nu0\">1</span> <span class=\"kw2\">to</span> <span class=\"nu0\">100</span>-<span class=\"nu0\">2</span><br/>    p=a b<br/>    <span class=\"kw1\">if</span> a+b<span class=\"sy0\">&gt;</span><span class=\"nu0\">100</span> <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span> b<br/>    all~put<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>    prd=a<span class=\"sy0\">*</span>b<br/>    cnt<span class=\"sy0\">.</span>prd+=<span class=\"nu0\">1</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">\"There are\"</span> all~items <span class=\"st0\">\"pairs where X+Y &lt;=\"</span> <span class=\"kw6\">max</span> <span class=\"st0\">\"(and X&lt;Y)\"</span><br/>\u00a0<br/>spairs=<span class=\"sy0\">.</span>set~new<br/><span class=\"kw1\">Do</span> <span class=\"kw2\">Until</span> all~items=<span class=\"nu0\">0</span><br/>  <span class=\"kw1\">do</span> p <span class=\"kw2\">over</span> all<br/>    d=decompositions<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> take <span class=\"kw3\">Then</span><br/>      spairs=spairs~union<span class=\"br0\">(</span>d<span class=\"br0\">)</span><br/>    dif=all~difference<span class=\"br0\">(</span>d<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Leave</span><br/>    <span class=\"kw3\">End</span><br/>  all=dif<br/>  <span class=\"kw3\">end</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">\"S starts with\"</span> spairs~items <span class=\"st0\">\"possible pairs.\"</span><br/>\u00a0<br/>sProducts<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span><br/><span class=\"kw1\">Do</span> p <span class=\"kw2\">over</span> sPairs<br/>  <span class=\"kw1\">Parse</span> <span class=\"kw2\">Var</span> p x y<br/>  prod=x<span class=\"sy0\">*</span>y<br/>  sProducts<span class=\"sy0\">.</span>prod+=<span class=\"nu0\">1</span><br/>  <span class=\"kw3\">End</span><br/>\u00a0<br/>pPairs=<span class=\"sy0\">.</span>set~new<br/><span class=\"kw1\">Do</span> p <span class=\"kw2\">over</span> sPairs<br/>  <span class=\"kw1\">Parse</span> <span class=\"kw2\">Var</span> p xb yb<br/>  prod=xb<span class=\"sy0\">*</span>yb<br/>  <span class=\"kw1\">If</span> sProducts<span class=\"sy0\">.</span>prod=<span class=\"nu0\">1</span> <span class=\"kw3\">Then</span><br/>    pPairs~put<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">\"P then has\"</span> pPairs~items <span class=\"st0\">\"possible pairs.\"</span><br/>\u00a0<br/>Sums<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span><br/><span class=\"kw1\">Do</span> p <span class=\"kw2\">over</span> pPairs<br/>  <span class=\"kw1\">Parse</span> <span class=\"kw2\">Var</span> p xc yc<br/>  sum=xc+yc<br/>  Sums<span class=\"sy0\">.</span>sum+=<span class=\"nu0\">1</span><br/>  <span class=\"kw3\">End</span><br/>\u00a0<br/>final=<span class=\"sy0\">.</span>set~new<br/><span class=\"kw1\">Do</span> p <span class=\"kw2\">over</span> pPairs<br/>  <span class=\"kw1\">Parse</span> <span class=\"kw2\">Var</span> p x y<br/>  sum=x+y<br/>  <span class=\"kw1\">If</span> Sums<span class=\"sy0\">.</span>sum=<span class=\"nu0\">1</span> <span class=\"kw3\">Then</span><br/>    final~put<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>  <span class=\"kw3\">End</span><br/>\u00a0<br/>si=<span class=\"nu0\">0</span><br/><span class=\"kw1\">Do</span> p <span class=\"kw2\">Over</span> final<br/>  si+=<span class=\"nu0\">1</span><br/>  sol<span class=\"sy0\">.</span>si=p<br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Select</span><br/>  <span class=\"kw3\">When</span> final~items=<span class=\"nu0\">1</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Say</span> <span class=\"st0\">\"Answer:\"</span> sol<span class=\"sy0\">.</span>1<br/>  <span class=\"kw3\">When</span> final~items=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Say</span> <span class=\"st0\">\"No possible answer.\"</span><br/>  <span class=\"kw3\">Otherwise</span> <span class=\"kw1\">Do</span>;            <span class=\"kw1\">Say</span> final~items <span class=\"st0\">\"possible answers:\"</span><br/>                           <span class=\"kw1\">Do</span> p <span class=\"kw2\">over</span> final<br/>                             <span class=\"kw1\">Say</span> p<br/>                             <span class=\"kw3\">End</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">\"Elapsed time:\"</span> <span class=\"kw6\">time</span><span class=\"br0\">(</span><span class=\"st0\">'E'</span><span class=\"br0\">)</span> <span class=\"st0\">\"seconds\"</span><br/><span class=\"kw1\">Exit</span><br/>\u00a0<br/>decompositions: <span class=\"kw1\">Procedure</span> <span class=\"kw1\">Expose</span> cnt<span class=\"sy0\">.</span> take spairs<br/>  epairs=<span class=\"sy0\">.</span>set~new<br/>  <span class=\"kw1\">Use</span> <span class=\"kw1\">Arg</span> p<br/>  <span class=\"kw1\">Parse</span> <span class=\"kw2\">Var</span> p aa bb<br/>  s=aa+bb<br/>  take=<span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Do</span> xa=<span class=\"nu0\">2</span> <span class=\"kw2\">To</span> s<span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/>    ya=s-xa<br/>    pp=xa ya<br/>    epairs~put<span class=\"br0\">(</span>pp<span class=\"br0\">)</span><br/>    prod=xa<span class=\"sy0\">*</span>ya<br/>    <span class=\"kw1\">If</span> cnt<span class=\"sy0\">.</span>prod=<span class=\"nu0\">1</span> <span class=\"kw3\">Then</span><br/>      take=<span class=\"nu0\">0</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">return</span> epairs</pre>"}, {"lang": "Perl 6", "loc": 18, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> grep<span class=\"sy0\">-</span>unique <span class=\"br0\">(</span><span class=\"re0\">&amp;by</span><span class=\"sy0\">,</span> <span class=\"re0\">@list</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">@list</span><span class=\"sy0\">.</span><span class=\"kw3\">classify</span><span class=\"br0\">(</span><span class=\"re0\">&amp;by</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">values</span><span class=\"sy0\">.</span><span class=\"kw3\">grep</span><span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> sums        <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span>         <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"re0\">$_</span> <span class=\"kw1\">for</span> <span class=\"nu0\">2</span> <span class=\"sy0\">..</span> <span class=\"re0\">$n</span> <span class=\"kw1\">div</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> sum         <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">)</span>   <span class=\"br0\">{</span> <span class=\"re0\">$x</span> <span class=\"sy0\">+</span> <span class=\"re0\">$y</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> product     <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">)</span>   <span class=\"br0\">{</span> <span class=\"re0\">$x</span> <span class=\"sy0\">*</span> <span class=\"re0\">$y</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@all</span><span class=\"sy0\">-</span><span class=\"kw3\">pairs</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">|</span><span class=\"br0\">(</span><span class=\"re0\">$_</span> <span class=\"kw1\">X</span> <span class=\"re0\">$_</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">98</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"nu0\">2</span><span class=\"sy0\">..</span><span class=\"nu0\">97</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Fact 1:</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">%p</span><span class=\"sy0\">-</span>unique <span class=\"sy0\">:=</span> Set<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"sy0\">:</span> <span class=\"kw3\">map</span> <span class=\"sy0\">~*,</span> grep<span class=\"sy0\">-</span>unique <span class=\"re0\">&amp;product</span><span class=\"sy0\">,</span> <span class=\"re0\">@all</span><span class=\"sy0\">-</span><span class=\"kw3\">pairs</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@s</span><span class=\"sy0\">-</span><span class=\"kw3\">pairs</span> <span class=\"sy0\">=</span> <span class=\"re0\">@all</span><span class=\"sy0\">-</span><span class=\"kw3\">pairs</span><span class=\"sy0\">.</span><span class=\"kw3\">grep</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span> <span class=\"kw3\">none</span> <span class=\"br0\">(</span><span class=\"re0\">%p</span><span class=\"sy0\">-</span>unique<span class=\"br0\">{</span><span class=\"sy0\">~</span><span class=\"re0\">$_</span><span class=\"br0\">}</span> <span class=\"kw1\">for</span> sums sum <span class=\"re0\">$_</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Fact 2:</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@p</span><span class=\"sy0\">-</span><span class=\"kw3\">pairs</span> <span class=\"sy0\">=</span> grep<span class=\"sy0\">-</span>unique <span class=\"re0\">&amp;product</span><span class=\"sy0\">,</span> <span class=\"re0\">@s</span><span class=\"sy0\">-</span><span class=\"kw3\">pairs</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Fact 3:</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@final</span><span class=\"sy0\">-</span><span class=\"kw3\">pairs</span> <span class=\"sy0\">=</span> grep<span class=\"sy0\">-</span>unique <span class=\"re0\">&amp;sum</span><span class=\"sy0\">,</span> <span class=\"re0\">@p</span><span class=\"sy0\">-</span><span class=\"kw3\">pairs</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">printf</span> <span class=\"st0\">\"X =\u00a0%d, Y =\u00a0%d<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">|</span><span class=\"re0\">$_</span> <span class=\"kw1\">for</span> <span class=\"re0\">@final</span><span class=\"sy0\">-</span><span class=\"kw3\">pairs</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 61, "block": "<pre class=\"text highlighted_source\">function is_prime(integer x)<br/>    if x&gt;3 then<br/>        for i=2 to floor(sqrt(x)) do<br/>            if mod(x,i)=0 then<br/>                return 0<br/>            end if<br/>        end for<br/>    end if<br/>    return 1<br/>end function<br/>\u00a0<br/>function satisfies_statement1(integer s)<br/>-- S says: P does not know the two numbers.<br/>-- Given s, for /all/ pairs (a,b), a+b=s, 2&lt;=a,b&lt;=99, at least one of a or b is composite<br/>    for a=2 to floor(s/2) do<br/>        if is_prime(a) and is_prime(s-a) then<br/>            return 0<br/>        end if<br/>    end for<br/>    return 1<br/>end function<br/>\u00a0<br/>function satisfies_statement2(integer p)<br/>-- P says: Now I know the two numbers.<br/>-- Given p, for /all/ pairs (a,b), a*b=p, 2&lt;=a,b&lt;=99, exactly one pair satisfies statement 1<br/>integer winner = 0<br/>    for i=2 to floor(sqrt(p)) do<br/>        if mod(p,i)=0 then<br/>            integer j = floor(p/i)<br/>            if 2&lt;=j and j&lt;=99 then<br/>                if satisfies_statement1(i+j) then<br/>                    if winner then return 0 end if<br/>                    winner = 1<br/>                end if<br/>            end if<br/>        end if<br/>    end for<br/>    return winner<br/>end function<br/>\u00a0<br/>function satisfies_statement3(integer s)<br/>-- S says: Now I know the two numbers.<br/>-- Given s, for /all/ pairs (a,b), a+b=s, 2&lt;=a,b&lt;=99, exactly one pair satisfies statements 1 and 2<br/>integer winner = 0<br/>    if satisfies_statement1(s) then<br/>        for a=2 to floor(s/2) do<br/>            if satisfies_statement2(a*(s-a)) then<br/>                if winner then return 0 end if<br/>                winner = a<br/>            end if<br/>        end for<br/>    end if<br/>    return winner<br/>end function<br/>\u00a0<br/>for s=2 to 100 do<br/>    integer a = satisfies_statement3(s)<br/>    if a!=0 then<br/>        printf(1,\"%d (%d+%d)\\n\",{s,a,s-a})<br/>    end if<br/>end for</pre>"}, {"lang": "Python", "loc": 25, "block": "<pre class=\"python highlighted_source\"><span class=\"co1\">#!/usr/bin/env python</span><br/>\u00a0<br/><span class=\"kw1\">from</span> <span class=\"kw3\">collections</span> <span class=\"kw1\">import</span> Counter<br/>\u00a0<br/><span class=\"kw1\">def</span> decompose_sum<span class=\"br0\">(</span>s<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span>s-a<span class=\"br0\">)</span> <span class=\"kw1\">for</span> a <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"kw2\">int</span><span class=\"br0\">(</span>s/<span class=\"nu0\">2</span>+<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\"># Generate all possible pairs</span><br/>all_pairs <span class=\"sy0\">=</span> <span class=\"kw2\">set</span><span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span> <span class=\"kw1\">for</span> a <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> b <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>a+<span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> a+b<span class=\"sy0\">&lt;</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\"># Fact 1 --&gt; Select pairs for which all sum decompositions have non-unique product</span><br/>product_counts <span class=\"sy0\">=</span> Counter<span class=\"br0\">(</span>c*d <span class=\"kw1\">for</span> c<span class=\"sy0\">,</span>d <span class=\"kw1\">in</span> all_pairs<span class=\"br0\">)</span><br/>unique_products <span class=\"sy0\">=</span> <span class=\"kw2\">set</span><span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span> <span class=\"kw1\">for</span> a<span class=\"sy0\">,</span>b <span class=\"kw1\">in</span> all_pairs <span class=\"kw1\">if</span> product_counts<span class=\"br0\">[</span>a*b<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>s_pairs <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span> <span class=\"kw1\">for</span> a<span class=\"sy0\">,</span>b <span class=\"kw1\">in</span> all_pairs <span class=\"kw1\">if</span><br/>    <span class=\"kw2\">all</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span> <span class=\"kw1\">not</span> <span class=\"kw1\">in</span> unique_products <span class=\"kw1\">for</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span> <span class=\"kw1\">in</span> decompose_sum<span class=\"br0\">(</span>a+b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\"># Fact 2 --&gt; Select pairs for which the product is unique</span><br/>product_counts <span class=\"sy0\">=</span> Counter<span class=\"br0\">(</span>c*d <span class=\"kw1\">for</span> c<span class=\"sy0\">,</span>d <span class=\"kw1\">in</span> s_pairs<span class=\"br0\">)</span><br/>p_pairs <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span> <span class=\"kw1\">for</span> a<span class=\"sy0\">,</span>b <span class=\"kw1\">in</span> s_pairs <span class=\"kw1\">if</span> product_counts<span class=\"br0\">[</span>a*b<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\"># Fact 3 --&gt; Select pairs for which the sum is unique</span><br/>sum_counts <span class=\"sy0\">=</span> Counter<span class=\"br0\">(</span>c+d <span class=\"kw1\">for</span> c<span class=\"sy0\">,</span>d <span class=\"kw1\">in</span> p_pairs<span class=\"br0\">)</span><br/>final_pairs <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span> <span class=\"kw1\">for</span> a<span class=\"sy0\">,</span>b <span class=\"kw1\">in</span> p_pairs <span class=\"kw1\">if</span> sum_counts<span class=\"br0\">[</span>a+b<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">print</span><span class=\"br0\">(</span>final_pairs<span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 41, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(define-syntax-rule (define/mem (name args ...) body ...)<br/>  (begin<br/>    (define cache (make-hash))<br/>    (define (name args ...)<br/>      (hash-ref! cache (list args ...) (lambda () body ...)))))<br/>\u00a0<br/>(define (sum p) (+ (first p) (second p)))<br/>(define (mul p) (* (first p) (second p)))<br/>\u00a0<br/>(define (sum= p s) (filter (lambda (q) (= p (sum q))) s))<br/>(define (mul= p s) (filter (lambda (q) (= p (mul q))) s))<br/>\u00a0<br/>(define (puzzle tot)<br/>  (printf \"Max Sum: ~a\\n\" tot)<br/>  (define s1 (for*/list ([x (in-range 2 (add1 tot))]<br/>                         [y (in-range (add1 x) (- (add1 tot) x))])<br/>               (list x y)))<br/>  (printf \"Possible pairs: ~a\\n\" (length s1))<br/>\u00a0<br/>  (define/mem (sumEq/all p) (sum= p s1))<br/>  (define/mem (mulEq/all p) (mul= p s1))<br/>\u00a0<br/>  (define s2 (filter (lambda (p) (andmap (lambda (q)<br/>                                           (not (= (length (mulEq/all (mul q))) 1)))<br/>                                         (sumEq/all (sum p))))<br/>                     s1))<br/>  (printf \"Initial pairs for S: ~a\\n\" (length s2))<br/>\u00a0<br/>  (define s3 (filter (lambda (p) (= (length (mul= (mul p) s2)) 1))<br/>                   s2))<br/>  (displayln (length s3))<br/>  (printf \"Pairs for P: ~a\\n\" (length s3))<br/>\u00a0<br/>  (define s4 (filter (lambda (p) (= (length (sum= (sum p) s3)) 1))<br/>                     s3))<br/>  (printf \"Final pairs for S: ~a\\n\" (length s4))<br/>\u00a0<br/>  (displayln s4))<br/>\u00a0<br/>(puzzle 100)</pre>"}, {"lang": "REXX", "loc": 200, "block": "<pre class=\"rexx highlighted_source\">debug=<span class=\"nu0\">0</span><br/><span class=\"kw1\">If</span> debug <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>  oid=<span class=\"st0\">'sppn.txt'</span>; <span class=\"st0\">'erase'</span> oid<br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Call</span> <span class=\"kw6\">time</span> <span class=\"st0\">'R'</span><br/>all_pairs=<span class=\"st0\">''</span><br/>cnt<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span><br/>i=<span class=\"nu0\">0</span><br/><span class=\"coMULTI\">/* first take all possible pairs 2&lt;=x&lt;y with x+y&lt;=100 */</span><br/><span class=\"coMULTI\">/* and compute the respective sums and products       */</span><br/><span class=\"coMULTI\">/* count the number of times a sum or product occurs  */</span><br/><span class=\"kw1\">Do</span> x=<span class=\"nu0\">2</span> <span class=\"kw2\">To</span> <span class=\"nu0\">98</span><br/>  <span class=\"kw1\">Do</span> y=x+<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"nu0\">100</span>-x<br/>    x=<span class=\"kw6\">right</span><span class=\"br0\">(</span>x,<span class=\"nu0\">2</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    y=<span class=\"kw6\">right</span><span class=\"br0\">(</span>y,<span class=\"nu0\">2</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    all_pairs=all_pairs x<span class=\"st0\">'/'</span>y<br/>    i=i+<span class=\"nu0\">1</span><br/>    x<span class=\"sy0\">.</span>i=x<br/>    y<span class=\"sy0\">.</span>i=y<br/>    sum=x+y<br/>    prd=x<span class=\"sy0\">*</span>y<br/>    cnt<span class=\"sy0\">.</span>0s<span class=\"sy0\">.</span>sum=cnt<span class=\"sy0\">.</span>0s<span class=\"sy0\">.</span>sum+<span class=\"nu0\">1</span><br/>    cnt<span class=\"sy0\">.</span>0p<span class=\"sy0\">.</span>prd=cnt<span class=\"sy0\">.</span>0p<span class=\"sy0\">.</span>prd+<span class=\"nu0\">1</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw3\">End</span><br/>n=i<br/><span class=\"coMULTI\">/* now compute the possible pairs for each sum sum_d.sum */</span><br/><span class=\"coMULTI\">/*                                 and product prd_d.prd */</span><br/><span class=\"coMULTI\">/* also the list of possible sums and products suml, prdl*/</span><br/>sum_d<span class=\"sy0\">.</span>=<span class=\"st0\">''</span><br/>prd_d<span class=\"sy0\">.</span>=<span class=\"st0\">''</span><br/>suml=<span class=\"st0\">''</span><br/>prdl=<span class=\"st0\">''</span><br/><span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> n<br/>  x=x<span class=\"sy0\">.</span>i<br/>  y=y<span class=\"sy0\">.</span>i<br/>  x=<span class=\"kw6\">right</span><span class=\"br0\">(</span>x,<span class=\"nu0\">2</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  y=<span class=\"kw6\">right</span><span class=\"br0\">(</span>y,<span class=\"nu0\">2</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  sum=x+y<br/>  prd=x<span class=\"sy0\">*</span>y<br/>  cnt<span class=\"sy0\">.</span>0s<span class=\"sy0\">.</span>x<span class=\"sy0\">.</span>y=cnt<span class=\"sy0\">.</span>0s<span class=\"sy0\">.</span>sum<br/>  cnt<span class=\"sy0\">.</span>0p<span class=\"sy0\">.</span>x<span class=\"sy0\">.</span>y=cnt<span class=\"sy0\">.</span>0p<span class=\"sy0\">.</span>prd<br/>  sum_d<span class=\"sy0\">.</span>sum=sum_d<span class=\"sy0\">.</span>sum x<span class=\"st0\">'/'</span>y<br/>  prd_d<span class=\"sy0\">.</span>prd=prd_d<span class=\"sy0\">.</span>prd x<span class=\"st0\">'/'</span>y<br/>  <span class=\"kw1\">If</span> <span class=\"kw6\">wordpos</span><span class=\"br0\">(</span>sum,suml<span class=\"br0\">)</span>=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> suml=suml sum<br/>  <span class=\"kw1\">If</span> <span class=\"kw6\">wordpos</span><span class=\"br0\">(</span>prd,prdl<span class=\"br0\">)</span>=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> prdl=prdl prd<br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Say</span> n <span class=\"st0\">'possible pairs'</span><br/><span class=\"kw1\">Call</span> o <span class=\"st0\">'SUM'</span><br/>suml=wordsort<span class=\"br0\">(</span>suml<span class=\"br0\">)</span><br/>prdl=wordsort<span class=\"br0\">(</span>prdl<span class=\"br0\">)</span><br/>sumlc=suml<br/>si=<span class=\"nu0\">0</span><br/>pi=<span class=\"nu0\">0</span><br/><span class=\"kw1\">Do</span> <span class=\"kw2\">While</span> sumlc<span class=\"sy0\">&gt;</span><span class=\"st0\">''</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw2\">Var</span> sumlc sum sumlc<br/>  si=si+<span class=\"nu0\">1</span><br/>  sum<span class=\"sy0\">.</span>si=sum<br/>  si<span class=\"sy0\">.</span>sum=si<br/>  <span class=\"kw1\">If</span> sum=<span class=\"nu0\">17</span> <span class=\"kw3\">Then</span> sx=si<br/>  temp=prdl<br/>  <span class=\"kw1\">Do</span> <span class=\"kw2\">While</span> temp<span class=\"sy0\">&gt;</span><span class=\"st0\">''</span><br/>    <span class=\"kw1\">Parse</span> <span class=\"kw2\">Var</span> temp prd temp<br/>    <span class=\"kw1\">If</span> si=<span class=\"nu0\">1</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>      pi=pi+<span class=\"nu0\">1</span><br/>      prd<span class=\"sy0\">.</span>pi=prd<br/>      pi<span class=\"sy0\">.</span>prd=pi<br/>      <span class=\"kw1\">If</span> prd=<span class=\"nu0\">52</span> <span class=\"kw3\">Then</span> px=pi<br/>      <span class=\"kw3\">End</span><br/>    A<span class=\"sy0\">.</span>prd<span class=\"sy0\">.</span>sum=<span class=\"st0\">'+'</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw3\">End</span><br/>sin=si<br/>pin=pi<br/><span class=\"kw1\">Call</span> o <span class=\"st0\">'SUM'</span><br/><span class=\"kw1\">Do</span> si=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> sin<br/>  <span class=\"kw1\">Call</span> o f5<span class=\"br0\">(</span>si<span class=\"br0\">)</span> f3<span class=\"br0\">(</span>sum<span class=\"sy0\">.</span>si<span class=\"br0\">)</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Call</span> o <span class=\"st0\">'PRD'</span><br/><span class=\"kw1\">Do</span> pi=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> pin<br/>  <span class=\"kw1\">Call</span> o f5<span class=\"br0\">(</span>pi<span class=\"br0\">)</span> f6<span class=\"br0\">(</span>prd<span class=\"sy0\">.</span>pi<span class=\"br0\">)</span><br/>  <span class=\"kw3\">End</span><br/>a<span class=\"sy0\">.</span>=<span class=\"st0\">'-'</span><br/><span class=\"kw1\">Do</span> pi=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> pin<br/>  prd=prd<span class=\"sy0\">.</span>pi<br/>  <span class=\"kw1\">Do</span> si=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> sin<br/>    sum=sum<span class=\"sy0\">.</span>si<br/>    <span class=\"kw1\">Do</span> sj=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>sum_d<span class=\"sy0\">.</span>sum<span class=\"br0\">)</span><br/>      <span class=\"kw1\">If</span> <span class=\"kw6\">wordpos</span><span class=\"br0\">(</span><span class=\"kw6\">word</span><span class=\"br0\">(</span>sum_d<span class=\"sy0\">.</span>sum,sj<span class=\"br0\">)</span>,prd_d<span class=\"sy0\">.</span>prd<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"kw3\">Then</span><br/>        <span class=\"kw1\">Parse</span> <span class=\"kw2\">Value</span> <span class=\"kw6\">word</span><span class=\"br0\">(</span>sum_d<span class=\"sy0\">.</span>sum,sj<span class=\"br0\">)</span> <span class=\"kw2\">with</span> x <span class=\"st0\">'/'</span> y<br/>        prde=x<span class=\"sy0\">*</span>y<br/>        sume=x+y<br/>        pa=pi<span class=\"sy0\">.</span>prde<br/>        sa=si<span class=\"sy0\">.</span>sume<br/>        a<span class=\"sy0\">.</span>pa<span class=\"sy0\">.</span>sa=<span class=\"st0\">'+'</span><br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Call</span> show <span class=\"st0\">'1'</span><br/>\u00a0<br/><span class=\"kw1\">Do</span> pi=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> pin<br/>  prow=<span class=\"st0\">''</span><br/>  cnt=<span class=\"nu0\">0</span><br/>  <span class=\"kw1\">Do</span> si=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> sin<br/>    <span class=\"kw1\">If</span> a<span class=\"sy0\">.</span>pi<span class=\"sy0\">.</span>si=<span class=\"st0\">'+'</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>      cnt=cnt+<span class=\"nu0\">1</span><br/>      pj=pi<br/>      sj=si<br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">If</span> cnt=<span class=\"nu0\">1</span> <span class=\"kw3\">Then</span><br/>    a<span class=\"sy0\">.</span>pj<span class=\"sy0\">.</span>sj=<span class=\"st0\">'1'</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Call</span> show <span class=\"st0\">'2'</span><br/>\u00a0<br/><span class=\"kw1\">Do</span> si=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> sin<br/>  <span class=\"kw1\">Do</span> pi=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> pin<br/>    <span class=\"kw1\">If</span> a<span class=\"sy0\">.</span>pi<span class=\"sy0\">.</span>si=<span class=\"st0\">'1'</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Leave</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">If</span> pi<span class=\"sy0\">&lt;</span>=pin <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>    <span class=\"kw1\">Do</span> pi=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> pin<br/>      <span class=\"kw1\">If</span> a<span class=\"sy0\">.</span>pi<span class=\"sy0\">.</span>si=<span class=\"st0\">'+'</span> <span class=\"kw3\">Then</span><br/>        a<span class=\"sy0\">.</span>pi<span class=\"sy0\">.</span>si=<span class=\"st0\">'2'</span><br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Call</span> show <span class=\"st0\">'3'</span><br/>\u00a0<br/><span class=\"kw1\">Do</span> pi=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> pin<br/>  prow=<span class=\"st0\">''</span><br/>  <span class=\"kw1\">Do</span> si=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> sin<br/>    prow=prow<span class=\"sy0\">||</span>a<span class=\"sy0\">.</span>pi<span class=\"sy0\">.</span>si<br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">If</span> count<span class=\"br0\">(</span><span class=\"st0\">'+'</span>,prow<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>    <span class=\"kw1\">Do</span> si=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> sin<br/>      <span class=\"kw1\">If</span> a<span class=\"sy0\">.</span>pi<span class=\"sy0\">.</span>si=<span class=\"st0\">'+'</span> <span class=\"kw3\">Then</span><br/>        a<span class=\"sy0\">.</span>pi<span class=\"sy0\">.</span>si=<span class=\"st0\">'3'</span><br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Call</span> show <span class=\"st0\">'4'</span><br/>\u00a0<br/><span class=\"kw1\">Do</span> si=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> sin<br/>  scol=<span class=\"st0\">''</span><br/>  <span class=\"kw1\">Do</span> pi=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> pin<br/>    scol=scol<span class=\"sy0\">||</span>a<span class=\"sy0\">.</span>pi<span class=\"sy0\">.</span>si<br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">If</span> count<span class=\"br0\">(</span><span class=\"st0\">'+'</span>,scol<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>    <span class=\"kw1\">Do</span> pi=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> pin<br/>      <span class=\"kw1\">If</span> a<span class=\"sy0\">.</span>pi<span class=\"sy0\">.</span>si=<span class=\"st0\">'+'</span> <span class=\"kw3\">Then</span><br/>        a<span class=\"sy0\">.</span>pi<span class=\"sy0\">.</span>si=<span class=\"st0\">'4'</span><br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Call</span> show <span class=\"st0\">'5'</span><br/>\u00a0<br/>sol=<span class=\"nu0\">0</span><br/><span class=\"kw1\">Do</span> pi=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> pin<br/>  <span class=\"kw1\">Do</span> si=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> sin<br/>    <span class=\"kw1\">If</span> a<span class=\"sy0\">.</span>pi<span class=\"sy0\">.</span>si=<span class=\"st0\">'+'</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>      <span class=\"kw1\">Say</span> sum<span class=\"sy0\">.</span>si prd<span class=\"sy0\">.</span>pi<br/>      sum=sum<span class=\"sy0\">.</span>si<br/>      prd=prd<span class=\"sy0\">.</span>pi<br/>      sol=sol+<span class=\"nu0\">1</span><br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Say</span> sol <span class=\"st0\">'solution(s)'</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">'            possible pairs'</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">'Product='</span>prd prd_d<span class=\"sy0\">.</span>52<br/><span class=\"kw1\">Say</span> <span class=\"st0\">'    Sum='</span>sum sum_d<span class=\"sy0\">.</span>17<br/><span class=\"kw1\">Say</span> <span class=\"st0\">'The only pair in both lists is 04/13.'</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">'Elapsed time:'</span> <span class=\"kw6\">time</span><span class=\"br0\">(</span><span class=\"st0\">'E'</span><span class=\"br0\">)</span> <span class=\"st0\">'seconds'</span><br/><span class=\"kw1\">Exit</span><br/>show:<br/><span class=\"kw1\">If</span> debug <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>  <span class=\"kw1\">Call</span> o <span class=\"st0\">'show'</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Do</span> pi=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"nu0\">60</span><br/>    ol=<span class=\"st0\">''</span><br/>    <span class=\"kw1\">Do</span> si=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"nu0\">60</span><br/>      ol=ol<span class=\"sy0\">||</span>a<span class=\"sy0\">.</span>pi<span class=\"sy0\">.</span>si<br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw1\">Call</span> o ol<br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">Say</span> <span class=\"st0\">'a.'</span>px<span class=\"st0\">'.'</span>sx<span class=\"st0\">'='</span>a<span class=\"sy0\">.</span>px<span class=\"sy0\">.</span>sx<br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Return</span><br/>\u00a0<br/><span class=\"kw1\">Exit</span><br/>o: <span class=\"kw1\">Return</span> <span class=\"kw6\">lineout</span><span class=\"br0\">(</span>oid,<span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>f3: <span class=\"kw1\">Return</span> <span class=\"kw6\">format</span><span class=\"br0\">(</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,<span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>f4: <span class=\"kw1\">Return</span> <span class=\"kw6\">format</span><span class=\"br0\">(</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,<span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>f5: <span class=\"kw1\">Return</span> <span class=\"kw6\">format</span><span class=\"br0\">(</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,<span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>f6: <span class=\"kw1\">Return</span> <span class=\"kw6\">format</span><span class=\"br0\">(</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,<span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>\u00a0<br/>count: <span class=\"kw1\">Procedure</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> c,s<br/>  s=<span class=\"kw6\">translate</span><span class=\"br0\">(</span>s,c,c<span class=\"sy0\">||</span><span class=\"kw6\">xrange</span><span class=\"br0\">(</span><span class=\"st0\">'00'</span>x,<span class=\"st0\">'ff'</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  s=<span class=\"kw6\">space</span><span class=\"br0\">(</span>s,<span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Return</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span></pre>"}, {"lang": "Ruby", "loc": 10, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> add<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> x <span class=\"sy0\">+</span> y <span class=\"kw1\">end</span><br/><span class=\"kw1\">def</span> mul<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> x <span class=\"sy0\">*</span> y <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> sumEq<span class=\"br0\">(</span>s,<span class=\"kw3\">p</span><span class=\"br0\">)</span> s.<span class=\"kw3\">select</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>q<span class=\"sy0\">|</span> add<span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"kw3\">p</span><span class=\"br0\">)</span> == add<span class=\"br0\">(</span><span class=\"sy0\">*</span>q<span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"kw1\">end</span><br/><span class=\"kw1\">def</span> mulEq<span class=\"br0\">(</span>s,<span class=\"kw3\">p</span><span class=\"br0\">)</span> s.<span class=\"kw3\">select</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>q<span class=\"sy0\">|</span> mul<span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"kw3\">p</span><span class=\"br0\">)</span> == mul<span class=\"br0\">(</span><span class=\"sy0\">*</span>q<span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"kw1\">end</span><br/>\u00a0<br/>s1 = <span class=\"br0\">(</span>a = <span class=\"sy0\">*</span><span class=\"nu0\">2</span>...<span class=\"nu0\">100</span><span class=\"br0\">)</span>.<span class=\"me1\">product</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span>.<span class=\"kw3\">select</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>x,y<span class=\"sy0\">|</span> x<span class=\"sy0\">&lt;</span>y <span class=\"sy0\">&amp;&amp;</span> x<span class=\"sy0\">+</span>y<span class=\"sy0\">&lt;</span><span class=\"nu0\">100</span><span class=\"br0\">}</span><br/>s2 = s1.<span class=\"kw3\">select</span><span class=\"br0\">{</span><span class=\"sy0\">|</span><span class=\"kw3\">p</span><span class=\"sy0\">|</span> sumEq<span class=\"br0\">(</span>s1,<span class=\"kw3\">p</span><span class=\"br0\">)</span>.<span class=\"me1\">all</span>?<span class=\"br0\">{</span><span class=\"sy0\">|</span>q<span class=\"sy0\">|</span> mulEq<span class=\"br0\">(</span>s1,q<span class=\"br0\">)</span>.<span class=\"me1\">size</span>\u00a0!= <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>s3 = s2.<span class=\"kw3\">select</span><span class=\"br0\">{</span><span class=\"sy0\">|</span><span class=\"kw3\">p</span><span class=\"sy0\">|</span> <span class=\"br0\">(</span>mulEq<span class=\"br0\">(</span>s1,<span class=\"kw3\">p</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> s2<span class=\"br0\">)</span>.<span class=\"me1\">size</span> == <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/><span class=\"kw3\">p</span>    s3.<span class=\"kw3\">select</span><span class=\"br0\">{</span><span class=\"sy0\">|</span><span class=\"kw3\">p</span><span class=\"sy0\">|</span> <span class=\"br0\">(</span>sumEq<span class=\"br0\">(</span>s1,<span class=\"kw3\">p</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> s3<span class=\"br0\">)</span>.<span class=\"me1\">size</span> == <span class=\"nu0\">1</span><span class=\"br0\">}</span></pre>"}, {"lang": "Scala", "loc": 18, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> ImpossiblePuzzle <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">type</span></a> XY <span class=\"sy0\">=</span> <span class=\"br0\">(</span>Int, Int<span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> step0 <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">{</span><br/>    x <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">1</span> to <span class=\"nu0\">100</span><br/>    y <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">1</span> to <span class=\"nu0\">100</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;</span> x <span class=\"sy0\">&amp;&amp;</span> x <span class=\"sy0\">&lt;</span> y <span class=\"sy0\">&amp;&amp;</span> x + y <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span><br/>  <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">yield</span></a> <span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> sum<span class=\"br0\">(</span>xy<span class=\"sy0\">:</span> XY<span class=\"br0\">)</span> <span class=\"sy0\">=</span> xy.<span class=\"sy0\">_</span>1 + xy.<span class=\"sy0\">_</span>2<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> prod<span class=\"br0\">(</span>xy<span class=\"sy0\">:</span> XY<span class=\"br0\">)</span> <span class=\"sy0\">=</span> xy.<span class=\"sy0\">_</span>1 <span class=\"sy0\">*</span> xy.<span class=\"sy0\">_</span>2<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> sumEq<span class=\"br0\">(</span>xy<span class=\"sy0\">:</span> XY<span class=\"br0\">)</span> <span class=\"sy0\">=</span> step0 filter <span class=\"br0\">{</span> sum<span class=\"br0\">(</span><span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> sum<span class=\"br0\">(</span>xy<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> prodEq<span class=\"br0\">(</span>xy<span class=\"sy0\">:</span> XY<span class=\"br0\">)</span> <span class=\"sy0\">=</span> step0 filter <span class=\"br0\">{</span> prod<span class=\"br0\">(</span><span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> prod<span class=\"br0\">(</span>xy<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> step2 <span class=\"sy0\">=</span> step0 filter <span class=\"br0\">{</span> sumEq<span class=\"br0\">(</span><span class=\"sy0\">_</span><span class=\"br0\">)</span> forall <span class=\"br0\">{</span> prodEq<span class=\"br0\">(</span><span class=\"sy0\">_</span><span class=\"br0\">)</span>.<span class=\"me1\">size</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> step3 <span class=\"sy0\">=</span> step2 filter <span class=\"br0\">{</span> prodEq<span class=\"br0\">(</span><span class=\"sy0\">_</span><span class=\"br0\">)</span>.<span class=\"me1\">intersect</span><span class=\"br0\">(</span>step2<span class=\"br0\">)</span>.<span class=\"me1\">size</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> step4 <span class=\"sy0\">=</span> step3 filter <span class=\"br0\">{</span> sumEq<span class=\"br0\">(</span><span class=\"sy0\">_</span><span class=\"br0\">)</span>.<span class=\"me1\">intersect</span><span class=\"br0\">(</span>step3<span class=\"br0\">)</span>.<span class=\"me1\">size</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/>  println<span class=\"br0\">(</span>step4<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 52, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>import <span class=\"br0\">(</span>scheme base<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>scheme cxr<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>scheme <span class=\"kw1\">write</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>srfi <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; utility method to find unique sum/product in given list</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>unique<span class=\"sy0\">-</span>items lst key<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>all<span class=\"sy0\">-</span>items <span class=\"br0\">(</span><span class=\"kw1\">map</span> key lst<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>filter <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span>count <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> p <span class=\"br0\">(</span>key i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                    all<span class=\"sy0\">-</span>items<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            lst<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; list of all (x y x+y x*y) combinations with y &gt; x</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"sy0\">*</span>xy<span class=\"sy0\">-</span>pairs<span class=\"sy0\">*</span> <br/>  <span class=\"br0\">(</span>apply <span class=\"kw1\">append</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>                       <span class=\"br0\">(</span><span class=\"kw1\">list</span> i j <span class=\"br0\">(</span><span class=\"sy0\">+</span> i j<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> i j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                     <span class=\"br0\">(</span>iota <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"nu0\">98</span> i<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"nu0\">1</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span>iota <span class=\"nu0\">96</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; S says \"P does not know X and Y\"</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"sy0\">*</span>products<span class=\"sy0\">*</span> <span class=\"co1\">; get products which have multiple decompositions</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>all<span class=\"sy0\">-</span>products <span class=\"br0\">(</span><span class=\"kw1\">map</span> fourth <span class=\"sy0\">*</span>xy<span class=\"sy0\">-</span>pairs<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>filter <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>count <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> i p<span class=\"br0\">)</span><span class=\"br0\">)</span> all<span class=\"sy0\">-</span>products<span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            all<span class=\"sy0\">-</span>products<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"sy0\">*</span>fact<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">*</span> <span class=\"co1\">; every x+y has x*y in *products*</span><br/>  <span class=\"br0\">(</span>filter <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>i<span class=\"br0\">)</span> <br/>            <span class=\"br0\">(</span>every <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">memq</span> <span class=\"br0\">(</span>fourth p<span class=\"br0\">)</span> <span class=\"sy0\">*</span>products<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span>filter <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>third i<span class=\"br0\">)</span> <span class=\"br0\">(</span>third p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span>xy<span class=\"sy0\">-</span>pairs<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"sy0\">*</span>xy<span class=\"sy0\">-</span>pairs<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; P says \"Now I know X and Y\"</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"sy0\">*</span>fact<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span> <span class=\"co1\">; find the unique X*Y</span><br/>  <span class=\"br0\">(</span>unique<span class=\"sy0\">-</span>items <span class=\"sy0\">*</span>fact<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">*</span> fourth<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; S says \"Now I also know X and Y\"</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"sy0\">*</span>fact<span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"sy0\">*</span> <span class=\"co1\">; find the unique X+Y</span><br/>  <span class=\"br0\">(</span>unique<span class=\"sy0\">-</span>items <span class=\"sy0\">*</span>fact<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span> third<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span><span class=\"kw1\">string-append</span> <span class=\"st0\">\"Initial pairs: \"</span> <span class=\"br0\">(</span>number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"sy0\">*</span>xy<span class=\"sy0\">-</span>pairs<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span><span class=\"kw1\">string-append</span> <span class=\"st0\">\"After S: \"</span> <span class=\"br0\">(</span>number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"sy0\">*</span>fact<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span><span class=\"kw1\">string-append</span> <span class=\"st0\">\"After P: \"</span> <span class=\"br0\">(</span>number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"sy0\">*</span>fact<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span><span class=\"kw1\">string-append</span> <span class=\"st0\">\"After S: \"</span> <span class=\"br0\">(</span>number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"sy0\">*</span>fact<span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span><span class=\"kw1\">string-append</span> <span class=\"st0\">\"X: \"</span> <br/>                        <span class=\"br0\">(</span>number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> <span class=\"br0\">(</span><span class=\"kw1\">caar</span> <span class=\"sy0\">*</span>fact<span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                        <span class=\"st0\">\" Y: \"</span><br/>                        <span class=\"br0\">(</span>number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> <span class=\"br0\">(</span>cadar <span class=\"sy0\">*</span>fact<span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                        <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Sidef", "loc": 13, "block": "<pre class=\"ruby highlighted_source\">func grep_uniq<span class=\"br0\">(</span>a, by<span class=\"br0\">)</span> <span class=\"br0\">{</span> a.<span class=\"me1\">group_by</span><span class=\"br0\">{</span> .<span class=\"br0\">(</span>by<span class=\"br0\">)</span> <span class=\"br0\">}</span>.<span class=\"me1\">values</span>.<span class=\"me1\">grep</span><span class=\"br0\">{</span>.<span class=\"me1\">len</span> == <span class=\"nu0\">1</span><span class=\"br0\">}</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span>_<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>func sums     <span class=\"br0\">(</span>n<span class=\"br0\">)</span>     <span class=\"br0\">{</span> <span class=\"nu0\">2</span> .. <span class=\"me1\">n</span><span class=\"sy0\">//</span><span class=\"nu0\">2</span> <span class=\"sy0\">-&gt;</span> map <span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> <span class=\"br0\">[</span>i, n<span class=\"sy0\">-</span>i<span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/>var pairs = <span class=\"br0\">(</span><span class=\"nu0\">2</span>..<span class=\"nu0\">97</span> <span class=\"sy0\">-&gt;</span> map <span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> ~X <span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span> .. <span class=\"nu0\">98</span><span class=\"br0\">)</span><span class=\"br0\">)</span>... <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/>var p_uniq = <span class=\"kw4\">Hash</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>p_uniq<span class=\"br0\">{</span>grep_uniq<span class=\"br0\">(</span>pairs, <span class=\"re3\">:prod</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> .<span class=\"me1\">to_s</span> <span class=\"br0\">}</span>...<span class=\"br0\">}</span> = <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>var s_pairs = pairs.<span class=\"me1\">grep</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span><span class=\"kw3\">p</span><span class=\"sy0\">|</span> sums<span class=\"br0\">(</span><span class=\"kw3\">p</span>.<span class=\"me1\">sum</span><span class=\"br0\">)</span>.<span class=\"me1\">all</span> <span class=\"br0\">{</span>\u00a0!p_uniq.<span class=\"me1\">contains</span><span class=\"br0\">(</span>.<span class=\"me1\">to_s</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>var p_pairs = grep_uniq<span class=\"br0\">(</span>s_pairs, <span class=\"re3\">:prod</span><span class=\"br0\">)</span><br/>var f_pairs = grep_uniq<span class=\"br0\">(</span>p_pairs, <span class=\"re3\">:sum</span><span class=\"br0\">)</span><br/>\u00a0<br/>f_pairs.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span><span class=\"kw3\">p</span><span class=\"sy0\">|</span> <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"X =\u00a0%d, Y =\u00a0%d<span class=\"es0\">\\n</span>\"</span>, <span class=\"kw3\">p</span>...<span class=\"br0\">)</span> <span class=\"br0\">}</span></pre>"}, {"lang": "zkl", "loc": 11, "block": "<pre class=\"text highlighted_source\">mul:=Utils.Helpers.summer.fp1('*,1); //--&gt;list.reduce('*,1), multiply list items<br/>var allPairs=[[(a,b); [2..100]; { [a+1..100] },{ a+b&lt;100 }; ROList]]; // 2,304 pairs<br/>\u00a0<br/>sxys,pxys:=Dictionary(),Dictionary();  // hashes of allPairs sums and products: 95,1155<br/>foreach xy in (allPairs){ sxys.appendV(xy.sum(),xy); pxys.appendV(xy:mul(_),xy) }<br/>\u00a0<br/>sOK:= 'wrap(s){ (not sxys[s].filter1('wrap(xy){ pxys[xy:mul(_)].len()&lt;2 })) };<br/>pOK:= 'wrap(p){ 1==pxys[p].filter('wrap([(x,y)]){ sOK(x+y) }).len() };<br/>sOK2:='wrap(s){ 1==sxys[s].filter('wrap(xy){ pOK(xy:mul(_)) }).len() };<br/>allPairs.filter('wrap([(x,y)]){ sOK(x+y) and pOK(x*y) and sOK2(x+y) })<br/>.println();</pre>"}]}